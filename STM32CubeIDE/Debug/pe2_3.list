
pe2_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08009ec8  08009ec8  0000aec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a67c  0800a67c  0000c1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a67c  0800a67c  0000b67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a684  0800a684  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a684  0800a684  0000b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a688  0800a688  0000b688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800a68c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037bc  200001f0  0800a87c  0000c1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039ac  0800a87c  0000c9ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010080  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002801  00000000  00000000  0001c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0001eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afd  00000000  00000000  0001f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179bb  00000000  00000000  000203d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001399b  00000000  00000000  00037d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a43b  00000000  00000000  0004b72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b48  00000000  00000000  000d5bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000da6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009eb0 	.word	0x08009eb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009eb0 	.word	0x08009eb0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <screen_render>:
 */

#include "16x2_screen.h"
#include "main.h"

void screen_render(uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7){
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4623      	mov	r3, r4
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71bb      	strb	r3, [r7, #6]
 8000bde:	460b      	mov	r3, r1
 8000be0:	717b      	strb	r3, [r7, #5]
 8000be2:	4613      	mov	r3, r2
 8000be4:	713b      	strb	r3, [r7, #4]

		if (d4 == 1){
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d105      	bne.n	8000bf8 <screen_render+0x30>
			HAL_GPIO_WritePin(TXB_16x2_D4_GPIO_Port, TXB_16x2_D4_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2180      	movs	r1, #128	@ 0x80
 8000bf0:	481b      	ldr	r0, [pc, #108]	@ (8000c60 <screen_render+0x98>)
 8000bf2:	f002 ff8d 	bl	8003b10 <HAL_GPIO_WritePin>
 8000bf6:	e004      	b.n	8000c02 <screen_render+0x3a>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D4_GPIO_Port, TXB_16x2_D4_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2180      	movs	r1, #128	@ 0x80
 8000bfc:	4818      	ldr	r0, [pc, #96]	@ (8000c60 <screen_render+0x98>)
 8000bfe:	f002 ff87 	bl	8003b10 <HAL_GPIO_WritePin>
		}

		if (d5 == 1){
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d105      	bne.n	8000c14 <screen_render+0x4c>
			HAL_GPIO_WritePin(TXB_16x2_D5_GPIO_Port, TXB_16x2_D5_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2140      	movs	r1, #64	@ 0x40
 8000c0c:	4814      	ldr	r0, [pc, #80]	@ (8000c60 <screen_render+0x98>)
 8000c0e:	f002 ff7f 	bl	8003b10 <HAL_GPIO_WritePin>
 8000c12:	e004      	b.n	8000c1e <screen_render+0x56>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D5_GPIO_Port, TXB_16x2_D5_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2140      	movs	r1, #64	@ 0x40
 8000c18:	4811      	ldr	r0, [pc, #68]	@ (8000c60 <screen_render+0x98>)
 8000c1a:	f002 ff79 	bl	8003b10 <HAL_GPIO_WritePin>
		}

		if (d6 == 1){
 8000c1e:	797b      	ldrb	r3, [r7, #5]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <screen_render+0x68>
			HAL_GPIO_WritePin(TXB_16x2_D6_GPIO_Port, TXB_16x2_D6_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2120      	movs	r1, #32
 8000c28:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <screen_render+0x98>)
 8000c2a:	f002 ff71 	bl	8003b10 <HAL_GPIO_WritePin>
 8000c2e:	e004      	b.n	8000c3a <screen_render+0x72>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D6_GPIO_Port, TXB_16x2_D6_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2120      	movs	r1, #32
 8000c34:	480a      	ldr	r0, [pc, #40]	@ (8000c60 <screen_render+0x98>)
 8000c36:	f002 ff6b 	bl	8003b10 <HAL_GPIO_WritePin>
		}

		if (d7 == 1){
 8000c3a:	793b      	ldrb	r3, [r7, #4]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d105      	bne.n	8000c4c <screen_render+0x84>
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <screen_render+0x98>)
 8000c46:	f002 ff63 	bl	8003b10 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_RESET);
		}

	}
 8000c4a:	e004      	b.n	8000c56 <screen_render+0x8e>
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <screen_render+0x98>)
 8000c52:	f002 ff5d 	bl	8003b10 <HAL_GPIO_WritePin>
	}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	48000400 	.word	0x48000400

08000c64 <send_to_screen>:

	void send_to_screen(uint8_t data, uint8_t nob, uint8_t cod){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	71bb      	strb	r3, [r7, #6]
 8000c72:	4613      	mov	r3, r2
 8000c74:	717b      	strb	r3, [r7, #5]

		HAL_Delay(1);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f002 fab6 	bl	80031e8 <HAL_Delay>

		if (cod == 'c'){ // c = command 		d = data
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	2b63      	cmp	r3, #99	@ 0x63
 8000c80:	d106      	bne.n	8000c90 <send_to_screen+0x2c>
			HAL_GPIO_WritePin(TXB_16x2_RS_GPIO_Port, TXB_16x2_RS_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c88:	484a      	ldr	r0, [pc, #296]	@ (8000db4 <send_to_screen+0x150>)
 8000c8a:	f002 ff41 	bl	8003b10 <HAL_GPIO_WritePin>
 8000c8e:	e005      	b.n	8000c9c <send_to_screen+0x38>
		}

		else{
			HAL_GPIO_WritePin(TXB_16x2_RS_GPIO_Port, TXB_16x2_RS_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c96:	4847      	ldr	r0, [pc, #284]	@ (8000db4 <send_to_screen+0x150>)
 8000c98:	f002 ff3a 	bl	8003b10 <HAL_GPIO_WritePin>
		}

		if (nob == 'b'){ // b = byte		n = nibble
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	2b62      	cmp	r3, #98	@ 0x62
 8000ca0:	d141      	bne.n	8000d26 <send_to_screen+0xc2>
			uint8_t d4 = (data >> 4) & 0x01; // Bit 0
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
			uint8_t d5 = (data >> 5) & 0x01; // Bit 1
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	095b      	lsrs	r3, r3, #5
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	73bb      	strb	r3, [r7, #14]
			uint8_t d6 = (data >> 6) & 0x01; // Bit 2
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	099b      	lsrs	r3, r3, #6
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	737b      	strb	r3, [r7, #13]
			uint8_t d7 = (data >> 7) & 0x01; // Bit 3
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	09db      	lsrs	r3, r3, #7
 8000cca:	733b      	strb	r3, [r7, #12]

			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cd2:	4838      	ldr	r0, [pc, #224]	@ (8000db4 <send_to_screen+0x150>)
 8000cd4:	f002 ff1c 	bl	8003b10 <HAL_GPIO_WritePin>
			screen_render(d4, d5, d6, d7);
 8000cd8:	7b3b      	ldrb	r3, [r7, #12]
 8000cda:	7b7a      	ldrb	r2, [r7, #13]
 8000cdc:	7bb9      	ldrb	r1, [r7, #14]
 8000cde:	7bf8      	ldrb	r0, [r7, #15]
 8000ce0:	f7ff ff72 	bl	8000bc8 <screen_render>
			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cea:	4832      	ldr	r0, [pc, #200]	@ (8000db4 <send_to_screen+0x150>)
 8000cec:	f002 ff10 	bl	8003b10 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f002 fa79 	bl	80031e8 <HAL_Delay>
			screen_render(d4, d5, d6, d7);
 8000cf6:	7b3b      	ldrb	r3, [r7, #12]
 8000cf8:	7b7a      	ldrb	r2, [r7, #13]
 8000cfa:	7bb9      	ldrb	r1, [r7, #14]
 8000cfc:	7bf8      	ldrb	r0, [r7, #15]
 8000cfe:	f7ff ff63 	bl	8000bc8 <screen_render>
			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d08:	482a      	ldr	r0, [pc, #168]	@ (8000db4 <send_to_screen+0x150>)
 8000d0a:	f002 ff01 	bl	8003b10 <HAL_GPIO_WritePin>
			screen_render(d4, d5, d6, d7);
 8000d0e:	7b3b      	ldrb	r3, [r7, #12]
 8000d10:	7b7a      	ldrb	r2, [r7, #13]
 8000d12:	7bb9      	ldrb	r1, [r7, #14]
 8000d14:	7bf8      	ldrb	r0, [r7, #15]
 8000d16:	f7ff ff57 	bl	8000bc8 <screen_render>
			screen_render(0, 0, 0, 0); // pins standaart 0
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff ff51 	bl	8000bc8 <screen_render>
		}

		uint8_t d4 = (data >> 0) & 0x01; // Bit 0
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	72fb      	strb	r3, [r7, #11]
		uint8_t d5 = (data >> 1) & 0x01; // Bit 1
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	085b      	lsrs	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	72bb      	strb	r3, [r7, #10]
		uint8_t d6 = (data >> 2) & 0x01; // Bit 2
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	727b      	strb	r3, [r7, #9]
		uint8_t d7 = (data >> 3) & 0x01; // Bit 3
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	723b      	strb	r3, [r7, #8]

		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d58:	4816      	ldr	r0, [pc, #88]	@ (8000db4 <send_to_screen+0x150>)
 8000d5a:	f002 fed9 	bl	8003b10 <HAL_GPIO_WritePin>
		screen_render(d4, d5, d6, d7);
 8000d5e:	7a3b      	ldrb	r3, [r7, #8]
 8000d60:	7a7a      	ldrb	r2, [r7, #9]
 8000d62:	7ab9      	ldrb	r1, [r7, #10]
 8000d64:	7af8      	ldrb	r0, [r7, #11]
 8000d66:	f7ff ff2f 	bl	8000bc8 <screen_render>
		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d70:	4810      	ldr	r0, [pc, #64]	@ (8000db4 <send_to_screen+0x150>)
 8000d72:	f002 fecd 	bl	8003b10 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f002 fa36 	bl	80031e8 <HAL_Delay>
		screen_render(d4, d5, d6, d7);
 8000d7c:	7a3b      	ldrb	r3, [r7, #8]
 8000d7e:	7a7a      	ldrb	r2, [r7, #9]
 8000d80:	7ab9      	ldrb	r1, [r7, #10]
 8000d82:	7af8      	ldrb	r0, [r7, #11]
 8000d84:	f7ff ff20 	bl	8000bc8 <screen_render>
		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d8e:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <send_to_screen+0x150>)
 8000d90:	f002 febe 	bl	8003b10 <HAL_GPIO_WritePin>
		screen_render(d4, d5, d6, d7);
 8000d94:	7a3b      	ldrb	r3, [r7, #8]
 8000d96:	7a7a      	ldrb	r2, [r7, #9]
 8000d98:	7ab9      	ldrb	r1, [r7, #10]
 8000d9a:	7af8      	ldrb	r0, [r7, #11]
 8000d9c:	f7ff ff14 	bl	8000bc8 <screen_render>
		screen_render(0, 0, 0, 0); // pins standaart 0
 8000da0:	2300      	movs	r3, #0
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff ff0e 	bl	8000bc8 <screen_render>
	}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	48000400 	.word	0x48000400

08000db8 <screen_start>:

	void screen_start(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

		send_to_screen(0b0011, 'n', 'c');
 8000dbc:	2263      	movs	r2, #99	@ 0x63
 8000dbe:	216e      	movs	r1, #110	@ 0x6e
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f7ff ff4f 	bl	8000c64 <send_to_screen>
		send_to_screen(0b0011, 'n', 'c');
 8000dc6:	2263      	movs	r2, #99	@ 0x63
 8000dc8:	216e      	movs	r1, #110	@ 0x6e
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f7ff ff4a 	bl	8000c64 <send_to_screen>
		send_to_screen(0b0011, 'n', 'c');
 8000dd0:	2263      	movs	r2, #99	@ 0x63
 8000dd2:	216e      	movs	r1, #110	@ 0x6e
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f7ff ff45 	bl	8000c64 <send_to_screen>
	}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <init_screen>:

	void init_screen(){
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0

		HAL_Delay(30); //wachten tot het scherm volledig is opgestart
 8000de2:	201e      	movs	r0, #30
 8000de4:	f002 fa00 	bl	80031e8 <HAL_Delay>
		screen_start();
 8000de8:	f7ff ffe6 	bl	8000db8 <screen_start>
		send_to_screen(0b0010, 'n', 'c');		//4 bit modus
 8000dec:	2263      	movs	r2, #99	@ 0x63
 8000dee:	216e      	movs	r1, #110	@ 0x6e
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff ff37 	bl	8000c64 <send_to_screen>
		send_to_screen(0b00101000, 'b', 'c');	//4 bit modus
 8000df6:	2263      	movs	r2, #99	@ 0x63
 8000df8:	2162      	movs	r1, #98	@ 0x62
 8000dfa:	2028      	movs	r0, #40	@ 0x28
 8000dfc:	f7ff ff32 	bl	8000c64 <send_to_screen>
		send_to_screen(0b00001111, 'b', 'c');	//display on
 8000e00:	2263      	movs	r2, #99	@ 0x63
 8000e02:	2162      	movs	r1, #98	@ 0x62
 8000e04:	200f      	movs	r0, #15
 8000e06:	f7ff ff2d 	bl	8000c64 <send_to_screen>
		send_to_screen(0b00000001, 'b', 'c');	//clear display
 8000e0a:	2263      	movs	r2, #99	@ 0x63
 8000e0c:	2162      	movs	r1, #98	@ 0x62
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff ff28 	bl	8000c64 <send_to_screen>
		send_to_screen(0b00000110, 'b', 'c');	//entry mode
 8000e14:	2263      	movs	r2, #99	@ 0x63
 8000e16:	2162      	movs	r1, #98	@ 0x62
 8000e18:	2006      	movs	r0, #6
 8000e1a:	f7ff ff23 	bl	8000c64 <send_to_screen>
	}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <write_to_screen>:

	void write_to_screen(char* scherm){
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]

		uint8_t lengte = strlen(scherm);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fa30 	bl	8000290 <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73bb      	strb	r3, [r7, #14]

		for (uint8_t i = 0; i < lengte; i++) {
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]
 8000e38:	e00b      	b.n	8000e52 <write_to_screen+0x30>
				send_to_screen(scherm[i], 'b', 'd');
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2264      	movs	r2, #100	@ 0x64
 8000e44:	2162      	movs	r1, #98	@ 0x62
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff0c 	bl	8000c64 <send_to_screen>
		for (uint8_t i = 0; i < lengte; i++) {
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	7bfa      	ldrb	r2, [r7, #15]
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3ef      	bcc.n	8000e3a <write_to_screen+0x18>
		}
	}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <digit_to_screen>:

	void digit_to_screen(int32_t scherm) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	    char scherm_str[12];
	    int len;

	    len = snprintf(scherm_str, sizeof(scherm_str), "%ld", scherm);
 8000e6c:	f107 000c 	add.w	r0, r7, #12
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <digit_to_screen+0x58>)
 8000e74:	210c      	movs	r1, #12
 8000e76:	f006 fed5 	bl	8007c24 <sniprintf>
 8000e7a:	61b8      	str	r0, [r7, #24]
	    if (len < 0 || len >= sizeof(scherm_str)) {
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db17      	blt.n	8000eb2 <digit_to_screen+0x4e>
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2b0b      	cmp	r3, #11
 8000e86:	d814      	bhi.n	8000eb2 <digit_to_screen+0x4e>
	        return;
	    }

	    for (int i = 0; i < len; i++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	e00c      	b.n	8000ea8 <digit_to_screen+0x44>
	        send_to_screen(scherm_str[i], 'b', 'd');
 8000e8e:	f107 020c 	add.w	r2, r7, #12
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2264      	movs	r2, #100	@ 0x64
 8000e9a:	2162      	movs	r1, #98	@ 0x62
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fee1 	bl	8000c64 <send_to_screen>
	    for (int i = 0; i < len; i++) {
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbee      	blt.n	8000e8e <digit_to_screen+0x2a>
 8000eb0:	e000      	b.n	8000eb4 <digit_to_screen+0x50>
	        return;
 8000eb2:	bf00      	nop
	    }
	}
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08009ec8 	.word	0x08009ec8

08000ec0 <float_to_screen>:

	void float_to_screen(float scherm) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	@ 0x30
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	ed87 0a01 	vstr	s0, [r7, #4]
		char scherm_str[20];
		int len;

		len = snprintf(scherm_str, sizeof(scherm_str), "%.1f", scherm);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fb4c 	bl	8000568 <__aeabi_f2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	f107 000c 	add.w	r0, r7, #12
 8000ed8:	e9cd 2300 	strd	r2, r3, [sp]
 8000edc:	4a11      	ldr	r2, [pc, #68]	@ (8000f24 <float_to_screen+0x64>)
 8000ede:	2114      	movs	r1, #20
 8000ee0:	f006 fea0 	bl	8007c24 <sniprintf>
 8000ee4:	6238      	str	r0, [r7, #32]
		if (len < 0 || len >= sizeof(scherm_str)) {
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db17      	blt.n	8000f1c <float_to_screen+0x5c>
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	2b13      	cmp	r3, #19
 8000ef0:	d814      	bhi.n	8000f1c <float_to_screen+0x5c>
			return;
		}

		for (int i = 0; i < len; i++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef6:	e00c      	b.n	8000f12 <float_to_screen+0x52>
			send_to_screen(scherm_str[i], 'b', 'd');
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2264      	movs	r2, #100	@ 0x64
 8000f04:	2162      	movs	r1, #98	@ 0x62
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff feac 	bl	8000c64 <send_to_screen>
		for (int i = 0; i < len; i++) {
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	3301      	adds	r3, #1
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbee      	blt.n	8000ef8 <float_to_screen+0x38>
 8000f1a:	e000      	b.n	8000f1e <float_to_screen+0x5e>
			return;
 8000f1c:	bf00      	nop
		}
	}
 8000f1e:	3728      	adds	r7, #40	@ 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08009ecc 	.word	0x08009ecc

08000f28 <cursor_pos>:

	void cursor_pos(uint8_t line, uint8_t pos) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
		uint8_t address;

		if (line == 1) {
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d103      	bne.n	8000f46 <cursor_pos+0x1e>
			address = 0x00 + (pos - 1); // Line 1 starts at 0x00
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e002      	b.n	8000f4c <cursor_pos+0x24>
		}
		else{
			address = 0x40 + (pos - 1); // Line 2 starts at 0x40
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	333f      	adds	r3, #63	@ 0x3f
 8000f4a:	73fb      	strb	r3, [r7, #15]
		}

		send_to_screen(0b10000000 | address, 'b', 'c');
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2263      	movs	r2, #99	@ 0x63
 8000f56:	2162      	movs	r1, #98	@ 0x62
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe83 	bl	8000c64 <send_to_screen>

	}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <Set_LED>:
 * @param Red The red component (0-255).
 * @param Green The green component (0-255).
 * @param Blue The blue component (0-255).
 */
void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
    // Ensure LEDnum is within bounds
    if (LEDnum >= 0 && LEDnum < MAX_LED) {
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db20      	blt.n	8000fbe <Set_LED+0x56>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b85      	cmp	r3, #133	@ 0x85
 8000f80:	dc1d      	bgt.n	8000fbe <Set_LED+0x56>
        LED_Data[LEDnum][0] = LEDnum;    // Store LED number (optional, often not needed here)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <Set_LED+0x64>)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        LED_Data[LEDnum][1] = Green;     // WS2812 expects GRB order
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	b2d9      	uxtb	r1, r3
 8000f92:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <Set_LED+0x64>)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	705a      	strb	r2, [r3, #1]
        LED_Data[LEDnum][2] = Red;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	b2d9      	uxtb	r1, r3
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <Set_LED+0x64>)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	460a      	mov	r2, r1
 8000fac:	709a      	strb	r2, [r3, #2]
        LED_Data[LEDnum][3] = Blue;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2d9      	uxtb	r1, r3
 8000fb2:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <Set_LED+0x64>)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	460a      	mov	r2, r1
 8000fbc:	70da      	strb	r2, [r3, #3]
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000020c 	.word	0x2000020c

08000fd0 <WS2812_Send>:
 * for PWM generation and DMA.
 *
 * @param htim_ptr Pointer to the TIM_HandleTypeDef structure for the PWM timer.
 */
void WS2812_Send(TIM_HandleTypeDef *htim_ptr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    uint32_t indx = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    uint32_t color;

    // Generate PWM data for each LED
    for (int i = 0; i < MAX_LED; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	e035      	b.n	800104e <WS2812_Send+0x7e>
    {
        // Combine GRB components into a single 24-bit color value
        // WS2812B expects Green (8-bit), Red (8-bit), Blue (8-bit)
        color = ((uint32_t)LED_Data[i][1] << 16) | ((uint32_t)LED_Data[i][2] << 8) | ((uint32_t)LED_Data[i][3]);
 8000fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800109c <WS2812_Send+0xcc>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	785b      	ldrb	r3, [r3, #1]
 8000fec:	041a      	lsls	r2, r3, #16
 8000fee:	492b      	ldr	r1, [pc, #172]	@ (800109c <WS2812_Send+0xcc>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	789b      	ldrb	r3, [r3, #2]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	4927      	ldr	r1, [pc, #156]	@ (800109c <WS2812_Send+0xcc>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	78db      	ldrb	r3, [r3, #3]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]

        // Convert 24-bit color into 24 PWM pulses
        // Iterate from MSB (bit 23) down to LSB (bit 0)
        for (int j = 23; j >= 0; j--) // Changed loop variable from 'i' to 'j' to avoid conflict with outer loop 'i'
 800100a:	2317      	movs	r3, #23
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e018      	b.n	8001042 <WS2812_Send+0x72>
        {
            if ((color >> j) & 0x01) // Check if the j-th bit is 1
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <WS2812_Send+0x5c>
            {
                pwmData[indx] = 60;  // High pulse for a '1' bit (e.g., 2/3 of 90 for TIM_CLK=90MHz, 800kHz data rate)
 8001020:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <WS2812_Send+0xd0>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800102a:	e004      	b.n	8001036 <WS2812_Send+0x66>
                                     // Assuming your timer period is set appropriately (e.g., to 90 for 1.25us period)
            }
            else
            {
                pwmData[indx] = 30;  // High pulse for a '0' bit (e.g., 1/3 of 90)
 800102c:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <WS2812_Send+0xd0>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	211e      	movs	r1, #30
 8001032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            }
            indx++;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
        for (int j = 23; j >= 0; j--) // Changed loop variable from 'i' to 'j' to avoid conflict with outer loop 'i'
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3b01      	subs	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dae3      	bge.n	8001010 <WS2812_Send+0x40>
    for (int i = 0; i < MAX_LED; i++)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	3301      	adds	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2b85      	cmp	r3, #133	@ 0x85
 8001052:	ddc6      	ble.n	8000fe2 <WS2812_Send+0x12>
        }
    }

    // Add reset pulse (at least 50us of low signal)
    // This is achieved by sending 50 zero-value PWM pulses if timer period is ~1.25us
    for (int i = 0; i < 50; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	e00a      	b.n	8001070 <WS2812_Send+0xa0>
    {
        pwmData[indx] = 0; // Low pulse for reset
 800105a:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <WS2812_Send+0xd0>)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2100      	movs	r1, #0
 8001060:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        indx++;
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	3301      	adds	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 50; i++)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	3301      	adds	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b31      	cmp	r3, #49	@ 0x31
 8001074:	ddf1      	ble.n	800105a <WS2812_Send+0x8a>
    }

    // Start PWM generation via DMA
    // Pass the provided timer handle pointer
    HAL_TIM_PWM_Start_DMA(htim_ptr, TIM_CHANNEL_2, (uint32_t *)pwmData, indx);
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4a09      	ldr	r2, [pc, #36]	@ (80010a0 <WS2812_Send+0xd0>)
 800107c:	2104      	movs	r1, #4
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f004 f9d2 	bl	8005428 <HAL_TIM_PWM_Start_DMA>

    // Wait for the DMA transfer to complete
    // This is a blocking wait. Consider a non-blocking approach for real-time systems.
    while (!datasentflag){};
 8001084:	bf00      	nop
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <WS2812_Send+0xd4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0fb      	beq.n	8001086 <WS2812_Send+0xb6>
    datasentflag = 0; // Reset flag for next transfer
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <WS2812_Send+0xd4>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000020c 	.word	0x2000020c
 80010a0:	20000428 	.word	0x20000428
 80010a4:	20000424 	.word	0x20000424

080010a8 <HAL_TIM_PWM_PulseFinishedCallback>:

// HAL Timer PWM Pulse Finished Callback
// This function must be implemented here if it's specific to this LED driver.
// The name must match the HAL driver's callback prototype exactly.
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    // Check if the callback is for the correct timer and channel
    // (Optional but good practice if you have multiple timers/channels)
    // if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // Check specific timer instance and channel
    {
        HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2); // Stop the DMA transfer
 80010b0:	2104      	movs	r1, #4
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f004 fbb6 	bl	8005824 <HAL_TIM_PWM_Stop_DMA>
        datasentflag = 1;                          // Set flag to signal completion
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
    }
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000424 	.word	0x20000424

080010cc <relay>:
 * effectively turning it ON or OFF.
 *
 * @param command A string indicating the desired state: "ON" to turn the SSR on,
 * "OFF" to turn it off. Any other string will also turn it off.
 */
void relay(const char *command){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

    // Compare the input string to "ON"
    if (strcmp(command, "ON") == 0) {
 80010d4:	4912      	ldr	r1, [pc, #72]	@ (8001120 <relay+0x54>)
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff f87a 	bl	80001d0 <strcmp>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <relay+0x24>
        // Set the GPIO pin HIGH to turn the SSR ON
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2104      	movs	r1, #4
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ea:	f002 fd11 	bl	8003b10 <HAL_GPIO_WritePin>
    }
    // If the string is neither "ON" nor "OFF", default to turning it OFF
    else{
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
    }
}
 80010ee:	e013      	b.n	8001118 <relay+0x4c>
    else if(strcmp(command, "OFF") == 0){
 80010f0:	490c      	ldr	r1, [pc, #48]	@ (8001124 <relay+0x58>)
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f86c 	bl	80001d0 <strcmp>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <relay+0x40>
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2104      	movs	r1, #4
 8001102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001106:	f002 fd03 	bl	8003b10 <HAL_GPIO_WritePin>
}
 800110a:	e005      	b.n	8001118 <relay+0x4c>
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2104      	movs	r1, #4
 8001110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001114:	f002 fcfc 	bl	8003b10 <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08009ed4 	.word	0x08009ed4
 8001124:	08009ed8 	.word	0x08009ed8

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f001 fff5 	bl	800311c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f943 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f000 fa61 	bl	80015fc <MX_GPIO_Init>
  MX_DMA_Init();
 800113a:	f000 fa41 	bl	80015c0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800113e:	f000 fa0f 	bl	8001560 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001142:	f000 f997 	bl	8001474 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  init_screen();
 8001146:	f7ff fe4a 	bl	8000dde <init_screen>

  ui();
 800114a:	f000 fe79 	bl	8001e40 <ui>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(update == 1){
 800114e:	4b90      	ldr	r3, [pc, #576]	@ (8001390 <main+0x268>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d104      	bne.n	8001162 <main+0x3a>
		update = 0;
 8001158:	4b8d      	ldr	r3, [pc, #564]	@ (8001390 <main+0x268>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
		ui();
 800115e:	f000 fe6f 	bl	8001e40 <ui>
	}

	sendCommand(0x01, 0x03, 0x0004, 0x01);
 8001162:	2301      	movs	r3, #1
 8001164:	2204      	movs	r2, #4
 8001166:	2103      	movs	r1, #3
 8001168:	2001      	movs	r0, #1
 800116a:	f000 fb75 	bl	8001858 <sendCommand>
	HAL_Delay(2);
 800116e:	2002      	movs	r0, #2
 8001170:	f002 f83a 	bl	80031e8 <HAL_Delay>
	readResponse(7);
 8001174:	2007      	movs	r0, #7
 8001176:	f000 fbc1 	bl	80018fc <readResponse>

	if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 0 && rs485 <= min_level){
 800117a:	2104      	movs	r1, #4
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f002 fcae 	bl	8003ae0 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d112      	bne.n	80011b0 <main+0x88>
 800118a:	4b82      	ldr	r3, [pc, #520]	@ (8001394 <main+0x26c>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b21b      	sxth	r3, r3
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001198:	4b7f      	ldr	r3, [pc, #508]	@ (8001398 <main+0x270>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	db03      	blt.n	80011b0 <main+0x88>
		relay("ON");
 80011a8:	487c      	ldr	r0, [pc, #496]	@ (800139c <main+0x274>)
 80011aa:	f7ff ff8f 	bl	80010cc <relay>
 80011ae:	e034      	b.n	800121a <main+0xf2>
	}
	else if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 1 && rs485 <= max_level){
 80011b0:	2104      	movs	r1, #4
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b6:	f002 fc93 	bl	8003ae0 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10e      	bne.n	80011de <main+0xb6>
 80011c0:	4b77      	ldr	r3, [pc, #476]	@ (80013a0 <main+0x278>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	4b72      	ldr	r3, [pc, #456]	@ (8001398 <main+0x270>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	da1d      	bge.n	800121a <main+0xf2>

	}
	else if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 1 && rs485 >= max_level){
 80011de:	2104      	movs	r1, #4
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e4:	f002 fc7c 	bl	8003ae0 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d112      	bne.n	8001214 <main+0xec>
 80011ee:	4b6c      	ldr	r3, [pc, #432]	@ (80013a0 <main+0x278>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fc:	4b66      	ldr	r3, [pc, #408]	@ (8001398 <main+0x270>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	d803      	bhi.n	8001214 <main+0xec>
		relay("OFF");
 800120c:	4865      	ldr	r0, [pc, #404]	@ (80013a4 <main+0x27c>)
 800120e:	f7ff ff5d 	bl	80010cc <relay>
 8001212:	e002      	b.n	800121a <main+0xf2>
	}
	else{
		relay("OFF");
 8001214:	4863      	ldr	r0, [pc, #396]	@ (80013a4 <main+0x27c>)
 8001216:	f7ff ff59 	bl	80010cc <relay>
	}

	float level_size = 133.0f  / (max_well_level - min_well_level);
 800121a:	4b63      	ldr	r3, [pc, #396]	@ (80013a8 <main+0x280>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	b21b      	sxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	4b62      	ldr	r3, [pc, #392]	@ (80013ac <main+0x284>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b21b      	sxth	r3, r3
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001232:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80013b0 <main+0x288>
 8001236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123a:	edc7 7a04 	vstr	s15, [r7, #16]
	uint8_t min = (min_level * level_size);
 800123e:	4b55      	ldr	r3, [pc, #340]	@ (8001394 <main+0x26c>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b21b      	sxth	r3, r3
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001258:	edc7 7a01 	vstr	s15, [r7, #4]
 800125c:	793b      	ldrb	r3, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
	uint8_t max = (max_level * level_size);
 8001260:	4b4f      	ldr	r3, [pc, #316]	@ (80013a0 <main+0x278>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b21b      	sxth	r3, r3
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127a:	edc7 7a01 	vstr	s15, [r7, #4]
 800127e:	793b      	ldrb	r3, [r7, #4]
 8001280:	73bb      	strb	r3, [r7, #14]
	uint8_t min_well = (min_well_level * level_size);
 8001282:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <main+0x284>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b21b      	sxth	r3, r3
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	edd7 7a04 	vldr	s15, [r7, #16]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129c:	edc7 7a01 	vstr	s15, [r7, #4]
 80012a0:	793b      	ldrb	r3, [r7, #4]
 80012a2:	737b      	strb	r3, [r7, #13]
	uint8_t max_well = ((max_well_level - min_well_level) * level_size);
 80012a4:	4b40      	ldr	r3, [pc, #256]	@ (80013a8 <main+0x280>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <main+0x284>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80012cc:	793b      	ldrb	r3, [r7, #4]
 80012ce:	733b      	strb	r3, [r7, #12]
	uint8_t level = (rs485 * level_size);
 80012d0:	4b31      	ldr	r3, [pc, #196]	@ (8001398 <main+0x270>)
 80012d2:	ed93 7a00 	vldr	s14, [r3]
 80012d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80012e6:	793b      	ldrb	r3, [r7, #4]
 80012e8:	72fb      	strb	r3, [r7, #11]

	for(uint8_t l = 0; l<=133; l++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
 80012ee:	e015      	b.n	800131c <main+0x1f4>
		if(l <= level){
 80012f0:	7dfa      	ldrb	r2, [r7, #23]
 80012f2:	7afb      	ldrb	r3, [r7, #11]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d808      	bhi.n	800130a <main+0x1e2>
			Set_LED(l, 0, 0, brightness);
 80012f8:	7df8      	ldrb	r0, [r7, #23]
 80012fa:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <main+0x28c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	f7ff fe30 	bl	8000f68 <Set_LED>
 8001308:	e005      	b.n	8001316 <main+0x1ee>
		}
		else{
			Set_LED(l, 0, 0, 0);
 800130a:	7df8      	ldrb	r0, [r7, #23]
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	f7ff fe29 	bl	8000f68 <Set_LED>
	for(uint8_t l = 0; l<=133; l++){
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	3301      	adds	r3, #1
 800131a:	75fb      	strb	r3, [r7, #23]
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b85      	cmp	r3, #133	@ 0x85
 8001320:	d9e6      	bls.n	80012f0 <main+0x1c8>
		}
	}

	Set_LED(min, (brightness + 100), 0, 0);
 8001322:	7bf8      	ldrb	r0, [r7, #15]
 8001324:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <main+0x28c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 800132e:	2300      	movs	r3, #0
 8001330:	2200      	movs	r2, #0
 8001332:	f7ff fe19 	bl	8000f68 <Set_LED>
	Set_LED(max, 0, (brightness + 100), 0);
 8001336:	7bb8      	ldrb	r0, [r7, #14]
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <main+0x28c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8001342:	2300      	movs	r3, #0
 8001344:	2100      	movs	r1, #0
 8001346:	f7ff fe0f 	bl	8000f68 <Set_LED>
	Set_LED(min_well, (brightness - 5), (brightness - 5), (brightness - 5));
 800134a:	7b78      	ldrb	r0, [r7, #13]
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <main+0x28c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	1f59      	subs	r1, r3, #5
 8001354:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <main+0x28c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	1f5a      	subs	r2, r3, #5
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <main+0x28c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3b05      	subs	r3, #5
 8001364:	f7ff fe00 	bl	8000f68 <Set_LED>
	Set_LED(max_well, (brightness - 5), (brightness - 5), (brightness - 5));
 8001368:	7b38      	ldrb	r0, [r7, #12]
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <main+0x28c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	1f59      	subs	r1, r3, #5
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <main+0x28c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	1f5a      	subs	r2, r3, #5
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <main+0x28c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3b05      	subs	r3, #5
 8001382:	f7ff fdf1 	bl	8000f68 <Set_LED>

	WS2812_Send(&htim2);
 8001386:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <main+0x290>)
 8001388:	f7ff fe22 	bl	8000fd0 <WS2812_Send>
  {
 800138c:	e6df      	b.n	800114e <main+0x26>
 800138e:	bf00      	nop
 8001390:	20003859 	.word	0x20003859
 8001394:	2000000c 	.word	0x2000000c
 8001398:	20003850 	.word	0x20003850
 800139c:	08009edc 	.word	0x08009edc
 80013a0:	2000000a 	.word	0x2000000a
 80013a4:	08009ee0 	.word	0x08009ee0
 80013a8:	20000008 	.word	0x20000008
 80013ac:	2000385a 	.word	0x2000385a
 80013b0:	43050000 	.word	0x43050000
 80013b4:	20000018 	.word	0x20000018
 80013b8:	20003730 	.word	0x20003730

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b09c      	sub	sp, #112	@ 0x70
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013c6:	2228      	movs	r2, #40	@ 0x28
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fca3 	bl	8007d16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2230      	movs	r2, #48	@ 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f006 fc95 	bl	8007d16 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 80013f6:	2303      	movs	r3, #3
 80013f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fa:	2301      	movs	r3, #1
 80013fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001406:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001408:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800140c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fbac 	bl	8003b70 <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800141e:	f000 f9d7 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2302      	movs	r3, #2
 8001428:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001432:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001434:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001438:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800143e:	2102      	movs	r1, #2
 8001440:	4618      	mov	r0, r3
 8001442:	f003 fba3 	bl	8004b8c <HAL_RCC_ClockConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800144c:	f000 f9c0 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001450:	2301      	movs	r3, #1
 8001452:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fdaa 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001466:	f000 f9b3 	bl	80017d0 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3770      	adds	r7, #112	@ 0x70
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	@ 0x38
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 80014ba:	4b28      	ldr	r3, [pc, #160]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014bc:	2259      	movs	r2, #89	@ 0x59
 80014be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b26      	ldr	r3, [pc, #152]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014cc:	4823      	ldr	r0, [pc, #140]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014ce:	f003 fef3 	bl	80052b8 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014d8:	f000 f97a 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e6:	4619      	mov	r1, r3
 80014e8:	481c      	ldr	r0, [pc, #112]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014ea:	f004 fb9f 	bl	8005c2c <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014f4:	f000 f96c 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f8:	4818      	ldr	r0, [pc, #96]	@ (800155c <MX_TIM2_Init+0xe8>)
 80014fa:	f003 ff34 	bl	8005366 <HAL_TIM_PWM_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001504:	f000 f964 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4811      	ldr	r0, [pc, #68]	@ (800155c <MX_TIM2_Init+0xe8>)
 8001518:	f005 f916 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001522:	f000 f955 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	@ 0x60
 8001528:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	2204      	movs	r2, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4807      	ldr	r0, [pc, #28]	@ (800155c <MX_TIM2_Init+0xe8>)
 800153e:	f004 fa61 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001548:	f000 f942 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <MX_TIM2_Init+0xe8>)
 800154e:	f000 fad3 	bl	8001af8 <HAL_TIM_MspPostInit>

}
 8001552:	bf00      	nop
 8001554:	3738      	adds	r7, #56	@ 0x38
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20003730 	.word	0x20003730

08001560 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001566:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <MX_USART1_UART_Init+0x5c>)
 8001568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 800156c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_USART1_UART_Init+0x58>)
 80015a4:	f005 f936 	bl	8006814 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 f90f 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200037c0 	.word	0x200037c0
 80015bc:	40013800 	.word	0x40013800

080015c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_DMA_Init+0x38>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <MX_DMA_Init+0x38>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_DMA_Init+0x38>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2011      	movs	r0, #17
 80015e4:	f001 feff 	bl	80033e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80015e8:	2011      	movs	r0, #17
 80015ea:	f001 ff18 	bl	800341e <HAL_NVIC_EnableIRQ>

}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001612:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <MX_GPIO_Init+0x10c>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a3c      	ldr	r2, [pc, #240]	@ (8001708 <MX_GPIO_Init+0x10c>)
 8001618:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <MX_GPIO_Init+0x10c>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <MX_GPIO_Init+0x10c>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a36      	ldr	r2, [pc, #216]	@ (8001708 <MX_GPIO_Init+0x10c>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001634:	6153      	str	r3, [r2, #20]
 8001636:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <MX_GPIO_Init+0x10c>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <MX_GPIO_Init+0x10c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4a30      	ldr	r2, [pc, #192]	@ (8001708 <MX_GPIO_Init+0x10c>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164c:	6153      	str	r3, [r2, #20]
 800164e:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <MX_GPIO_Init+0x10c>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSR_Pin|MAX3485_EN_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f640 0104 	movw	r1, #2052	@ 0x804
 8001660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001664:	f002 fa54 	bl	8003b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TXB_16x2_D7_Pin|TXB_16x2_D6_Pin|TXB_16x2_D5_Pin|TXB_16x2_D4_Pin
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 800166e:	4827      	ldr	r0, [pc, #156]	@ (800170c <MX_GPIO_Init+0x110>)
 8001670:	f002 fa4e 	bl	8003b10 <HAL_GPIO_WritePin>
                          |TXB_16x2_E_Pin|TXB_16x2_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SSR_Pin MAX3485_EN_Pin */
  GPIO_InitStruct.Pin = SSR_Pin|MAX3485_EN_Pin;
 8001674:	f640 0304 	movw	r3, #2052	@ 0x804
 8001678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001690:	f002 f8b4 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin;
 8001694:	2378      	movs	r3, #120	@ 0x78
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001698:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800169c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	4619      	mov	r1, r3
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ac:	f002 f8a6 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : TXB_16x2_D7_Pin TXB_16x2_D6_Pin TXB_16x2_D5_Pin TXB_16x2_D4_Pin
                           TXB_16x2_E_Pin TXB_16x2_RS_Pin */
  GPIO_InitStruct.Pin = TXB_16x2_D7_Pin|TXB_16x2_D6_Pin|TXB_16x2_D5_Pin|TXB_16x2_D4_Pin
 80016b0:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 80016b4:	60fb      	str	r3, [r7, #12]
                          |TXB_16x2_E_Pin|TXB_16x2_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4619      	mov	r1, r3
 80016c8:	4810      	ldr	r0, [pc, #64]	@ (800170c <MX_GPIO_Init+0x110>)
 80016ca:	f002 f897 	bl	80037fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2009      	movs	r0, #9
 80016d4:	f001 fe87 	bl	80033e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016d8:	2009      	movs	r0, #9
 80016da:	f001 fea0 	bl	800341e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200a      	movs	r0, #10
 80016e4:	f001 fe7f 	bl	80033e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016e8:	200a      	movs	r0, #10
 80016ea:	f001 fe98 	bl	800341e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2017      	movs	r0, #23
 80016f4:	f001 fe77 	bl	80033e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016f8:	2017      	movs	r0, #23
 80016fa:	f001 fe90 	bl	800341e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	48000400 	.word	0x48000400

08001710 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
	  cm = HAL_GetTick();
 800171a:	f001 fd59 	bl	80031d0 <HAL_GetTick>
 800171e:	4603      	mov	r3, r0
 8001720:	4a25      	ldr	r2, [pc, #148]	@ (80017b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001722:	6013      	str	r3, [r2, #0]
	  if (cm - pm > 110)
 8001724:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <HAL_GPIO_EXTI_Callback+0xac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b6e      	cmp	r3, #110	@ 0x6e
 8001730:	d93e      	bls.n	80017b0 <HAL_GPIO_EXTI_Callback+0xa0>
	  {
	    pm = cm;
 8001732:	4b21      	ldr	r3, [pc, #132]	@ (80017b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <HAL_GPIO_EXTI_Callback+0xac>)
 8001738:	6013      	str	r3, [r2, #0]

		UNUSED(GPIO_Pin);

		if (GPIO_Pin == S1_Pin) {
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d112      	bne.n	8001766 <HAL_GPIO_EXTI_Callback+0x56>
			if(page > 1){
 8001740:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d92f      	bls.n	80017aa <HAL_GPIO_EXTI_Callback+0x9a>
				page--;
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001756:	701a      	strb	r2, [r3, #0]
				conf = 0;
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0xb4>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
				select = 1;
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e021      	b.n	80017aa <HAL_GPIO_EXTI_Callback+0x9a>
			}
		}
		else if (GPIO_Pin == S2_Pin) {
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	2b10      	cmp	r3, #16
 800176a:	d103      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x64>
			conf = 1;
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0xb4>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e01a      	b.n	80017aa <HAL_GPIO_EXTI_Callback+0x9a>
		}
		else if (GPIO_Pin == S3_Pin) {
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2b20      	cmp	r3, #32
 8001778:	d107      	bne.n	800178a <HAL_GPIO_EXTI_Callback+0x7a>
				select++;
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e00f      	b.n	80017aa <HAL_GPIO_EXTI_Callback+0x9a>
		}
		else if (GPIO_Pin == S4_Pin) {
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	2b40      	cmp	r3, #64	@ 0x40
 800178e:	d10c      	bne.n	80017aa <HAL_GPIO_EXTI_Callback+0x9a>
				page++;
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800179c:	701a      	strb	r2, [r3, #0]
				conf = 0;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0xb4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
				select = 1;
 80017a4:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <HAL_GPIO_EXTI_Callback+0xb8>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
		}

		update = 1;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_GPIO_EXTI_Callback+0xbc>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
	  }
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000384c 	.word	0x2000384c
 80017bc:	20003848 	.word	0x20003848
 80017c0:	20000004 	.word	0x20000004
 80017c4:	20003858 	.word	0x20003858
 80017c8:	20000006 	.word	0x20000006
 80017cc:	20003859 	.word	0x20003859

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <Error_Handler+0x8>

080017dc <calculateCRC>:
 *
 * @param data Pointer to the data buffer.
 * @param length The number of bytes in the data buffer.
 * @return The calculated CRC16 checksum.
 */
uint16_t calculateCRC(uint8_t *data, uint8_t length) {
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  uint16_t crc = 0xFFFF;
 80017e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ec:	81fb      	strh	r3, [r7, #14]

  for (uint8_t i = 0; i < length; i++) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	737b      	strb	r3, [r7, #13]
 80017f2:	e026      	b.n	8001842 <calculateCRC+0x66>
    crc ^= data[i];
 80017f4:	7b7b      	ldrb	r3, [r7, #13]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	89fb      	ldrh	r3, [r7, #14]
 8001800:	4053      	eors	r3, r2
 8001802:	81fb      	strh	r3, [r7, #14]

    for (uint8_t j = 0; j < 8; j++) {
 8001804:	2300      	movs	r3, #0
 8001806:	733b      	strb	r3, [r7, #12]
 8001808:	e015      	b.n	8001836 <calculateCRC+0x5a>
      if (crc & 0x0001) {
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00a      	beq.n	800182a <calculateCRC+0x4e>
        crc >>= 1;
 8001814:	89fb      	ldrh	r3, [r7, #14]
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	81fb      	strh	r3, [r7, #14]
        crc ^= 0xA001;
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001820:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001824:	43db      	mvns	r3, r3
 8001826:	81fb      	strh	r3, [r7, #14]
 8001828:	e002      	b.n	8001830 <calculateCRC+0x54>
      }
      else {
        crc >>= 1;
 800182a:	89fb      	ldrh	r3, [r7, #14]
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	81fb      	strh	r3, [r7, #14]
    for (uint8_t j = 0; j < 8; j++) {
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	733b      	strb	r3, [r7, #12]
 8001836:	7b3b      	ldrb	r3, [r7, #12]
 8001838:	2b07      	cmp	r3, #7
 800183a:	d9e6      	bls.n	800180a <calculateCRC+0x2e>
  for (uint8_t i = 0; i < length; i++) {
 800183c:	7b7b      	ldrb	r3, [r7, #13]
 800183e:	3301      	adds	r3, #1
 8001840:	737b      	strb	r3, [r7, #13]
 8001842:	7b7a      	ldrb	r2, [r7, #13]
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	429a      	cmp	r2, r3
 8001848:	d3d4      	bcc.n	80017f4 <calculateCRC+0x18>
      }
    }
  }
  return crc;
 800184a:	89fb      	ldrh	r3, [r7, #14]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <sendCommand>:
 * @param address The Modbus slave address.
 * @param functionCode The Modbus function code (e.g., 0x03 for Read Holding Registers).
 * @param startAddress The starting register address to read/write.
 * @param numData The number of registers/bits to read/write.
 */
void sendCommand(uint8_t address, uint8_t functionCode, uint16_t startAddress, uint16_t numData) {
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	4604      	mov	r4, r0
 8001860:	4608      	mov	r0, r1
 8001862:	4611      	mov	r1, r2
 8001864:	461a      	mov	r2, r3
 8001866:	4623      	mov	r3, r4
 8001868:	71fb      	strb	r3, [r7, #7]
 800186a:	4603      	mov	r3, r0
 800186c:	71bb      	strb	r3, [r7, #6]
 800186e:	460b      	mov	r3, r1
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	807b      	strh	r3, [r7, #2]
  uint8_t command[8];
  uint16_t crc;

  // Enable RS485 Transmit (DE/RE pin HIGH)
  HAL_GPIO_WritePin(MAX3485_EN_GPIO_Port, MAX3485_EN_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800187c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001880:	f002 f946 	bl	8003b10 <HAL_GPIO_WritePin>

  command[0] = address;
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	733b      	strb	r3, [r7, #12]
  command[1] = functionCode;
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	737b      	strb	r3, [r7, #13]
  command[2] = (startAddress >> 8) & 0xFF; // High byte of start address
 800188c:	88bb      	ldrh	r3, [r7, #4]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73bb      	strb	r3, [r7, #14]
  command[3] = startAddress & 0xFF;        // Low byte of start address
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	73fb      	strb	r3, [r7, #15]
  command[4] = (numData >> 8) & 0xFF;      // High byte of number of data
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	743b      	strb	r3, [r7, #16]
  command[5] = numData & 0xFF;             // Low byte of number of data
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	747b      	strb	r3, [r7, #17]

  crc = calculateCRC(command, 6);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2106      	movs	r1, #6
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff92 	bl	80017dc <calculateCRC>
 80018b8:	4603      	mov	r3, r0
 80018ba:	82fb      	strh	r3, [r7, #22]
  command[6] = crc & 0xFF;        // Low byte of CRC
 80018bc:	8afb      	ldrh	r3, [r7, #22]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	74bb      	strb	r3, [r7, #18]
  command[7] = (crc >> 8) & 0xFF; // High byte of CRC (Modbus CRC is low byte first, then high byte)
 80018c2:	8afb      	ldrh	r3, [r7, #22]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	74fb      	strb	r3, [r7, #19]

  // Transmit the Modbus command
  HAL_UART_Transmit(&huart1, command, 8, HAL_MAX_DELAY);
 80018cc:	f107 010c 	add.w	r1, r7, #12
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	2208      	movs	r2, #8
 80018d6:	4808      	ldr	r0, [pc, #32]	@ (80018f8 <sendCommand+0xa0>)
 80018d8:	f004 ffea 	bl	80068b0 <HAL_UART_Transmit>
  // It's often beneficial to add a small delay here after transmit completes
  // to ensure the last bit is sent before changing the DE/RE pin,
  // especially at high baud rates. Or, use UART_Transmit_IT for non-blocking.
  // A good practice is to wait for the transmit complete flag if possible.
  // For simplicity with HAL_MAX_DELAY, the delay might be minimal.
  HAL_Delay(1); // Small delay might be needed, or ensure TX complete
 80018dc:	2001      	movs	r0, #1
 80018de:	f001 fc83 	bl	80031e8 <HAL_Delay>
  // This is often cleared automatically by reading DR, but explicitly doing it
  // can prevent issues, though direct flag clearing might be implementation-specific.
  // __HAL_UART_CLEAR_FLAG(&huart1,UART_CLEAR_OREF);

  // Disable RS485 Transmit (DE/RE pin LOW for Receive)
  HAL_GPIO_WritePin(MAX3485_EN_GPIO_Port, MAX3485_EN_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ec:	f002 f910 	bl	8003b10 <HAL_GPIO_WritePin>
}
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	200037c0 	.word	0x200037c0

080018fc <readResponse>:
 * Attempts to parse the response to extract pressure data if a specific
 * Modbus response pattern is found. Updates the global 'rs485' variable.
 *
 * @param expectedBytes The total number of bytes expected in the response.
 */
void readResponse(uint16_t expectedBytes) {
 80018fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001900:	b087      	sub	sp, #28
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	80fb      	strh	r3, [r7, #6]
 8001908:	466b      	mov	r3, sp
 800190a:	461e      	mov	r6, r3
    // Dynamically sized array on stack is fine for small sizes.
    // For larger responses, consider static or heap allocation.
    uint8_t data[expectedBytes];
 800190c:	88f9      	ldrh	r1, [r7, #6]
 800190e:	460b      	mov	r3, r1
 8001910:	3b01      	subs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	b28b      	uxth	r3, r1
 8001916:	2200      	movs	r2, #0
 8001918:	4698      	mov	r8, r3
 800191a:	4691      	mov	r9, r2
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001928:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800192c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001930:	b28b      	uxth	r3, r1
 8001932:	2200      	movs	r2, #0
 8001934:	461c      	mov	r4, r3
 8001936:	4615      	mov	r5, r2
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	00eb      	lsls	r3, r5, #3
 8001942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	460b      	mov	r3, r1
 800194a:	3307      	adds	r3, #7
 800194c:	08db      	lsrs	r3, r3, #3
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	ebad 0d03 	sub.w	sp, sp, r3
 8001954:	466b      	mov	r3, sp
 8001956:	3300      	adds	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
    memset(data, 0, expectedBytes); // Clear buffer before receiving
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	461a      	mov	r2, r3
 800195e:	2100      	movs	r1, #0
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f006 f9d8 	bl	8007d16 <memset>

    HAL_StatusTypeDef ret;
    // Attempt to receive data with a timeout of 10ms.
    ret = HAL_UART_Receive(&huart1, data, expectedBytes, 10);
 8001966:	88fa      	ldrh	r2, [r7, #6]
 8001968:	230a      	movs	r3, #10
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	4827      	ldr	r0, [pc, #156]	@ (8001a0c <readResponse+0x110>)
 800196e:	f005 f828 	bl	80069c2 <HAL_UART_Receive>
 8001972:	4603      	mov	r3, r0
 8001974:	72fb      	strb	r3, [r7, #11]

    if (ret == HAL_OK) {
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d140      	bne.n	80019fe <readResponse+0x102>
        int16_t pressureRaw = 32767; // Sentinel value to indicate no valid pressure found
 800197c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001980:	82fb      	strh	r3, [r7, #22]

        // Search for the specific Modbus RTU response pattern:
        // Slave Address (0x01) | Function Code (0x03) | Byte Count (0x02) | Data_H | Data_L | CRC_L | CRC_H
        // The loop should not go beyond (expectedBytes - 5) to safely access data[t+4] etc.
        for (uint8_t t = 0; t <= (expectedBytes - 5); t++) { // Adjusted loop condition
 8001982:	2300      	movs	r3, #0
 8001984:	757b      	strb	r3, [r7, #21]
 8001986:	e022      	b.n	80019ce <readResponse+0xd2>
            if (data[t] == 0x01 && data[t+1] == 0x03 && data[t+2] == 0x02) {
 8001988:	7d7b      	ldrb	r3, [r7, #21]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d11a      	bne.n	80019c8 <readResponse+0xcc>
 8001992:	7d7b      	ldrb	r3, [r7, #21]
 8001994:	3301      	adds	r3, #1
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d114      	bne.n	80019c8 <readResponse+0xcc>
 800199e:	7d7b      	ldrb	r3, [r7, #21]
 80019a0:	3302      	adds	r3, #2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d10e      	bne.n	80019c8 <readResponse+0xcc>
                pressureRaw = (data[t+3] << 8) | data[t+4]; // Extract the 16-bit raw pressure value
 80019aa:	7d7b      	ldrb	r3, [r7, #21]
 80019ac:	3303      	adds	r3, #3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	7d7b      	ldrb	r3, [r7, #21]
 80019ba:	3304      	adds	r3, #4
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	82fb      	strh	r3, [r7, #22]
                // Optional: Validate CRC here to ensure data integrity
                // uint16_t received_crc = (data[t+6] << 8) | data[t+5]; // Modbus RTU CRC is LSB first
                // uint16_t calculated_crc = calculateCRC(&data[t], 5); // CRC calculated over first 5 bytes (Addr, Func, Count, DataH, DataL)
                // if (received_crc == calculated_crc) { /* data is valid */ }
                break; // Found the pattern, no need to continue searching
 80019c6:	e007      	b.n	80019d8 <readResponse+0xdc>
        for (uint8_t t = 0; t <= (expectedBytes - 5); t++) { // Adjusted loop condition
 80019c8:	7d7b      	ldrb	r3, [r7, #21]
 80019ca:	3301      	adds	r3, #1
 80019cc:	757b      	strb	r3, [r7, #21]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	1f1a      	subs	r2, r3, #4
 80019d2:	7d7b      	ldrb	r3, [r7, #21]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dcd7      	bgt.n	8001988 <readResponse+0x8c>
            }
        }

        // If a valid pressureRaw value was extracted (not the sentinel)
        if (pressureRaw != 32767) {
 80019d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019dc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00c      	beq.n	80019fe <readResponse+0x102>
            rs485 = (float)pressureRaw / 10.0f; // Convert raw integer to float pressure
 80019e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80019f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <readResponse+0x114>)
 80019fa:	edc3 7a00 	vstr	s15, [r3]
 80019fe:	46b5      	mov	sp, r6
        }
    }
    // If ret != HAL_OK (timeout or error), rs485 retains its previous value or default 0.
}
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200037c0 	.word	0x200037c0
 8001a10:	20003850 	.word	0x20003850

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_MspInit+0x44>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a6c:	d139      	bne.n	8001ae2 <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <HAL_TIM_Base_MspInit+0x90>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <HAL_TIM_Base_MspInit+0x90>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HAL_TIM_Base_MspInit+0x90>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001a88:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <HAL_TIM_Base_MspInit+0x98>)
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001a8e:	2210      	movs	r2, #16
 8001a90:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a92:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001a9a:	2280      	movs	r2, #128	@ 0x80
 8001a9c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001aa8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001aba:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001abc:	f001 fcc9 	bl	8003452 <HAL_DMA_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001ac6:	f7ff fe83 	bl	80017d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ad0:	4a07      	ldr	r2, [pc, #28]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30
 8001adc:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <HAL_TIM_Base_MspInit+0x94>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	2000377c 	.word	0x2000377c
 8001af4:	40020080 	.word	0x40020080

08001af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b18:	d11b      	bne.n	8001b52 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b24:	6153      	str	r3, [r2, #20]
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 8001b32:	2308      	movs	r3, #8
 8001b34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b4e:	f001 fe55 	bl	80037fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48000400 	.word	0x48000400

08001b64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <HAL_UART_MspInit+0x80>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d129      	bne.n	8001bda <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_UART_MspInit+0x84>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a17      	ldr	r2, [pc, #92]	@ (8001be8 <HAL_UART_MspInit+0x84>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_UART_MspInit+0x84>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_UART_MspInit+0x84>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4a11      	ldr	r2, [pc, #68]	@ (8001be8 <HAL_UART_MspInit+0x84>)
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba8:	6153      	str	r3, [r2, #20]
 8001baa:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <HAL_UART_MspInit+0x84>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MAX3485_OUT_Pin|MAX3485_IN_Pin;
 8001bb6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd6:	f001 fe11 	bl	80037fc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	@ 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40013800 	.word	0x40013800
 8001be8:	40021000 	.word	0x40021000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c42:	f001 fab1 	bl	80031a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8001c4e:	2008      	movs	r0, #8
 8001c50:	f001 ff76 	bl	8003b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8001c5c:	2010      	movs	r0, #16
 8001c5e:	f001 ff6f 	bl	8003b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <DMA1_Channel7_IRQHandler+0x10>)
 8001c6e:	f001 fcd4 	bl	800361a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000377c 	.word	0x2000377c

08001c7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8001c80:	2020      	movs	r0, #32
 8001c82:	f001 ff5d 	bl	8003b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S4_Pin);
 8001c86:	2040      	movs	r0, #64	@ 0x40
 8001c88:	f001 ff5a 	bl	8003b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_kill>:

int _kill(int pid, int sig)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001caa:	f006 f887 	bl	8007dbc <__errno>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2216      	movs	r2, #22
 8001cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_exit>:

void _exit (int status)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ffe7 	bl	8001ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cd2:	bf00      	nop
 8001cd4:	e7fd      	b.n	8001cd2 <_exit+0x12>

08001cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e00a      	b.n	8001cfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce8:	f3af 8000 	nop.w
 8001cec:	4601      	mov	r1, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	60ba      	str	r2, [r7, #8]
 8001cf4:	b2ca      	uxtb	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	dbf0      	blt.n	8001ce8 <_read+0x12>
  }

  return len;
 8001d06:	687b      	ldr	r3, [r7, #4]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e009      	b.n	8001d36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	60ba      	str	r2, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	dbf1      	blt.n	8001d22 <_write+0x12>
  }
  return len;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_close>:

int _close(int file)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d70:	605a      	str	r2, [r3, #4]
  return 0;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_isatty>:

int _isatty(int file)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db8:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <_sbrk+0x5c>)
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <_sbrk+0x60>)
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <_sbrk+0x64>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <_sbrk+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d207      	bcs.n	8001df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de0:	f005 ffec 	bl	8007dbc <__errno>
 8001de4:	4603      	mov	r3, r0
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20004000 	.word	0x20004000
 8001e10:	00000400 	.word	0x00000400
 8001e14:	20003854 	.word	0x20003854
 8001e18:	200039b0 	.word	0x200039b0

08001e1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <SystemInit+0x20>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e26:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <SystemInit+0x20>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <ui>:
// The implementation of the UI function.
/**
 * @brief Manages the user interface logic, including menu navigation and display updates.
 * This function implements a state machine based on 'menu' and 'page' variables.
 */
void ui(void){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
    // This entire function body remains the same as your original,
    // just moved from the .h file to the .c file.
    //---------------------------------------------------------------------------------------------------------------------------------------------------------
	 switch(menu){
 8001e46:	4bb9      	ldr	r3, [pc, #740]	@ (800212c <ui+0x2ec>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	2b07      	cmp	r3, #7
 8001e4e:	f201 810c 	bhi.w	800306a <ui+0x122a>
 8001e52:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <ui+0x18>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001e79 	.word	0x08001e79
 8001e5c:	08001ffd 	.word	0x08001ffd
 8001e60:	08002107 	.word	0x08002107
 8001e64:	08002391 	.word	0x08002391
 8001e68:	080025a1 	.word	0x080025a1
 8001e6c:	08002837 	.word	0x08002837
 8001e70:	08002b1f 	.word	0x08002b1f
 8001e74:	08002d0b 	.word	0x08002d0b
		case 1: //tutorial
			switch(page){
 8001e78:	4bad      	ldr	r3, [pc, #692]	@ (8002130 <ui+0x2f0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	2b07      	cmp	r3, #7
 8001e82:	f200 80a8 	bhi.w	8001fd6 <ui+0x196>
 8001e86:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <ui+0x4c>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001ead 	.word	0x08001ead
 8001e90:	08001ecb 	.word	0x08001ecb
 8001e94:	08001f13 	.word	0x08001f13
 8001e98:	08001f31 	.word	0x08001f31
 8001e9c:	08001f4f 	.word	0x08001f4f
 8001ea0:	08001f6d 	.word	0x08001f6d
 8001ea4:	08001f8b 	.word	0x08001f8b
 8001ea8:	08001fb9 	.word	0x08001fb9
				case 1:
					 cursor_pos(1, 1);
 8001eac:	2101      	movs	r1, #1
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff f83a 	bl	8000f28 <cursor_pos>
					 write_to_screen("     Welkom!    ");
 8001eb4:	489f      	ldr	r0, [pc, #636]	@ (8002134 <ui+0x2f4>)
 8001eb6:	f7fe ffb4 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8001eba:	2101      	movs	r1, #1
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f7ff f833 	bl	8000f28 <cursor_pos>
					 write_to_screen("press o for next");
 8001ec2:	489d      	ldr	r0, [pc, #628]	@ (8002138 <ui+0x2f8>)
 8001ec4:	f7fe ffad 	bl	8000e22 <write_to_screen>
				break;
 8001ec8:	e096      	b.n	8001ff8 <ui+0x1b8>
				case 2:
					 cursor_pos(1, 1);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f7ff f82b 	bl	8000f28 <cursor_pos>
					 write_to_screen("    this is a   ");
 8001ed2:	489a      	ldr	r0, [pc, #616]	@ (800213c <ui+0x2fc>)
 8001ed4:	f7fe ffa5 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	2002      	movs	r0, #2
 8001edc:	f7ff f824 	bl	8000f28 <cursor_pos>
					 write_to_screen("    tutorial    ");
 8001ee0:	4897      	ldr	r0, [pc, #604]	@ (8002140 <ui+0x300>)
 8001ee2:	f7fe ff9e 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 8001ee6:	4b97      	ldr	r3, [pc, #604]	@ (8002144 <ui+0x304>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	f040 8082 	bne.w	8001ff6 <ui+0x1b6>
						 menu = 2;
 8001ef2:	4b8e      	ldr	r3, [pc, #568]	@ (800212c <ui+0x2ec>)
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001ef8:	4b92      	ldr	r3, [pc, #584]	@ (8002144 <ui+0x304>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001efe:	4b92      	ldr	r3, [pc, #584]	@ (8002148 <ui+0x308>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
						 page = 1;
 8001f04:	4b8a      	ldr	r3, [pc, #552]	@ (8002130 <ui+0x2f0>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001f0a:	4b90      	ldr	r3, [pc, #576]	@ (800214c <ui+0x30c>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001f10:	e071      	b.n	8001ff6 <ui+0x1b6>
				case 3:
					 cursor_pos(1, 1);
 8001f12:	2101      	movs	r1, #1
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7ff f807 	bl	8000f28 <cursor_pos>
					 write_to_screen("   o is to go   ");
 8001f1a:	488d      	ldr	r0, [pc, #564]	@ (8002150 <ui+0x310>)
 8001f1c:	f7fe ff81 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8001f20:	2101      	movs	r1, #1
 8001f22:	2002      	movs	r0, #2
 8001f24:	f7ff f800 	bl	8000f28 <cursor_pos>
					 write_to_screen("to the next page");
 8001f28:	488a      	ldr	r0, [pc, #552]	@ (8002154 <ui+0x314>)
 8001f2a:	f7fe ff7a 	bl	8000e22 <write_to_screen>
				break;
 8001f2e:	e063      	b.n	8001ff8 <ui+0x1b8>
				case 4:
					 cursor_pos(1, 1);
 8001f30:	2101      	movs	r1, #1
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7fe fff8 	bl	8000f28 <cursor_pos>
					 write_to_screen(" and x is to go ");
 8001f38:	4887      	ldr	r0, [pc, #540]	@ (8002158 <ui+0x318>)
 8001f3a:	f7fe ff72 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8001f3e:	2101      	movs	r1, #1
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7fe fff1 	bl	8000f28 <cursor_pos>
					 write_to_screen(" back a page    ");
 8001f46:	4885      	ldr	r0, [pc, #532]	@ (800215c <ui+0x31c>)
 8001f48:	f7fe ff6b 	bl	8000e22 <write_to_screen>
				break;
 8001f4c:	e054      	b.n	8001ff8 <ui+0x1b8>
				case 5:
					 cursor_pos(1, 1);
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7fe ffe9 	bl	8000f28 <cursor_pos>
					 write_to_screen(" ^ is to select ");
 8001f56:	4882      	ldr	r0, [pc, #520]	@ (8002160 <ui+0x320>)
 8001f58:	f7fe ff63 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f7fe ffe2 	bl	8000f28 <cursor_pos>
					 write_to_screen("  your choice   ");
 8001f64:	487f      	ldr	r0, [pc, #508]	@ (8002164 <ui+0x324>)
 8001f66:	f7fe ff5c 	bl	8000e22 <write_to_screen>
				break;
 8001f6a:	e045      	b.n	8001ff8 <ui+0x1b8>
				case 6:
					 cursor_pos(1, 1);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7fe ffda 	bl	8000f28 <cursor_pos>
					 write_to_screen("and also to     ");
 8001f74:	487c      	ldr	r0, [pc, #496]	@ (8002168 <ui+0x328>)
 8001f76:	f7fe ff54 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f7fe ffd3 	bl	8000f28 <cursor_pos>
					 write_to_screen("increase a value");
 8001f82:	487a      	ldr	r0, [pc, #488]	@ (800216c <ui+0x32c>)
 8001f84:	f7fe ff4d 	bl	8000e22 <write_to_screen>
				break;
 8001f88:	e036      	b.n	8001ff8 <ui+0x1b8>
				case 7:
					 cursor_pos(1, 1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7fe ffcb 	bl	8000f28 <cursor_pos>
					 write_to_screen(" ");
 8001f92:	4877      	ldr	r0, [pc, #476]	@ (8002170 <ui+0x330>)
 8001f94:	f7fe ff45 	bl	8000e22 <write_to_screen>
					 send_to_screen(0b11011011, 'b', 'd'); // This looks like a custom character or a specific symbol.
 8001f98:	2264      	movs	r2, #100	@ 0x64
 8001f9a:	2162      	movs	r1, #98	@ 0x62
 8001f9c:	20db      	movs	r0, #219	@ 0xdb
 8001f9e:	f7fe fe61 	bl	8000c64 <send_to_screen>
					 write_to_screen(" is used to    ");
 8001fa2:	4874      	ldr	r0, [pc, #464]	@ (8002174 <ui+0x334>)
 8001fa4:	f7fe ff3d 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8001fa8:	2101      	movs	r1, #1
 8001faa:	2002      	movs	r0, #2
 8001fac:	f7fe ffbc 	bl	8000f28 <cursor_pos>
					 write_to_screen("confirm a choice");
 8001fb0:	4871      	ldr	r0, [pc, #452]	@ (8002178 <ui+0x338>)
 8001fb2:	f7fe ff36 	bl	8000e22 <write_to_screen>
				break;
 8001fb6:	e01f      	b.n	8001ff8 <ui+0x1b8>
				case 8:
					 cursor_pos(1, 1);
 8001fb8:	2101      	movs	r1, #1
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7fe ffb4 	bl	8000f28 <cursor_pos>
					 write_to_screen("and also to     ");
 8001fc0:	4869      	ldr	r0, [pc, #420]	@ (8002168 <ui+0x328>)
 8001fc2:	f7fe ff2e 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7fe ffad 	bl	8000f28 <cursor_pos>
					 write_to_screen("decrease a value");
 8001fce:	486b      	ldr	r0, [pc, #428]	@ (800217c <ui+0x33c>)
 8001fd0:	f7fe ff27 	bl	8000e22 <write_to_screen>
				break;
 8001fd4:	e010      	b.n	8001ff8 <ui+0x1b8>
				default:
					 menu = 2;
 8001fd6:	4b55      	ldr	r3, [pc, #340]	@ (800212c <ui+0x2ec>)
 8001fd8:	2202      	movs	r2, #2
 8001fda:	701a      	strb	r2, [r3, #0]
					 page = 1;
 8001fdc:	4b54      	ldr	r3, [pc, #336]	@ (8002130 <ui+0x2f0>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
					 conf = 0;
 8001fe2:	4b58      	ldr	r3, [pc, #352]	@ (8002144 <ui+0x304>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
					 select = 1;
 8001fe8:	4b57      	ldr	r3, [pc, #348]	@ (8002148 <ui+0x308>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
					 update = 1;
 8001fee:	4b57      	ldr	r3, [pc, #348]	@ (800214c <ui+0x30c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
				break;
 8001ff4:	e000      	b.n	8001ff8 <ui+0x1b8>
				break;
 8001ff6:	bf00      	nop
			}
		break;
 8001ff8:	f001 b83b 	b.w	8003072 <ui+0x1232>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 2: //menu selecter
			switch(page){
 8001ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8002130 <ui+0x2f0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d176      	bne.n	80020f4 <ui+0x2b4>
				case 1:
					 cursor_pos(1, 1);
 8002006:	2101      	movs	r1, #1
 8002008:	2001      	movs	r0, #1
 800200a:	f7fe ff8d 	bl	8000f28 <cursor_pos>
					 write_to_screen("Setting Displays");
 800200e:	485c      	ldr	r0, [pc, #368]	@ (8002180 <ui+0x340>)
 8002010:	f7fe ff07 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002014:	2101      	movs	r1, #1
 8002016:	2002      	movs	r0, #2
 8002018:	f7fe ff86 	bl	8000f28 <cursor_pos>
					 write_to_screen("    Tutorial    ");
 800201c:	4859      	ldr	r0, [pc, #356]	@ (8002184 <ui+0x344>)
 800201e:	f7fe ff00 	bl	8000e22 <write_to_screen>
					 switch(select){
 8002022:	4b49      	ldr	r3, [pc, #292]	@ (8002148 <ui+0x308>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d03d      	beq.n	80020a8 <ui+0x268>
 800202c:	2b03      	cmp	r3, #3
 800202e:	dc54      	bgt.n	80020da <ui+0x29a>
 8002030:	2b01      	cmp	r3, #1
 8002032:	d002      	beq.n	800203a <ui+0x1fa>
 8002034:	2b02      	cmp	r3, #2
 8002036:	d019      	beq.n	800206c <ui+0x22c>
 8002038:	e04f      	b.n	80020da <ui+0x29a>
						case 1: // "Setting Displays" option
							 cursor_pos(1, 1); // This seems to just re-set the cursor, doesn't draw a selector.
 800203a:	2101      	movs	r1, #1
 800203c:	2001      	movs	r0, #1
 800203e:	f7fe ff73 	bl	8000f28 <cursor_pos>
                                             // You might want to display a ">" or some other indicator here.
							 if(conf == 1){
 8002042:	4b40      	ldr	r3, [pc, #256]	@ (8002144 <ui+0x304>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d14d      	bne.n	80020e8 <ui+0x2a8>
								 menu = 3; // Go to settings menu
 800204c:	4b37      	ldr	r3, [pc, #220]	@ (800212c <ui+0x2ec>)
 800204e:	2203      	movs	r2, #3
 8002050:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8002052:	4b3c      	ldr	r3, [pc, #240]	@ (8002144 <ui+0x304>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8002058:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <ui+0x308>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
								 page = 2; // Start settings menu on the second page (Min/Max Well)
 800205e:	4b34      	ldr	r3, [pc, #208]	@ (8002130 <ui+0x2f0>)
 8002060:	2202      	movs	r2, #2
 8002062:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002064:	4b39      	ldr	r3, [pc, #228]	@ (800214c <ui+0x30c>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
							 }
						break;
 800206a:	e03d      	b.n	80020e8 <ui+0x2a8>

						case 2: // "Displays" option (assuming this is for the second option on line 1)
							 cursor_pos(1, 9); // This seems to just re-set the cursor.
 800206c:	2109      	movs	r1, #9
 800206e:	2001      	movs	r0, #1
 8002070:	f7fe ff5a 	bl	8000f28 <cursor_pos>
                                             // It's more likely that the options are:
                                             // Option 1: "Settings" (implicit at 1,1)
                                             // Option 2: "Displays" (implicit at 1,9)
                                             // Option 3: "Tutorial" (explicit at 2,5)
                                             // Re-check your physical layout.
							 if(conf == 1){
 8002074:	4b33      	ldr	r3, [pc, #204]	@ (8002144 <ui+0x304>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d136      	bne.n	80020ec <ui+0x2ac>
								 menu = 4; // Go to displays menu
 800207e:	4b2b      	ldr	r3, [pc, #172]	@ (800212c <ui+0x2ec>)
 8002080:	2204      	movs	r2, #4
 8002082:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8002084:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <ui+0x304>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
								 select = 1;
 800208a:	4b2f      	ldr	r3, [pc, #188]	@ (8002148 <ui+0x308>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
								 page = 2; // Start displays menu on the second page (water level)
 8002090:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <ui+0x2f0>)
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002096:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <ui+0x30c>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
								 send_to_screen(0b00001100, 'b', 'c'); // Turn cursor off
 800209c:	2263      	movs	r2, #99	@ 0x63
 800209e:	2162      	movs	r1, #98	@ 0x62
 80020a0:	200c      	movs	r0, #12
 80020a2:	f7fe fddf 	bl	8000c64 <send_to_screen>
							 }
						break;
 80020a6:	e021      	b.n	80020ec <ui+0x2ac>

						case 3: // "Tutorial" option
							 cursor_pos(2, 5); // This seems to just re-set the cursor.
 80020a8:	2105      	movs	r1, #5
 80020aa:	2002      	movs	r0, #2
 80020ac:	f7fe ff3c 	bl	8000f28 <cursor_pos>
							 if(conf == 1){
 80020b0:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <ui+0x304>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d11a      	bne.n	80020f0 <ui+0x2b0>
								 menu = 1; // Go back to tutorial
 80020ba:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <ui+0x2ec>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80020c0:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <ui+0x304>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <ui+0x308>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
								 page = 1;
 80020cc:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <ui+0x2f0>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80020d2:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <ui+0x30c>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
							 }
						break;
 80020d8:	e00a      	b.n	80020f0 <ui+0x2b0>

						default: // Fallback for 'select'
							select = 1;
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <ui+0x308>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
							update = 1;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <ui+0x30c>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
						break;
 80020e6:	e004      	b.n	80020f2 <ui+0x2b2>
						break;
 80020e8:	bf00      	nop
 80020ea:	e00a      	b.n	8002102 <ui+0x2c2>
						break;
 80020ec:	bf00      	nop
 80020ee:	e008      	b.n	8002102 <ui+0x2c2>
						break;
 80020f0:	bf00      	nop
					}
				break;
 80020f2:	e006      	b.n	8002102 <ui+0x2c2>

				default: // Fallback for 'page' in menu 2
					page = 1;
 80020f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <ui+0x2f0>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
					update = 1;
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <ui+0x30c>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
				break;
 8002100:	bf00      	nop
			}
		break;
 8002102:	f000 bfb6 	b.w	8003072 <ui+0x1232>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 3: //settings selector
			switch(page){
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <ui+0x2f0>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	2b03      	cmp	r3, #3
 8002110:	f200 8131 	bhi.w	8002376 <ui+0x536>
 8002114:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <ui+0x2dc>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	08002189 	.word	0x08002189
 8002120:	080021d1 	.word	0x080021d1
 8002124:	0800228b 	.word	0x0800228b
 8002128:	08002331 	.word	0x08002331
 800212c:	20000005 	.word	0x20000005
 8002130:	20000004 	.word	0x20000004
 8002134:	08009ee8 	.word	0x08009ee8
 8002138:	08009efc 	.word	0x08009efc
 800213c:	08009f10 	.word	0x08009f10
 8002140:	08009f24 	.word	0x08009f24
 8002144:	20003858 	.word	0x20003858
 8002148:	20000006 	.word	0x20000006
 800214c:	20003859 	.word	0x20003859
 8002150:	08009f38 	.word	0x08009f38
 8002154:	08009f4c 	.word	0x08009f4c
 8002158:	08009f60 	.word	0x08009f60
 800215c:	08009f74 	.word	0x08009f74
 8002160:	08009f88 	.word	0x08009f88
 8002164:	08009f9c 	.word	0x08009f9c
 8002168:	08009fb0 	.word	0x08009fb0
 800216c:	08009fc4 	.word	0x08009fc4
 8002170:	08009fd8 	.word	0x08009fd8
 8002174:	08009fdc 	.word	0x08009fdc
 8002178:	08009fec 	.word	0x08009fec
 800217c:	0800a000 	.word	0x0800a000
 8002180:	0800a014 	.word	0x0800a014
 8002184:	0800a028 	.word	0x0800a028

				case 1: // Go back to menu selector
					cursor_pos(1, 1);
 8002188:	2101      	movs	r1, #1
 800218a:	2001      	movs	r0, #1
 800218c:	f7fe fecc 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8002190:	48ab      	ldr	r0, [pc, #684]	@ (8002440 <ui+0x600>)
 8002192:	f7fe fe46 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002196:	2101      	movs	r1, #1
 8002198:	2002      	movs	r0, #2
 800219a:	f7fe fec5 	bl	8000f28 <cursor_pos>
					 write_to_screen(" menu selector  ");
 800219e:	48a9      	ldr	r0, [pc, #676]	@ (8002444 <ui+0x604>)
 80021a0:	f7fe fe3f 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 80021a4:	4ba8      	ldr	r3, [pc, #672]	@ (8002448 <ui+0x608>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 80ea 	bne.w	8002384 <ui+0x544>
						 menu = 2;
 80021b0:	4ba6      	ldr	r3, [pc, #664]	@ (800244c <ui+0x60c>)
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80021b6:	4ba4      	ldr	r3, [pc, #656]	@ (8002448 <ui+0x608>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80021bc:	4ba4      	ldr	r3, [pc, #656]	@ (8002450 <ui+0x610>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
						 page = 1;
 80021c2:	4ba4      	ldr	r3, [pc, #656]	@ (8002454 <ui+0x614>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80021c8:	4ba3      	ldr	r3, [pc, #652]	@ (8002458 <ui+0x618>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
					 }
				break;
 80021ce:	e0d9      	b.n	8002384 <ui+0x544>

				case 2: // Min/Max Well & Min/Max Limit options
					cursor_pos(1, 1);
 80021d0:	2101      	movs	r1, #1
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7fe fea8 	bl	8000f28 <cursor_pos>
					write_to_screen("  Min/Max Well  ");
 80021d8:	48a0      	ldr	r0, [pc, #640]	@ (800245c <ui+0x61c>)
 80021da:	f7fe fe22 	bl	8000e22 <write_to_screen>
					cursor_pos(2, 1);
 80021de:	2101      	movs	r1, #1
 80021e0:	2002      	movs	r0, #2
 80021e2:	f7fe fea1 	bl	8000f28 <cursor_pos>
					write_to_screen("  Min/Max Limit ");
 80021e6:	489e      	ldr	r0, [pc, #632]	@ (8002460 <ui+0x620>)
 80021e8:	f7fe fe1b 	bl	8000e22 <write_to_screen>
					switch(select){
 80021ec:	4b98      	ldr	r3, [pc, #608]	@ (8002450 <ui+0x610>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d002      	beq.n	80021fc <ui+0x3bc>
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d01e      	beq.n	8002238 <ui+0x3f8>
 80021fa:	e03b      	b.n	8002274 <ui+0x434>
						case 1: // "Min/Max Well" option
							 cursor_pos(1, 3); // This seems to just re-set the cursor.
 80021fc:	2103      	movs	r1, #3
 80021fe:	2001      	movs	r0, #1
 8002200:	f7fe fe92 	bl	8000f28 <cursor_pos>
							 if(conf == 1){
 8002204:	4b90      	ldr	r3, [pc, #576]	@ (8002448 <ui+0x608>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d139      	bne.n	8002282 <ui+0x442>
								 menu = 5; // Go to well level settings
 800220e:	4b8f      	ldr	r3, [pc, #572]	@ (800244c <ui+0x60c>)
 8002210:	2205      	movs	r2, #5
 8002212:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8002214:	4b8c      	ldr	r3, [pc, #560]	@ (8002448 <ui+0x608>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
								 select = 1;
 800221a:	4b8d      	ldr	r3, [pc, #564]	@ (8002450 <ui+0x610>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
								 page = 2; // Start well level settings on intro page 2
 8002220:	4b8c      	ldr	r3, [pc, #560]	@ (8002454 <ui+0x614>)
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002226:	4b8c      	ldr	r3, [pc, #560]	@ (8002458 <ui+0x618>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
								 send_to_screen(0b00001100, 'b', 'c'); // Turn cursor off
 800222c:	2263      	movs	r2, #99	@ 0x63
 800222e:	2162      	movs	r1, #98	@ 0x62
 8002230:	200c      	movs	r0, #12
 8002232:	f7fe fd17 	bl	8000c64 <send_to_screen>
							 }
						break;
 8002236:	e024      	b.n	8002282 <ui+0x442>

						case 2: // "Min/Max Limit" option
							 cursor_pos(2, 3); // This seems to just re-set the cursor.
 8002238:	2103      	movs	r1, #3
 800223a:	2002      	movs	r0, #2
 800223c:	f7fe fe74 	bl	8000f28 <cursor_pos>
							 if(conf == 1){
 8002240:	4b81      	ldr	r3, [pc, #516]	@ (8002448 <ui+0x608>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d11d      	bne.n	8002286 <ui+0x446>
								 menu = 6; // Go to limit level settings
 800224a:	4b80      	ldr	r3, [pc, #512]	@ (800244c <ui+0x60c>)
 800224c:	2206      	movs	r2, #6
 800224e:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8002250:	4b7d      	ldr	r3, [pc, #500]	@ (8002448 <ui+0x608>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8002256:	4b7e      	ldr	r3, [pc, #504]	@ (8002450 <ui+0x610>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
								 page = 2; // Start limit level settings on intro page 2
 800225c:	4b7d      	ldr	r3, [pc, #500]	@ (8002454 <ui+0x614>)
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002262:	4b7d      	ldr	r3, [pc, #500]	@ (8002458 <ui+0x618>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
								 send_to_screen(0b00001100, 'b', 'c'); // Turn cursor off
 8002268:	2263      	movs	r2, #99	@ 0x63
 800226a:	2162      	movs	r1, #98	@ 0x62
 800226c:	200c      	movs	r0, #12
 800226e:	f7fe fcf9 	bl	8000c64 <send_to_screen>
						 }
							 break;
 8002272:	e008      	b.n	8002286 <ui+0x446>

						default: // Fallback for 'select'
							select = 1;
 8002274:	4b76      	ldr	r3, [pc, #472]	@ (8002450 <ui+0x610>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
							update = 1;
 800227a:	4b77      	ldr	r3, [pc, #476]	@ (8002458 <ui+0x618>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
						break;
 8002280:	e002      	b.n	8002288 <ui+0x448>
						break;
 8002282:	bf00      	nop
 8002284:	e082      	b.n	800238c <ui+0x54c>
							 break;
 8002286:	bf00      	nop
				}
				break;
 8002288:	e080      	b.n	800238c <ui+0x54c>

				case 3: // Well form & Well dimensions options
					cursor_pos(1, 1);
 800228a:	2101      	movs	r1, #1
 800228c:	2001      	movs	r0, #1
 800228e:	f7fe fe4b 	bl	8000f28 <cursor_pos>
					write_to_screen(" Well form      ");
 8002292:	4874      	ldr	r0, [pc, #464]	@ (8002464 <ui+0x624>)
 8002294:	f7fe fdc5 	bl	8000e22 <write_to_screen>
					cursor_pos(2, 1);
 8002298:	2101      	movs	r1, #1
 800229a:	2002      	movs	r0, #2
 800229c:	f7fe fe44 	bl	8000f28 <cursor_pos>
					write_to_screen(" Well dimensions");
 80022a0:	4871      	ldr	r0, [pc, #452]	@ (8002468 <ui+0x628>)
 80022a2:	f7fe fdbe 	bl	8000e22 <write_to_screen>
					switch(select){
 80022a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002450 <ui+0x610>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d002      	beq.n	80022b6 <ui+0x476>
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d019      	beq.n	80022e8 <ui+0x4a8>
 80022b4:	e031      	b.n	800231a <ui+0x4da>
						case 1: // "Well form" option
							 cursor_pos(1, 2); // This seems to just re-set the cursor.
 80022b6:	2102      	movs	r1, #2
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7fe fe35 	bl	8000f28 <cursor_pos>
							 if(conf == 1){
 80022be:	4b62      	ldr	r3, [pc, #392]	@ (8002448 <ui+0x608>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d12f      	bne.n	8002328 <ui+0x4e8>
								 menu = 7; // Go to form selector
 80022c8:	4b60      	ldr	r3, [pc, #384]	@ (800244c <ui+0x60c>)
 80022ca:	2207      	movs	r2, #7
 80022cc:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80022ce:	4b5e      	ldr	r3, [pc, #376]	@ (8002448 <ui+0x608>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80022d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002450 <ui+0x610>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
								 page = 2; // Start form selector on intro page 2
 80022da:	4b5e      	ldr	r3, [pc, #376]	@ (8002454 <ui+0x614>)
 80022dc:	2202      	movs	r2, #2
 80022de:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80022e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002458 <ui+0x618>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
							 }
						break;
 80022e6:	e01f      	b.n	8002328 <ui+0x4e8>

						case 2: // "Well dimensions" option
							 cursor_pos(2, 2); // This seems to just re-set the cursor.
 80022e8:	2102      	movs	r1, #2
 80022ea:	2002      	movs	r0, #2
 80022ec:	f7fe fe1c 	bl	8000f28 <cursor_pos>
							 if(conf == 1){
 80022f0:	4b55      	ldr	r3, [pc, #340]	@ (8002448 <ui+0x608>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d118      	bne.n	800232c <ui+0x4ec>
								 menu = 8; // Go to dimensions selector
 80022fa:	4b54      	ldr	r3, [pc, #336]	@ (800244c <ui+0x60c>)
 80022fc:	2208      	movs	r2, #8
 80022fe:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8002300:	4b51      	ldr	r3, [pc, #324]	@ (8002448 <ui+0x608>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8002306:	4b52      	ldr	r3, [pc, #328]	@ (8002450 <ui+0x610>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
								 page = 2; // Start dimensions selector on intro page 2
 800230c:	4b51      	ldr	r3, [pc, #324]	@ (8002454 <ui+0x614>)
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002312:	4b51      	ldr	r3, [pc, #324]	@ (8002458 <ui+0x618>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
						 }
							 break;
 8002318:	e008      	b.n	800232c <ui+0x4ec>

						default: // Fallback for 'select'
							select = 1;
 800231a:	4b4d      	ldr	r3, [pc, #308]	@ (8002450 <ui+0x610>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
							update = 1;
 8002320:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <ui+0x618>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
						break;
 8002326:	e002      	b.n	800232e <ui+0x4ee>
						break;
 8002328:	bf00      	nop
 800232a:	e02f      	b.n	800238c <ui+0x54c>
							 break;
 800232c:	bf00      	nop
				}
				break;
 800232e:	e02d      	b.n	800238c <ui+0x54c>

				case 4: // Go back to menu selector (duplicate of page 1, consider consolidating if possible)
					cursor_pos(1, 1);
 8002330:	2101      	movs	r1, #1
 8002332:	2001      	movs	r0, #1
 8002334:	f7fe fdf8 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8002338:	4841      	ldr	r0, [pc, #260]	@ (8002440 <ui+0x600>)
 800233a:	f7fe fd72 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 800233e:	2101      	movs	r1, #1
 8002340:	2002      	movs	r0, #2
 8002342:	f7fe fdf1 	bl	8000f28 <cursor_pos>
					 write_to_screen(" menu selector  ");
 8002346:	483f      	ldr	r0, [pc, #252]	@ (8002444 <ui+0x604>)
 8002348:	f7fe fd6b 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 800234c:	4b3e      	ldr	r3, [pc, #248]	@ (8002448 <ui+0x608>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d119      	bne.n	800238a <ui+0x54a>
						 menu = 2;
 8002356:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <ui+0x60c>)
 8002358:	2202      	movs	r2, #2
 800235a:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 800235c:	4b3a      	ldr	r3, [pc, #232]	@ (8002448 <ui+0x608>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8002362:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <ui+0x610>)
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
						 page = 1;
 8002368:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <ui+0x614>)
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
						 update = 1;
 800236e:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <ui+0x618>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8002374:	e009      	b.n	800238a <ui+0x54a>

				default: // Fallback for 'page' in menu 3
					page = 2;
 8002376:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <ui+0x614>)
 8002378:	2202      	movs	r2, #2
 800237a:	701a      	strb	r2, [r3, #0]
					update = 1;
 800237c:	4b36      	ldr	r3, [pc, #216]	@ (8002458 <ui+0x618>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
				break;
 8002382:	e003      	b.n	800238c <ui+0x54c>
				break;
 8002384:	bf00      	nop
 8002386:	f000 be74 	b.w	8003072 <ui+0x1232>
				break;
 800238a:	bf00      	nop
			}
		break;
 800238c:	f000 be71 	b.w	8003072 <ui+0x1232>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 4: //displays
			switch(page){
 8002390:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <ui+0x614>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	2b03      	cmp	r3, #3
 800239a:	f200 80f4 	bhi.w	8002586 <ui+0x746>
 800239e:	a201      	add	r2, pc, #4	@ (adr r2, 80023a4 <ui+0x564>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	08002407 	.word	0x08002407
 80023ac:	0800247d 	.word	0x0800247d
 80023b0:	08002537 	.word	0x08002537

				case 1: // Go back to menu selector
					cursor_pos(1, 1);
 80023b4:	2101      	movs	r1, #1
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7fe fdb6 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 80023bc:	4820      	ldr	r0, [pc, #128]	@ (8002440 <ui+0x600>)
 80023be:	f7fe fd30 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 80023c2:	2101      	movs	r1, #1
 80023c4:	2002      	movs	r0, #2
 80023c6:	f7fe fdaf 	bl	8000f28 <cursor_pos>
					 write_to_screen(" menu selector  ");
 80023ca:	481e      	ldr	r0, [pc, #120]	@ (8002444 <ui+0x604>)
 80023cc:	f7fe fd29 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 80023d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <ui+0x608>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 80dc 	bne.w	8002594 <ui+0x754>
						 menu = 2;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <ui+0x60c>)
 80023de:	2202      	movs	r2, #2
 80023e0:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <ui+0x608>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <ui+0x610>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
						 page = 1;
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <ui+0x614>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80023f4:	4b18      	ldr	r3, [pc, #96]	@ (8002458 <ui+0x618>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c'); // Turn cursor ON (seems like this is intended to re-enable)
 80023fa:	2263      	movs	r2, #99	@ 0x63
 80023fc:	2162      	movs	r1, #98	@ 0x62
 80023fe:	200f      	movs	r0, #15
 8002400:	f7fe fc30 	bl	8000c64 <send_to_screen>
					 }
				break;
 8002404:	e0c6      	b.n	8002594 <ui+0x754>

				case 2: // Display water level
					 cursor_pos(1, 1);
 8002406:	2101      	movs	r1, #1
 8002408:	2001      	movs	r0, #1
 800240a:	f7fe fd8d 	bl	8000f28 <cursor_pos>
					 write_to_screen("  water level   ");
 800240e:	4817      	ldr	r0, [pc, #92]	@ (800246c <ui+0x62c>)
 8002410:	f7fe fd07 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f7fe fd86 	bl	8000f28 <cursor_pos>
					 write_to_screen("  ");
 800241c:	4814      	ldr	r0, [pc, #80]	@ (8002470 <ui+0x630>)
 800241e:	f7fe fd00 	bl	8000e22 <write_to_screen>
					 float_to_screen(rs485); // Display current RS485 (water level) value
 8002422:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <ui+0x634>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	eeb0 0a67 	vmov.f32	s0, s15
 800242c:	f7fe fd48 	bl	8000ec0 <float_to_screen>
					 write_to_screen(" cm             ");
 8002430:	4811      	ldr	r0, [pc, #68]	@ (8002478 <ui+0x638>)
 8002432:	f7fe fcf6 	bl	8000e22 <write_to_screen>
					 update = 1; // Always mark for update, as value can change
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <ui+0x618>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
				break;
 800243c:	e0ae      	b.n	800259c <ui+0x75c>
 800243e:	bf00      	nop
 8002440:	0800a03c 	.word	0x0800a03c
 8002444:	0800a050 	.word	0x0800a050
 8002448:	20003858 	.word	0x20003858
 800244c:	20000005 	.word	0x20000005
 8002450:	20000006 	.word	0x20000006
 8002454:	20000004 	.word	0x20000004
 8002458:	20003859 	.word	0x20003859
 800245c:	0800a064 	.word	0x0800a064
 8002460:	0800a078 	.word	0x0800a078
 8002464:	0800a08c 	.word	0x0800a08c
 8002468:	0800a0a0 	.word	0x0800a0a0
 800246c:	0800a0b4 	.word	0x0800a0b4
 8002470:	0800a0c8 	.word	0x0800a0c8
 8002474:	20003850 	.word	0x20003850
 8002478:	0800a0cc 	.word	0x0800a0cc

				case 3: // Display water volume
					float volume = 0;
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	607b      	str	r3, [r7, #4]

					if(strcmp(form, "cy") == 0){ // Cylinder volume calculation
 8002482:	4bb3      	ldr	r3, [pc, #716]	@ (8002750 <ui+0x910>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	49b3      	ldr	r1, [pc, #716]	@ (8002754 <ui+0x914>)
 8002488:	4618      	mov	r0, r3
 800248a:	f7fd fea1 	bl	80001d0 <strcmp>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11f      	bne.n	80024d4 <ui+0x694>
						volume = ((diameter/2) * (diameter/2) * 3.14159f * rs485) / 1000.0f; // Division by 1000 to get Liters from cm^3
 8002494:	4bb0      	ldr	r3, [pc, #704]	@ (8002758 <ui+0x918>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800249e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024a2:	4bad      	ldr	r3, [pc, #692]	@ (8002758 <ui+0x918>)
 80024a4:	edd3 6a00 	vldr	s13, [r3]
 80024a8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80024ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b4:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800275c <ui+0x91c>
 80024b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024bc:	4ba8      	ldr	r3, [pc, #672]	@ (8002760 <ui+0x920>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c6:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8002764 <ui+0x924>
 80024ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80024d2:	e017      	b.n	8002504 <ui+0x6c4>
					}
					else{ // Cuboid volume calculation
						volume = (X * Y * rs485) / 1000.0f; // Division by 1000 to get Liters from cm^3
 80024d4:	4ba4      	ldr	r3, [pc, #656]	@ (8002768 <ui+0x928>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	4ba3      	ldr	r3, [pc, #652]	@ (800276c <ui+0x92c>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ee:	4b9c      	ldr	r3, [pc, #624]	@ (8002760 <ui+0x920>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f8:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8002764 <ui+0x924>
 80024fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002500:	edc7 7a01 	vstr	s15, [r7, #4]
					}

					 cursor_pos(1, 1);
 8002504:	2101      	movs	r1, #1
 8002506:	2001      	movs	r0, #1
 8002508:	f7fe fd0e 	bl	8000f28 <cursor_pos>
					 write_to_screen("  water volume  ");
 800250c:	4898      	ldr	r0, [pc, #608]	@ (8002770 <ui+0x930>)
 800250e:	f7fe fc88 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002512:	2101      	movs	r1, #1
 8002514:	2002      	movs	r0, #2
 8002516:	f7fe fd07 	bl	8000f28 <cursor_pos>
					 write_to_screen("  ");
 800251a:	4896      	ldr	r0, [pc, #600]	@ (8002774 <ui+0x934>)
 800251c:	f7fe fc81 	bl	8000e22 <write_to_screen>
					 float_to_screen(volume);
 8002520:	ed97 0a01 	vldr	s0, [r7, #4]
 8002524:	f7fe fccc 	bl	8000ec0 <float_to_screen>
					 write_to_screen(" L              ");
 8002528:	4893      	ldr	r0, [pc, #588]	@ (8002778 <ui+0x938>)
 800252a:	f7fe fc7a 	bl	8000e22 <write_to_screen>
					 update = 1; // Always mark for update
 800252e:	4b93      	ldr	r3, [pc, #588]	@ (800277c <ui+0x93c>)
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
				break;
 8002534:	e032      	b.n	800259c <ui+0x75c>

				case 4: // Go back to menu selector (duplicate of page 1, consider consolidating if possible)
					cursor_pos(1, 1);
 8002536:	2101      	movs	r1, #1
 8002538:	2001      	movs	r0, #1
 800253a:	f7fe fcf5 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 800253e:	4890      	ldr	r0, [pc, #576]	@ (8002780 <ui+0x940>)
 8002540:	f7fe fc6f 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002544:	2101      	movs	r1, #1
 8002546:	2002      	movs	r0, #2
 8002548:	f7fe fcee 	bl	8000f28 <cursor_pos>
					 write_to_screen(" menu selector  ");
 800254c:	488d      	ldr	r0, [pc, #564]	@ (8002784 <ui+0x944>)
 800254e:	f7fe fc68 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 8002552:	4b8d      	ldr	r3, [pc, #564]	@ (8002788 <ui+0x948>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d11e      	bne.n	800259a <ui+0x75a>
						 menu = 2;
 800255c:	4b8b      	ldr	r3, [pc, #556]	@ (800278c <ui+0x94c>)
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8002562:	4b89      	ldr	r3, [pc, #548]	@ (8002788 <ui+0x948>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8002568:	4b89      	ldr	r3, [pc, #548]	@ (8002790 <ui+0x950>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
						 page = 1;
 800256e:	4b89      	ldr	r3, [pc, #548]	@ (8002794 <ui+0x954>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002574:	4b81      	ldr	r3, [pc, #516]	@ (800277c <ui+0x93c>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c'); // Turn cursor ON
 800257a:	2263      	movs	r2, #99	@ 0x63
 800257c:	2162      	movs	r1, #98	@ 0x62
 800257e:	200f      	movs	r0, #15
 8002580:	f7fe fb70 	bl	8000c64 <send_to_screen>
					 }
				break;
 8002584:	e009      	b.n	800259a <ui+0x75a>

				default: // Fallback for 'page' in menu 4
					page = 2;
 8002586:	4b83      	ldr	r3, [pc, #524]	@ (8002794 <ui+0x954>)
 8002588:	2202      	movs	r2, #2
 800258a:	701a      	strb	r2, [r3, #0]
					update = 1;
 800258c:	4b7b      	ldr	r3, [pc, #492]	@ (800277c <ui+0x93c>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
				break;
 8002592:	e003      	b.n	800259c <ui+0x75c>
				break;
 8002594:	bf00      	nop
 8002596:	f000 bd6c 	b.w	8003072 <ui+0x1232>
				break;
 800259a:	bf00      	nop
			}
		break;
 800259c:	f000 bd69 	b.w	8003072 <ui+0x1232>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 5: //well level settings (min/max well)
			switch(page){
 80025a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002794 <ui+0x954>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	f200 8131 	bhi.w	8002810 <ui+0x9d0>
 80025ae:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <ui+0x774>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025cd 	.word	0x080025cd
 80025b8:	0800261f 	.word	0x0800261f
 80025bc:	0800263d 	.word	0x0800263d
 80025c0:	0800265b 	.word	0x0800265b
 80025c4:	080026d7 	.word	0x080026d7
 80025c8:	080027c1 	.word	0x080027c1

				case 1: // Go back to settings selector
					cursor_pos(1, 1);
 80025cc:	2101      	movs	r1, #1
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7fe fcaa 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 80025d4:	486a      	ldr	r0, [pc, #424]	@ (8002780 <ui+0x940>)
 80025d6:	f7fe fc24 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 80025da:	2101      	movs	r1, #1
 80025dc:	2002      	movs	r0, #2
 80025de:	f7fe fca3 	bl	8000f28 <cursor_pos>
					 write_to_screen("setting selector");
 80025e2:	486d      	ldr	r0, [pc, #436]	@ (8002798 <ui+0x958>)
 80025e4:	f7fe fc1d 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 80025e8:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <ui+0x948>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	f040 8115 	bne.w	800281e <ui+0x9de>
						 menu = 3;
 80025f4:	4b65      	ldr	r3, [pc, #404]	@ (800278c <ui+0x94c>)
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80025fa:	4b63      	ldr	r3, [pc, #396]	@ (8002788 <ui+0x948>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8002600:	4b63      	ldr	r3, [pc, #396]	@ (8002790 <ui+0x950>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
						 page = 2; // Return to min/max well/limit page in settings
 8002606:	4b63      	ldr	r3, [pc, #396]	@ (8002794 <ui+0x954>)
 8002608:	2202      	movs	r2, #2
 800260a:	701a      	strb	r2, [r3, #0]
						 update = 1;
 800260c:	4b5b      	ldr	r3, [pc, #364]	@ (800277c <ui+0x93c>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c'); // Turn cursor ON
 8002612:	2263      	movs	r2, #99	@ 0x63
 8002614:	2162      	movs	r1, #98	@ 0x62
 8002616:	200f      	movs	r0, #15
 8002618:	f7fe fb24 	bl	8000c64 <send_to_screen>
					 }
				break;
 800261c:	e0ff      	b.n	800281e <ui+0x9de>

				case 2: // Intro page for well level settings
					cursor_pos(1, 1);
 800261e:	2101      	movs	r1, #1
 8002620:	2001      	movs	r0, #1
 8002622:	f7fe fc81 	bl	8000f28 <cursor_pos>
					 write_to_screen("Here you set the");
 8002626:	485d      	ldr	r0, [pc, #372]	@ (800279c <ui+0x95c>)
 8002628:	f7fe fbfb 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 800262c:	2101      	movs	r1, #1
 800262e:	2002      	movs	r0, #2
 8002630:	f7fe fc7a 	bl	8000f28 <cursor_pos>
					 write_to_screen("max and min    >");
 8002634:	485a      	ldr	r0, [pc, #360]	@ (80027a0 <ui+0x960>)
 8002636:	f7fe fbf4 	bl	8000e22 <write_to_screen>
				break;
 800263a:	e0fa      	b.n	8002832 <ui+0x9f2>

				case 3: // Continuation of intro page for well level settings
					cursor_pos(1, 1);
 800263c:	2101      	movs	r1, #1
 800263e:	2001      	movs	r0, #1
 8002640:	f7fe fc72 	bl	8000f28 <cursor_pos>
					 write_to_screen("  of the well.  ");
 8002644:	4857      	ldr	r0, [pc, #348]	@ (80027a4 <ui+0x964>)
 8002646:	f7fe fbec 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 800264a:	2101      	movs	r1, #1
 800264c:	2002      	movs	r0, #2
 800264e:	f7fe fc6b 	bl	8000f28 <cursor_pos>
					 write_to_screen("                ");
 8002652:	4855      	ldr	r0, [pc, #340]	@ (80027a8 <ui+0x968>)
 8002654:	f7fe fbe5 	bl	8000e22 <write_to_screen>
				break;
 8002658:	e0eb      	b.n	8002832 <ui+0x9f2>

				case 4: // Set Max well level
					cursor_pos(1, 1);
 800265a:	2101      	movs	r1, #1
 800265c:	2001      	movs	r0, #1
 800265e:	f7fe fc63 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Max level well ");
 8002662:	4852      	ldr	r0, [pc, #328]	@ (80027ac <ui+0x96c>)
 8002664:	f7fe fbdd 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002668:	2101      	movs	r1, #1
 800266a:	2002      	movs	r0, #2
 800266c:	f7fe fc5c 	bl	8000f28 <cursor_pos>
					 digit_to_screen(max_well_level);
 8002670:	4b4f      	ldr	r3, [pc, #316]	@ (80027b0 <ui+0x970>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b21b      	sxth	r3, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fbf4 	bl	8000e64 <digit_to_screen>
					 write_to_screen(" cm             ");
 800267c:	484d      	ldr	r0, [pc, #308]	@ (80027b4 <ui+0x974>)
 800267e:	f7fe fbd0 	bl	8000e22 <write_to_screen>
					 if(select >= 2){ // Increment max_well_level if 'select' button pressed
 8002682:	4b43      	ldr	r3, [pc, #268]	@ (8002790 <ui+0x950>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d90e      	bls.n	80026aa <ui+0x86a>
						 max_well_level++;
 800268c:	4b48      	ldr	r3, [pc, #288]	@ (80027b0 <ui+0x970>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b21b      	sxth	r3, r3
 8002692:	b29b      	uxth	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	b29b      	uxth	r3, r3
 8002698:	b21a      	sxth	r2, r3
 800269a:	4b45      	ldr	r3, [pc, #276]	@ (80027b0 <ui+0x970>)
 800269c:	801a      	strh	r2, [r3, #0]
						 select = 1; // Reset select
 800269e:	4b3c      	ldr	r3, [pc, #240]	@ (8002790 <ui+0x950>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80026a4:	4b35      	ldr	r3, [pc, #212]	@ (800277c <ui+0x93c>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){ // Decrement max_well_level if 'conf' button pressed
 80026aa:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <ui+0x948>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	f040 80b7 	bne.w	8002824 <ui+0x9e4>
						 max_well_level--;
 80026b6:	4b3e      	ldr	r3, [pc, #248]	@ (80027b0 <ui+0x970>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	4b3a      	ldr	r3, [pc, #232]	@ (80027b0 <ui+0x970>)
 80026c6:	801a      	strh	r2, [r3, #0]
						 conf = 0; // Reset conf
 80026c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <ui+0x948>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80026ce:	4b2b      	ldr	r3, [pc, #172]	@ (800277c <ui+0x93c>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
					 }
				break;
 80026d4:	e0a6      	b.n	8002824 <ui+0x9e4>

				case 5: // Set Min well level
					cursor_pos(1, 1);
 80026d6:	2101      	movs	r1, #1
 80026d8:	2001      	movs	r0, #1
 80026da:	f7fe fc25 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Min level well ");
 80026de:	4836      	ldr	r0, [pc, #216]	@ (80027b8 <ui+0x978>)
 80026e0:	f7fe fb9f 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 80026e4:	2101      	movs	r1, #1
 80026e6:	2002      	movs	r0, #2
 80026e8:	f7fe fc1e 	bl	8000f28 <cursor_pos>
					 digit_to_screen(min_well_level);
 80026ec:	4b33      	ldr	r3, [pc, #204]	@ (80027bc <ui+0x97c>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fbb6 	bl	8000e64 <digit_to_screen>
					 write_to_screen(" cm             ");
 80026f8:	482e      	ldr	r0, [pc, #184]	@ (80027b4 <ui+0x974>)
 80026fa:	f7fe fb92 	bl	8000e22 <write_to_screen>
					 if(select >= 2){ // Increment min_well_level
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <ui+0x950>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d90e      	bls.n	8002726 <ui+0x8e6>
						 min_well_level++;
 8002708:	4b2c      	ldr	r3, [pc, #176]	@ (80027bc <ui+0x97c>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b21b      	sxth	r3, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	b21a      	sxth	r2, r3
 8002716:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <ui+0x97c>)
 8002718:	801a      	strh	r2, [r3, #0]
						 select = 1;
 800271a:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <ui+0x950>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002720:	4b16      	ldr	r3, [pc, #88]	@ (800277c <ui+0x93c>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){ // Decrement min_well_level
 8002726:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <ui+0x948>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d17c      	bne.n	800282a <ui+0x9ea>
						 min_well_level--;
 8002730:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <ui+0x97c>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b21b      	sxth	r3, r3
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	b21a      	sxth	r2, r3
 800273e:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <ui+0x97c>)
 8002740:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <ui+0x948>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <ui+0x93c>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
					 }
				break;
 800274e:	e06c      	b.n	800282a <ui+0x9ea>
 8002750:	2000001c 	.word	0x2000001c
 8002754:	08009ee4 	.word	0x08009ee4
 8002758:	20000010 	.word	0x20000010
 800275c:	40490fd0 	.word	0x40490fd0
 8002760:	20003850 	.word	0x20003850
 8002764:	447a0000 	.word	0x447a0000
 8002768:	20000014 	.word	0x20000014
 800276c:	20000016 	.word	0x20000016
 8002770:	0800a0e0 	.word	0x0800a0e0
 8002774:	0800a0c8 	.word	0x0800a0c8
 8002778:	0800a0f4 	.word	0x0800a0f4
 800277c:	20003859 	.word	0x20003859
 8002780:	0800a03c 	.word	0x0800a03c
 8002784:	0800a050 	.word	0x0800a050
 8002788:	20003858 	.word	0x20003858
 800278c:	20000005 	.word	0x20000005
 8002790:	20000006 	.word	0x20000006
 8002794:	20000004 	.word	0x20000004
 8002798:	0800a108 	.word	0x0800a108
 800279c:	0800a11c 	.word	0x0800a11c
 80027a0:	0800a130 	.word	0x0800a130
 80027a4:	0800a144 	.word	0x0800a144
 80027a8:	0800a158 	.word	0x0800a158
 80027ac:	0800a16c 	.word	0x0800a16c
 80027b0:	20000008 	.word	0x20000008
 80027b4:	0800a0cc 	.word	0x0800a0cc
 80027b8:	0800a180 	.word	0x0800a180
 80027bc:	2000385a 	.word	0x2000385a

				case 6: // Go back to settings selector (duplicate of page 1)
					cursor_pos(1, 1);
 80027c0:	2101      	movs	r1, #1
 80027c2:	2001      	movs	r0, #1
 80027c4:	f7fe fbb0 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 80027c8:	48a8      	ldr	r0, [pc, #672]	@ (8002a6c <ui+0xc2c>)
 80027ca:	f7fe fb2a 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 80027ce:	2101      	movs	r1, #1
 80027d0:	2002      	movs	r0, #2
 80027d2:	f7fe fba9 	bl	8000f28 <cursor_pos>
					 write_to_screen("setting selector");
 80027d6:	48a6      	ldr	r0, [pc, #664]	@ (8002a70 <ui+0xc30>)
 80027d8:	f7fe fb23 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 80027dc:	4ba5      	ldr	r3, [pc, #660]	@ (8002a74 <ui+0xc34>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d124      	bne.n	8002830 <ui+0x9f0>
						 menu = 3;
 80027e6:	4ba4      	ldr	r3, [pc, #656]	@ (8002a78 <ui+0xc38>)
 80027e8:	2203      	movs	r2, #3
 80027ea:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80027ec:	4ba1      	ldr	r3, [pc, #644]	@ (8002a74 <ui+0xc34>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80027f2:	4ba2      	ldr	r3, [pc, #648]	@ (8002a7c <ui+0xc3c>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
						 page = 2;
 80027f8:	4ba1      	ldr	r3, [pc, #644]	@ (8002a80 <ui+0xc40>)
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80027fe:	4ba1      	ldr	r3, [pc, #644]	@ (8002a84 <ui+0xc44>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c'); // Turn cursor ON
 8002804:	2263      	movs	r2, #99	@ 0x63
 8002806:	2162      	movs	r1, #98	@ 0x62
 8002808:	200f      	movs	r0, #15
 800280a:	f7fe fa2b 	bl	8000c64 <send_to_screen>
					 }
				break;
 800280e:	e00f      	b.n	8002830 <ui+0x9f0>

				default: // Fallback for 'page' in menu 5
					page = 2;
 8002810:	4b9b      	ldr	r3, [pc, #620]	@ (8002a80 <ui+0xc40>)
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
					update = 1;
 8002816:	4b9b      	ldr	r3, [pc, #620]	@ (8002a84 <ui+0xc44>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
				break;
 800281c:	e009      	b.n	8002832 <ui+0x9f2>
				break;
 800281e:	bf00      	nop
 8002820:	f000 bc27 	b.w	8003072 <ui+0x1232>
				break;
 8002824:	bf00      	nop
 8002826:	f000 bc24 	b.w	8003072 <ui+0x1232>
				break;
 800282a:	bf00      	nop
 800282c:	f000 bc21 	b.w	8003072 <ui+0x1232>
				break;
 8002830:	bf00      	nop
		}
		break;
 8002832:	f000 bc1e 	b.w	8003072 <ui+0x1232>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 6: //limit level settings (max/min level for automation)
			switch(page){
 8002836:	4b92      	ldr	r3, [pc, #584]	@ (8002a80 <ui+0xc40>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	2b05      	cmp	r3, #5
 8002840:	f200 815e 	bhi.w	8002b00 <ui+0xcc0>
 8002844:	a201      	add	r2, pc, #4	@ (adr r2, 800284c <ui+0xa0c>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002865 	.word	0x08002865
 8002850:	080028b7 	.word	0x080028b7
 8002854:	080028d5 	.word	0x080028d5
 8002858:	080028f3 	.word	0x080028f3
 800285c:	080029bb 	.word	0x080029bb
 8002860:	08002ab1 	.word	0x08002ab1

				case 1: // Go back to settings selector
					cursor_pos(1, 1);
 8002864:	2101      	movs	r1, #1
 8002866:	2001      	movs	r0, #1
 8002868:	f7fe fb5e 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 800286c:	487f      	ldr	r0, [pc, #508]	@ (8002a6c <ui+0xc2c>)
 800286e:	f7fe fad8 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002872:	2101      	movs	r1, #1
 8002874:	2002      	movs	r0, #2
 8002876:	f7fe fb57 	bl	8000f28 <cursor_pos>
					 write_to_screen("setting selector");
 800287a:	487d      	ldr	r0, [pc, #500]	@ (8002a70 <ui+0xc30>)
 800287c:	f7fe fad1 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 8002880:	4b7c      	ldr	r3, [pc, #496]	@ (8002a74 <ui+0xc34>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	f040 8141 	bne.w	8002b0e <ui+0xcce>
						 menu = 3;
 800288c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a78 <ui+0xc38>)
 800288e:	2203      	movs	r2, #3
 8002890:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8002892:	4b78      	ldr	r3, [pc, #480]	@ (8002a74 <ui+0xc34>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8002898:	4b78      	ldr	r3, [pc, #480]	@ (8002a7c <ui+0xc3c>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
						 page = 2; // Return to min/max well/limit page in settings
 800289e:	4b78      	ldr	r3, [pc, #480]	@ (8002a80 <ui+0xc40>)
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80028a4:	4b77      	ldr	r3, [pc, #476]	@ (8002a84 <ui+0xc44>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c'); // Turn cursor ON
 80028aa:	2263      	movs	r2, #99	@ 0x63
 80028ac:	2162      	movs	r1, #98	@ 0x62
 80028ae:	200f      	movs	r0, #15
 80028b0:	f7fe f9d8 	bl	8000c64 <send_to_screen>
					 }
				break;
 80028b4:	e12b      	b.n	8002b0e <ui+0xcce>

				case 2: // Intro page for limit level settings
					cursor_pos(1, 1);
 80028b6:	2101      	movs	r1, #1
 80028b8:	2001      	movs	r0, #1
 80028ba:	f7fe fb35 	bl	8000f28 <cursor_pos>
					 write_to_screen("Here you set the");
 80028be:	4872      	ldr	r0, [pc, #456]	@ (8002a88 <ui+0xc48>)
 80028c0:	f7fe faaf 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 80028c4:	2101      	movs	r1, #1
 80028c6:	2002      	movs	r0, #2
 80028c8:	f7fe fb2e 	bl	8000f28 <cursor_pos>
					 write_to_screen("max and min    >");
 80028cc:	486f      	ldr	r0, [pc, #444]	@ (8002a8c <ui+0xc4c>)
 80028ce:	f7fe faa8 	bl	8000e22 <write_to_screen>
				break;
 80028d2:	e123      	b.n	8002b1c <ui+0xcdc>

				case 3: // Continuation of intro page for limit level settings
					cursor_pos(1, 1);
 80028d4:	2101      	movs	r1, #1
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7fe fb26 	bl	8000f28 <cursor_pos>
					 write_to_screen(" for the water  ");
 80028dc:	486c      	ldr	r0, [pc, #432]	@ (8002a90 <ui+0xc50>)
 80028de:	f7fe faa0 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 80028e2:	2101      	movs	r1, #1
 80028e4:	2002      	movs	r0, #2
 80028e6:	f7fe fb1f 	bl	8000f28 <cursor_pos>
					 write_to_screen(" level you want.");
 80028ea:	486a      	ldr	r0, [pc, #424]	@ (8002a94 <ui+0xc54>)
 80028ec:	f7fe fa99 	bl	8000e22 <write_to_screen>
				break;
 80028f0:	e114      	b.n	8002b1c <ui+0xcdc>

				case 4: // Set Max limit
					cursor_pos(1, 1);
 80028f2:	2101      	movs	r1, #1
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7fe fb17 	bl	8000f28 <cursor_pos>
					 write_to_screen("   Max limit    ");
 80028fa:	4867      	ldr	r0, [pc, #412]	@ (8002a98 <ui+0xc58>)
 80028fc:	f7fe fa91 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002900:	2101      	movs	r1, #1
 8002902:	2002      	movs	r0, #2
 8002904:	f7fe fb10 	bl	8000f28 <cursor_pos>
					 digit_to_screen(max_level);
 8002908:	4b64      	ldr	r3, [pc, #400]	@ (8002a9c <ui+0xc5c>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b21b      	sxth	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe faa8 	bl	8000e64 <digit_to_screen>
					 write_to_screen(" cm             ");
 8002914:	4862      	ldr	r0, [pc, #392]	@ (8002aa0 <ui+0xc60>)
 8002916:	f7fe fa84 	bl	8000e22 <write_to_screen>
					 if(select >= 2){
 800291a:	4b58      	ldr	r3, [pc, #352]	@ (8002a7c <ui+0xc3c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d921      	bls.n	8002968 <ui+0xb28>
						 max_level++;
 8002924:	4b5d      	ldr	r3, [pc, #372]	@ (8002a9c <ui+0xc5c>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b21b      	sxth	r3, r3
 800292a:	b29b      	uxth	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	b21a      	sxth	r2, r3
 8002932:	4b5a      	ldr	r3, [pc, #360]	@ (8002a9c <ui+0xc5c>)
 8002934:	801a      	strh	r2, [r3, #0]

						 // Cap max_level to prevent going too close to well top
						 if(max_level >= max_well_level - 5){
 8002936:	4b59      	ldr	r3, [pc, #356]	@ (8002a9c <ui+0xc5c>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b21b      	sxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	4b59      	ldr	r3, [pc, #356]	@ (8002aa4 <ui+0xc64>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b21b      	sxth	r3, r3
 8002944:	3b05      	subs	r3, #5
 8002946:	429a      	cmp	r2, r3
 8002948:	db08      	blt.n	800295c <ui+0xb1c>
							 max_level = max_well_level - 5;
 800294a:	4b56      	ldr	r3, [pc, #344]	@ (8002aa4 <ui+0xc64>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b21b      	sxth	r3, r3
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b05      	subs	r3, #5
 8002954:	b29b      	uxth	r3, r3
 8002956:	b21a      	sxth	r2, r3
 8002958:	4b50      	ldr	r3, [pc, #320]	@ (8002a9c <ui+0xc5c>)
 800295a:	801a      	strh	r2, [r3, #0]
						 }

						 select = 1;
 800295c:	4b47      	ldr	r3, [pc, #284]	@ (8002a7c <ui+0xc3c>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002962:	4b48      	ldr	r3, [pc, #288]	@ (8002a84 <ui+0xc44>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8002968:	4b42      	ldr	r3, [pc, #264]	@ (8002a74 <ui+0xc34>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	f040 80cf 	bne.w	8002b12 <ui+0xcd2>
						 max_level--;
 8002974:	4b49      	ldr	r3, [pc, #292]	@ (8002a9c <ui+0xc5c>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b21b      	sxth	r3, r3
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29b      	uxth	r3, r3
 8002980:	b21a      	sxth	r2, r3
 8002982:	4b46      	ldr	r3, [pc, #280]	@ (8002a9c <ui+0xc5c>)
 8002984:	801a      	strh	r2, [r3, #0]

						 // Cap max_level to prevent going below min_level + 10
						 if(max_level <= min_level + 10){
 8002986:	4b45      	ldr	r3, [pc, #276]	@ (8002a9c <ui+0xc5c>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b21b      	sxth	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	4b46      	ldr	r3, [pc, #280]	@ (8002aa8 <ui+0xc68>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b21b      	sxth	r3, r3
 8002994:	330a      	adds	r3, #10
 8002996:	429a      	cmp	r2, r3
 8002998:	dc08      	bgt.n	80029ac <ui+0xb6c>
							 max_level = min_level + 10;
 800299a:	4b43      	ldr	r3, [pc, #268]	@ (8002aa8 <ui+0xc68>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b21b      	sxth	r3, r3
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	330a      	adds	r3, #10
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	4b3c      	ldr	r3, [pc, #240]	@ (8002a9c <ui+0xc5c>)
 80029aa:	801a      	strh	r2, [r3, #0]
						 }

						 conf = 0;
 80029ac:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <ui+0xc34>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80029b2:	4b34      	ldr	r3, [pc, #208]	@ (8002a84 <ui+0xc44>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
					 }
				break;
 80029b8:	e0ab      	b.n	8002b12 <ui+0xcd2>

				case 5: // Set Min limit
					cursor_pos(1, 1);
 80029ba:	2101      	movs	r1, #1
 80029bc:	2001      	movs	r0, #1
 80029be:	f7fe fab3 	bl	8000f28 <cursor_pos>
					 write_to_screen("   Min limit    ");
 80029c2:	483a      	ldr	r0, [pc, #232]	@ (8002aac <ui+0xc6c>)
 80029c4:	f7fe fa2d 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 80029c8:	2101      	movs	r1, #1
 80029ca:	2002      	movs	r0, #2
 80029cc:	f7fe faac 	bl	8000f28 <cursor_pos>
					 digit_to_screen(min_level);
 80029d0:	4b35      	ldr	r3, [pc, #212]	@ (8002aa8 <ui+0xc68>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fa44 	bl	8000e64 <digit_to_screen>
					 write_to_screen(" cm             ");
 80029dc:	4830      	ldr	r0, [pc, #192]	@ (8002aa0 <ui+0xc60>)
 80029de:	f7fe fa20 	bl	8000e22 <write_to_screen>
					 if(select >= 2){
 80029e2:	4b26      	ldr	r3, [pc, #152]	@ (8002a7c <ui+0xc3c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d921      	bls.n	8002a30 <ui+0xbf0>
						 min_level++;
 80029ec:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa8 <ui+0xc68>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <ui+0xc68>)
 80029fc:	801a      	strh	r2, [r3, #0]

						 // Cap min_level to prevent going too close to max_level
						 if(min_level >= max_level - 10){
 80029fe:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <ui+0xc68>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b21b      	sxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <ui+0xc5c>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	3b0a      	subs	r3, #10
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	db08      	blt.n	8002a24 <ui+0xbe4>
							 min_level = max_level - 10;
 8002a12:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <ui+0xc5c>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b0a      	subs	r3, #10
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <ui+0xc68>)
 8002a22:	801a      	strh	r2, [r3, #0]
						 }

						 select = 1;
 8002a24:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <ui+0xc3c>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <ui+0xc44>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8002a30:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <ui+0xc34>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d16d      	bne.n	8002b16 <ui+0xcd6>
						 min_level--;
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <ui+0xc68>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b21b      	sxth	r3, r3
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <ui+0xc68>)
 8002a4a:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <ui+0xc34>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002a52:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <ui+0xc44>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]

						 // Cap min_level to prevent going below 5cm
						 if(min_level <= 5){
 8002a58:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <ui+0xc68>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	dc59      	bgt.n	8002b16 <ui+0xcd6>
							 min_level = 5;
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <ui+0xc68>)
 8002a64:	2205      	movs	r2, #5
 8002a66:	801a      	strh	r2, [r3, #0]
						 }
					 }
				break;
 8002a68:	e055      	b.n	8002b16 <ui+0xcd6>
 8002a6a:	bf00      	nop
 8002a6c:	0800a03c 	.word	0x0800a03c
 8002a70:	0800a108 	.word	0x0800a108
 8002a74:	20003858 	.word	0x20003858
 8002a78:	20000005 	.word	0x20000005
 8002a7c:	20000006 	.word	0x20000006
 8002a80:	20000004 	.word	0x20000004
 8002a84:	20003859 	.word	0x20003859
 8002a88:	0800a11c 	.word	0x0800a11c
 8002a8c:	0800a130 	.word	0x0800a130
 8002a90:	0800a194 	.word	0x0800a194
 8002a94:	0800a1a8 	.word	0x0800a1a8
 8002a98:	0800a1bc 	.word	0x0800a1bc
 8002a9c:	2000000a 	.word	0x2000000a
 8002aa0:	0800a0cc 	.word	0x0800a0cc
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	0800a1d0 	.word	0x0800a1d0

				case 6: // Go back to settings selector (duplicate of page 1)
					cursor_pos(1, 1);
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7fe fa38 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8002ab8:	48b9      	ldr	r0, [pc, #740]	@ (8002da0 <ui+0xf60>)
 8002aba:	f7fe f9b2 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002abe:	2101      	movs	r1, #1
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f7fe fa31 	bl	8000f28 <cursor_pos>
					 write_to_screen("setting selector");
 8002ac6:	48b7      	ldr	r0, [pc, #732]	@ (8002da4 <ui+0xf64>)
 8002ac8:	f7fe f9ab 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 8002acc:	4bb6      	ldr	r3, [pc, #728]	@ (8002da8 <ui+0xf68>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d121      	bne.n	8002b1a <ui+0xcda>
						 menu = 3;
 8002ad6:	4bb5      	ldr	r3, [pc, #724]	@ (8002dac <ui+0xf6c>)
 8002ad8:	2203      	movs	r2, #3
 8002ada:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8002adc:	4bb2      	ldr	r3, [pc, #712]	@ (8002da8 <ui+0xf68>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8002ae2:	4bb3      	ldr	r3, [pc, #716]	@ (8002db0 <ui+0xf70>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
						 page = 2;
 8002ae8:	4bb2      	ldr	r3, [pc, #712]	@ (8002db4 <ui+0xf74>)
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002aee:	4bb2      	ldr	r3, [pc, #712]	@ (8002db8 <ui+0xf78>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c'); // Turn cursor ON
 8002af4:	2263      	movs	r2, #99	@ 0x63
 8002af6:	2162      	movs	r1, #98	@ 0x62
 8002af8:	200f      	movs	r0, #15
 8002afa:	f7fe f8b3 	bl	8000c64 <send_to_screen>
					 }
				break;
 8002afe:	e00c      	b.n	8002b1a <ui+0xcda>

				default: // Fallback for 'page' in menu 6
					page = 2;
 8002b00:	4bac      	ldr	r3, [pc, #688]	@ (8002db4 <ui+0xf74>)
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
					update = 1;
 8002b06:	4bac      	ldr	r3, [pc, #688]	@ (8002db8 <ui+0xf78>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
				break;
 8002b0c:	e006      	b.n	8002b1c <ui+0xcdc>
				break;
 8002b0e:	bf00      	nop
 8002b10:	e2af      	b.n	8003072 <ui+0x1232>
				break;
 8002b12:	bf00      	nop
 8002b14:	e2ad      	b.n	8003072 <ui+0x1232>
				break;
 8002b16:	bf00      	nop
 8002b18:	e2ab      	b.n	8003072 <ui+0x1232>
				break;
 8002b1a:	bf00      	nop
		}
		break;
 8002b1c:	e2a9      	b.n	8003072 <ui+0x1232>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 7: //form selector (Cylinder/Cuboid)
			switch(page){
 8002b1e:	4ba5      	ldr	r3, [pc, #660]	@ (8002db4 <ui+0xf74>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	f200 80e4 	bhi.w	8002cf4 <ui+0xeb4>
 8002b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <ui+0xcf4>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b49 	.word	0x08002b49
 8002b38:	08002b91 	.word	0x08002b91
 8002b3c:	08002baf 	.word	0x08002baf
 8002b40:	08002bcd 	.word	0x08002bcd
 8002b44:	08002caf 	.word	0x08002caf

				case 1: // Go back to settings selector
					cursor_pos(1, 1);
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7fe f9ec 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8002b50:	4893      	ldr	r0, [pc, #588]	@ (8002da0 <ui+0xf60>)
 8002b52:	f7fe f966 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002b56:	2101      	movs	r1, #1
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f7fe f9e5 	bl	8000f28 <cursor_pos>
					 write_to_screen("setting selector");
 8002b5e:	4891      	ldr	r0, [pc, #580]	@ (8002da4 <ui+0xf64>)
 8002b60:	f7fe f95f 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 8002b64:	4b90      	ldr	r3, [pc, #576]	@ (8002da8 <ui+0xf68>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	f040 80c9 	bne.w	8002d02 <ui+0xec2>
						 menu = 3;
 8002b70:	4b8e      	ldr	r3, [pc, #568]	@ (8002dac <ui+0xf6c>)
 8002b72:	2203      	movs	r2, #3
 8002b74:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8002b76:	4b8c      	ldr	r3, [pc, #560]	@ (8002da8 <ui+0xf68>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8002b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8002db0 <ui+0xf70>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
						 page = 3; // Return to well form/dimensions page in settings
 8002b82:	4b8c      	ldr	r3, [pc, #560]	@ (8002db4 <ui+0xf74>)
 8002b84:	2203      	movs	r2, #3
 8002b86:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002b88:	4b8b      	ldr	r3, [pc, #556]	@ (8002db8 <ui+0xf78>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8002b8e:	e0b8      	b.n	8002d02 <ui+0xec2>

				case 2: // Intro page for form selector
					 cursor_pos(1, 1);
 8002b90:	2101      	movs	r1, #1
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7fe f9c8 	bl	8000f28 <cursor_pos>
					 write_to_screen("Here you select ");
 8002b98:	4888      	ldr	r0, [pc, #544]	@ (8002dbc <ui+0xf7c>)
 8002b9a:	f7fe f942 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7fe f9c1 	bl	8000f28 <cursor_pos>
					 write_to_screen("the form off   >");
 8002ba6:	4886      	ldr	r0, [pc, #536]	@ (8002dc0 <ui+0xf80>)
 8002ba8:	f7fe f93b 	bl	8000e22 <write_to_screen>
				break;
 8002bac:	e0ac      	b.n	8002d08 <ui+0xec8>

				case 3: // Continuation of intro page for form selector
					 cursor_pos(1, 1);
 8002bae:	2101      	movs	r1, #1
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7fe f9b9 	bl	8000f28 <cursor_pos>
					 write_to_screen("   the well.    ");
 8002bb6:	4883      	ldr	r0, [pc, #524]	@ (8002dc4 <ui+0xf84>)
 8002bb8:	f7fe f933 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f7fe f9b2 	bl	8000f28 <cursor_pos>
					 write_to_screen("                ");
 8002bc4:	4880      	ldr	r0, [pc, #512]	@ (8002dc8 <ui+0xf88>)
 8002bc6:	f7fe f92c 	bl	8000e22 <write_to_screen>
				break;
 8002bca:	e09d      	b.n	8002d08 <ui+0xec8>

				case 4: // Select Cylinder or Cuboid
					 cursor_pos(1, 1);
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7fe f9aa 	bl	8000f28 <cursor_pos>

					 if(strcmp(form, "cy") == 0){ // If form is Cylinder, show filled 'O'
 8002bd4:	4b7d      	ldr	r3, [pc, #500]	@ (8002dcc <ui+0xf8c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	497d      	ldr	r1, [pc, #500]	@ (8002dd0 <ui+0xf90>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd faf8 	bl	80001d0 <strcmp>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d108      	bne.n	8002bf8 <ui+0xdb8>
						 write_to_screen("   ");
 8002be6:	487b      	ldr	r0, [pc, #492]	@ (8002dd4 <ui+0xf94>)
 8002be8:	f7fe f91b 	bl	8000e22 <write_to_screen>
						 send_to_screen(0b11111111 ,'b', 'd'); // This byte might be a custom character for a filled circle/square
 8002bec:	2264      	movs	r2, #100	@ 0x64
 8002bee:	2162      	movs	r1, #98	@ 0x62
 8002bf0:	20ff      	movs	r0, #255	@ 0xff
 8002bf2:	f7fe f837 	bl	8000c64 <send_to_screen>
 8002bf6:	e002      	b.n	8002bfe <ui+0xdbe>
					 }
					 else{ // If form is not Cylinder, show empty 'O'
						 write_to_screen("   O");
 8002bf8:	4877      	ldr	r0, [pc, #476]	@ (8002dd8 <ui+0xf98>)
 8002bfa:	f7fe f912 	bl	8000e22 <write_to_screen>
					 }

					 write_to_screen(" cylinder       ");
 8002bfe:	4877      	ldr	r0, [pc, #476]	@ (8002ddc <ui+0xf9c>)
 8002c00:	f7fe f90f 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002c04:	2101      	movs	r1, #1
 8002c06:	2002      	movs	r0, #2
 8002c08:	f7fe f98e 	bl	8000f28 <cursor_pos>

					 if(strcmp(form, "cu") == 0){ // If form is Cuboid, show filled 'O'
 8002c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002dcc <ui+0xf8c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4973      	ldr	r1, [pc, #460]	@ (8002de0 <ui+0xfa0>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fadc 	bl	80001d0 <strcmp>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <ui+0xdf0>
						 write_to_screen("   ");
 8002c1e:	486d      	ldr	r0, [pc, #436]	@ (8002dd4 <ui+0xf94>)
 8002c20:	f7fe f8ff 	bl	8000e22 <write_to_screen>
						 send_to_screen(0b11111111 ,'b', 'd');
 8002c24:	2264      	movs	r2, #100	@ 0x64
 8002c26:	2162      	movs	r1, #98	@ 0x62
 8002c28:	20ff      	movs	r0, #255	@ 0xff
 8002c2a:	f7fe f81b 	bl	8000c64 <send_to_screen>
 8002c2e:	e002      	b.n	8002c36 <ui+0xdf6>
					 }
					 else{ // If form is not Cuboid, show empty 'O'
						 write_to_screen("   O");
 8002c30:	4869      	ldr	r0, [pc, #420]	@ (8002dd8 <ui+0xf98>)
 8002c32:	f7fe f8f6 	bl	8000e22 <write_to_screen>
					 }

					 write_to_screen(" cuboid         ");
 8002c36:	486b      	ldr	r0, [pc, #428]	@ (8002de4 <ui+0xfa4>)
 8002c38:	f7fe f8f3 	bl	8000e22 <write_to_screen>

					 switch(select){
 8002c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8002db0 <ui+0xf70>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d002      	beq.n	8002c4c <ui+0xe0c>
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d013      	beq.n	8002c72 <ui+0xe32>
 8002c4a:	e025      	b.n	8002c98 <ui+0xe58>
						case 1: // Select Cylinder
							 cursor_pos(1, 3); // Position cursor to indicate selection
 8002c4c:	2103      	movs	r1, #3
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7fe f96a 	bl	8000f28 <cursor_pos>
							 if(conf == 1){
 8002c54:	4b54      	ldr	r3, [pc, #336]	@ (8002da8 <ui+0xf68>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d123      	bne.n	8002ca6 <ui+0xe66>
								 conf = 0;
 8002c5e:	4b52      	ldr	r3, [pc, #328]	@ (8002da8 <ui+0xf68>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
								 form = "cy"; // Set form to cylinder
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <ui+0xf8c>)
 8002c66:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd0 <ui+0xf90>)
 8002c68:	601a      	str	r2, [r3, #0]
								 update = 1;
 8002c6a:	4b53      	ldr	r3, [pc, #332]	@ (8002db8 <ui+0xf78>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
							 }
						break;
 8002c70:	e019      	b.n	8002ca6 <ui+0xe66>

						case 2: // Select Cuboid
							 cursor_pos(2, 3); // Position cursor to indicate selection
 8002c72:	2103      	movs	r1, #3
 8002c74:	2002      	movs	r0, #2
 8002c76:	f7fe f957 	bl	8000f28 <cursor_pos>
							 if(conf == 1){
 8002c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002da8 <ui+0xf68>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d112      	bne.n	8002caa <ui+0xe6a>
								 conf = 0;
 8002c84:	4b48      	ldr	r3, [pc, #288]	@ (8002da8 <ui+0xf68>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
								 form = "cu"; // Set form to cuboid
 8002c8a:	4b50      	ldr	r3, [pc, #320]	@ (8002dcc <ui+0xf8c>)
 8002c8c:	4a54      	ldr	r2, [pc, #336]	@ (8002de0 <ui+0xfa0>)
 8002c8e:	601a      	str	r2, [r3, #0]
								 update = 1;
 8002c90:	4b49      	ldr	r3, [pc, #292]	@ (8002db8 <ui+0xf78>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
						 }
						 break;
 8002c96:	e008      	b.n	8002caa <ui+0xe6a>

						default: // Fallback for 'select'
							select = 1;
 8002c98:	4b45      	ldr	r3, [pc, #276]	@ (8002db0 <ui+0xf70>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
							update = 1;
 8002c9e:	4b46      	ldr	r3, [pc, #280]	@ (8002db8 <ui+0xf78>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
						break;
 8002ca4:	e002      	b.n	8002cac <ui+0xe6c>
						break;
 8002ca6:	bf00      	nop
 8002ca8:	e02e      	b.n	8002d08 <ui+0xec8>
						 break;
 8002caa:	bf00      	nop
					 }
				break;
 8002cac:	e02c      	b.n	8002d08 <ui+0xec8>

				case 5: // Go back to settings selector (duplicate of page 1)
					cursor_pos(1, 1);
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7fe f939 	bl	8000f28 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8002cb6:	483a      	ldr	r0, [pc, #232]	@ (8002da0 <ui+0xf60>)
 8002cb8:	f7fe f8b3 	bl	8000e22 <write_to_screen>
					 cursor_pos(2, 1);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f7fe f932 	bl	8000f28 <cursor_pos>
					 write_to_screen("setting selector");
 8002cc4:	4837      	ldr	r0, [pc, #220]	@ (8002da4 <ui+0xf64>)
 8002cc6:	f7fe f8ac 	bl	8000e22 <write_to_screen>
					 if(conf == 1){
 8002cca:	4b37      	ldr	r3, [pc, #220]	@ (8002da8 <ui+0xf68>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d118      	bne.n	8002d06 <ui+0xec6>
						 menu = 3;
 8002cd4:	4b35      	ldr	r3, [pc, #212]	@ (8002dac <ui+0xf6c>)
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8002cda:	4b33      	ldr	r3, [pc, #204]	@ (8002da8 <ui+0xf68>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8002ce0:	4b33      	ldr	r3, [pc, #204]	@ (8002db0 <ui+0xf70>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
						 page = 3;
 8002ce6:	4b33      	ldr	r3, [pc, #204]	@ (8002db4 <ui+0xf74>)
 8002ce8:	2203      	movs	r2, #3
 8002cea:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002cec:	4b32      	ldr	r3, [pc, #200]	@ (8002db8 <ui+0xf78>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8002cf2:	e008      	b.n	8002d06 <ui+0xec6>

				default: // Fallback for 'page' in menu 7
					page = 2;
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8002db4 <ui+0xf74>)
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	701a      	strb	r2, [r3, #0]
					update = 1;
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <ui+0xf78>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
				break;
 8002d00:	e002      	b.n	8002d08 <ui+0xec8>
				break;
 8002d02:	bf00      	nop
 8002d04:	e1b5      	b.n	8003072 <ui+0x1232>
				break;
 8002d06:	bf00      	nop
			}
			break;
 8002d08:	e1b3      	b.n	8003072 <ui+0x1232>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
			case 8: //dimensions selector
				switch(page){
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002db4 <ui+0xf74>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	f200 819a 	bhi.w	800304c <ui+0x120c>
 8002d18:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <ui+0xee0>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d39 	.word	0x08002d39
 8002d24:	08002d81 	.word	0x08002d81
 8002d28:	08002df1 	.word	0x08002df1
 8002d2c:	08002e0f 	.word	0x08002e0f
 8002d30:	08002f21 	.word	0x08002f21
 8002d34:	08002fed 	.word	0x08002fed

					case 1: // Go back to settings selector
						cursor_pos(1, 1);
 8002d38:	2101      	movs	r1, #1
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f7fe f8f4 	bl	8000f28 <cursor_pos>
						 write_to_screen(" Go back to the ");
 8002d40:	4817      	ldr	r0, [pc, #92]	@ (8002da0 <ui+0xf60>)
 8002d42:	f7fe f86e 	bl	8000e22 <write_to_screen>
						 cursor_pos(2, 1);
 8002d46:	2101      	movs	r1, #1
 8002d48:	2002      	movs	r0, #2
 8002d4a:	f7fe f8ed 	bl	8000f28 <cursor_pos>
						 write_to_screen("setting selector");
 8002d4e:	4815      	ldr	r0, [pc, #84]	@ (8002da4 <ui+0xf64>)
 8002d50:	f7fe f867 	bl	8000e22 <write_to_screen>
						 if(conf == 1){
 8002d54:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <ui+0xf68>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	f040 817d 	bne.w	800305a <ui+0x121a>
							 menu = 3;
 8002d60:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <ui+0xf6c>)
 8002d62:	2203      	movs	r2, #3
 8002d64:	701a      	strb	r2, [r3, #0]
							 conf = 0;
 8002d66:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <ui+0xf68>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
							 select = 1;
 8002d6c:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <ui+0xf70>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
							 page = 3; // Return to well form/dimensions page in settings
 8002d72:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <ui+0xf74>)
 8002d74:	2203      	movs	r2, #3
 8002d76:	701a      	strb	r2, [r3, #0]
							 update = 1;
 8002d78:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <ui+0xf78>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
						 }
					break;
 8002d7e:	e16c      	b.n	800305a <ui+0x121a>

					case 2: // Intro page for dimensions selector
						 cursor_pos(1, 1);
 8002d80:	2101      	movs	r1, #1
 8002d82:	2001      	movs	r0, #1
 8002d84:	f7fe f8d0 	bl	8000f28 <cursor_pos>
						 write_to_screen("Here you give   ");
 8002d88:	4817      	ldr	r0, [pc, #92]	@ (8002de8 <ui+0xfa8>)
 8002d8a:	f7fe f84a 	bl	8000e22 <write_to_screen>
						 cursor_pos(2, 1);
 8002d8e:	2101      	movs	r1, #1
 8002d90:	2002      	movs	r0, #2
 8002d92:	f7fe f8c9 	bl	8000f28 <cursor_pos>
						 write_to_screen("the dimensions >");
 8002d96:	4815      	ldr	r0, [pc, #84]	@ (8002dec <ui+0xfac>)
 8002d98:	f7fe f843 	bl	8000e22 <write_to_screen>
					break;
 8002d9c:	e164      	b.n	8003068 <ui+0x1228>
 8002d9e:	bf00      	nop
 8002da0:	0800a03c 	.word	0x0800a03c
 8002da4:	0800a108 	.word	0x0800a108
 8002da8:	20003858 	.word	0x20003858
 8002dac:	20000005 	.word	0x20000005
 8002db0:	20000006 	.word	0x20000006
 8002db4:	20000004 	.word	0x20000004
 8002db8:	20003859 	.word	0x20003859
 8002dbc:	0800a1e4 	.word	0x0800a1e4
 8002dc0:	0800a1f8 	.word	0x0800a1f8
 8002dc4:	0800a20c 	.word	0x0800a20c
 8002dc8:	0800a158 	.word	0x0800a158
 8002dcc:	2000001c 	.word	0x2000001c
 8002dd0:	08009ee4 	.word	0x08009ee4
 8002dd4:	0800a220 	.word	0x0800a220
 8002dd8:	0800a224 	.word	0x0800a224
 8002ddc:	0800a22c 	.word	0x0800a22c
 8002de0:	0800a240 	.word	0x0800a240
 8002de4:	0800a244 	.word	0x0800a244
 8002de8:	0800a258 	.word	0x0800a258
 8002dec:	0800a26c 	.word	0x0800a26c

					case 3: // Continuation of intro page for dimensions selector
						 cursor_pos(1, 1);
 8002df0:	2101      	movs	r1, #1
 8002df2:	2001      	movs	r0, #1
 8002df4:	f7fe f898 	bl	8000f28 <cursor_pos>
						 write_to_screen(" off the well.  ");
 8002df8:	48a0      	ldr	r0, [pc, #640]	@ (800307c <ui+0x123c>)
 8002dfa:	f7fe f812 	bl	8000e22 <write_to_screen>
						 cursor_pos(2, 1);
 8002dfe:	2101      	movs	r1, #1
 8002e00:	2002      	movs	r0, #2
 8002e02:	f7fe f891 	bl	8000f28 <cursor_pos>
						 write_to_screen("                ");
 8002e06:	489e      	ldr	r0, [pc, #632]	@ (8003080 <ui+0x1240>)
 8002e08:	f7fe f80b 	bl	8000e22 <write_to_screen>
					break;
 8002e0c:	e12c      	b.n	8003068 <ui+0x1228>

					case 4: // Set diameter (if cylinder) or X (if cuboid)
						if (strcmp(form, "cy") == 0) { // Cylinder
 8002e0e:	4b9d      	ldr	r3, [pc, #628]	@ (8003084 <ui+0x1244>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	499d      	ldr	r1, [pc, #628]	@ (8003088 <ui+0x1248>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd f9db 	bl	80001d0 <strcmp>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d145      	bne.n	8002eac <ui+0x106c>
							cursor_pos(1, 1);
 8002e20:	2101      	movs	r1, #1
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7fe f880 	bl	8000f28 <cursor_pos>
							write_to_screen("   diameter:    ");
 8002e28:	4898      	ldr	r0, [pc, #608]	@ (800308c <ui+0x124c>)
 8002e2a:	f7fd fffa 	bl	8000e22 <write_to_screen>
							cursor_pos(2, 1);
 8002e2e:	2101      	movs	r1, #1
 8002e30:	2002      	movs	r0, #2
 8002e32:	f7fe f879 	bl	8000f28 <cursor_pos>
							write_to_screen("   ");
 8002e36:	4896      	ldr	r0, [pc, #600]	@ (8003090 <ui+0x1250>)
 8002e38:	f7fd fff3 	bl	8000e22 <write_to_screen>
							digit_to_screen(diameter);
 8002e3c:	4b95      	ldr	r3, [pc, #596]	@ (8003094 <ui+0x1254>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e46:	ee17 0a90 	vmov	r0, s15
 8002e4a:	f7fe f80b 	bl	8000e64 <digit_to_screen>
							write_to_screen(" cm             ");
 8002e4e:	4892      	ldr	r0, [pc, #584]	@ (8003098 <ui+0x1258>)
 8002e50:	f7fd ffe7 	bl	8000e22 <write_to_screen>
							 if(select >= 2){ // Increment diameter
 8002e54:	4b91      	ldr	r3, [pc, #580]	@ (800309c <ui+0x125c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d90f      	bls.n	8002e7e <ui+0x103e>
								 diameter++;
 8002e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003094 <ui+0x1254>)
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e6c:	4b89      	ldr	r3, [pc, #548]	@ (8003094 <ui+0x1254>)
 8002e6e:	edc3 7a00 	vstr	s15, [r3]
								 select = 1;
 8002e72:	4b8a      	ldr	r3, [pc, #552]	@ (800309c <ui+0x125c>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002e78:	4b89      	ldr	r3, [pc, #548]	@ (80030a0 <ui+0x1260>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
							 }
							 if(conf == 1){ // Decrement diameter
 8002e7e:	4b89      	ldr	r3, [pc, #548]	@ (80030a4 <ui+0x1264>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	f040 80ea 	bne.w	800305e <ui+0x121e>
								 diameter--;
 8002e8a:	4b82      	ldr	r3, [pc, #520]	@ (8003094 <ui+0x1254>)
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e98:	4b7e      	ldr	r3, [pc, #504]	@ (8003094 <ui+0x1254>)
 8002e9a:	edc3 7a00 	vstr	s15, [r3]
								 conf = 0;
 8002e9e:	4b81      	ldr	r3, [pc, #516]	@ (80030a4 <ui+0x1264>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80030a0 <ui+0x1260>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
								 X--;
								 conf = 0;
								 update = 1;
							 }
						}
					break;
 8002eaa:	e0d8      	b.n	800305e <ui+0x121e>
							cursor_pos(1, 1);
 8002eac:	2101      	movs	r1, #1
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7fe f83a 	bl	8000f28 <cursor_pos>
							write_to_screen("X:              ");
 8002eb4:	487c      	ldr	r0, [pc, #496]	@ (80030a8 <ui+0x1268>)
 8002eb6:	f7fd ffb4 	bl	8000e22 <write_to_screen>
							cursor_pos(2, 1);
 8002eba:	2101      	movs	r1, #1
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	f7fe f833 	bl	8000f28 <cursor_pos>
							digit_to_screen(X);
 8002ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80030ac <ui+0x126c>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd ffcb 	bl	8000e64 <digit_to_screen>
							write_to_screen(" cm             ");
 8002ece:	4872      	ldr	r0, [pc, #456]	@ (8003098 <ui+0x1258>)
 8002ed0:	f7fd ffa7 	bl	8000e22 <write_to_screen>
							 if(select >= 2){ // Increment X
 8002ed4:	4b71      	ldr	r3, [pc, #452]	@ (800309c <ui+0x125c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d90c      	bls.n	8002ef8 <ui+0x10b8>
								 X++;
 8002ede:	4b73      	ldr	r3, [pc, #460]	@ (80030ac <ui+0x126c>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b70      	ldr	r3, [pc, #448]	@ (80030ac <ui+0x126c>)
 8002eea:	801a      	strh	r2, [r3, #0]
								 select = 1;
 8002eec:	4b6b      	ldr	r3, [pc, #428]	@ (800309c <ui+0x125c>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002ef2:	4b6b      	ldr	r3, [pc, #428]	@ (80030a0 <ui+0x1260>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
							 if(conf == 1){ // Decrement X
 8002ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80030a4 <ui+0x1264>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	f040 80ad 	bne.w	800305e <ui+0x121e>
								 X--;
 8002f04:	4b69      	ldr	r3, [pc, #420]	@ (80030ac <ui+0x126c>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	4b67      	ldr	r3, [pc, #412]	@ (80030ac <ui+0x126c>)
 8002f10:	801a      	strh	r2, [r3, #0]
								 conf = 0;
 8002f12:	4b64      	ldr	r3, [pc, #400]	@ (80030a4 <ui+0x1264>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002f18:	4b61      	ldr	r3, [pc, #388]	@ (80030a0 <ui+0x1260>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
					break;
 8002f1e:	e09e      	b.n	800305e <ui+0x121e>

					case 5: // If cylinder, this page is "Go back". If cuboid, this page is Y dimension.
						if (strcmp(form, "cy") == 0) { // Cylinder (only one dimension needed)
 8002f20:	4b58      	ldr	r3, [pc, #352]	@ (8003084 <ui+0x1244>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4958      	ldr	r1, [pc, #352]	@ (8003088 <ui+0x1248>)
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd f952 	bl	80001d0 <strcmp>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d123      	bne.n	8002f7a <ui+0x113a>
							 cursor_pos(1, 1);
 8002f32:	2101      	movs	r1, #1
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7fd fff7 	bl	8000f28 <cursor_pos>
							 write_to_screen(" Go back to the ");
 8002f3a:	485d      	ldr	r0, [pc, #372]	@ (80030b0 <ui+0x1270>)
 8002f3c:	f7fd ff71 	bl	8000e22 <write_to_screen>
							 cursor_pos(2, 1);
 8002f40:	2101      	movs	r1, #1
 8002f42:	2002      	movs	r0, #2
 8002f44:	f7fd fff0 	bl	8000f28 <cursor_pos>
							 write_to_screen("setting selector");
 8002f48:	485a      	ldr	r0, [pc, #360]	@ (80030b4 <ui+0x1274>)
 8002f4a:	f7fd ff6a 	bl	8000e22 <write_to_screen>
							 if(conf == 1){
 8002f4e:	4b55      	ldr	r3, [pc, #340]	@ (80030a4 <ui+0x1264>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	f040 8084 	bne.w	8003062 <ui+0x1222>
								 menu = 3;
 8002f5a:	4b57      	ldr	r3, [pc, #348]	@ (80030b8 <ui+0x1278>)
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8002f60:	4b50      	ldr	r3, [pc, #320]	@ (80030a4 <ui+0x1264>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8002f66:	4b4d      	ldr	r3, [pc, #308]	@ (800309c <ui+0x125c>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
								 page = 3; // Return to well form/dimensions page in settings
 8002f6c:	4b53      	ldr	r3, [pc, #332]	@ (80030bc <ui+0x127c>)
 8002f6e:	2203      	movs	r2, #3
 8002f70:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002f72:	4b4b      	ldr	r3, [pc, #300]	@ (80030a0 <ui+0x1260>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
								 Y--;
								 conf = 0;
								 update = 1;
							 }
						}
					break;
 8002f78:	e073      	b.n	8003062 <ui+0x1222>
							cursor_pos(1, 1);
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f7fd ffd3 	bl	8000f28 <cursor_pos>
							write_to_screen("Y:              ");
 8002f82:	484f      	ldr	r0, [pc, #316]	@ (80030c0 <ui+0x1280>)
 8002f84:	f7fd ff4d 	bl	8000e22 <write_to_screen>
							cursor_pos(2, 1);
 8002f88:	2101      	movs	r1, #1
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	f7fd ffcc 	bl	8000f28 <cursor_pos>
							digit_to_screen(Y);
 8002f90:	4b4c      	ldr	r3, [pc, #304]	@ (80030c4 <ui+0x1284>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd ff64 	bl	8000e64 <digit_to_screen>
							write_to_screen(" cm             ");
 8002f9c:	483e      	ldr	r0, [pc, #248]	@ (8003098 <ui+0x1258>)
 8002f9e:	f7fd ff40 	bl	8000e22 <write_to_screen>
							 if(select >= 2){ // Increment Y
 8002fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800309c <ui+0x125c>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d90c      	bls.n	8002fc6 <ui+0x1186>
								 Y++;
 8002fac:	4b45      	ldr	r3, [pc, #276]	@ (80030c4 <ui+0x1284>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	4b43      	ldr	r3, [pc, #268]	@ (80030c4 <ui+0x1284>)
 8002fb8:	801a      	strh	r2, [r3, #0]
								 select = 1;
 8002fba:	4b38      	ldr	r3, [pc, #224]	@ (800309c <ui+0x125c>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002fc0:	4b37      	ldr	r3, [pc, #220]	@ (80030a0 <ui+0x1260>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
							 if(conf == 1){ // Decrement Y
 8002fc6:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <ui+0x1264>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d148      	bne.n	8003062 <ui+0x1222>
								 Y--;
 8002fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80030c4 <ui+0x1284>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	4b3a      	ldr	r3, [pc, #232]	@ (80030c4 <ui+0x1284>)
 8002fdc:	801a      	strh	r2, [r3, #0]
								 conf = 0;
 8002fde:	4b31      	ldr	r3, [pc, #196]	@ (80030a4 <ui+0x1264>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80030a0 <ui+0x1260>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
					break;
 8002fea:	e03a      	b.n	8003062 <ui+0x1222>

					case 6: // This page is only reached for Cuboid, to "Go back"
						if (strcmp(form, "cy") == 0) {
 8002fec:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <ui+0x1244>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4925      	ldr	r1, [pc, #148]	@ (8003088 <ui+0x1248>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd f8ec 	bl	80001d0 <strcmp>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <ui+0x11c6>
							// If cylinder, page 5 is the "Go back" page, so page 6 should not be reached normally.
							// This seems like a slight logical inconsistency in page flow if only
							// 'page' increments from the button presses. This default needs careful checking.
							page = 5; // Direct to the "go back" page for cylinder
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80030bc <ui+0x127c>)
 8003000:	2205      	movs	r2, #5
 8003002:	701a      	strb	r2, [r3, #0]
								 select = 1;
								 page = 3; // Return to well form/dimensions page in settings
								 update = 1;
							 }
						}
					break;
 8003004:	e02f      	b.n	8003066 <ui+0x1226>
							 cursor_pos(1, 1);
 8003006:	2101      	movs	r1, #1
 8003008:	2001      	movs	r0, #1
 800300a:	f7fd ff8d 	bl	8000f28 <cursor_pos>
							 write_to_screen(" Go back to the ");
 800300e:	4828      	ldr	r0, [pc, #160]	@ (80030b0 <ui+0x1270>)
 8003010:	f7fd ff07 	bl	8000e22 <write_to_screen>
							 cursor_pos(2, 1);
 8003014:	2101      	movs	r1, #1
 8003016:	2002      	movs	r0, #2
 8003018:	f7fd ff86 	bl	8000f28 <cursor_pos>
							 write_to_screen("setting selector");
 800301c:	4825      	ldr	r0, [pc, #148]	@ (80030b4 <ui+0x1274>)
 800301e:	f7fd ff00 	bl	8000e22 <write_to_screen>
							 if(conf == 1){
 8003022:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <ui+0x1264>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d11c      	bne.n	8003066 <ui+0x1226>
								 menu = 3;
 800302c:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <ui+0x1278>)
 800302e:	2203      	movs	r2, #3
 8003030:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8003032:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <ui+0x1264>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8003038:	4b18      	ldr	r3, [pc, #96]	@ (800309c <ui+0x125c>)
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
								 page = 3; // Return to well form/dimensions page in settings
 800303e:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <ui+0x127c>)
 8003040:	2203      	movs	r2, #3
 8003042:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8003044:	4b16      	ldr	r3, [pc, #88]	@ (80030a0 <ui+0x1260>)
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
					break;
 800304a:	e00c      	b.n	8003066 <ui+0x1226>

					default: // Fallback for 'page' in menu 8
						page = 2;
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <ui+0x127c>)
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
						update = 1;
 8003052:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <ui+0x1260>)
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
					break;
 8003058:	e006      	b.n	8003068 <ui+0x1228>
					break;
 800305a:	bf00      	nop
 800305c:	e009      	b.n	8003072 <ui+0x1232>
					break;
 800305e:	bf00      	nop
 8003060:	e007      	b.n	8003072 <ui+0x1232>
					break;
 8003062:	bf00      	nop
 8003064:	e005      	b.n	8003072 <ui+0x1232>
					break;
 8003066:	bf00      	nop
				}
				break;
 8003068:	e003      	b.n	8003072 <ui+0x1232>

		default: // Fallback for 'menu'
			menu = 2; // Default to main menu selector
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <ui+0x1278>)
 800306c:	2202      	movs	r2, #2
 800306e:	701a      	strb	r2, [r3, #0]
		break;
 8003070:	bf00      	nop
	}
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	0800a280 	.word	0x0800a280
 8003080:	0800a158 	.word	0x0800a158
 8003084:	2000001c 	.word	0x2000001c
 8003088:	08009ee4 	.word	0x08009ee4
 800308c:	0800a294 	.word	0x0800a294
 8003090:	0800a220 	.word	0x0800a220
 8003094:	20000010 	.word	0x20000010
 8003098:	0800a0cc 	.word	0x0800a0cc
 800309c:	20000006 	.word	0x20000006
 80030a0:	20003859 	.word	0x20003859
 80030a4:	20003858 	.word	0x20003858
 80030a8:	0800a2a8 	.word	0x0800a2a8
 80030ac:	20000014 	.word	0x20000014
 80030b0:	0800a03c 	.word	0x0800a03c
 80030b4:	0800a108 	.word	0x0800a108
 80030b8:	20000005 	.word	0x20000005
 80030bc:	20000004 	.word	0x20000004
 80030c0:	0800a2bc 	.word	0x0800a2bc
 80030c4:	20000016 	.word	0x20000016

080030c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003100 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80030cc:	f7fe fea6 	bl	8001e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d0:	480c      	ldr	r0, [pc, #48]	@ (8003104 <LoopForever+0x6>)
  ldr r1, =_edata
 80030d2:	490d      	ldr	r1, [pc, #52]	@ (8003108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d4:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <LoopForever+0xe>)
  movs r3, #0
 80030d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d8:	e002      	b.n	80030e0 <LoopCopyDataInit>

080030da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030de:	3304      	adds	r3, #4

080030e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e4:	d3f9      	bcc.n	80030da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003114 <LoopForever+0x16>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ec:	e001      	b.n	80030f2 <LoopFillZerobss>

080030ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f0:	3204      	adds	r2, #4

080030f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f4:	d3fb      	bcc.n	80030ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030f6:	f004 fe67 	bl	8007dc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030fa:	f7fe f815 	bl	8001128 <main>

080030fe <LoopForever>:

LoopForever:
    b LoopForever
 80030fe:	e7fe      	b.n	80030fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003100:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003108:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800310c:	0800a68c 	.word	0x0800a68c
  ldr r2, =_sbss
 8003110:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003114:	200039ac 	.word	0x200039ac

08003118 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003118:	e7fe      	b.n	8003118 <ADC1_IRQHandler>
	...

0800311c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003120:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <HAL_Init+0x28>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <HAL_Init+0x28>)
 8003126:	f043 0310 	orr.w	r3, r3, #16
 800312a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312c:	2003      	movs	r0, #3
 800312e:	f000 f94f 	bl	80033d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003132:	200f      	movs	r0, #15
 8003134:	f000 f808 	bl	8003148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003138:	f7fe fc6c 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40022000 	.word	0x40022000

08003148 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003150:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_InitTick+0x54>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <HAL_InitTick+0x58>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800315e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f967 	bl	800343a <HAL_SYSTICK_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e00e      	b.n	8003194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b0f      	cmp	r3, #15
 800317a:	d80a      	bhi.n	8003192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800317c:	2200      	movs	r2, #0
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	f000 f92f 	bl	80033e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003188:	4a06      	ldr	r2, [pc, #24]	@ (80031a4 <HAL_InitTick+0x5c>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000024 	.word	0x20000024
 80031a4:	20000020 	.word	0x20000020

080031a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ac:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_IncTick+0x20>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_IncTick+0x24>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	4a04      	ldr	r2, [pc, #16]	@ (80031cc <HAL_IncTick+0x24>)
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000024 	.word	0x20000024
 80031cc:	2000385c 	.word	0x2000385c

080031d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80031d4:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <HAL_GetTick+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	2000385c 	.word	0x2000385c

080031e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f0:	f7ff ffee 	bl	80031d0 <HAL_GetTick>
 80031f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d005      	beq.n	800320e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_Delay+0x44>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800320e:	bf00      	nop
 8003210:	f7ff ffde 	bl	80031d0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d8f7      	bhi.n	8003210 <HAL_Delay+0x28>
  {
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000024 	.word	0x20000024

08003230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800325c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003262:	4a04      	ldr	r2, [pc, #16]	@ (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60d3      	str	r3, [r2, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	@ (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4907      	ldr	r1, [pc, #28]	@ (80032cc <__NVIC_EnableIRQ+0x38>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	db0a      	blt.n	80032fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	490c      	ldr	r1, [pc, #48]	@ (800331c <__NVIC_SetPriority+0x4c>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	0112      	lsls	r2, r2, #4
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	440b      	add	r3, r1
 80032f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f8:	e00a      	b.n	8003310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4908      	ldr	r1, [pc, #32]	@ (8003320 <__NVIC_SetPriority+0x50>)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3b04      	subs	r3, #4
 8003308:	0112      	lsls	r2, r2, #4
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	440b      	add	r3, r1
 800330e:	761a      	strb	r2, [r3, #24]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000e100 	.word	0xe000e100
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	@ 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f1c3 0307 	rsb	r3, r3, #7
 800333e:	2b04      	cmp	r3, #4
 8003340:	bf28      	it	cs
 8003342:	2304      	movcs	r3, #4
 8003344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3304      	adds	r3, #4
 800334a:	2b06      	cmp	r3, #6
 800334c:	d902      	bls.n	8003354 <NVIC_EncodePriority+0x30>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3b03      	subs	r3, #3
 8003352:	e000      	b.n	8003356 <NVIC_EncodePriority+0x32>
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	401a      	ands	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800336c:	f04f 31ff 	mov.w	r1, #4294967295
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43d9      	mvns	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	4313      	orrs	r3, r2
         );
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	@ 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800339c:	d301      	bcc.n	80033a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339e:	2301      	movs	r3, #1
 80033a0:	e00f      	b.n	80033c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033a2:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <SysTick_Config+0x40>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033aa:	210f      	movs	r1, #15
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	f7ff ff8e 	bl	80032d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <SysTick_Config+0x40>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ba:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <SysTick_Config+0x40>)
 80033bc:	2207      	movs	r2, #7
 80033be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000e010 	.word	0xe000e010

080033d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ff29 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f8:	f7ff ff3e 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f7ff ff8e 	bl	8003324 <NVIC_EncodePriority>
 8003408:	4602      	mov	r2, r0
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff5d 	bl	80032d0 <__NVIC_SetPriority>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff31 	bl	8003294 <__NVIC_EnableIRQ>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffa2 	bl	800338c <SysTick_Config>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e037      	b.n	80034d8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800347e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003482:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800348c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f97e 	bl	80037bc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_DMA_Start_IT+0x20>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e04a      	b.n	8003596 <HAL_DMA_Start_IT+0xb6>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800350e:	2b01      	cmp	r3, #1
 8003510:	d13a      	bne.n	8003588 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f912 	bl	8003760 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 020e 	orr.w	r2, r2, #14
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e00f      	b.n	8003576 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 020a 	orr.w	r2, r2, #10
 8003564:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0204 	bic.w	r2, r2, #4
 8003574:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e005      	b.n	8003594 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003594:	7dfb      	ldrb	r3, [r7, #23]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d005      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2204      	movs	r2, #4
 80035b8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e027      	b.n	8003610 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 020e 	bic.w	r2, r2, #14
 80035ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
    }
  }
  return status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2204      	movs	r2, #4
 8003638:	409a      	lsls	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d024      	beq.n	800368c <HAL_DMA_IRQHandler+0x72>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01f      	beq.n	800368c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0204 	bic.w	r2, r2, #4
 8003668:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003672:	2104      	movs	r1, #4
 8003674:	fa01 f202 	lsl.w	r2, r1, r2
 8003678:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d06a      	beq.n	8003758 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800368a:	e065      	b.n	8003758 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	2202      	movs	r2, #2
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02c      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdc>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d027      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 020a 	bic.w	r2, r2, #10
 80036c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	2102      	movs	r1, #2
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d035      	beq.n	8003758 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036f4:	e030      	b.n	8003758 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2208      	movs	r2, #8
 80036fc:	409a      	lsls	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_DMA_IRQHandler+0x13e>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d023      	beq.n	8003758 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 020e 	bic.w	r2, r2, #14
 800371e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
    }
  }
}
 8003756:	e7ff      	b.n	8003758 <HAL_DMA_IRQHandler+0x13e>
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b10      	cmp	r3, #16
 800378c:	d108      	bne.n	80037a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800379e:	e007      	b.n	80037b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	60da      	str	r2, [r3, #12]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <DMA_CalcBaseAndBitshift+0x34>)
 80037cc:	4413      	add	r3, r2
 80037ce:	4a09      	ldr	r2, [pc, #36]	@ (80037f4 <DMA_CalcBaseAndBitshift+0x38>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a06      	ldr	r2, [pc, #24]	@ (80037f8 <DMA_CalcBaseAndBitshift+0x3c>)
 80037e0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	bffdfff8 	.word	0xbffdfff8
 80037f4:	cccccccd 	.word	0xcccccccd
 80037f8:	40020000 	.word	0x40020000

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380a:	e14e      	b.n	8003aaa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2101      	movs	r1, #1
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8140 	beq.w	8003aa4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d005      	beq.n	800383c <HAL_GPIO_Init+0x40>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d130      	bne.n	800389e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4013      	ands	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003872:	2201      	movs	r2, #1
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 0201 	and.w	r2, r3, #1
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d017      	beq.n	80038da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2203      	movs	r2, #3
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d123      	bne.n	800392e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	220f      	movs	r2, #15
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	08da      	lsrs	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3208      	adds	r2, #8
 8003928:	6939      	ldr	r1, [r7, #16]
 800392a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0203 	and.w	r2, r3, #3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 809a 	beq.w	8003aa4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003970:	4b55      	ldr	r3, [pc, #340]	@ (8003ac8 <HAL_GPIO_Init+0x2cc>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	4a54      	ldr	r2, [pc, #336]	@ (8003ac8 <HAL_GPIO_Init+0x2cc>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6193      	str	r3, [r2, #24]
 800397c:	4b52      	ldr	r3, [pc, #328]	@ (8003ac8 <HAL_GPIO_Init+0x2cc>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003988:	4a50      	ldr	r2, [pc, #320]	@ (8003acc <HAL_GPIO_Init+0x2d0>)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	3302      	adds	r3, #2
 8003990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	220f      	movs	r2, #15
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039b2:	d013      	beq.n	80039dc <HAL_GPIO_Init+0x1e0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a46      	ldr	r2, [pc, #280]	@ (8003ad0 <HAL_GPIO_Init+0x2d4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00d      	beq.n	80039d8 <HAL_GPIO_Init+0x1dc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a45      	ldr	r2, [pc, #276]	@ (8003ad4 <HAL_GPIO_Init+0x2d8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <HAL_GPIO_Init+0x1d8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a44      	ldr	r2, [pc, #272]	@ (8003ad8 <HAL_GPIO_Init+0x2dc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_GPIO_Init+0x1d4>
 80039cc:	2303      	movs	r3, #3
 80039ce:	e006      	b.n	80039de <HAL_GPIO_Init+0x1e2>
 80039d0:	2305      	movs	r3, #5
 80039d2:	e004      	b.n	80039de <HAL_GPIO_Init+0x1e2>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e002      	b.n	80039de <HAL_GPIO_Init+0x1e2>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_GPIO_Init+0x1e2>
 80039dc:	2300      	movs	r3, #0
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	f002 0203 	and.w	r2, r2, #3
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	4093      	lsls	r3, r2
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039ee:	4937      	ldr	r1, [pc, #220]	@ (8003acc <HAL_GPIO_Init+0x2d0>)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fc:	4b37      	ldr	r3, [pc, #220]	@ (8003adc <HAL_GPIO_Init+0x2e0>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a20:	4a2e      	ldr	r2, [pc, #184]	@ (8003adc <HAL_GPIO_Init+0x2e0>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a26:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <HAL_GPIO_Init+0x2e0>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a4a:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <HAL_GPIO_Init+0x2e0>)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a50:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <HAL_GPIO_Init+0x2e0>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a74:	4a19      	ldr	r2, [pc, #100]	@ (8003adc <HAL_GPIO_Init+0x2e0>)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7a:	4b18      	ldr	r3, [pc, #96]	@ (8003adc <HAL_GPIO_Init+0x2e0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8003adc <HAL_GPIO_Init+0x2e0>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f47f aea9 	bne.w	800380c <HAL_GPIO_Init+0x10>
  }
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	48000400 	.word	0x48000400
 8003ad4:	48000800 	.word	0x48000800
 8003ad8:	48000c00 	.word	0x48000c00
 8003adc:	40010400 	.word	0x40010400

08003ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e001      	b.n	8003b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b20:	787b      	ldrb	r3, [r7, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b2c:	e002      	b.n	8003b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b4a:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d006      	beq.n	8003b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b56:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fdd6 	bl	8001710 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40010400 	.word	0x40010400

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f000 bff4 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 816d 	beq.w	8003e86 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bac:	4bb4      	ldr	r3, [pc, #720]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d00c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bb8:	4bb1      	ldr	r3, [pc, #708]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d157      	bne.n	8003c74 <HAL_RCC_OscConfig+0x104>
 8003bc4:	4bae      	ldr	r3, [pc, #696]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d150      	bne.n	8003c74 <HAL_RCC_OscConfig+0x104>
 8003bd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bd6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003be6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bf2:	d802      	bhi.n	8003bfa <HAL_RCC_OscConfig+0x8a>
 8003bf4:	4ba2      	ldr	r3, [pc, #648]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0xb6>
 8003bfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bfe:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003c0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c12:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003c16:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003c22:	4b97      	ldr	r3, [pc, #604]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c2a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003c2e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003c32:	fa92 f2a2 	rbit	r2, r2
 8003c36:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003c3a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f002 021f 	and.w	r2, r2, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8114 	beq.w	8003e84 <HAL_RCC_OscConfig+0x314>
 8003c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 810b 	bne.w	8003e84 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f000 bf85 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c84:	d106      	bne.n	8003c94 <HAL_RCC_OscConfig+0x124>
 8003c86:	4b7e      	ldr	r3, [pc, #504]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e036      	b.n	8003d02 <HAL_RCC_OscConfig+0x192>
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10c      	bne.n	8003cbe <HAL_RCC_OscConfig+0x14e>
 8003ca4:	4b76      	ldr	r3, [pc, #472]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a75      	ldr	r2, [pc, #468]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b73      	ldr	r3, [pc, #460]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a72      	ldr	r2, [pc, #456]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	e021      	b.n	8003d02 <HAL_RCC_OscConfig+0x192>
 8003cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cce:	d10c      	bne.n	8003cea <HAL_RCC_OscConfig+0x17a>
 8003cd0:	4b6b      	ldr	r3, [pc, #428]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b68      	ldr	r3, [pc, #416]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a67      	ldr	r2, [pc, #412]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	e00b      	b.n	8003d02 <HAL_RCC_OscConfig+0x192>
 8003cea:	4b65      	ldr	r3, [pc, #404]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a64      	ldr	r2, [pc, #400]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b62      	ldr	r3, [pc, #392]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a61      	ldr	r2, [pc, #388]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d00:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d02:	4b5f      	ldr	r3, [pc, #380]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	f023 020f 	bic.w	r2, r3, #15
 8003d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	495a      	ldr	r1, [pc, #360]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d054      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7ff fa50 	bl	80031d0 <HAL_GetTick>
 8003d30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d36:	f7ff fa4b 	bl	80031d0 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	@ 0x64
 8003d44:	d902      	bls.n	8003d4c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	f000 bf19 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>
 8003d4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d50:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003d60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d6c:	d802      	bhi.n	8003d74 <HAL_RCC_OscConfig+0x204>
 8003d6e:	4b44      	ldr	r3, [pc, #272]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	e015      	b.n	8003da0 <HAL_RCC_OscConfig+0x230>
 8003d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d78:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003d88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d8c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003d90:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003d9c:	4b38      	ldr	r3, [pc, #224]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003da4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003da8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003dac:	fa92 f2a2 	rbit	r2, r2
 8003db0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003db4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f042 0220 	orr.w	r2, r2, #32
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f002 021f 	and.w	r2, r2, #31
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f202 	lsl.w	r2, r1, r2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0b0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1c6>
 8003dd4:	e057      	b.n	8003e86 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7ff f9fb 	bl	80031d0 <HAL_GetTick>
 8003dda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de0:	f7ff f9f6 	bl	80031d0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b64      	cmp	r3, #100	@ 0x64
 8003dee:	d902      	bls.n	8003df6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	f000 bec4 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>
 8003df6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dfa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003e0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e16:	d802      	bhi.n	8003e1e <HAL_RCC_OscConfig+0x2ae>
 8003e18:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	e015      	b.n	8003e4a <HAL_RCC_OscConfig+0x2da>
 8003e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e22:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e36:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e3a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e46:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <HAL_RCC_OscConfig+0x310>)
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e4e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003e52:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e56:	fa92 f2a2 	rbit	r2, r2
 8003e5a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003e5e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003e62:	fab2 f282 	clz	r2, r2
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	f042 0220 	orr.w	r2, r2, #32
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f002 021f 	and.w	r2, r2, #31
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1b0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x270>
 8003e7e:	e002      	b.n	8003e86 <HAL_RCC_OscConfig+0x316>
 8003e80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 816c 	beq.w	8004174 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e9c:	4bcc      	ldr	r3, [pc, #816]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ea8:	4bc9      	ldr	r3, [pc, #804]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d16d      	bne.n	8003f90 <HAL_RCC_OscConfig+0x420>
 8003eb4:	4bc6      	ldr	r3, [pc, #792]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d167      	bne.n	8003f90 <HAL_RCC_OscConfig+0x420>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003ed2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ede:	d802      	bhi.n	8003ee6 <HAL_RCC_OscConfig+0x376>
 8003ee0:	4bbb      	ldr	r3, [pc, #748]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	e013      	b.n	8003f0e <HAL_RCC_OscConfig+0x39e>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003ef8:	2302      	movs	r3, #2
 8003efa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003efe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003f0a:	4bb1      	ldr	r3, [pc, #708]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003f14:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003f18:	fa92 f2a2 	rbit	r2, r2
 8003f1c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003f20:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	f042 0220 	orr.w	r2, r2, #32
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	f002 021f 	and.w	r2, r2, #31
 8003f34:	2101      	movs	r1, #1
 8003f36:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCC_OscConfig+0x3e6>
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d002      	beq.n	8003f56 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f000 be14 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f56:	4b9e      	ldr	r3, [pc, #632]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	21f8      	movs	r1, #248	@ 0xf8
 8003f6c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003f74:	fa91 f1a1 	rbit	r1, r1
 8003f78:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003f7c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003f80:	fab1 f181 	clz	r1, r1
 8003f84:	b2c9      	uxtb	r1, r1
 8003f86:	408b      	lsls	r3, r1
 8003f88:	4991      	ldr	r1, [pc, #580]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	e0f1      	b.n	8004174 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8083 	beq.w	80040a8 <HAL_RCC_OscConfig+0x538>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003fac:	fa93 f3a3 	rbit	r3, r3
 8003fb0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003fb4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fc2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2301      	movs	r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7ff f8ff 	bl	80031d0 <HAL_GetTick>
 8003fd2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7ff f8fa 	bl	80031d0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d902      	bls.n	8003fee <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	f000 bdc8 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004000:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b3f      	cmp	r3, #63	@ 0x3f
 800400c:	d802      	bhi.n	8004014 <HAL_RCC_OscConfig+0x4a4>
 800400e:	4b70      	ldr	r3, [pc, #448]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	e013      	b.n	800403c <HAL_RCC_OscConfig+0x4cc>
 8004014:	2302      	movs	r3, #2
 8004016:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004026:	2302      	movs	r3, #2
 8004028:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800402c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004038:	4b65      	ldr	r3, [pc, #404]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	2202      	movs	r2, #2
 800403e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004042:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004046:	fa92 f2a2 	rbit	r2, r2
 800404a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800404e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004052:	fab2 f282 	clz	r2, r2
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	f042 0220 	orr.w	r2, r2, #32
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	f002 021f 	and.w	r2, r2, #31
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f202 	lsl.w	r2, r1, r2
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0b4      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406e:	4b58      	ldr	r3, [pc, #352]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	21f8      	movs	r1, #248	@ 0xf8
 8004084:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800408c:	fa91 f1a1 	rbit	r1, r1
 8004090:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004094:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004098:	fab1 f181 	clz	r1, r1
 800409c:	b2c9      	uxtb	r1, r1
 800409e:	408b      	lsls	r3, r1
 80040a0:	494b      	ldr	r1, [pc, #300]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
 80040a6:	e065      	b.n	8004174 <HAL_RCC_OscConfig+0x604>
 80040a8:	2301      	movs	r3, #1
 80040aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80040ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7ff f87c 	bl	80031d0 <HAL_GetTick>
 80040d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040de:	f7ff f877 	bl	80031d0 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	f000 bd45 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>
 80040f4:	2302      	movs	r3, #2
 80040f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80040fe:	fa93 f3a3 	rbit	r3, r3
 8004102:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004106:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b3f      	cmp	r3, #63	@ 0x3f
 8004112:	d802      	bhi.n	800411a <HAL_RCC_OscConfig+0x5aa>
 8004114:	4b2e      	ldr	r3, [pc, #184]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	e013      	b.n	8004142 <HAL_RCC_OscConfig+0x5d2>
 800411a:	2302      	movs	r3, #2
 800411c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800412c:	2302      	movs	r3, #2
 800412e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004132:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_RCC_OscConfig+0x660>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	2202      	movs	r2, #2
 8004144:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004148:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800414c:	fa92 f2a2 	rbit	r2, r2
 8004150:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004154:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004158:	fab2 f282 	clz	r2, r2
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	f042 0220 	orr.w	r2, r2, #32
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	f002 021f 	and.w	r2, r2, #31
 8004168:	2101      	movs	r1, #1
 800416a:	fa01 f202 	lsl.w	r2, r1, r2
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1b4      	bne.n	80040de <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004178:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8115 	beq.w	80043b4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d07e      	beq.n	8004298 <HAL_RCC_OscConfig+0x728>
 800419a:	2301      	movs	r3, #1
 800419c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80041ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCC_OscConfig+0x664>)
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	2301      	movs	r3, #1
 80041c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c4:	f7ff f804 	bl	80031d0 <HAL_GetTick>
 80041c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041cc:	e00f      	b.n	80041ee <HAL_RCC_OscConfig+0x67e>
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fe fffa 	bl	80031d0 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d902      	bls.n	80041ee <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	f000 bcc8 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>
 80041ee:	2302      	movs	r3, #2
 80041f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004204:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004208:	2202      	movs	r2, #2
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004210:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	fa93 f2a3 	rbit	r2, r3
 800421a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800422c:	2202      	movs	r2, #2
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	fa93 f2a3 	rbit	r2, r3
 800423e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004242:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004246:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004248:	4bb0      	ldr	r3, [pc, #704]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 800424a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800424c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004250:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004254:	2102      	movs	r1, #2
 8004256:	6019      	str	r1, [r3, #0]
 8004258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800425c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	fa93 f1a3 	rbit	r1, r3
 8004266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800426e:	6019      	str	r1, [r3, #0]
  return result;
 8004270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004274:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0a0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x668>
 8004296:	e08d      	b.n	80043b4 <HAL_RCC_OscConfig+0x844>
 8004298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fa93 f2a3 	rbit	r2, r3
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042ba:	601a      	str	r2, [r3, #0]
  return result;
 80042bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b90      	ldr	r3, [pc, #576]	@ (8004510 <HAL_RCC_OscConfig+0x9a0>)
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	461a      	mov	r2, r3
 80042d6:	2300      	movs	r3, #0
 80042d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042da:	f7fe ff79 	bl	80031d0 <HAL_GetTick>
 80042de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e4:	f7fe ff74 	bl	80031d0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d902      	bls.n	80042fa <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	f000 bc42 	b.w	8004b7e <HAL_RCC_OscConfig+0x100e>
 80042fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004302:	2202      	movs	r2, #2
 8004304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	fa93 f2a3 	rbit	r2, r3
 8004314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004318:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004322:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004326:	2202      	movs	r2, #2
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	fa93 f2a3 	rbit	r2, r3
 8004338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004346:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800434a:	2202      	movs	r2, #2
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004352:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	fa93 f2a3 	rbit	r2, r3
 800435c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004360:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004364:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004366:	4b69      	ldr	r3, [pc, #420]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 8004368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800436a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004372:	2102      	movs	r1, #2
 8004374:	6019      	str	r1, [r3, #0]
 8004376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	fa93 f1a3 	rbit	r1, r3
 8004384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004388:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800438c:	6019      	str	r1, [r3, #0]
  return result;
 800438e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004392:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d197      	bne.n	80042e4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 819e 	beq.w	8004706 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d0:	4b4e      	ldr	r3, [pc, #312]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043dc:	4b4b      	ldr	r3, [pc, #300]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	4a4a      	ldr	r2, [pc, #296]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	61d3      	str	r3, [r2, #28]
 80043e8:	4b48      	ldr	r3, [pc, #288]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80043f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004402:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b42      	ldr	r3, [pc, #264]	@ (8004514 <HAL_RCC_OscConfig+0x9a4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d11a      	bne.n	800444c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004416:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <HAL_RCC_OscConfig+0x9a4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a3e      	ldr	r2, [pc, #248]	@ (8004514 <HAL_RCC_OscConfig+0x9a4>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7fe fed5 	bl	80031d0 <HAL_GetTick>
 8004426:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	e009      	b.n	8004440 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442c:	f7fe fed0 	bl	80031d0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b64      	cmp	r3, #100	@ 0x64
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e39e      	b.n	8004b7e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	4b34      	ldr	r3, [pc, #208]	@ (8004514 <HAL_RCC_OscConfig+0x9a4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ef      	beq.n	800442c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800444c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004450:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x8fa>
 800445c:	4b2b      	ldr	r3, [pc, #172]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	4a2a      	ldr	r2, [pc, #168]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6213      	str	r3, [r2, #32]
 8004468:	e035      	b.n	80044d6 <HAL_RCC_OscConfig+0x966>
 800446a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x924>
 800447a:	4b24      	ldr	r3, [pc, #144]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4a23      	ldr	r2, [pc, #140]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6213      	str	r3, [r2, #32]
 8004486:	4b21      	ldr	r3, [pc, #132]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	4a20      	ldr	r2, [pc, #128]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	6213      	str	r3, [r2, #32]
 8004492:	e020      	b.n	80044d6 <HAL_RCC_OscConfig+0x966>
 8004494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004498:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d10c      	bne.n	80044be <HAL_RCC_OscConfig+0x94e>
 80044a4:	4b19      	ldr	r3, [pc, #100]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4a18      	ldr	r2, [pc, #96]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80044aa:	f043 0304 	orr.w	r3, r3, #4
 80044ae:	6213      	str	r3, [r2, #32]
 80044b0:	4b16      	ldr	r3, [pc, #88]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	4a15      	ldr	r2, [pc, #84]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6213      	str	r3, [r2, #32]
 80044bc:	e00b      	b.n	80044d6 <HAL_RCC_OscConfig+0x966>
 80044be:	4b13      	ldr	r3, [pc, #76]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	4a12      	ldr	r2, [pc, #72]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	6213      	str	r3, [r2, #32]
 80044ca:	4b10      	ldr	r3, [pc, #64]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	4a0f      	ldr	r2, [pc, #60]	@ (800450c <HAL_RCC_OscConfig+0x99c>)
 80044d0:	f023 0304 	bic.w	r3, r3, #4
 80044d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8087 	beq.w	80045f6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e8:	f7fe fe72 	bl	80031d0 <HAL_GetTick>
 80044ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f0:	e012      	b.n	8004518 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fe fe6d 	bl	80031d0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d908      	bls.n	8004518 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e339      	b.n	8004b7e <HAL_RCC_OscConfig+0x100e>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
 8004510:	10908120 	.word	0x10908120
 8004514:	40007000 	.word	0x40007000
 8004518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800451c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004520:	2202      	movs	r2, #2
 8004522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004528:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	fa93 f2a3 	rbit	r2, r3
 8004532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004536:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004540:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004544:	2202      	movs	r2, #2
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	fa93 f2a3 	rbit	r2, r3
 8004556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800455e:	601a      	str	r2, [r3, #0]
  return result;
 8004560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004564:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004568:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <HAL_RCC_OscConfig+0xa10>
 800457a:	4b98      	ldr	r3, [pc, #608]	@ (80047dc <HAL_RCC_OscConfig+0xc6c>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	e013      	b.n	80045a8 <HAL_RCC_OscConfig+0xa38>
 8004580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004584:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004588:	2202      	movs	r2, #2
 800458a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004590:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	fa93 f2a3 	rbit	r2, r3
 800459a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	4b8d      	ldr	r3, [pc, #564]	@ (80047dc <HAL_RCC_OscConfig+0xc6c>)
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80045b0:	2102      	movs	r1, #2
 80045b2:	6011      	str	r1, [r2, #0]
 80045b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	fa92 f1a2 	rbit	r1, r2
 80045c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045c6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045ca:	6011      	str	r1, [r2, #0]
  return result;
 80045cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045d0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	fab2 f282 	clz	r2, r2
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	f002 021f 	and.w	r2, r2, #31
 80045e6:	2101      	movs	r1, #1
 80045e8:	fa01 f202 	lsl.w	r2, r1, r2
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f43f af7f 	beq.w	80044f2 <HAL_RCC_OscConfig+0x982>
 80045f4:	e07d      	b.n	80046f2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fe fdeb 	bl	80031d0 <HAL_GetTick>
 80045fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fe fde6 	bl	80031d0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e2b2      	b.n	8004b7e <HAL_RCC_OscConfig+0x100e>
 8004618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004620:	2202      	movs	r2, #2
 8004622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004628:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	fa93 f2a3 	rbit	r2, r3
 8004632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004636:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004640:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004644:	2202      	movs	r2, #2
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	fa93 f2a3 	rbit	r2, r3
 8004656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800465e:	601a      	str	r2, [r3, #0]
  return result;
 8004660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004664:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004668:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <HAL_RCC_OscConfig+0xb10>
 800467a:	4b58      	ldr	r3, [pc, #352]	@ (80047dc <HAL_RCC_OscConfig+0xc6c>)
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	e013      	b.n	80046a8 <HAL_RCC_OscConfig+0xb38>
 8004680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004684:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004688:	2202      	movs	r2, #2
 800468a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004690:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	fa93 f2a3 	rbit	r2, r3
 800469a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	4b4d      	ldr	r3, [pc, #308]	@ (80047dc <HAL_RCC_OscConfig+0xc6c>)
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046ac:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80046b0:	2102      	movs	r1, #2
 80046b2:	6011      	str	r1, [r2, #0]
 80046b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046b8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	fa92 f1a2 	rbit	r1, r2
 80046c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046ca:	6011      	str	r1, [r2, #0]
  return result;
 80046cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046d0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	fab2 f282 	clz	r2, r2
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	f002 021f 	and.w	r2, r2, #31
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d186      	bne.n	8004600 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046f2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d105      	bne.n	8004706 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fa:	4b38      	ldr	r3, [pc, #224]	@ (80047dc <HAL_RCC_OscConfig+0xc6c>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4a37      	ldr	r2, [pc, #220]	@ (80047dc <HAL_RCC_OscConfig+0xc6c>)
 8004700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004704:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8232 	beq.w	8004b7c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004718:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <HAL_RCC_OscConfig+0xc6c>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b08      	cmp	r3, #8
 8004722:	f000 8201 	beq.w	8004b28 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	2b02      	cmp	r3, #2
 8004734:	f040 8157 	bne.w	80049e6 <HAL_RCC_OscConfig+0xe76>
 8004738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004740:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	fa93 f2a3 	rbit	r2, r3
 8004754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004758:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800475c:	601a      	str	r2, [r3, #0]
  return result;
 800475e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004762:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004766:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004768:	fab3 f383 	clz	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004772:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	461a      	mov	r2, r3
 800477a:	2300      	movs	r3, #0
 800477c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fe fd27 	bl	80031d0 <HAL_GetTick>
 8004782:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004786:	e009      	b.n	800479c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004788:	f7fe fd22 	bl	80031d0 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e1f0      	b.n	8004b7e <HAL_RCC_OscConfig+0x100e>
 800479c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80047a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	fa93 f2a3 	rbit	r2, r3
 80047b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047c0:	601a      	str	r2, [r3, #0]
  return result;
 80047c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80047d4:	d804      	bhi.n	80047e0 <HAL_RCC_OscConfig+0xc70>
 80047d6:	4b01      	ldr	r3, [pc, #4]	@ (80047dc <HAL_RCC_OscConfig+0xc6c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	e029      	b.n	8004830 <HAL_RCC_OscConfig+0xcc0>
 80047dc:	40021000 	.word	0x40021000
 80047e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80047e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	fa93 f2a3 	rbit	r2, r3
 80047fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004800:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800480e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004818:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	fa93 f2a3 	rbit	r2, r3
 8004822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004826:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	4bc3      	ldr	r3, [pc, #780]	@ (8004b3c <HAL_RCC_OscConfig+0xfcc>)
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004834:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004838:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800483c:	6011      	str	r1, [r2, #0]
 800483e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004842:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	fa92 f1a2 	rbit	r1, r2
 800484c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004850:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004854:	6011      	str	r1, [r2, #0]
  return result;
 8004856:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800485a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	fab2 f282 	clz	r2, r2
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	f042 0220 	orr.w	r2, r2, #32
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	f002 021f 	and.w	r2, r2, #31
 8004870:	2101      	movs	r1, #1
 8004872:	fa01 f202 	lsl.w	r2, r1, r2
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d185      	bne.n	8004788 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800487c:	4baf      	ldr	r3, [pc, #700]	@ (8004b3c <HAL_RCC_OscConfig+0xfcc>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004888:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004894:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	430b      	orrs	r3, r1
 800489e:	49a7      	ldr	r1, [pc, #668]	@ (8004b3c <HAL_RCC_OscConfig+0xfcc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
 80048a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80048ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	fa93 f2a3 	rbit	r2, r3
 80048c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048c8:	601a      	str	r2, [r3, #0]
  return result;
 80048ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ce:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048d2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80048de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	461a      	mov	r2, r3
 80048e6:	2301      	movs	r3, #1
 80048e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fe fc71 	bl	80031d0 <HAL_GetTick>
 80048ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f2:	e009      	b.n	8004908 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fe fc6c 	bl	80031d0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e13a      	b.n	8004b7e <HAL_RCC_OscConfig+0x100e>
 8004908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004910:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	fa93 f2a3 	rbit	r2, r3
 8004924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004928:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800492c:	601a      	str	r2, [r3, #0]
  return result;
 800492e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004932:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004936:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004940:	d802      	bhi.n	8004948 <HAL_RCC_OscConfig+0xdd8>
 8004942:	4b7e      	ldr	r3, [pc, #504]	@ (8004b3c <HAL_RCC_OscConfig+0xfcc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	e027      	b.n	8004998 <HAL_RCC_OscConfig+0xe28>
 8004948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800494c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004950:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800495a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	fa93 f2a3 	rbit	r2, r3
 8004964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004968:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004972:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004980:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	fa93 f2a3 	rbit	r2, r3
 800498a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800498e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	4b69      	ldr	r3, [pc, #420]	@ (8004b3c <HAL_RCC_OscConfig+0xfcc>)
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800499c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80049a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80049a4:	6011      	str	r1, [r2, #0]
 80049a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049aa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	fa92 f1a2 	rbit	r1, r2
 80049b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049b8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049bc:	6011      	str	r1, [r2, #0]
  return result;
 80049be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	fab2 f282 	clz	r2, r2
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	f042 0220 	orr.w	r2, r2, #32
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	f002 021f 	and.w	r2, r2, #31
 80049d8:	2101      	movs	r1, #1
 80049da:	fa01 f202 	lsl.w	r2, r1, r2
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d087      	beq.n	80048f4 <HAL_RCC_OscConfig+0xd84>
 80049e4:	e0ca      	b.n	8004b7c <HAL_RCC_OscConfig+0x100c>
 80049e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	fa93 f2a3 	rbit	r2, r3
 8004a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a06:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a0a:	601a      	str	r2, [r3, #0]
  return result;
 8004a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a10:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a16:	fab3 f383 	clz	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	461a      	mov	r2, r3
 8004a28:	2300      	movs	r3, #0
 8004a2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fbd0 	bl	80031d0 <HAL_GetTick>
 8004a30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a34:	e009      	b.n	8004a4a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a36:	f7fe fbcb 	bl	80031d0 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e099      	b.n	8004b7e <HAL_RCC_OscConfig+0x100e>
 8004a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	fa93 f2a3 	rbit	r2, r3
 8004a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a6e:	601a      	str	r2, [r3, #0]
  return result;
 8004a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a74:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a82:	d802      	bhi.n	8004a8a <HAL_RCC_OscConfig+0xf1a>
 8004a84:	4b2d      	ldr	r3, [pc, #180]	@ (8004b3c <HAL_RCC_OscConfig+0xfcc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	e027      	b.n	8004ada <HAL_RCC_OscConfig+0xf6a>
 8004a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a8e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004a92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	fa93 f2a3 	rbit	r2, r3
 8004aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aaa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004ab8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	fa93 f2a3 	rbit	r2, r3
 8004acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <HAL_RCC_OscConfig+0xfcc>)
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ade:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004ae2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ae6:	6011      	str	r1, [r2, #0]
 8004ae8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	fa92 f1a2 	rbit	r1, r2
 8004af6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004afa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004afe:	6011      	str	r1, [r2, #0]
  return result;
 8004b00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b04:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	fab2 f282 	clz	r2, r2
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	f042 0220 	orr.w	r2, r2, #32
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f002 021f 	and.w	r2, r2, #31
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d187      	bne.n	8004a36 <HAL_RCC_OscConfig+0xec6>
 8004b26:	e029      	b.n	8004b7c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d103      	bne.n	8004b40 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e020      	b.n	8004b7e <HAL_RCC_OscConfig+0x100e>
 8004b3c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b40:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <HAL_RCC_OscConfig+0x1018>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004b4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d10b      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004b60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004b64:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000

08004b8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b09e      	sub	sp, #120	@ 0x78
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e154      	b.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b89      	ldr	r3, [pc, #548]	@ (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d910      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b86      	ldr	r3, [pc, #536]	@ (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 0207 	bic.w	r2, r3, #7
 8004bba:	4984      	ldr	r1, [pc, #528]	@ (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b82      	ldr	r3, [pc, #520]	@ (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e13c      	b.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be0:	4b7b      	ldr	r3, [pc, #492]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4978      	ldr	r1, [pc, #480]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80cd 	beq.w	8004d9a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d137      	bne.n	8004c78 <HAL_RCC_ClockConfig+0xec>
 8004c08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c10:	fa93 f3a3 	rbit	r3, r3
 8004c14:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c20:	d802      	bhi.n	8004c28 <HAL_RCC_ClockConfig+0x9c>
 8004c22:	4b6b      	ldr	r3, [pc, #428]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	e00f      	b.n	8004c48 <HAL_RCC_ClockConfig+0xbc>
 8004c28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c30:	fa93 f3a3 	rbit	r3, r3
 8004c34:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c44:	4b62      	ldr	r3, [pc, #392]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c50:	fa92 f2a2 	rbit	r2, r2
 8004c54:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004c56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c58:	fab2 f282 	clz	r2, r2
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	f042 0220 	orr.w	r2, r2, #32
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	f002 021f 	and.w	r2, r2, #31
 8004c68:	2101      	movs	r1, #1
 8004c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d171      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0ea      	b.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d137      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x164>
 8004c80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c84:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c88:	fa93 f3a3 	rbit	r3, r3
 8004c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c90:	fab3 f383 	clz	r3, r3
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c98:	d802      	bhi.n	8004ca0 <HAL_RCC_ClockConfig+0x114>
 8004c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	e00f      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x134>
 8004ca0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ca8:	fa93 f3a3 	rbit	r3, r3
 8004cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cbc:	4b44      	ldr	r3, [pc, #272]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cc4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004cc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cc8:	fa92 f2a2 	rbit	r2, r2
 8004ccc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004cce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cd0:	fab2 f282 	clz	r2, r2
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f042 0220 	orr.w	r2, r2, #32
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	f002 021f 	and.w	r2, r2, #31
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d135      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0ae      	b.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	fa93 f3a3 	rbit	r3, r3
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	fab3 f383 	clz	r3, r3
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d06:	d802      	bhi.n	8004d0e <HAL_RCC_ClockConfig+0x182>
 8004d08:	4b31      	ldr	r3, [pc, #196]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	e00d      	b.n	8004d2a <HAL_RCC_ClockConfig+0x19e>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	fa93 f3a3 	rbit	r3, r3
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	61ba      	str	r2, [r7, #24]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	fa92 f2a2 	rbit	r2, r2
 8004d34:	617a      	str	r2, [r7, #20]
  return result;
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	fab2 f282 	clz	r2, r2
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	f042 0220 	orr.w	r2, r2, #32
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	f002 021f 	and.w	r2, r2, #31
 8004d48:	2101      	movs	r1, #1
 8004d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e07a      	b.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d58:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f023 0203 	bic.w	r2, r3, #3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	491a      	ldr	r1, [pc, #104]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d6a:	f7fe fa31 	bl	80031d0 <HAL_GetTick>
 8004d6e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d72:	f7fe fa2d 	bl	80031d0 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e062      	b.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d88:	4b11      	ldr	r3, [pc, #68]	@ (8004dd0 <HAL_RCC_ClockConfig+0x244>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 020c 	and.w	r2, r3, #12
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d1eb      	bne.n	8004d72 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d215      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da8:	4b08      	ldr	r3, [pc, #32]	@ (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 0207 	bic.w	r2, r3, #7
 8004db0:	4906      	ldr	r1, [pc, #24]	@ (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db8:	4b04      	ldr	r3, [pc, #16]	@ (8004dcc <HAL_RCC_ClockConfig+0x240>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d006      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e041      	b.n	8004e4e <HAL_RCC_ClockConfig+0x2c2>
 8004dca:	bf00      	nop
 8004dcc:	40022000 	.word	0x40022000
 8004dd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e58 <HAL_RCC_ClockConfig+0x2cc>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	491a      	ldr	r1, [pc, #104]	@ (8004e58 <HAL_RCC_ClockConfig+0x2cc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dfe:	4b16      	ldr	r3, [pc, #88]	@ (8004e58 <HAL_RCC_ClockConfig+0x2cc>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4912      	ldr	r1, [pc, #72]	@ (8004e58 <HAL_RCC_ClockConfig+0x2cc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e12:	f000 f829 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8004e16:	4601      	mov	r1, r0
 8004e18:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <HAL_RCC_ClockConfig+0x2cc>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e20:	22f0      	movs	r2, #240	@ 0xf0
 8004e22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	fa92 f2a2 	rbit	r2, r2
 8004e2a:	60fa      	str	r2, [r7, #12]
  return result;
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	fab2 f282 	clz	r2, r2
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	40d3      	lsrs	r3, r2
 8004e36:	4a09      	ldr	r2, [pc, #36]	@ (8004e5c <HAL_RCC_ClockConfig+0x2d0>)
 8004e38:	5cd3      	ldrb	r3, [r2, r3]
 8004e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e3e:	4a08      	ldr	r2, [pc, #32]	@ (8004e60 <HAL_RCC_ClockConfig+0x2d4>)
 8004e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <HAL_RCC_ClockConfig+0x2d8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe f97e 	bl	8003148 <HAL_InitTick>
  
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3778      	adds	r7, #120	@ 0x78
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	0800a2d0 	.word	0x0800a2d0
 8004e60:	20000000 	.word	0x20000000
 8004e64:	20000020 	.word	0x20000020

08004e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	2300      	movs	r3, #0
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004e82:	4b1e      	ldr	r3, [pc, #120]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x94>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d002      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x30>
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0x36>
 8004e96:	e026      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e98:	4b19      	ldr	r3, [pc, #100]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e9a:	613b      	str	r3, [r7, #16]
      break;
 8004e9c:	e026      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	0c9b      	lsrs	r3, r3, #18
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	4a17      	ldr	r2, [pc, #92]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ea8:	5cd3      	ldrb	r3, [r2, r3]
 8004eaa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004eac:	4b13      	ldr	r3, [pc, #76]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x94>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	4a14      	ldr	r2, [pc, #80]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004eb6:	5cd3      	ldrb	r3, [r2, r3]
 8004eb8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e004      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	613b      	str	r3, [r7, #16]
      break;
 8004ee4:	e002      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004ee8:	613b      	str	r3, [r7, #16]
      break;
 8004eea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eec:	693b      	ldr	r3, [r7, #16]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	01e84800 	.word	0x01e84800
 8004f04:	0800a2e8 	.word	0x0800a2e8
 8004f08:	0800a2f8 	.word	0x0800a2f8
 8004f0c:	003d0900 	.word	0x003d0900
 8004f10:	007a1200 	.word	0x007a1200

08004f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f18:	4b03      	ldr	r3, [pc, #12]	@ (8004f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000000 	.word	0x20000000

08004f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f32:	f7ff ffef 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8004f36:	4601      	mov	r1, r0
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f40:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004f44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	fa92 f2a2 	rbit	r2, r2
 8004f4c:	603a      	str	r2, [r7, #0]
  return result;
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	fab2 f282 	clz	r2, r2
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	40d3      	lsrs	r3, r2
 8004f58:	4a04      	ldr	r2, [pc, #16]	@ (8004f6c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f5a:	5cd3      	ldrb	r3, [r2, r3]
 8004f5c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	0800a2e0 	.word	0x0800a2e0

08004f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f76:	f7ff ffcd 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004f84:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004f88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	fa92 f2a2 	rbit	r2, r2
 8004f90:	603a      	str	r2, [r7, #0]
  return result;
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	fab2 f282 	clz	r2, r2
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	40d3      	lsrs	r3, r2
 8004f9c:	4a04      	ldr	r2, [pc, #16]	@ (8004fb0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f9e:	5cd3      	ldrb	r3, [r2, r3]
 8004fa0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	0800a2e0 	.word	0x0800a2e0

08004fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b092      	sub	sp, #72	@ 0x48
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80d2 	beq.w	800517c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10e      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	4a49      	ldr	r2, [pc, #292]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	61d3      	str	r3, [r2, #28]
 8004ff0:	4b47      	ldr	r3, [pc, #284]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005002:	4b44      	ldr	r3, [pc, #272]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d118      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800500e:	4b41      	ldr	r3, [pc, #260]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a40      	ldr	r2, [pc, #256]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005018:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501a:	f7fe f8d9 	bl	80031d0 <HAL_GetTick>
 800501e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005020:	e008      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005022:	f7fe f8d5 	bl	80031d0 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b64      	cmp	r3, #100	@ 0x64
 800502e:	d901      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e13a      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	4b37      	ldr	r3, [pc, #220]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005040:	4b33      	ldr	r3, [pc, #204]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005048:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800504a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8082 	beq.w	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800505c:	429a      	cmp	r2, r3
 800505e:	d07a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005060:	4b2b      	ldr	r3, [pc, #172]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800506a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800506e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	fa93 f3a3 	rbit	r3, r3
 8005076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800507a:	fab3 f383 	clz	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	4b25      	ldr	r3, [pc, #148]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	461a      	mov	r2, r3
 800508a:	2301      	movs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800509c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800509e:	fab3 f383 	clz	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050b2:	4a17      	ldr	r2, [pc, #92]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d049      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c2:	f7fe f885 	bl	80031d0 <HAL_GetTick>
 80050c6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fe f881 	bl	80031d0 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e0e4      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80050e0:	2302      	movs	r3, #2
 80050e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ec:	2302      	movs	r3, #2
 80050ee:	623b      	str	r3, [r7, #32]
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	61fb      	str	r3, [r7, #28]
  return result;
 80050f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800510a:	4b01      	ldr	r3, [pc, #4]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	e00d      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005110:	40021000 	.word	0x40021000
 8005114:	40007000 	.word	0x40007000
 8005118:	10908100 	.word	0x10908100
 800511c:	2302      	movs	r3, #2
 800511e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	fa93 f3a3 	rbit	r3, r3
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	4b62      	ldr	r3, [pc, #392]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	2202      	movs	r2, #2
 800512e:	613a      	str	r2, [r7, #16]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	fa92 f2a2 	rbit	r2, r2
 8005136:	60fa      	str	r2, [r7, #12]
  return result;
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	fab2 f282 	clz	r2, r2
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	f002 021f 	and.w	r2, r2, #31
 800514a:	2101      	movs	r1, #1
 800514c:	fa01 f202 	lsl.w	r2, r1, r2
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0b9      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005156:	4b57      	ldr	r3, [pc, #348]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4954      	ldr	r1, [pc, #336]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005164:	4313      	orrs	r3, r2
 8005166:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005168:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005170:	4b50      	ldr	r3, [pc, #320]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	4a4f      	ldr	r2, [pc, #316]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800517a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005188:	4b4a      	ldr	r3, [pc, #296]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	f023 0203 	bic.w	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	4947      	ldr	r1, [pc, #284]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005196:	4313      	orrs	r3, r2
 8005198:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a6:	4b43      	ldr	r3, [pc, #268]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	f023 0210 	bic.w	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4940      	ldr	r1, [pc, #256]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	630b      	str	r3, [r1, #48]	@ 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051c4:	4b3b      	ldr	r3, [pc, #236]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	f023 0220 	bic.w	r2, r3, #32
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	4938      	ldr	r1, [pc, #224]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051e2:	4b34      	ldr	r3, [pc, #208]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	4931      	ldr	r1, [pc, #196]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005200:	4b2c      	ldr	r3, [pc, #176]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	4929      	ldr	r1, [pc, #164]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800520e:	4313      	orrs	r3, r2
 8005210:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800521e:	4b25      	ldr	r3, [pc, #148]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	4922      	ldr	r1, [pc, #136]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800522c:	4313      	orrs	r3, r2
 800522e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800523c:	4b1d      	ldr	r3, [pc, #116]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800523e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	491a      	ldr	r1, [pc, #104]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800524a:	4313      	orrs	r3, r2
 800524c:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d008      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800525a:	4b16      	ldr	r3, [pc, #88]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	4913      	ldr	r1, [pc, #76]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005268:	4313      	orrs	r3, r2
 800526a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005278:	4b0e      	ldr	r3, [pc, #56]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800527a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	490b      	ldr	r1, [pc, #44]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005286:	4313      	orrs	r3, r2
 8005288:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005296:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	4904      	ldr	r1, [pc, #16]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3748      	adds	r7, #72	@ 0x48
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e049      	b.n	800535e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fbbc 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f000 fe46 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e049      	b.n	800540c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f841 	bl	8005414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f000 fdef 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d109      	bne.n	8005454 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e03c      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0xa6>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d109      	bne.n	800546e <HAL_TIM_PWM_Start_DMA+0x46>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	e02f      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0xa6>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d109      	bne.n	8005488 <HAL_TIM_PWM_Start_DMA+0x60>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e022      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0xa6>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b0c      	cmp	r3, #12
 800548c:	d109      	bne.n	80054a2 <HAL_TIM_PWM_Start_DMA+0x7a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	bf0c      	ite	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	2300      	movne	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	e015      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0xa6>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d109      	bne.n	80054bc <HAL_TIM_PWM_Start_DMA+0x94>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e008      	b.n	80054ce <HAL_TIM_PWM_Start_DMA+0xa6>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
 80054d4:	e192      	b.n	80057fc <HAL_TIM_PWM_Start_DMA+0x3d4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e03c      	b.n	800556a <HAL_TIM_PWM_Start_DMA+0x142>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d109      	bne.n	800550a <HAL_TIM_PWM_Start_DMA+0xe2>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e02f      	b.n	800556a <HAL_TIM_PWM_Start_DMA+0x142>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d109      	bne.n	8005524 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e022      	b.n	800556a <HAL_TIM_PWM_Start_DMA+0x142>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b0c      	cmp	r3, #12
 8005528:	d109      	bne.n	800553e <HAL_TIM_PWM_Start_DMA+0x116>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e015      	b.n	800556a <HAL_TIM_PWM_Start_DMA+0x142>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b10      	cmp	r3, #16
 8005542:	d109      	bne.n	8005558 <HAL_TIM_PWM_Start_DMA+0x130>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e008      	b.n	800556a <HAL_TIM_PWM_Start_DMA+0x142>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf0c      	ite	eq
 8005564:	2301      	moveq	r3, #1
 8005566:	2300      	movne	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d034      	beq.n	80055d8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_TIM_PWM_Start_DMA+0x152>
 8005574:	887b      	ldrh	r3, [r7, #2]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e13e      	b.n	80057fc <HAL_TIM_PWM_Start_DMA+0x3d4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <HAL_TIM_PWM_Start_DMA+0x166>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800558c:	e026      	b.n	80055dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d104      	bne.n	800559e <HAL_TIM_PWM_Start_DMA+0x176>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800559c:	e01e      	b.n	80055dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start_DMA+0x186>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ac:	e016      	b.n	80055dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start_DMA+0x196>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055bc:	e00e      	b.n	80055dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start_DMA+0x1a6>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055cc:	e006      	b.n	80055dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055d6:	e001      	b.n	80055dc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e10f      	b.n	80057fc <HAL_TIM_PWM_Start_DMA+0x3d4>
  }

  switch (Channel)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	f200 80ae 	bhi.w	8005740 <HAL_TIM_PWM_Start_DMA+0x318>
 80055e4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005621 	.word	0x08005621
 80055f0:	08005741 	.word	0x08005741
 80055f4:	08005741 	.word	0x08005741
 80055f8:	08005741 	.word	0x08005741
 80055fc:	08005669 	.word	0x08005669
 8005600:	08005741 	.word	0x08005741
 8005604:	08005741 	.word	0x08005741
 8005608:	08005741 	.word	0x08005741
 800560c:	080056b1 	.word	0x080056b1
 8005610:	08005741 	.word	0x08005741
 8005614:	08005741 	.word	0x08005741
 8005618:	08005741 	.word	0x08005741
 800561c:	080056f9 	.word	0x080056f9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	4a77      	ldr	r2, [pc, #476]	@ (8005804 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005626:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	4a76      	ldr	r2, [pc, #472]	@ (8005808 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800562e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005634:	4a75      	ldr	r2, [pc, #468]	@ (800580c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3334      	adds	r3, #52	@ 0x34
 8005644:	461a      	mov	r2, r3
 8005646:	887b      	ldrh	r3, [r7, #2]
 8005648:	f7fd ff4a 	bl	80034e0 <HAL_DMA_Start_IT>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0d2      	b.n	80057fc <HAL_TIM_PWM_Start_DMA+0x3d4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005664:	60da      	str	r2, [r3, #12]
      break;
 8005666:	e06e      	b.n	8005746 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	4a65      	ldr	r2, [pc, #404]	@ (8005804 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005674:	4a64      	ldr	r2, [pc, #400]	@ (8005808 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005676:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	4a63      	ldr	r2, [pc, #396]	@ (800580c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3338      	adds	r3, #56	@ 0x38
 800568c:	461a      	mov	r2, r3
 800568e:	887b      	ldrh	r3, [r7, #2]
 8005690:	f7fd ff26 	bl	80034e0 <HAL_DMA_Start_IT>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e0ae      	b.n	80057fc <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056ac:	60da      	str	r2, [r3, #12]
      break;
 80056ae:	e04a      	b.n	8005746 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	4a53      	ldr	r2, [pc, #332]	@ (8005804 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80056b6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056bc:	4a52      	ldr	r2, [pc, #328]	@ (8005808 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80056be:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c4:	4a51      	ldr	r2, [pc, #324]	@ (800580c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	333c      	adds	r3, #60	@ 0x3c
 80056d4:	461a      	mov	r2, r3
 80056d6:	887b      	ldrh	r3, [r7, #2]
 80056d8:	f7fd ff02 	bl	80034e0 <HAL_DMA_Start_IT>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e08a      	b.n	80057fc <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056f4:	60da      	str	r2, [r3, #12]
      break;
 80056f6:	e026      	b.n	8005746 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fc:	4a41      	ldr	r2, [pc, #260]	@ (8005804 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80056fe:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	4a40      	ldr	r2, [pc, #256]	@ (8005808 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005706:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	4a3f      	ldr	r2, [pc, #252]	@ (800580c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3340      	adds	r3, #64	@ 0x40
 800571c:	461a      	mov	r2, r3
 800571e:	887b      	ldrh	r3, [r7, #2]
 8005720:	f7fd fede 	bl	80034e0 <HAL_DMA_Start_IT>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e066      	b.n	80057fc <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800573c:	60da      	str	r2, [r3, #12]
      break;
 800573e:	e002      	b.n	8005746 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	75fb      	strb	r3, [r7, #23]
      break;
 8005744:	bf00      	nop
  }

  if (status == HAL_OK)
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d156      	bne.n	80057fa <HAL_TIM_PWM_Start_DMA+0x3d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 ffd1 	bl	80066fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2c      	ldr	r2, [pc, #176]	@ (8005810 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_TIM_PWM_Start_DMA+0x35a>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2a      	ldr	r2, [pc, #168]	@ (8005814 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_TIM_PWM_Start_DMA+0x35a>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a29      	ldr	r2, [pc, #164]	@ (8005818 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIM_PWM_Start_DMA+0x35a>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a27      	ldr	r2, [pc, #156]	@ (800581c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_TIM_PWM_Start_DMA+0x35e>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_TIM_PWM_Start_DMA+0x360>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005810 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_TIM_PWM_Start_DMA+0x392>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ae:	d004      	beq.n	80057ba <HAL_TIM_PWM_Start_DMA+0x392>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a17      	ldr	r2, [pc, #92]	@ (8005814 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d115      	bne.n	80057e6 <HAL_TIM_PWM_Start_DMA+0x3be>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d015      	beq.n	80057f8 <HAL_TIM_PWM_Start_DMA+0x3d0>
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d2:	d011      	beq.n	80057f8 <HAL_TIM_PWM_Start_DMA+0x3d0>
      {
        __HAL_TIM_ENABLE(htim);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	e008      	b.n	80057f8 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e000      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x3d2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	08005e79 	.word	0x08005e79
 8005808:	08005f21 	.word	0x08005f21
 800580c:	08005de7 	.word	0x08005de7
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40014000 	.word	0x40014000
 8005818:	40014400 	.word	0x40014400
 800581c:	40014800 	.word	0x40014800
 8005820:	00010007 	.word	0x00010007

08005824 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d855      	bhi.n	80058e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005838:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005875 	.word	0x08005875
 8005844:	080058e5 	.word	0x080058e5
 8005848:	080058e5 	.word	0x080058e5
 800584c:	080058e5 	.word	0x080058e5
 8005850:	08005891 	.word	0x08005891
 8005854:	080058e5 	.word	0x080058e5
 8005858:	080058e5 	.word	0x080058e5
 800585c:	080058e5 	.word	0x080058e5
 8005860:	080058ad 	.word	0x080058ad
 8005864:	080058e5 	.word	0x080058e5
 8005868:	080058e5 	.word	0x080058e5
 800586c:	080058e5 	.word	0x080058e5
 8005870:	080058c9 	.word	0x080058c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005882:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005888:	4618      	mov	r0, r3
 800588a:	f7fd fe88 	bl	800359e <HAL_DMA_Abort_IT>
      break;
 800588e:	e02c      	b.n	80058ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fd fe7a 	bl	800359e <HAL_DMA_Abort_IT>
      break;
 80058aa:	e01e      	b.n	80058ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fd fe6c 	bl	800359e <HAL_DMA_Abort_IT>
      break;
 80058c6:	e010      	b.n	80058ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fd fe5e 	bl	800359e <HAL_DMA_Abort_IT>
      break;
 80058e2:	e002      	b.n	80058ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      break;
 80058e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d17b      	bne.n	80059e8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 feff 	bl	80066fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a3c      	ldr	r2, [pc, #240]	@ (80059f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIM_PWM_Stop_DMA+0x102>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a3a      	ldr	r2, [pc, #232]	@ (80059f8 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIM_PWM_Stop_DMA+0x102>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a39      	ldr	r2, [pc, #228]	@ (80059fc <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_PWM_Stop_DMA+0x102>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a37      	ldr	r2, [pc, #220]	@ (8005a00 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_Stop_DMA+0x106>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_TIM_PWM_Stop_DMA+0x108>
 800592a:	2300      	movs	r3, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d017      	beq.n	8005960 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a1a      	ldr	r2, [r3, #32]
 8005936:	f241 1311 	movw	r3, #4369	@ 0x1111
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10f      	bne.n	8005960 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a1a      	ldr	r2, [r3, #32]
 8005946:	f240 4344 	movw	r3, #1092	@ 0x444
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800595e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	f241 1311 	movw	r3, #4369	@ 0x1111
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	f240 4344 	movw	r3, #1092	@ 0x444
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d107      	bne.n	8005990 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800599e:	e023      	b.n	80059e8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d104      	bne.n	80059b0 <HAL_TIM_PWM_Stop_DMA+0x18c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ae:	e01b      	b.n	80059e8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d104      	bne.n	80059c0 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059be:	e013      	b.n	80059e8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d104      	bne.n	80059d0 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059ce:	e00b      	b.n	80059e8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d104      	bne.n	80059e0 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059de:	e003      	b.n	80059e8 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40014400 	.word	0x40014400
 8005a00:	40014800 	.word	0x40014800

08005a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e0ff      	b.n	8005c22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b14      	cmp	r3, #20
 8005a2e:	f200 80f0 	bhi.w	8005c12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a32:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	08005c13 	.word	0x08005c13
 8005a40:	08005c13 	.word	0x08005c13
 8005a44:	08005c13 	.word	0x08005c13
 8005a48:	08005acd 	.word	0x08005acd
 8005a4c:	08005c13 	.word	0x08005c13
 8005a50:	08005c13 	.word	0x08005c13
 8005a54:	08005c13 	.word	0x08005c13
 8005a58:	08005b0f 	.word	0x08005b0f
 8005a5c:	08005c13 	.word	0x08005c13
 8005a60:	08005c13 	.word	0x08005c13
 8005a64:	08005c13 	.word	0x08005c13
 8005a68:	08005b4f 	.word	0x08005b4f
 8005a6c:	08005c13 	.word	0x08005c13
 8005a70:	08005c13 	.word	0x08005c13
 8005a74:	08005c13 	.word	0x08005c13
 8005a78:	08005b91 	.word	0x08005b91
 8005a7c:	08005c13 	.word	0x08005c13
 8005a80:	08005c13 	.word	0x08005c13
 8005a84:	08005c13 	.word	0x08005c13
 8005a88:	08005bd1 	.word	0x08005bd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 faf2 	bl	800607c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0208 	orr.w	r2, r2, #8
 8005aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0204 	bic.w	r2, r2, #4
 8005ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6999      	ldr	r1, [r3, #24]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	619a      	str	r2, [r3, #24]
      break;
 8005aca:	e0a5      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fb58 	bl	8006188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6999      	ldr	r1, [r3, #24]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	021a      	lsls	r2, r3, #8
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	619a      	str	r2, [r3, #24]
      break;
 8005b0c:	e084      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fbb7 	bl	8006288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0208 	orr.w	r2, r2, #8
 8005b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0204 	bic.w	r2, r2, #4
 8005b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69d9      	ldr	r1, [r3, #28]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	61da      	str	r2, [r3, #28]
      break;
 8005b4c:	e064      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fc15 	bl	8006384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69d9      	ldr	r1, [r3, #28]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	021a      	lsls	r2, r3, #8
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	61da      	str	r2, [r3, #28]
      break;
 8005b8e:	e043      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fc58 	bl	800644c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0208 	orr.w	r2, r2, #8
 8005baa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0204 	bic.w	r2, r2, #4
 8005bba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bce:	e023      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fc96 	bl	8006508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	021a      	lsls	r2, r3, #8
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c10:	e002      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	75fb      	strb	r3, [r7, #23]
      break;
 8005c16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop

08005c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_TIM_ConfigClockSource+0x1c>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e0b6      	b.n	8005db6 <HAL_TIM_ConfigClockSource+0x18a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c84:	d03e      	beq.n	8005d04 <HAL_TIM_ConfigClockSource+0xd8>
 8005c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c8a:	f200 8087 	bhi.w	8005d9c <HAL_TIM_ConfigClockSource+0x170>
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c92:	f000 8086 	beq.w	8005da2 <HAL_TIM_ConfigClockSource+0x176>
 8005c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c9a:	d87f      	bhi.n	8005d9c <HAL_TIM_ConfigClockSource+0x170>
 8005c9c:	2b70      	cmp	r3, #112	@ 0x70
 8005c9e:	d01a      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0xaa>
 8005ca0:	2b70      	cmp	r3, #112	@ 0x70
 8005ca2:	d87b      	bhi.n	8005d9c <HAL_TIM_ConfigClockSource+0x170>
 8005ca4:	2b60      	cmp	r3, #96	@ 0x60
 8005ca6:	d050      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x11e>
 8005ca8:	2b60      	cmp	r3, #96	@ 0x60
 8005caa:	d877      	bhi.n	8005d9c <HAL_TIM_ConfigClockSource+0x170>
 8005cac:	2b50      	cmp	r3, #80	@ 0x50
 8005cae:	d03c      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0xfe>
 8005cb0:	2b50      	cmp	r3, #80	@ 0x50
 8005cb2:	d873      	bhi.n	8005d9c <HAL_TIM_ConfigClockSource+0x170>
 8005cb4:	2b40      	cmp	r3, #64	@ 0x40
 8005cb6:	d058      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x13e>
 8005cb8:	2b40      	cmp	r3, #64	@ 0x40
 8005cba:	d86f      	bhi.n	8005d9c <HAL_TIM_ConfigClockSource+0x170>
 8005cbc:	2b30      	cmp	r3, #48	@ 0x30
 8005cbe:	d064      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x15e>
 8005cc0:	2b30      	cmp	r3, #48	@ 0x30
 8005cc2:	d86b      	bhi.n	8005d9c <HAL_TIM_ConfigClockSource+0x170>
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d060      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x15e>
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d867      	bhi.n	8005d9c <HAL_TIM_ConfigClockSource+0x170>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d05c      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x15e>
 8005cd0:	2b10      	cmp	r3, #16
 8005cd2:	d05a      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x15e>
 8005cd4:	e062      	b.n	8005d9c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ce6:	f000 fce9 	bl	80066bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	609a      	str	r2, [r3, #8]
      break;
 8005d02:	e04f      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d14:	f000 fcd2 	bl	80066bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d26:	609a      	str	r2, [r3, #8]
      break;
 8005d28:	e03c      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d36:	461a      	mov	r2, r3
 8005d38:	f000 fc46 	bl	80065c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2150      	movs	r1, #80	@ 0x50
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fc9f 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8005d48:	e02c      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 fc65 	bl	8006626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2160      	movs	r1, #96	@ 0x60
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fc8f 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8005d68:	e01c      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d76:	461a      	mov	r2, r3
 8005d78:	f000 fc26 	bl	80065c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2140      	movs	r1, #64	@ 0x40
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fc7f 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8005d88:	e00c      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	f000 fc76 	bl	8006686 <TIM_ITRx_SetConfig>
      break;
 8005d9a:	e003      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005da0:	e000      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d107      	bne.n	8005e0e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e0c:	e02a      	b.n	8005e64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d107      	bne.n	8005e28 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e26:	e01d      	b.n	8005e64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d107      	bne.n	8005e42 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2204      	movs	r2, #4
 8005e36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e40:	e010      	b.n	8005e64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d107      	bne.n	8005e5c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2208      	movs	r2, #8
 8005e50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e5a:	e003      	b.n	8005e64 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff ffb4 	bl	8005dd2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d10b      	bne.n	8005ea8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d136      	bne.n	8005f0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ea6:	e031      	b.n	8005f0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d10b      	bne.n	8005eca <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d125      	bne.n	8005f0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec8:	e020      	b.n	8005f0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d10b      	bne.n	8005eec <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d114      	bne.n	8005f0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eea:	e00f      	b.n	8005f0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d10a      	bne.n	8005f0c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7fb f8cb 	bl	80010a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d103      	bne.n	8005f40 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	771a      	strb	r2, [r3, #28]
 8005f3e:	e019      	b.n	8005f74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d103      	bne.n	8005f52 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	771a      	strb	r2, [r3, #28]
 8005f50:	e010      	b.n	8005f74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d103      	bne.n	8005f64 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2204      	movs	r2, #4
 8005f60:	771a      	strb	r2, [r3, #28]
 8005f62:	e007      	b.n	8005f74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d102      	bne.n	8005f74 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2208      	movs	r2, #8
 8005f72:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff ff22 	bl	8005dbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a34      	ldr	r2, [pc, #208]	@ (800606c <TIM_Base_SetConfig+0xe4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_Base_SetConfig+0x20>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	d108      	bne.n	8005fba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800606c <TIM_Base_SetConfig+0xe4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00f      	beq.n	8005fe2 <TIM_Base_SetConfig+0x5a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc8:	d00b      	beq.n	8005fe2 <TIM_Base_SetConfig+0x5a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a28      	ldr	r2, [pc, #160]	@ (8006070 <TIM_Base_SetConfig+0xe8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d007      	beq.n	8005fe2 <TIM_Base_SetConfig+0x5a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a27      	ldr	r2, [pc, #156]	@ (8006074 <TIM_Base_SetConfig+0xec>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d003      	beq.n	8005fe2 <TIM_Base_SetConfig+0x5a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a26      	ldr	r2, [pc, #152]	@ (8006078 <TIM_Base_SetConfig+0xf0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d108      	bne.n	8005ff4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a14      	ldr	r2, [pc, #80]	@ (800606c <TIM_Base_SetConfig+0xe4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_Base_SetConfig+0xb0>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a13      	ldr	r2, [pc, #76]	@ (8006070 <TIM_Base_SetConfig+0xe8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_Base_SetConfig+0xb0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a12      	ldr	r2, [pc, #72]	@ (8006074 <TIM_Base_SetConfig+0xec>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_Base_SetConfig+0xb0>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a11      	ldr	r2, [pc, #68]	@ (8006078 <TIM_Base_SetConfig+0xf0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d103      	bne.n	8006040 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b01      	cmp	r3, #1
 8006050:	d105      	bne.n	800605e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]
  }
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800

0800607c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f023 0201 	bic.w	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a28      	ldr	r2, [pc, #160]	@ (8006178 <TIM_OC1_SetConfig+0xfc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_OC1_SetConfig+0x78>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a27      	ldr	r2, [pc, #156]	@ (800617c <TIM_OC1_SetConfig+0x100>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_OC1_SetConfig+0x78>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a26      	ldr	r2, [pc, #152]	@ (8006180 <TIM_OC1_SetConfig+0x104>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC1_SetConfig+0x78>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a25      	ldr	r2, [pc, #148]	@ (8006184 <TIM_OC1_SetConfig+0x108>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10c      	bne.n	800610e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0308 	bic.w	r3, r3, #8
 80060fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 0304 	bic.w	r3, r3, #4
 800610c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a19      	ldr	r2, [pc, #100]	@ (8006178 <TIM_OC1_SetConfig+0xfc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00b      	beq.n	800612e <TIM_OC1_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a18      	ldr	r2, [pc, #96]	@ (800617c <TIM_OC1_SetConfig+0x100>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d007      	beq.n	800612e <TIM_OC1_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a17      	ldr	r2, [pc, #92]	@ (8006180 <TIM_OC1_SetConfig+0x104>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_OC1_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a16      	ldr	r2, [pc, #88]	@ (8006184 <TIM_OC1_SetConfig+0x108>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d111      	bne.n	8006152 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800613c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40014000 	.word	0x40014000
 8006180:	40014400 	.word	0x40014400
 8006184:	40014800 	.word	0x40014800

08006188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f023 0210 	bic.w	r2, r3, #16
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0320 	bic.w	r3, r3, #32
 80061d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a24      	ldr	r2, [pc, #144]	@ (8006278 <TIM_OC2_SetConfig+0xf0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d10d      	bne.n	8006208 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006206:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <TIM_OC2_SetConfig+0xf0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_OC2_SetConfig+0xa0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a1a      	ldr	r2, [pc, #104]	@ (800627c <TIM_OC2_SetConfig+0xf4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_OC2_SetConfig+0xa0>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a19      	ldr	r2, [pc, #100]	@ (8006280 <TIM_OC2_SetConfig+0xf8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC2_SetConfig+0xa0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <TIM_OC2_SetConfig+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d113      	bne.n	8006250 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800622e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006236:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40012c00 	.word	0x40012c00
 800627c:	40014000 	.word	0x40014000
 8006280:	40014400 	.word	0x40014400
 8006284:	40014800 	.word	0x40014800

08006288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a23      	ldr	r2, [pc, #140]	@ (8006374 <TIM_OC3_SetConfig+0xec>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10d      	bne.n	8006306 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006304:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1a      	ldr	r2, [pc, #104]	@ (8006374 <TIM_OC3_SetConfig+0xec>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00b      	beq.n	8006326 <TIM_OC3_SetConfig+0x9e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a19      	ldr	r2, [pc, #100]	@ (8006378 <TIM_OC3_SetConfig+0xf0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <TIM_OC3_SetConfig+0x9e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a18      	ldr	r2, [pc, #96]	@ (800637c <TIM_OC3_SetConfig+0xf4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC3_SetConfig+0x9e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <TIM_OC3_SetConfig+0xf8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d113      	bne.n	800634e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800632c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	40012c00 	.word	0x40012c00
 8006378:	40014000 	.word	0x40014000
 800637c:	40014400 	.word	0x40014400
 8006380:	40014800 	.word	0x40014800

08006384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	031b      	lsls	r3, r3, #12
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a16      	ldr	r2, [pc, #88]	@ (800643c <TIM_OC4_SetConfig+0xb8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_OC4_SetConfig+0x7c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a15      	ldr	r2, [pc, #84]	@ (8006440 <TIM_OC4_SetConfig+0xbc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_OC4_SetConfig+0x7c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a14      	ldr	r2, [pc, #80]	@ (8006444 <TIM_OC4_SetConfig+0xc0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC4_SetConfig+0x7c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a13      	ldr	r2, [pc, #76]	@ (8006448 <TIM_OC4_SetConfig+0xc4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d109      	bne.n	8006414 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	019b      	lsls	r3, r3, #6
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800

0800644c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006490:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	041b      	lsls	r3, r3, #16
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a15      	ldr	r2, [pc, #84]	@ (80064f8 <TIM_OC5_SetConfig+0xac>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00b      	beq.n	80064be <TIM_OC5_SetConfig+0x72>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a14      	ldr	r2, [pc, #80]	@ (80064fc <TIM_OC5_SetConfig+0xb0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <TIM_OC5_SetConfig+0x72>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a13      	ldr	r2, [pc, #76]	@ (8006500 <TIM_OC5_SetConfig+0xb4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_OC5_SetConfig+0x72>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a12      	ldr	r2, [pc, #72]	@ (8006504 <TIM_OC5_SetConfig+0xb8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d109      	bne.n	80064d2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	621a      	str	r2, [r3, #32]
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800

08006508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800654e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a16      	ldr	r2, [pc, #88]	@ (80065b8 <TIM_OC6_SetConfig+0xb0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_OC6_SetConfig+0x74>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a15      	ldr	r2, [pc, #84]	@ (80065bc <TIM_OC6_SetConfig+0xb4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_OC6_SetConfig+0x74>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a14      	ldr	r2, [pc, #80]	@ (80065c0 <TIM_OC6_SetConfig+0xb8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC6_SetConfig+0x74>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a13      	ldr	r2, [pc, #76]	@ (80065c4 <TIM_OC6_SetConfig+0xbc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d109      	bne.n	8006590 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 030a 	bic.w	r3, r3, #10
 8006604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006626:	b480      	push	{r7}
 8006628:	b087      	sub	sp, #28
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f023 0210 	bic.w	r2, r3, #16
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	031b      	lsls	r3, r3, #12
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006662:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006686:	b480      	push	{r7}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f043 0307 	orr.w	r3, r3, #7
 80066a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	609a      	str	r2, [r3, #8]
}
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	021a      	lsls	r2, r3, #8
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	431a      	orrs	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	609a      	str	r2, [r3, #8]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2201      	movs	r2, #1
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1a      	ldr	r2, [r3, #32]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	43db      	mvns	r3, r3
 800671e:	401a      	ands	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1a      	ldr	r2, [r3, #32]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	fa01 f303 	lsl.w	r3, r1, r3
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
	...

08006748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e04f      	b.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a21      	ldr	r2, [pc, #132]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006790:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a14      	ldr	r2, [pc, #80]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d009      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c8:	d004      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a10      	ldr	r2, [pc, #64]	@ (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d10c      	bne.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40014000 	.word	0x40014000

08006814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e040      	b.n	80068a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fb f994 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	@ 0x24
 8006840:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0201 	bic.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fab0 	bl	8006dc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f977 	bl	8006b54 <UART_SetConfig>
 8006866:	4603      	mov	r3, r0
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e01b      	b.n	80068a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800687e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800688e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fb2f 	bl	8006f04 <UART_CheckIdleState>
 80068a6:	4603      	mov	r3, r0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	@ 0x28
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d177      	bne.n	80069b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_UART_Transmit+0x24>
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e070      	b.n	80069ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2221      	movs	r2, #33	@ 0x21
 80068e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068e6:	f7fc fc73 	bl	80031d0 <HAL_GetTick>
 80068ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	88fa      	ldrh	r2, [r7, #6]
 80068f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006904:	d108      	bne.n	8006918 <HAL_UART_Transmit+0x68>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	e003      	b.n	8006920 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006920:	e02f      	b.n	8006982 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2200      	movs	r2, #0
 800692a:	2180      	movs	r1, #128	@ 0x80
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fb91 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e03b      	b.n	80069ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10b      	bne.n	8006960 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	881a      	ldrh	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006954:	b292      	uxth	r2, r2
 8006956:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	3302      	adds	r3, #2
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e007      	b.n	8006970 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	3301      	adds	r3, #1
 800696e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1c9      	bne.n	8006922 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2200      	movs	r2, #0
 8006996:	2140      	movs	r1, #64	@ 0x40
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fb5b 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e005      	b.n	80069ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e000      	b.n	80069ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b08a      	sub	sp, #40	@ 0x28
 80069c6:	af02      	add	r7, sp, #8
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	4613      	mov	r3, r2
 80069d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069d8:	2b20      	cmp	r3, #32
 80069da:	f040 80b6 	bne.w	8006b4a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <HAL_UART_Receive+0x28>
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e0ae      	b.n	8006b4c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2222      	movs	r2, #34	@ 0x22
 80069fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a04:	f7fc fbe4 	bl	80031d0 <HAL_GetTick>
 8006a08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	88fa      	ldrh	r2, [r7, #6]
 8006a0e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a22:	d10e      	bne.n	8006a42 <HAL_UART_Receive+0x80>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d105      	bne.n	8006a38 <HAL_UART_Receive+0x76>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a36:	e02d      	b.n	8006a94 <HAL_UART_Receive+0xd2>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	22ff      	movs	r2, #255	@ 0xff
 8006a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a40:	e028      	b.n	8006a94 <HAL_UART_Receive+0xd2>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10d      	bne.n	8006a66 <HAL_UART_Receive+0xa4>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d104      	bne.n	8006a5c <HAL_UART_Receive+0x9a>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	22ff      	movs	r2, #255	@ 0xff
 8006a56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a5a:	e01b      	b.n	8006a94 <HAL_UART_Receive+0xd2>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	227f      	movs	r2, #127	@ 0x7f
 8006a60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a64:	e016      	b.n	8006a94 <HAL_UART_Receive+0xd2>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a6e:	d10d      	bne.n	8006a8c <HAL_UART_Receive+0xca>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <HAL_UART_Receive+0xc0>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	227f      	movs	r2, #127	@ 0x7f
 8006a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a80:	e008      	b.n	8006a94 <HAL_UART_Receive+0xd2>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	223f      	movs	r2, #63	@ 0x3f
 8006a86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a8a:	e003      	b.n	8006a94 <HAL_UART_Receive+0xd2>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa4:	d108      	bne.n	8006ab8 <HAL_UART_Receive+0xf6>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e003      	b.n	8006ac0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006ac0:	e037      	b.n	8006b32 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2120      	movs	r1, #32
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fac1 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e033      	b.n	8006b4c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10c      	bne.n	8006b04 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	8a7b      	ldrh	r3, [r7, #18]
 8006af4:	4013      	ands	r3, r2
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	3302      	adds	r3, #2
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e00d      	b.n	8006b20 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	8a7b      	ldrh	r3, [r7, #18]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	4013      	ands	r3, r2
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1c1      	bne.n	8006ac2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e000      	b.n	8006b4c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b8a      	ldr	r3, [pc, #552]	@ (8006da8 <UART_SetConfig+0x254>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6812      	ldr	r2, [r2, #0]
 8006b86:	6979      	ldr	r1, [r7, #20]
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a78      	ldr	r2, [pc, #480]	@ (8006dac <UART_SetConfig+0x258>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d120      	bne.n	8006c12 <UART_SetConfig+0xbe>
 8006bd0:	4b77      	ldr	r3, [pc, #476]	@ (8006db0 <UART_SetConfig+0x25c>)
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d817      	bhi.n	8006c0c <UART_SetConfig+0xb8>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <UART_SetConfig+0x90>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c01 	.word	0x08006c01
 8006bec:	08006c07 	.word	0x08006c07
 8006bf0:	08006bfb 	.word	0x08006bfb
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e01d      	b.n	8006c36 <UART_SetConfig+0xe2>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e01a      	b.n	8006c36 <UART_SetConfig+0xe2>
 8006c00:	2304      	movs	r3, #4
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e017      	b.n	8006c36 <UART_SetConfig+0xe2>
 8006c06:	2308      	movs	r3, #8
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e014      	b.n	8006c36 <UART_SetConfig+0xe2>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e011      	b.n	8006c36 <UART_SetConfig+0xe2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a67      	ldr	r2, [pc, #412]	@ (8006db4 <UART_SetConfig+0x260>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d102      	bne.n	8006c22 <UART_SetConfig+0xce>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e009      	b.n	8006c36 <UART_SetConfig+0xe2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a64      	ldr	r2, [pc, #400]	@ (8006db8 <UART_SetConfig+0x264>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d102      	bne.n	8006c32 <UART_SetConfig+0xde>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e001      	b.n	8006c36 <UART_SetConfig+0xe2>
 8006c32:	2310      	movs	r3, #16
 8006c34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c3e:	d15a      	bne.n	8006cf6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006c40:	7ffb      	ldrb	r3, [r7, #31]
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d827      	bhi.n	8006c96 <UART_SetConfig+0x142>
 8006c46:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <UART_SetConfig+0xf8>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	08006c97 	.word	0x08006c97
 8006c5c:	08006c87 	.word	0x08006c87
 8006c60:	08006c97 	.word	0x08006c97
 8006c64:	08006c97 	.word	0x08006c97
 8006c68:	08006c97 	.word	0x08006c97
 8006c6c:	08006c8f 	.word	0x08006c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c70:	f7fe f95c 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 8006c74:	61b8      	str	r0, [r7, #24]
        break;
 8006c76:	e013      	b.n	8006ca0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c78:	f7fe f97a 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8006c7c:	61b8      	str	r0, [r7, #24]
        break;
 8006c7e:	e00f      	b.n	8006ca0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c80:	4b4e      	ldr	r3, [pc, #312]	@ (8006dbc <UART_SetConfig+0x268>)
 8006c82:	61bb      	str	r3, [r7, #24]
        break;
 8006c84:	e00c      	b.n	8006ca0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c86:	f7fe f8ef 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8006c8a:	61b8      	str	r0, [r7, #24]
        break;
 8006c8c:	e008      	b.n	8006ca0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c92:	61bb      	str	r3, [r7, #24]
        break;
 8006c94:	e004      	b.n	8006ca0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d074      	beq.n	8006d90 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	005a      	lsls	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	441a      	add	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2b0f      	cmp	r3, #15
 8006cc0:	d916      	bls.n	8006cf0 <UART_SetConfig+0x19c>
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc8:	d212      	bcs.n	8006cf0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f023 030f 	bic.w	r3, r3, #15
 8006cd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	89fb      	ldrh	r3, [r7, #14]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	89fa      	ldrh	r2, [r7, #14]
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	e04f      	b.n	8006d90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	77bb      	strb	r3, [r7, #30]
 8006cf4:	e04c      	b.n	8006d90 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cf6:	7ffb      	ldrb	r3, [r7, #31]
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d828      	bhi.n	8006d4e <UART_SetConfig+0x1fa>
 8006cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006d04 <UART_SetConfig+0x1b0>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d31 	.word	0x08006d31
 8006d0c:	08006d39 	.word	0x08006d39
 8006d10:	08006d4f 	.word	0x08006d4f
 8006d14:	08006d3f 	.word	0x08006d3f
 8006d18:	08006d4f 	.word	0x08006d4f
 8006d1c:	08006d4f 	.word	0x08006d4f
 8006d20:	08006d4f 	.word	0x08006d4f
 8006d24:	08006d47 	.word	0x08006d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d28:	f7fe f900 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 8006d2c:	61b8      	str	r0, [r7, #24]
        break;
 8006d2e:	e013      	b.n	8006d58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d30:	f7fe f91e 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8006d34:	61b8      	str	r0, [r7, #24]
        break;
 8006d36:	e00f      	b.n	8006d58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d38:	4b20      	ldr	r3, [pc, #128]	@ (8006dbc <UART_SetConfig+0x268>)
 8006d3a:	61bb      	str	r3, [r7, #24]
        break;
 8006d3c:	e00c      	b.n	8006d58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3e:	f7fe f893 	bl	8004e68 <HAL_RCC_GetSysClockFreq>
 8006d42:	61b8      	str	r0, [r7, #24]
        break;
 8006d44:	e008      	b.n	8006d58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d4a:	61bb      	str	r3, [r7, #24]
        break;
 8006d4c:	e004      	b.n	8006d58 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	77bb      	strb	r3, [r7, #30]
        break;
 8006d56:	bf00      	nop
    }

    if (pclk != 0U)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d018      	beq.n	8006d90 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	085a      	lsrs	r2, r3, #1
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	441a      	add	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2b0f      	cmp	r3, #15
 8006d76:	d909      	bls.n	8006d8c <UART_SetConfig+0x238>
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d7e:	d205      	bcs.n	8006d8c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	e001      	b.n	8006d90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3720      	adds	r7, #32
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	efff69f3 	.word	0xefff69f3
 8006dac:	40013800 	.word	0x40013800
 8006db0:	40021000 	.word	0x40021000
 8006db4:	40004400 	.word	0x40004400
 8006db8:	40004800 	.word	0x40004800
 8006dbc:	007a1200 	.word	0x007a1200

08006dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01a      	beq.n	8006ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ebe:	d10a      	bne.n	8006ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  }
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b098      	sub	sp, #96	@ 0x60
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f14:	f7fc f95c 	bl	80031d0 <HAL_GetTick>
 8006f18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d12e      	bne.n	8006f86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f30:	2200      	movs	r2, #0
 8006f32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f88c 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d021      	beq.n	8006f86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e062      	b.n	800704c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d149      	bne.n	8007028 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f856 	bl	8007054 <UART_WaitOnFlagUntilTimeout>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d03c      	beq.n	8007028 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	623b      	str	r3, [r7, #32]
   return(result);
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e6      	bne.n	8006fae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007000:	61fa      	str	r2, [r7, #28]
 8007002:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	69b9      	ldr	r1, [r7, #24]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	617b      	str	r3, [r7, #20]
   return(result);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e5      	bne.n	8006fe0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e011      	b.n	800704c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3758      	adds	r7, #88	@ 0x58
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007064:	e04f      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d04b      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800706e:	f7fc f8af 	bl	80031d0 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	429a      	cmp	r2, r3
 800707c:	d302      	bcc.n	8007084 <UART_WaitOnFlagUntilTimeout+0x30>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e04e      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	2b00      	cmp	r3, #0
 8007094:	d037      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b80      	cmp	r3, #128	@ 0x80
 800709a:	d034      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b40      	cmp	r3, #64	@ 0x40
 80070a0:	d031      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d110      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2208      	movs	r2, #8
 80070b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f838 	bl	800712e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2208      	movs	r2, #8
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e029      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070e0:	d111      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f81e 	bl	800712e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e00f      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4013      	ands	r3, r2
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	bf0c      	ite	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	2300      	movne	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	429a      	cmp	r2, r3
 8007122:	d0a0      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800712e:	b480      	push	{r7}
 8007130:	b095      	sub	sp, #84	@ 0x54
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800714a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007154:	643b      	str	r3, [r7, #64]	@ 0x40
 8007156:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800715a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e6      	bne.n	8007136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	61fb      	str	r3, [r7, #28]
   return(result);
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f023 0301 	bic.w	r3, r3, #1
 800717e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007188:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800718a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800718e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d118      	bne.n	80071d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f023 0310 	bic.w	r3, r3, #16
 80071b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6979      	ldr	r1, [r7, #20]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	613b      	str	r3, [r7, #16]
   return(result);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e6      	bne.n	80071a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071ea:	bf00      	nop
 80071ec:	3754      	adds	r7, #84	@ 0x54
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <__cvt>:
 80071f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071fa:	ec57 6b10 	vmov	r6, r7, d0
 80071fe:	2f00      	cmp	r7, #0
 8007200:	460c      	mov	r4, r1
 8007202:	4619      	mov	r1, r3
 8007204:	463b      	mov	r3, r7
 8007206:	bfbb      	ittet	lt
 8007208:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800720c:	461f      	movlt	r7, r3
 800720e:	2300      	movge	r3, #0
 8007210:	232d      	movlt	r3, #45	@ 0x2d
 8007212:	700b      	strb	r3, [r1, #0]
 8007214:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007216:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800721a:	4691      	mov	r9, r2
 800721c:	f023 0820 	bic.w	r8, r3, #32
 8007220:	bfbc      	itt	lt
 8007222:	4632      	movlt	r2, r6
 8007224:	4616      	movlt	r6, r2
 8007226:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800722a:	d005      	beq.n	8007238 <__cvt+0x42>
 800722c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007230:	d100      	bne.n	8007234 <__cvt+0x3e>
 8007232:	3401      	adds	r4, #1
 8007234:	2102      	movs	r1, #2
 8007236:	e000      	b.n	800723a <__cvt+0x44>
 8007238:	2103      	movs	r1, #3
 800723a:	ab03      	add	r3, sp, #12
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	ab02      	add	r3, sp, #8
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	ec47 6b10 	vmov	d0, r6, r7
 8007246:	4653      	mov	r3, sl
 8007248:	4622      	mov	r2, r4
 800724a:	f000 fe6d 	bl	8007f28 <_dtoa_r>
 800724e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007252:	4605      	mov	r5, r0
 8007254:	d119      	bne.n	800728a <__cvt+0x94>
 8007256:	f019 0f01 	tst.w	r9, #1
 800725a:	d00e      	beq.n	800727a <__cvt+0x84>
 800725c:	eb00 0904 	add.w	r9, r0, r4
 8007260:	2200      	movs	r2, #0
 8007262:	2300      	movs	r3, #0
 8007264:	4630      	mov	r0, r6
 8007266:	4639      	mov	r1, r7
 8007268:	f7f9 fc3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800726c:	b108      	cbz	r0, 8007272 <__cvt+0x7c>
 800726e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007272:	2230      	movs	r2, #48	@ 0x30
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	454b      	cmp	r3, r9
 8007278:	d31e      	bcc.n	80072b8 <__cvt+0xc2>
 800727a:	9b03      	ldr	r3, [sp, #12]
 800727c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800727e:	1b5b      	subs	r3, r3, r5
 8007280:	4628      	mov	r0, r5
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	b004      	add	sp, #16
 8007286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800728e:	eb00 0904 	add.w	r9, r0, r4
 8007292:	d1e5      	bne.n	8007260 <__cvt+0x6a>
 8007294:	7803      	ldrb	r3, [r0, #0]
 8007296:	2b30      	cmp	r3, #48	@ 0x30
 8007298:	d10a      	bne.n	80072b0 <__cvt+0xba>
 800729a:	2200      	movs	r2, #0
 800729c:	2300      	movs	r3, #0
 800729e:	4630      	mov	r0, r6
 80072a0:	4639      	mov	r1, r7
 80072a2:	f7f9 fc21 	bl	8000ae8 <__aeabi_dcmpeq>
 80072a6:	b918      	cbnz	r0, 80072b0 <__cvt+0xba>
 80072a8:	f1c4 0401 	rsb	r4, r4, #1
 80072ac:	f8ca 4000 	str.w	r4, [sl]
 80072b0:	f8da 3000 	ldr.w	r3, [sl]
 80072b4:	4499      	add	r9, r3
 80072b6:	e7d3      	b.n	8007260 <__cvt+0x6a>
 80072b8:	1c59      	adds	r1, r3, #1
 80072ba:	9103      	str	r1, [sp, #12]
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e7d9      	b.n	8007274 <__cvt+0x7e>

080072c0 <__exponent>:
 80072c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072c2:	2900      	cmp	r1, #0
 80072c4:	bfba      	itte	lt
 80072c6:	4249      	neglt	r1, r1
 80072c8:	232d      	movlt	r3, #45	@ 0x2d
 80072ca:	232b      	movge	r3, #43	@ 0x2b
 80072cc:	2909      	cmp	r1, #9
 80072ce:	7002      	strb	r2, [r0, #0]
 80072d0:	7043      	strb	r3, [r0, #1]
 80072d2:	dd29      	ble.n	8007328 <__exponent+0x68>
 80072d4:	f10d 0307 	add.w	r3, sp, #7
 80072d8:	461d      	mov	r5, r3
 80072da:	270a      	movs	r7, #10
 80072dc:	461a      	mov	r2, r3
 80072de:	fbb1 f6f7 	udiv	r6, r1, r7
 80072e2:	fb07 1416 	mls	r4, r7, r6, r1
 80072e6:	3430      	adds	r4, #48	@ 0x30
 80072e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072ec:	460c      	mov	r4, r1
 80072ee:	2c63      	cmp	r4, #99	@ 0x63
 80072f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80072f4:	4631      	mov	r1, r6
 80072f6:	dcf1      	bgt.n	80072dc <__exponent+0x1c>
 80072f8:	3130      	adds	r1, #48	@ 0x30
 80072fa:	1e94      	subs	r4, r2, #2
 80072fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007300:	1c41      	adds	r1, r0, #1
 8007302:	4623      	mov	r3, r4
 8007304:	42ab      	cmp	r3, r5
 8007306:	d30a      	bcc.n	800731e <__exponent+0x5e>
 8007308:	f10d 0309 	add.w	r3, sp, #9
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	42ac      	cmp	r4, r5
 8007310:	bf88      	it	hi
 8007312:	2300      	movhi	r3, #0
 8007314:	3302      	adds	r3, #2
 8007316:	4403      	add	r3, r0
 8007318:	1a18      	subs	r0, r3, r0
 800731a:	b003      	add	sp, #12
 800731c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007322:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007326:	e7ed      	b.n	8007304 <__exponent+0x44>
 8007328:	2330      	movs	r3, #48	@ 0x30
 800732a:	3130      	adds	r1, #48	@ 0x30
 800732c:	7083      	strb	r3, [r0, #2]
 800732e:	70c1      	strb	r1, [r0, #3]
 8007330:	1d03      	adds	r3, r0, #4
 8007332:	e7f1      	b.n	8007318 <__exponent+0x58>

08007334 <_printf_float>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	b08d      	sub	sp, #52	@ 0x34
 800733a:	460c      	mov	r4, r1
 800733c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007340:	4616      	mov	r6, r2
 8007342:	461f      	mov	r7, r3
 8007344:	4605      	mov	r5, r0
 8007346:	f000 fcef 	bl	8007d28 <_localeconv_r>
 800734a:	6803      	ldr	r3, [r0, #0]
 800734c:	9304      	str	r3, [sp, #16]
 800734e:	4618      	mov	r0, r3
 8007350:	f7f8 ff9e 	bl	8000290 <strlen>
 8007354:	2300      	movs	r3, #0
 8007356:	930a      	str	r3, [sp, #40]	@ 0x28
 8007358:	f8d8 3000 	ldr.w	r3, [r8]
 800735c:	9005      	str	r0, [sp, #20]
 800735e:	3307      	adds	r3, #7
 8007360:	f023 0307 	bic.w	r3, r3, #7
 8007364:	f103 0208 	add.w	r2, r3, #8
 8007368:	f894 a018 	ldrb.w	sl, [r4, #24]
 800736c:	f8d4 b000 	ldr.w	fp, [r4]
 8007370:	f8c8 2000 	str.w	r2, [r8]
 8007374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007378:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800737c:	9307      	str	r3, [sp, #28]
 800737e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007382:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800738a:	4b9c      	ldr	r3, [pc, #624]	@ (80075fc <_printf_float+0x2c8>)
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	f7f9 fbdc 	bl	8000b4c <__aeabi_dcmpun>
 8007394:	bb70      	cbnz	r0, 80073f4 <_printf_float+0xc0>
 8007396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800739a:	4b98      	ldr	r3, [pc, #608]	@ (80075fc <_printf_float+0x2c8>)
 800739c:	f04f 32ff 	mov.w	r2, #4294967295
 80073a0:	f7f9 fbb6 	bl	8000b10 <__aeabi_dcmple>
 80073a4:	bb30      	cbnz	r0, 80073f4 <_printf_float+0xc0>
 80073a6:	2200      	movs	r2, #0
 80073a8:	2300      	movs	r3, #0
 80073aa:	4640      	mov	r0, r8
 80073ac:	4649      	mov	r1, r9
 80073ae:	f7f9 fba5 	bl	8000afc <__aeabi_dcmplt>
 80073b2:	b110      	cbz	r0, 80073ba <_printf_float+0x86>
 80073b4:	232d      	movs	r3, #45	@ 0x2d
 80073b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073ba:	4a91      	ldr	r2, [pc, #580]	@ (8007600 <_printf_float+0x2cc>)
 80073bc:	4b91      	ldr	r3, [pc, #580]	@ (8007604 <_printf_float+0x2d0>)
 80073be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80073c2:	bf8c      	ite	hi
 80073c4:	4690      	movhi	r8, r2
 80073c6:	4698      	movls	r8, r3
 80073c8:	2303      	movs	r3, #3
 80073ca:	6123      	str	r3, [r4, #16]
 80073cc:	f02b 0304 	bic.w	r3, fp, #4
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	9700      	str	r7, [sp, #0]
 80073d8:	4633      	mov	r3, r6
 80073da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80073dc:	4621      	mov	r1, r4
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 f9d2 	bl	8007788 <_printf_common>
 80073e4:	3001      	adds	r0, #1
 80073e6:	f040 808d 	bne.w	8007504 <_printf_float+0x1d0>
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	b00d      	add	sp, #52	@ 0x34
 80073f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f4:	4642      	mov	r2, r8
 80073f6:	464b      	mov	r3, r9
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	f7f9 fba6 	bl	8000b4c <__aeabi_dcmpun>
 8007400:	b140      	cbz	r0, 8007414 <_printf_float+0xe0>
 8007402:	464b      	mov	r3, r9
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfbc      	itt	lt
 8007408:	232d      	movlt	r3, #45	@ 0x2d
 800740a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800740e:	4a7e      	ldr	r2, [pc, #504]	@ (8007608 <_printf_float+0x2d4>)
 8007410:	4b7e      	ldr	r3, [pc, #504]	@ (800760c <_printf_float+0x2d8>)
 8007412:	e7d4      	b.n	80073be <_printf_float+0x8a>
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800741a:	9206      	str	r2, [sp, #24]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	d13b      	bne.n	8007498 <_printf_float+0x164>
 8007420:	2306      	movs	r3, #6
 8007422:	6063      	str	r3, [r4, #4]
 8007424:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007428:	2300      	movs	r3, #0
 800742a:	6022      	str	r2, [r4, #0]
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007430:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007434:	ab09      	add	r3, sp, #36	@ 0x24
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	6861      	ldr	r1, [r4, #4]
 800743a:	ec49 8b10 	vmov	d0, r8, r9
 800743e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007442:	4628      	mov	r0, r5
 8007444:	f7ff fed7 	bl	80071f6 <__cvt>
 8007448:	9b06      	ldr	r3, [sp, #24]
 800744a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800744c:	2b47      	cmp	r3, #71	@ 0x47
 800744e:	4680      	mov	r8, r0
 8007450:	d129      	bne.n	80074a6 <_printf_float+0x172>
 8007452:	1cc8      	adds	r0, r1, #3
 8007454:	db02      	blt.n	800745c <_printf_float+0x128>
 8007456:	6863      	ldr	r3, [r4, #4]
 8007458:	4299      	cmp	r1, r3
 800745a:	dd41      	ble.n	80074e0 <_printf_float+0x1ac>
 800745c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007460:	fa5f fa8a 	uxtb.w	sl, sl
 8007464:	3901      	subs	r1, #1
 8007466:	4652      	mov	r2, sl
 8007468:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800746c:	9109      	str	r1, [sp, #36]	@ 0x24
 800746e:	f7ff ff27 	bl	80072c0 <__exponent>
 8007472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007474:	1813      	adds	r3, r2, r0
 8007476:	2a01      	cmp	r2, #1
 8007478:	4681      	mov	r9, r0
 800747a:	6123      	str	r3, [r4, #16]
 800747c:	dc02      	bgt.n	8007484 <_printf_float+0x150>
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	07d2      	lsls	r2, r2, #31
 8007482:	d501      	bpl.n	8007488 <_printf_float+0x154>
 8007484:	3301      	adds	r3, #1
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0a2      	beq.n	80073d6 <_printf_float+0xa2>
 8007490:	232d      	movs	r3, #45	@ 0x2d
 8007492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007496:	e79e      	b.n	80073d6 <_printf_float+0xa2>
 8007498:	9a06      	ldr	r2, [sp, #24]
 800749a:	2a47      	cmp	r2, #71	@ 0x47
 800749c:	d1c2      	bne.n	8007424 <_printf_float+0xf0>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1c0      	bne.n	8007424 <_printf_float+0xf0>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e7bd      	b.n	8007422 <_printf_float+0xee>
 80074a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074aa:	d9db      	bls.n	8007464 <_printf_float+0x130>
 80074ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80074b0:	d118      	bne.n	80074e4 <_printf_float+0x1b0>
 80074b2:	2900      	cmp	r1, #0
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	dd0b      	ble.n	80074d0 <_printf_float+0x19c>
 80074b8:	6121      	str	r1, [r4, #16]
 80074ba:	b913      	cbnz	r3, 80074c2 <_printf_float+0x18e>
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	07d0      	lsls	r0, r2, #31
 80074c0:	d502      	bpl.n	80074c8 <_printf_float+0x194>
 80074c2:	3301      	adds	r3, #1
 80074c4:	440b      	add	r3, r1
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80074ca:	f04f 0900 	mov.w	r9, #0
 80074ce:	e7db      	b.n	8007488 <_printf_float+0x154>
 80074d0:	b913      	cbnz	r3, 80074d8 <_printf_float+0x1a4>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	07d2      	lsls	r2, r2, #31
 80074d6:	d501      	bpl.n	80074dc <_printf_float+0x1a8>
 80074d8:	3302      	adds	r3, #2
 80074da:	e7f4      	b.n	80074c6 <_printf_float+0x192>
 80074dc:	2301      	movs	r3, #1
 80074de:	e7f2      	b.n	80074c6 <_printf_float+0x192>
 80074e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80074e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074e6:	4299      	cmp	r1, r3
 80074e8:	db05      	blt.n	80074f6 <_printf_float+0x1c2>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	6121      	str	r1, [r4, #16]
 80074ee:	07d8      	lsls	r0, r3, #31
 80074f0:	d5ea      	bpl.n	80074c8 <_printf_float+0x194>
 80074f2:	1c4b      	adds	r3, r1, #1
 80074f4:	e7e7      	b.n	80074c6 <_printf_float+0x192>
 80074f6:	2900      	cmp	r1, #0
 80074f8:	bfd4      	ite	le
 80074fa:	f1c1 0202 	rsble	r2, r1, #2
 80074fe:	2201      	movgt	r2, #1
 8007500:	4413      	add	r3, r2
 8007502:	e7e0      	b.n	80074c6 <_printf_float+0x192>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	055a      	lsls	r2, r3, #21
 8007508:	d407      	bmi.n	800751a <_printf_float+0x1e6>
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	4642      	mov	r2, r8
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	d12b      	bne.n	8007570 <_printf_float+0x23c>
 8007518:	e767      	b.n	80073ea <_printf_float+0xb6>
 800751a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800751e:	f240 80dd 	bls.w	80076dc <_printf_float+0x3a8>
 8007522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007526:	2200      	movs	r2, #0
 8007528:	2300      	movs	r3, #0
 800752a:	f7f9 fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 800752e:	2800      	cmp	r0, #0
 8007530:	d033      	beq.n	800759a <_printf_float+0x266>
 8007532:	4a37      	ldr	r2, [pc, #220]	@ (8007610 <_printf_float+0x2dc>)
 8007534:	2301      	movs	r3, #1
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	f43f af54 	beq.w	80073ea <_printf_float+0xb6>
 8007542:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007546:	4543      	cmp	r3, r8
 8007548:	db02      	blt.n	8007550 <_printf_float+0x21c>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	07d8      	lsls	r0, r3, #31
 800754e:	d50f      	bpl.n	8007570 <_printf_float+0x23c>
 8007550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007554:	4631      	mov	r1, r6
 8007556:	4628      	mov	r0, r5
 8007558:	47b8      	blx	r7
 800755a:	3001      	adds	r0, #1
 800755c:	f43f af45 	beq.w	80073ea <_printf_float+0xb6>
 8007560:	f04f 0900 	mov.w	r9, #0
 8007564:	f108 38ff 	add.w	r8, r8, #4294967295
 8007568:	f104 0a1a 	add.w	sl, r4, #26
 800756c:	45c8      	cmp	r8, r9
 800756e:	dc09      	bgt.n	8007584 <_printf_float+0x250>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	079b      	lsls	r3, r3, #30
 8007574:	f100 8103 	bmi.w	800777e <_printf_float+0x44a>
 8007578:	68e0      	ldr	r0, [r4, #12]
 800757a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800757c:	4298      	cmp	r0, r3
 800757e:	bfb8      	it	lt
 8007580:	4618      	movlt	r0, r3
 8007582:	e734      	b.n	80073ee <_printf_float+0xba>
 8007584:	2301      	movs	r3, #1
 8007586:	4652      	mov	r2, sl
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	f43f af2b 	beq.w	80073ea <_printf_float+0xb6>
 8007594:	f109 0901 	add.w	r9, r9, #1
 8007598:	e7e8      	b.n	800756c <_printf_float+0x238>
 800759a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	dc39      	bgt.n	8007614 <_printf_float+0x2e0>
 80075a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007610 <_printf_float+0x2dc>)
 80075a2:	2301      	movs	r3, #1
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f af1d 	beq.w	80073ea <_printf_float+0xb6>
 80075b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80075b4:	ea59 0303 	orrs.w	r3, r9, r3
 80075b8:	d102      	bne.n	80075c0 <_printf_float+0x28c>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	07d9      	lsls	r1, r3, #31
 80075be:	d5d7      	bpl.n	8007570 <_printf_float+0x23c>
 80075c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f af0d 	beq.w	80073ea <_printf_float+0xb6>
 80075d0:	f04f 0a00 	mov.w	sl, #0
 80075d4:	f104 0b1a 	add.w	fp, r4, #26
 80075d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075da:	425b      	negs	r3, r3
 80075dc:	4553      	cmp	r3, sl
 80075de:	dc01      	bgt.n	80075e4 <_printf_float+0x2b0>
 80075e0:	464b      	mov	r3, r9
 80075e2:	e793      	b.n	800750c <_printf_float+0x1d8>
 80075e4:	2301      	movs	r3, #1
 80075e6:	465a      	mov	r2, fp
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b8      	blx	r7
 80075ee:	3001      	adds	r0, #1
 80075f0:	f43f aefb 	beq.w	80073ea <_printf_float+0xb6>
 80075f4:	f10a 0a01 	add.w	sl, sl, #1
 80075f8:	e7ee      	b.n	80075d8 <_printf_float+0x2a4>
 80075fa:	bf00      	nop
 80075fc:	7fefffff 	.word	0x7fefffff
 8007600:	0800a30c 	.word	0x0800a30c
 8007604:	0800a308 	.word	0x0800a308
 8007608:	0800a314 	.word	0x0800a314
 800760c:	0800a310 	.word	0x0800a310
 8007610:	0800a318 	.word	0x0800a318
 8007614:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007616:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800761a:	4553      	cmp	r3, sl
 800761c:	bfa8      	it	ge
 800761e:	4653      	movge	r3, sl
 8007620:	2b00      	cmp	r3, #0
 8007622:	4699      	mov	r9, r3
 8007624:	dc36      	bgt.n	8007694 <_printf_float+0x360>
 8007626:	f04f 0b00 	mov.w	fp, #0
 800762a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800762e:	f104 021a 	add.w	r2, r4, #26
 8007632:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007634:	9306      	str	r3, [sp, #24]
 8007636:	eba3 0309 	sub.w	r3, r3, r9
 800763a:	455b      	cmp	r3, fp
 800763c:	dc31      	bgt.n	80076a2 <_printf_float+0x36e>
 800763e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007640:	459a      	cmp	sl, r3
 8007642:	dc3a      	bgt.n	80076ba <_printf_float+0x386>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	07da      	lsls	r2, r3, #31
 8007648:	d437      	bmi.n	80076ba <_printf_float+0x386>
 800764a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764c:	ebaa 0903 	sub.w	r9, sl, r3
 8007650:	9b06      	ldr	r3, [sp, #24]
 8007652:	ebaa 0303 	sub.w	r3, sl, r3
 8007656:	4599      	cmp	r9, r3
 8007658:	bfa8      	it	ge
 800765a:	4699      	movge	r9, r3
 800765c:	f1b9 0f00 	cmp.w	r9, #0
 8007660:	dc33      	bgt.n	80076ca <_printf_float+0x396>
 8007662:	f04f 0800 	mov.w	r8, #0
 8007666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800766a:	f104 0b1a 	add.w	fp, r4, #26
 800766e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007670:	ebaa 0303 	sub.w	r3, sl, r3
 8007674:	eba3 0309 	sub.w	r3, r3, r9
 8007678:	4543      	cmp	r3, r8
 800767a:	f77f af79 	ble.w	8007570 <_printf_float+0x23c>
 800767e:	2301      	movs	r3, #1
 8007680:	465a      	mov	r2, fp
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	f43f aeae 	beq.w	80073ea <_printf_float+0xb6>
 800768e:	f108 0801 	add.w	r8, r8, #1
 8007692:	e7ec      	b.n	800766e <_printf_float+0x33a>
 8007694:	4642      	mov	r2, r8
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	d1c2      	bne.n	8007626 <_printf_float+0x2f2>
 80076a0:	e6a3      	b.n	80073ea <_printf_float+0xb6>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	9206      	str	r2, [sp, #24]
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f ae9c 	beq.w	80073ea <_printf_float+0xb6>
 80076b2:	9a06      	ldr	r2, [sp, #24]
 80076b4:	f10b 0b01 	add.w	fp, fp, #1
 80076b8:	e7bb      	b.n	8007632 <_printf_float+0x2fe>
 80076ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	d1c0      	bne.n	800764a <_printf_float+0x316>
 80076c8:	e68f      	b.n	80073ea <_printf_float+0xb6>
 80076ca:	9a06      	ldr	r2, [sp, #24]
 80076cc:	464b      	mov	r3, r9
 80076ce:	4442      	add	r2, r8
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	d1c3      	bne.n	8007662 <_printf_float+0x32e>
 80076da:	e686      	b.n	80073ea <_printf_float+0xb6>
 80076dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076e0:	f1ba 0f01 	cmp.w	sl, #1
 80076e4:	dc01      	bgt.n	80076ea <_printf_float+0x3b6>
 80076e6:	07db      	lsls	r3, r3, #31
 80076e8:	d536      	bpl.n	8007758 <_printf_float+0x424>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4642      	mov	r2, r8
 80076ee:	4631      	mov	r1, r6
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b8      	blx	r7
 80076f4:	3001      	adds	r0, #1
 80076f6:	f43f ae78 	beq.w	80073ea <_printf_float+0xb6>
 80076fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076fe:	4631      	mov	r1, r6
 8007700:	4628      	mov	r0, r5
 8007702:	47b8      	blx	r7
 8007704:	3001      	adds	r0, #1
 8007706:	f43f ae70 	beq.w	80073ea <_printf_float+0xb6>
 800770a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800770e:	2200      	movs	r2, #0
 8007710:	2300      	movs	r3, #0
 8007712:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007716:	f7f9 f9e7 	bl	8000ae8 <__aeabi_dcmpeq>
 800771a:	b9c0      	cbnz	r0, 800774e <_printf_float+0x41a>
 800771c:	4653      	mov	r3, sl
 800771e:	f108 0201 	add.w	r2, r8, #1
 8007722:	4631      	mov	r1, r6
 8007724:	4628      	mov	r0, r5
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	d10c      	bne.n	8007746 <_printf_float+0x412>
 800772c:	e65d      	b.n	80073ea <_printf_float+0xb6>
 800772e:	2301      	movs	r3, #1
 8007730:	465a      	mov	r2, fp
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	f43f ae56 	beq.w	80073ea <_printf_float+0xb6>
 800773e:	f108 0801 	add.w	r8, r8, #1
 8007742:	45d0      	cmp	r8, sl
 8007744:	dbf3      	blt.n	800772e <_printf_float+0x3fa>
 8007746:	464b      	mov	r3, r9
 8007748:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800774c:	e6df      	b.n	800750e <_printf_float+0x1da>
 800774e:	f04f 0800 	mov.w	r8, #0
 8007752:	f104 0b1a 	add.w	fp, r4, #26
 8007756:	e7f4      	b.n	8007742 <_printf_float+0x40e>
 8007758:	2301      	movs	r3, #1
 800775a:	4642      	mov	r2, r8
 800775c:	e7e1      	b.n	8007722 <_printf_float+0x3ee>
 800775e:	2301      	movs	r3, #1
 8007760:	464a      	mov	r2, r9
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae3e 	beq.w	80073ea <_printf_float+0xb6>
 800776e:	f108 0801 	add.w	r8, r8, #1
 8007772:	68e3      	ldr	r3, [r4, #12]
 8007774:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007776:	1a5b      	subs	r3, r3, r1
 8007778:	4543      	cmp	r3, r8
 800777a:	dcf0      	bgt.n	800775e <_printf_float+0x42a>
 800777c:	e6fc      	b.n	8007578 <_printf_float+0x244>
 800777e:	f04f 0800 	mov.w	r8, #0
 8007782:	f104 0919 	add.w	r9, r4, #25
 8007786:	e7f4      	b.n	8007772 <_printf_float+0x43e>

08007788 <_printf_common>:
 8007788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800778c:	4616      	mov	r6, r2
 800778e:	4698      	mov	r8, r3
 8007790:	688a      	ldr	r2, [r1, #8]
 8007792:	690b      	ldr	r3, [r1, #16]
 8007794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007798:	4293      	cmp	r3, r2
 800779a:	bfb8      	it	lt
 800779c:	4613      	movlt	r3, r2
 800779e:	6033      	str	r3, [r6, #0]
 80077a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077a4:	4607      	mov	r7, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	b10a      	cbz	r2, 80077ae <_printf_common+0x26>
 80077aa:	3301      	adds	r3, #1
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	0699      	lsls	r1, r3, #26
 80077b2:	bf42      	ittt	mi
 80077b4:	6833      	ldrmi	r3, [r6, #0]
 80077b6:	3302      	addmi	r3, #2
 80077b8:	6033      	strmi	r3, [r6, #0]
 80077ba:	6825      	ldr	r5, [r4, #0]
 80077bc:	f015 0506 	ands.w	r5, r5, #6
 80077c0:	d106      	bne.n	80077d0 <_printf_common+0x48>
 80077c2:	f104 0a19 	add.w	sl, r4, #25
 80077c6:	68e3      	ldr	r3, [r4, #12]
 80077c8:	6832      	ldr	r2, [r6, #0]
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	42ab      	cmp	r3, r5
 80077ce:	dc26      	bgt.n	800781e <_printf_common+0x96>
 80077d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077d4:	6822      	ldr	r2, [r4, #0]
 80077d6:	3b00      	subs	r3, #0
 80077d8:	bf18      	it	ne
 80077da:	2301      	movne	r3, #1
 80077dc:	0692      	lsls	r2, r2, #26
 80077de:	d42b      	bmi.n	8007838 <_printf_common+0xb0>
 80077e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077e4:	4641      	mov	r1, r8
 80077e6:	4638      	mov	r0, r7
 80077e8:	47c8      	blx	r9
 80077ea:	3001      	adds	r0, #1
 80077ec:	d01e      	beq.n	800782c <_printf_common+0xa4>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	f003 0306 	and.w	r3, r3, #6
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	bf02      	ittt	eq
 80077fa:	68e5      	ldreq	r5, [r4, #12]
 80077fc:	6833      	ldreq	r3, [r6, #0]
 80077fe:	1aed      	subeq	r5, r5, r3
 8007800:	68a3      	ldr	r3, [r4, #8]
 8007802:	bf0c      	ite	eq
 8007804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007808:	2500      	movne	r5, #0
 800780a:	4293      	cmp	r3, r2
 800780c:	bfc4      	itt	gt
 800780e:	1a9b      	subgt	r3, r3, r2
 8007810:	18ed      	addgt	r5, r5, r3
 8007812:	2600      	movs	r6, #0
 8007814:	341a      	adds	r4, #26
 8007816:	42b5      	cmp	r5, r6
 8007818:	d11a      	bne.n	8007850 <_printf_common+0xc8>
 800781a:	2000      	movs	r0, #0
 800781c:	e008      	b.n	8007830 <_printf_common+0xa8>
 800781e:	2301      	movs	r3, #1
 8007820:	4652      	mov	r2, sl
 8007822:	4641      	mov	r1, r8
 8007824:	4638      	mov	r0, r7
 8007826:	47c8      	blx	r9
 8007828:	3001      	adds	r0, #1
 800782a:	d103      	bne.n	8007834 <_printf_common+0xac>
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007834:	3501      	adds	r5, #1
 8007836:	e7c6      	b.n	80077c6 <_printf_common+0x3e>
 8007838:	18e1      	adds	r1, r4, r3
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	2030      	movs	r0, #48	@ 0x30
 800783e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007842:	4422      	add	r2, r4
 8007844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800784c:	3302      	adds	r3, #2
 800784e:	e7c7      	b.n	80077e0 <_printf_common+0x58>
 8007850:	2301      	movs	r3, #1
 8007852:	4622      	mov	r2, r4
 8007854:	4641      	mov	r1, r8
 8007856:	4638      	mov	r0, r7
 8007858:	47c8      	blx	r9
 800785a:	3001      	adds	r0, #1
 800785c:	d0e6      	beq.n	800782c <_printf_common+0xa4>
 800785e:	3601      	adds	r6, #1
 8007860:	e7d9      	b.n	8007816 <_printf_common+0x8e>
	...

08007864 <_printf_i>:
 8007864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	7e0f      	ldrb	r7, [r1, #24]
 800786a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800786c:	2f78      	cmp	r7, #120	@ 0x78
 800786e:	4691      	mov	r9, r2
 8007870:	4680      	mov	r8, r0
 8007872:	460c      	mov	r4, r1
 8007874:	469a      	mov	sl, r3
 8007876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800787a:	d807      	bhi.n	800788c <_printf_i+0x28>
 800787c:	2f62      	cmp	r7, #98	@ 0x62
 800787e:	d80a      	bhi.n	8007896 <_printf_i+0x32>
 8007880:	2f00      	cmp	r7, #0
 8007882:	f000 80d1 	beq.w	8007a28 <_printf_i+0x1c4>
 8007886:	2f58      	cmp	r7, #88	@ 0x58
 8007888:	f000 80b8 	beq.w	80079fc <_printf_i+0x198>
 800788c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007894:	e03a      	b.n	800790c <_printf_i+0xa8>
 8007896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800789a:	2b15      	cmp	r3, #21
 800789c:	d8f6      	bhi.n	800788c <_printf_i+0x28>
 800789e:	a101      	add	r1, pc, #4	@ (adr r1, 80078a4 <_printf_i+0x40>)
 80078a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078a4:	080078fd 	.word	0x080078fd
 80078a8:	08007911 	.word	0x08007911
 80078ac:	0800788d 	.word	0x0800788d
 80078b0:	0800788d 	.word	0x0800788d
 80078b4:	0800788d 	.word	0x0800788d
 80078b8:	0800788d 	.word	0x0800788d
 80078bc:	08007911 	.word	0x08007911
 80078c0:	0800788d 	.word	0x0800788d
 80078c4:	0800788d 	.word	0x0800788d
 80078c8:	0800788d 	.word	0x0800788d
 80078cc:	0800788d 	.word	0x0800788d
 80078d0:	08007a0f 	.word	0x08007a0f
 80078d4:	0800793b 	.word	0x0800793b
 80078d8:	080079c9 	.word	0x080079c9
 80078dc:	0800788d 	.word	0x0800788d
 80078e0:	0800788d 	.word	0x0800788d
 80078e4:	08007a31 	.word	0x08007a31
 80078e8:	0800788d 	.word	0x0800788d
 80078ec:	0800793b 	.word	0x0800793b
 80078f0:	0800788d 	.word	0x0800788d
 80078f4:	0800788d 	.word	0x0800788d
 80078f8:	080079d1 	.word	0x080079d1
 80078fc:	6833      	ldr	r3, [r6, #0]
 80078fe:	1d1a      	adds	r2, r3, #4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6032      	str	r2, [r6, #0]
 8007904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800790c:	2301      	movs	r3, #1
 800790e:	e09c      	b.n	8007a4a <_printf_i+0x1e6>
 8007910:	6833      	ldr	r3, [r6, #0]
 8007912:	6820      	ldr	r0, [r4, #0]
 8007914:	1d19      	adds	r1, r3, #4
 8007916:	6031      	str	r1, [r6, #0]
 8007918:	0606      	lsls	r6, r0, #24
 800791a:	d501      	bpl.n	8007920 <_printf_i+0xbc>
 800791c:	681d      	ldr	r5, [r3, #0]
 800791e:	e003      	b.n	8007928 <_printf_i+0xc4>
 8007920:	0645      	lsls	r5, r0, #25
 8007922:	d5fb      	bpl.n	800791c <_printf_i+0xb8>
 8007924:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007928:	2d00      	cmp	r5, #0
 800792a:	da03      	bge.n	8007934 <_printf_i+0xd0>
 800792c:	232d      	movs	r3, #45	@ 0x2d
 800792e:	426d      	negs	r5, r5
 8007930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007934:	4858      	ldr	r0, [pc, #352]	@ (8007a98 <_printf_i+0x234>)
 8007936:	230a      	movs	r3, #10
 8007938:	e011      	b.n	800795e <_printf_i+0xfa>
 800793a:	6821      	ldr	r1, [r4, #0]
 800793c:	6833      	ldr	r3, [r6, #0]
 800793e:	0608      	lsls	r0, r1, #24
 8007940:	f853 5b04 	ldr.w	r5, [r3], #4
 8007944:	d402      	bmi.n	800794c <_printf_i+0xe8>
 8007946:	0649      	lsls	r1, r1, #25
 8007948:	bf48      	it	mi
 800794a:	b2ad      	uxthmi	r5, r5
 800794c:	2f6f      	cmp	r7, #111	@ 0x6f
 800794e:	4852      	ldr	r0, [pc, #328]	@ (8007a98 <_printf_i+0x234>)
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	bf14      	ite	ne
 8007954:	230a      	movne	r3, #10
 8007956:	2308      	moveq	r3, #8
 8007958:	2100      	movs	r1, #0
 800795a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800795e:	6866      	ldr	r6, [r4, #4]
 8007960:	60a6      	str	r6, [r4, #8]
 8007962:	2e00      	cmp	r6, #0
 8007964:	db05      	blt.n	8007972 <_printf_i+0x10e>
 8007966:	6821      	ldr	r1, [r4, #0]
 8007968:	432e      	orrs	r6, r5
 800796a:	f021 0104 	bic.w	r1, r1, #4
 800796e:	6021      	str	r1, [r4, #0]
 8007970:	d04b      	beq.n	8007a0a <_printf_i+0x1a6>
 8007972:	4616      	mov	r6, r2
 8007974:	fbb5 f1f3 	udiv	r1, r5, r3
 8007978:	fb03 5711 	mls	r7, r3, r1, r5
 800797c:	5dc7      	ldrb	r7, [r0, r7]
 800797e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007982:	462f      	mov	r7, r5
 8007984:	42bb      	cmp	r3, r7
 8007986:	460d      	mov	r5, r1
 8007988:	d9f4      	bls.n	8007974 <_printf_i+0x110>
 800798a:	2b08      	cmp	r3, #8
 800798c:	d10b      	bne.n	80079a6 <_printf_i+0x142>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	07df      	lsls	r7, r3, #31
 8007992:	d508      	bpl.n	80079a6 <_printf_i+0x142>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	6861      	ldr	r1, [r4, #4]
 8007998:	4299      	cmp	r1, r3
 800799a:	bfde      	ittt	le
 800799c:	2330      	movle	r3, #48	@ 0x30
 800799e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079a6:	1b92      	subs	r2, r2, r6
 80079a8:	6122      	str	r2, [r4, #16]
 80079aa:	f8cd a000 	str.w	sl, [sp]
 80079ae:	464b      	mov	r3, r9
 80079b0:	aa03      	add	r2, sp, #12
 80079b2:	4621      	mov	r1, r4
 80079b4:	4640      	mov	r0, r8
 80079b6:	f7ff fee7 	bl	8007788 <_printf_common>
 80079ba:	3001      	adds	r0, #1
 80079bc:	d14a      	bne.n	8007a54 <_printf_i+0x1f0>
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	b004      	add	sp, #16
 80079c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	f043 0320 	orr.w	r3, r3, #32
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	4832      	ldr	r0, [pc, #200]	@ (8007a9c <_printf_i+0x238>)
 80079d2:	2778      	movs	r7, #120	@ 0x78
 80079d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	6831      	ldr	r1, [r6, #0]
 80079dc:	061f      	lsls	r7, r3, #24
 80079de:	f851 5b04 	ldr.w	r5, [r1], #4
 80079e2:	d402      	bmi.n	80079ea <_printf_i+0x186>
 80079e4:	065f      	lsls	r7, r3, #25
 80079e6:	bf48      	it	mi
 80079e8:	b2ad      	uxthmi	r5, r5
 80079ea:	6031      	str	r1, [r6, #0]
 80079ec:	07d9      	lsls	r1, r3, #31
 80079ee:	bf44      	itt	mi
 80079f0:	f043 0320 	orrmi.w	r3, r3, #32
 80079f4:	6023      	strmi	r3, [r4, #0]
 80079f6:	b11d      	cbz	r5, 8007a00 <_printf_i+0x19c>
 80079f8:	2310      	movs	r3, #16
 80079fa:	e7ad      	b.n	8007958 <_printf_i+0xf4>
 80079fc:	4826      	ldr	r0, [pc, #152]	@ (8007a98 <_printf_i+0x234>)
 80079fe:	e7e9      	b.n	80079d4 <_printf_i+0x170>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	f023 0320 	bic.w	r3, r3, #32
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	e7f6      	b.n	80079f8 <_printf_i+0x194>
 8007a0a:	4616      	mov	r6, r2
 8007a0c:	e7bd      	b.n	800798a <_printf_i+0x126>
 8007a0e:	6833      	ldr	r3, [r6, #0]
 8007a10:	6825      	ldr	r5, [r4, #0]
 8007a12:	6961      	ldr	r1, [r4, #20]
 8007a14:	1d18      	adds	r0, r3, #4
 8007a16:	6030      	str	r0, [r6, #0]
 8007a18:	062e      	lsls	r6, r5, #24
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	d501      	bpl.n	8007a22 <_printf_i+0x1be>
 8007a1e:	6019      	str	r1, [r3, #0]
 8007a20:	e002      	b.n	8007a28 <_printf_i+0x1c4>
 8007a22:	0668      	lsls	r0, r5, #25
 8007a24:	d5fb      	bpl.n	8007a1e <_printf_i+0x1ba>
 8007a26:	8019      	strh	r1, [r3, #0]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	6123      	str	r3, [r4, #16]
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	e7bc      	b.n	80079aa <_printf_i+0x146>
 8007a30:	6833      	ldr	r3, [r6, #0]
 8007a32:	1d1a      	adds	r2, r3, #4
 8007a34:	6032      	str	r2, [r6, #0]
 8007a36:	681e      	ldr	r6, [r3, #0]
 8007a38:	6862      	ldr	r2, [r4, #4]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7f8 fbd7 	bl	80001f0 <memchr>
 8007a42:	b108      	cbz	r0, 8007a48 <_printf_i+0x1e4>
 8007a44:	1b80      	subs	r0, r0, r6
 8007a46:	6060      	str	r0, [r4, #4]
 8007a48:	6863      	ldr	r3, [r4, #4]
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a52:	e7aa      	b.n	80079aa <_printf_i+0x146>
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	4632      	mov	r2, r6
 8007a58:	4649      	mov	r1, r9
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	47d0      	blx	sl
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d0ad      	beq.n	80079be <_printf_i+0x15a>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	079b      	lsls	r3, r3, #30
 8007a66:	d413      	bmi.n	8007a90 <_printf_i+0x22c>
 8007a68:	68e0      	ldr	r0, [r4, #12]
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	4298      	cmp	r0, r3
 8007a6e:	bfb8      	it	lt
 8007a70:	4618      	movlt	r0, r3
 8007a72:	e7a6      	b.n	80079c2 <_printf_i+0x15e>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4632      	mov	r2, r6
 8007a78:	4649      	mov	r1, r9
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	47d0      	blx	sl
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d09d      	beq.n	80079be <_printf_i+0x15a>
 8007a82:	3501      	adds	r5, #1
 8007a84:	68e3      	ldr	r3, [r4, #12]
 8007a86:	9903      	ldr	r1, [sp, #12]
 8007a88:	1a5b      	subs	r3, r3, r1
 8007a8a:	42ab      	cmp	r3, r5
 8007a8c:	dcf2      	bgt.n	8007a74 <_printf_i+0x210>
 8007a8e:	e7eb      	b.n	8007a68 <_printf_i+0x204>
 8007a90:	2500      	movs	r5, #0
 8007a92:	f104 0619 	add.w	r6, r4, #25
 8007a96:	e7f5      	b.n	8007a84 <_printf_i+0x220>
 8007a98:	0800a31a 	.word	0x0800a31a
 8007a9c:	0800a32b 	.word	0x0800a32b

08007aa0 <std>:
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	b510      	push	{r4, lr}
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8007aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007aae:	6083      	str	r3, [r0, #8]
 8007ab0:	8181      	strh	r1, [r0, #12]
 8007ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ab4:	81c2      	strh	r2, [r0, #14]
 8007ab6:	6183      	str	r3, [r0, #24]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	2208      	movs	r2, #8
 8007abc:	305c      	adds	r0, #92	@ 0x5c
 8007abe:	f000 f92a 	bl	8007d16 <memset>
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8007af8 <std+0x58>)
 8007ac4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8007afc <std+0x5c>)
 8007ac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007aca:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <std+0x60>)
 8007acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ace:	4b0d      	ldr	r3, [pc, #52]	@ (8007b04 <std+0x64>)
 8007ad0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b08 <std+0x68>)
 8007ad4:	6224      	str	r4, [r4, #32]
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d006      	beq.n	8007ae8 <std+0x48>
 8007ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ade:	4294      	cmp	r4, r2
 8007ae0:	d002      	beq.n	8007ae8 <std+0x48>
 8007ae2:	33d0      	adds	r3, #208	@ 0xd0
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	d105      	bne.n	8007af4 <std+0x54>
 8007ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af0:	f000 b98e 	b.w	8007e10 <__retarget_lock_init_recursive>
 8007af4:	bd10      	pop	{r4, pc}
 8007af6:	bf00      	nop
 8007af8:	08007c91 	.word	0x08007c91
 8007afc:	08007cb3 	.word	0x08007cb3
 8007b00:	08007ceb 	.word	0x08007ceb
 8007b04:	08007d0f 	.word	0x08007d0f
 8007b08:	20003860 	.word	0x20003860

08007b0c <stdio_exit_handler>:
 8007b0c:	4a02      	ldr	r2, [pc, #8]	@ (8007b18 <stdio_exit_handler+0xc>)
 8007b0e:	4903      	ldr	r1, [pc, #12]	@ (8007b1c <stdio_exit_handler+0x10>)
 8007b10:	4803      	ldr	r0, [pc, #12]	@ (8007b20 <stdio_exit_handler+0x14>)
 8007b12:	f000 b869 	b.w	8007be8 <_fwalk_sglue>
 8007b16:	bf00      	nop
 8007b18:	20000028 	.word	0x20000028
 8007b1c:	08009775 	.word	0x08009775
 8007b20:	20000038 	.word	0x20000038

08007b24 <cleanup_stdio>:
 8007b24:	6841      	ldr	r1, [r0, #4]
 8007b26:	4b0c      	ldr	r3, [pc, #48]	@ (8007b58 <cleanup_stdio+0x34>)
 8007b28:	4299      	cmp	r1, r3
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	d001      	beq.n	8007b34 <cleanup_stdio+0x10>
 8007b30:	f001 fe20 	bl	8009774 <_fflush_r>
 8007b34:	68a1      	ldr	r1, [r4, #8]
 8007b36:	4b09      	ldr	r3, [pc, #36]	@ (8007b5c <cleanup_stdio+0x38>)
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d002      	beq.n	8007b42 <cleanup_stdio+0x1e>
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f001 fe19 	bl	8009774 <_fflush_r>
 8007b42:	68e1      	ldr	r1, [r4, #12]
 8007b44:	4b06      	ldr	r3, [pc, #24]	@ (8007b60 <cleanup_stdio+0x3c>)
 8007b46:	4299      	cmp	r1, r3
 8007b48:	d004      	beq.n	8007b54 <cleanup_stdio+0x30>
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b50:	f001 be10 	b.w	8009774 <_fflush_r>
 8007b54:	bd10      	pop	{r4, pc}
 8007b56:	bf00      	nop
 8007b58:	20003860 	.word	0x20003860
 8007b5c:	200038c8 	.word	0x200038c8
 8007b60:	20003930 	.word	0x20003930

08007b64 <global_stdio_init.part.0>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	4b0b      	ldr	r3, [pc, #44]	@ (8007b94 <global_stdio_init.part.0+0x30>)
 8007b68:	4c0b      	ldr	r4, [pc, #44]	@ (8007b98 <global_stdio_init.part.0+0x34>)
 8007b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007b9c <global_stdio_init.part.0+0x38>)
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	4620      	mov	r0, r4
 8007b70:	2200      	movs	r2, #0
 8007b72:	2104      	movs	r1, #4
 8007b74:	f7ff ff94 	bl	8007aa0 <std>
 8007b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	2109      	movs	r1, #9
 8007b80:	f7ff ff8e 	bl	8007aa0 <std>
 8007b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b88:	2202      	movs	r2, #2
 8007b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8e:	2112      	movs	r1, #18
 8007b90:	f7ff bf86 	b.w	8007aa0 <std>
 8007b94:	20003998 	.word	0x20003998
 8007b98:	20003860 	.word	0x20003860
 8007b9c:	08007b0d 	.word	0x08007b0d

08007ba0 <__sfp_lock_acquire>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	@ (8007ba8 <__sfp_lock_acquire+0x8>)
 8007ba2:	f000 b936 	b.w	8007e12 <__retarget_lock_acquire_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	200039a1 	.word	0x200039a1

08007bac <__sfp_lock_release>:
 8007bac:	4801      	ldr	r0, [pc, #4]	@ (8007bb4 <__sfp_lock_release+0x8>)
 8007bae:	f000 b931 	b.w	8007e14 <__retarget_lock_release_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	200039a1 	.word	0x200039a1

08007bb8 <__sinit>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	4604      	mov	r4, r0
 8007bbc:	f7ff fff0 	bl	8007ba0 <__sfp_lock_acquire>
 8007bc0:	6a23      	ldr	r3, [r4, #32]
 8007bc2:	b11b      	cbz	r3, 8007bcc <__sinit+0x14>
 8007bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc8:	f7ff bff0 	b.w	8007bac <__sfp_lock_release>
 8007bcc:	4b04      	ldr	r3, [pc, #16]	@ (8007be0 <__sinit+0x28>)
 8007bce:	6223      	str	r3, [r4, #32]
 8007bd0:	4b04      	ldr	r3, [pc, #16]	@ (8007be4 <__sinit+0x2c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1f5      	bne.n	8007bc4 <__sinit+0xc>
 8007bd8:	f7ff ffc4 	bl	8007b64 <global_stdio_init.part.0>
 8007bdc:	e7f2      	b.n	8007bc4 <__sinit+0xc>
 8007bde:	bf00      	nop
 8007be0:	08007b25 	.word	0x08007b25
 8007be4:	20003998 	.word	0x20003998

08007be8 <_fwalk_sglue>:
 8007be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bec:	4607      	mov	r7, r0
 8007bee:	4688      	mov	r8, r1
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8007bfc:	d505      	bpl.n	8007c0a <_fwalk_sglue+0x22>
 8007bfe:	6824      	ldr	r4, [r4, #0]
 8007c00:	2c00      	cmp	r4, #0
 8007c02:	d1f7      	bne.n	8007bf4 <_fwalk_sglue+0xc>
 8007c04:	4630      	mov	r0, r6
 8007c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d907      	bls.n	8007c20 <_fwalk_sglue+0x38>
 8007c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c14:	3301      	adds	r3, #1
 8007c16:	d003      	beq.n	8007c20 <_fwalk_sglue+0x38>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	47c0      	blx	r8
 8007c1e:	4306      	orrs	r6, r0
 8007c20:	3568      	adds	r5, #104	@ 0x68
 8007c22:	e7e9      	b.n	8007bf8 <_fwalk_sglue+0x10>

08007c24 <sniprintf>:
 8007c24:	b40c      	push	{r2, r3}
 8007c26:	b530      	push	{r4, r5, lr}
 8007c28:	4b18      	ldr	r3, [pc, #96]	@ (8007c8c <sniprintf+0x68>)
 8007c2a:	1e0c      	subs	r4, r1, #0
 8007c2c:	681d      	ldr	r5, [r3, #0]
 8007c2e:	b09d      	sub	sp, #116	@ 0x74
 8007c30:	da08      	bge.n	8007c44 <sniprintf+0x20>
 8007c32:	238b      	movs	r3, #139	@ 0x8b
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3a:	b01d      	add	sp, #116	@ 0x74
 8007c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c40:	b002      	add	sp, #8
 8007c42:	4770      	bx	lr
 8007c44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007c52:	bf14      	ite	ne
 8007c54:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c58:	4623      	moveq	r3, r4
 8007c5a:	9304      	str	r3, [sp, #16]
 8007c5c:	9307      	str	r3, [sp, #28]
 8007c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c62:	9002      	str	r0, [sp, #8]
 8007c64:	9006      	str	r0, [sp, #24]
 8007c66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c6c:	ab21      	add	r3, sp, #132	@ 0x84
 8007c6e:	a902      	add	r1, sp, #8
 8007c70:	4628      	mov	r0, r5
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	f001 fbfe 	bl	8009474 <_svfiprintf_r>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	bfbc      	itt	lt
 8007c7c:	238b      	movlt	r3, #139	@ 0x8b
 8007c7e:	602b      	strlt	r3, [r5, #0]
 8007c80:	2c00      	cmp	r4, #0
 8007c82:	d0da      	beq.n	8007c3a <sniprintf+0x16>
 8007c84:	9b02      	ldr	r3, [sp, #8]
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	e7d6      	b.n	8007c3a <sniprintf+0x16>
 8007c8c:	20000034 	.word	0x20000034

08007c90 <__sread>:
 8007c90:	b510      	push	{r4, lr}
 8007c92:	460c      	mov	r4, r1
 8007c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c98:	f000 f86c 	bl	8007d74 <_read_r>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	bfab      	itete	ge
 8007ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ca4:	181b      	addge	r3, r3, r0
 8007ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007caa:	bfac      	ite	ge
 8007cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007cae:	81a3      	strhlt	r3, [r4, #12]
 8007cb0:	bd10      	pop	{r4, pc}

08007cb2 <__swrite>:
 8007cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb6:	461f      	mov	r7, r3
 8007cb8:	898b      	ldrh	r3, [r1, #12]
 8007cba:	05db      	lsls	r3, r3, #23
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	d505      	bpl.n	8007cd0 <__swrite+0x1e>
 8007cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc8:	2302      	movs	r3, #2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f000 f840 	bl	8007d50 <_lseek_r>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	4632      	mov	r2, r6
 8007cde:	463b      	mov	r3, r7
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce6:	f000 b857 	b.w	8007d98 <_write_r>

08007cea <__sseek>:
 8007cea:	b510      	push	{r4, lr}
 8007cec:	460c      	mov	r4, r1
 8007cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf2:	f000 f82d 	bl	8007d50 <_lseek_r>
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	bf15      	itete	ne
 8007cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d06:	81a3      	strheq	r3, [r4, #12]
 8007d08:	bf18      	it	ne
 8007d0a:	81a3      	strhne	r3, [r4, #12]
 8007d0c:	bd10      	pop	{r4, pc}

08007d0e <__sclose>:
 8007d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d12:	f000 b80d 	b.w	8007d30 <_close_r>

08007d16 <memset>:
 8007d16:	4402      	add	r2, r0
 8007d18:	4603      	mov	r3, r0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d100      	bne.n	8007d20 <memset+0xa>
 8007d1e:	4770      	bx	lr
 8007d20:	f803 1b01 	strb.w	r1, [r3], #1
 8007d24:	e7f9      	b.n	8007d1a <memset+0x4>
	...

08007d28 <_localeconv_r>:
 8007d28:	4800      	ldr	r0, [pc, #0]	@ (8007d2c <_localeconv_r+0x4>)
 8007d2a:	4770      	bx	lr
 8007d2c:	20000174 	.word	0x20000174

08007d30 <_close_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d06      	ldr	r5, [pc, #24]	@ (8007d4c <_close_r+0x1c>)
 8007d34:	2300      	movs	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7fa f804 	bl	8001d48 <_close>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_close_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_close_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	2000399c 	.word	0x2000399c

08007d50 <_lseek_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d07      	ldr	r5, [pc, #28]	@ (8007d70 <_lseek_r+0x20>)
 8007d54:	4604      	mov	r4, r0
 8007d56:	4608      	mov	r0, r1
 8007d58:	4611      	mov	r1, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f7fa f819 	bl	8001d96 <_lseek>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_lseek_r+0x1e>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_lseek_r+0x1e>
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	2000399c 	.word	0x2000399c

08007d74 <_read_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d07      	ldr	r5, [pc, #28]	@ (8007d94 <_read_r+0x20>)
 8007d78:	4604      	mov	r4, r0
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	2200      	movs	r2, #0
 8007d80:	602a      	str	r2, [r5, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f7f9 ffa7 	bl	8001cd6 <_read>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_read_r+0x1e>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_read_r+0x1e>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	2000399c 	.word	0x2000399c

08007d98 <_write_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4d07      	ldr	r5, [pc, #28]	@ (8007db8 <_write_r+0x20>)
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	4608      	mov	r0, r1
 8007da0:	4611      	mov	r1, r2
 8007da2:	2200      	movs	r2, #0
 8007da4:	602a      	str	r2, [r5, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	f7f9 ffb2 	bl	8001d10 <_write>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d102      	bne.n	8007db6 <_write_r+0x1e>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	b103      	cbz	r3, 8007db6 <_write_r+0x1e>
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	2000399c 	.word	0x2000399c

08007dbc <__errno>:
 8007dbc:	4b01      	ldr	r3, [pc, #4]	@ (8007dc4 <__errno+0x8>)
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000034 	.word	0x20000034

08007dc8 <__libc_init_array>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	4d0d      	ldr	r5, [pc, #52]	@ (8007e00 <__libc_init_array+0x38>)
 8007dcc:	4c0d      	ldr	r4, [pc, #52]	@ (8007e04 <__libc_init_array+0x3c>)
 8007dce:	1b64      	subs	r4, r4, r5
 8007dd0:	10a4      	asrs	r4, r4, #2
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	42a6      	cmp	r6, r4
 8007dd6:	d109      	bne.n	8007dec <__libc_init_array+0x24>
 8007dd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007e08 <__libc_init_array+0x40>)
 8007dda:	4c0c      	ldr	r4, [pc, #48]	@ (8007e0c <__libc_init_array+0x44>)
 8007ddc:	f002 f868 	bl	8009eb0 <_init>
 8007de0:	1b64      	subs	r4, r4, r5
 8007de2:	10a4      	asrs	r4, r4, #2
 8007de4:	2600      	movs	r6, #0
 8007de6:	42a6      	cmp	r6, r4
 8007de8:	d105      	bne.n	8007df6 <__libc_init_array+0x2e>
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
 8007dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df0:	4798      	blx	r3
 8007df2:	3601      	adds	r6, #1
 8007df4:	e7ee      	b.n	8007dd4 <__libc_init_array+0xc>
 8007df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfa:	4798      	blx	r3
 8007dfc:	3601      	adds	r6, #1
 8007dfe:	e7f2      	b.n	8007de6 <__libc_init_array+0x1e>
 8007e00:	0800a684 	.word	0x0800a684
 8007e04:	0800a684 	.word	0x0800a684
 8007e08:	0800a684 	.word	0x0800a684
 8007e0c:	0800a688 	.word	0x0800a688

08007e10 <__retarget_lock_init_recursive>:
 8007e10:	4770      	bx	lr

08007e12 <__retarget_lock_acquire_recursive>:
 8007e12:	4770      	bx	lr

08007e14 <__retarget_lock_release_recursive>:
 8007e14:	4770      	bx	lr

08007e16 <quorem>:
 8007e16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	6903      	ldr	r3, [r0, #16]
 8007e1c:	690c      	ldr	r4, [r1, #16]
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	4607      	mov	r7, r0
 8007e22:	db7e      	blt.n	8007f22 <quorem+0x10c>
 8007e24:	3c01      	subs	r4, #1
 8007e26:	f101 0814 	add.w	r8, r1, #20
 8007e2a:	00a3      	lsls	r3, r4, #2
 8007e2c:	f100 0514 	add.w	r5, r0, #20
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e40:	3301      	adds	r3, #1
 8007e42:	429a      	cmp	r2, r3
 8007e44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e48:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e4c:	d32e      	bcc.n	8007eac <quorem+0x96>
 8007e4e:	f04f 0a00 	mov.w	sl, #0
 8007e52:	46c4      	mov	ip, r8
 8007e54:	46ae      	mov	lr, r5
 8007e56:	46d3      	mov	fp, sl
 8007e58:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e5c:	b298      	uxth	r0, r3
 8007e5e:	fb06 a000 	mla	r0, r6, r0, sl
 8007e62:	0c02      	lsrs	r2, r0, #16
 8007e64:	0c1b      	lsrs	r3, r3, #16
 8007e66:	fb06 2303 	mla	r3, r6, r3, r2
 8007e6a:	f8de 2000 	ldr.w	r2, [lr]
 8007e6e:	b280      	uxth	r0, r0
 8007e70:	b292      	uxth	r2, r2
 8007e72:	1a12      	subs	r2, r2, r0
 8007e74:	445a      	add	r2, fp
 8007e76:	f8de 0000 	ldr.w	r0, [lr]
 8007e7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e84:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e88:	b292      	uxth	r2, r2
 8007e8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e8e:	45e1      	cmp	r9, ip
 8007e90:	f84e 2b04 	str.w	r2, [lr], #4
 8007e94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e98:	d2de      	bcs.n	8007e58 <quorem+0x42>
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	58eb      	ldr	r3, [r5, r3]
 8007e9e:	b92b      	cbnz	r3, 8007eac <quorem+0x96>
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	3b04      	subs	r3, #4
 8007ea4:	429d      	cmp	r5, r3
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	d32f      	bcc.n	8007f0a <quorem+0xf4>
 8007eaa:	613c      	str	r4, [r7, #16]
 8007eac:	4638      	mov	r0, r7
 8007eae:	f001 f97d 	bl	80091ac <__mcmp>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	db25      	blt.n	8007f02 <quorem+0xec>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ebe:	f8d1 c000 	ldr.w	ip, [r1]
 8007ec2:	fa1f fe82 	uxth.w	lr, r2
 8007ec6:	fa1f f38c 	uxth.w	r3, ip
 8007eca:	eba3 030e 	sub.w	r3, r3, lr
 8007ece:	4403      	add	r3, r0
 8007ed0:	0c12      	lsrs	r2, r2, #16
 8007ed2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ed6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ee0:	45c1      	cmp	r9, r8
 8007ee2:	f841 3b04 	str.w	r3, [r1], #4
 8007ee6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007eea:	d2e6      	bcs.n	8007eba <quorem+0xa4>
 8007eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ef0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ef4:	b922      	cbnz	r2, 8007f00 <quorem+0xea>
 8007ef6:	3b04      	subs	r3, #4
 8007ef8:	429d      	cmp	r5, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	d30b      	bcc.n	8007f16 <quorem+0x100>
 8007efe:	613c      	str	r4, [r7, #16]
 8007f00:	3601      	adds	r6, #1
 8007f02:	4630      	mov	r0, r6
 8007f04:	b003      	add	sp, #12
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	6812      	ldr	r2, [r2, #0]
 8007f0c:	3b04      	subs	r3, #4
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	d1cb      	bne.n	8007eaa <quorem+0x94>
 8007f12:	3c01      	subs	r4, #1
 8007f14:	e7c6      	b.n	8007ea4 <quorem+0x8e>
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	3b04      	subs	r3, #4
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d1ef      	bne.n	8007efe <quorem+0xe8>
 8007f1e:	3c01      	subs	r4, #1
 8007f20:	e7ea      	b.n	8007ef8 <quorem+0xe2>
 8007f22:	2000      	movs	r0, #0
 8007f24:	e7ee      	b.n	8007f04 <quorem+0xee>
	...

08007f28 <_dtoa_r>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	69c7      	ldr	r7, [r0, #28]
 8007f2e:	b097      	sub	sp, #92	@ 0x5c
 8007f30:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007f34:	ec55 4b10 	vmov	r4, r5, d0
 8007f38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007f3a:	9107      	str	r1, [sp, #28]
 8007f3c:	4681      	mov	r9, r0
 8007f3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f40:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f42:	b97f      	cbnz	r7, 8007f64 <_dtoa_r+0x3c>
 8007f44:	2010      	movs	r0, #16
 8007f46:	f000 fe09 	bl	8008b5c <malloc>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007f50:	b920      	cbnz	r0, 8007f5c <_dtoa_r+0x34>
 8007f52:	4ba9      	ldr	r3, [pc, #676]	@ (80081f8 <_dtoa_r+0x2d0>)
 8007f54:	21ef      	movs	r1, #239	@ 0xef
 8007f56:	48a9      	ldr	r0, [pc, #676]	@ (80081fc <_dtoa_r+0x2d4>)
 8007f58:	f001 fc6c 	bl	8009834 <__assert_func>
 8007f5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f60:	6007      	str	r7, [r0, #0]
 8007f62:	60c7      	str	r7, [r0, #12]
 8007f64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	b159      	cbz	r1, 8007f84 <_dtoa_r+0x5c>
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	604a      	str	r2, [r1, #4]
 8007f70:	2301      	movs	r3, #1
 8007f72:	4093      	lsls	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
 8007f76:	4648      	mov	r0, r9
 8007f78:	f000 fee6 	bl	8008d48 <_Bfree>
 8007f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	1e2b      	subs	r3, r5, #0
 8007f86:	bfb9      	ittee	lt
 8007f88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f8c:	9305      	strlt	r3, [sp, #20]
 8007f8e:	2300      	movge	r3, #0
 8007f90:	6033      	strge	r3, [r6, #0]
 8007f92:	9f05      	ldr	r7, [sp, #20]
 8007f94:	4b9a      	ldr	r3, [pc, #616]	@ (8008200 <_dtoa_r+0x2d8>)
 8007f96:	bfbc      	itt	lt
 8007f98:	2201      	movlt	r2, #1
 8007f9a:	6032      	strlt	r2, [r6, #0]
 8007f9c:	43bb      	bics	r3, r7
 8007f9e:	d112      	bne.n	8007fc6 <_dtoa_r+0x9e>
 8007fa0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007fa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fac:	4323      	orrs	r3, r4
 8007fae:	f000 855a 	beq.w	8008a66 <_dtoa_r+0xb3e>
 8007fb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fb4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008214 <_dtoa_r+0x2ec>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 855c 	beq.w	8008a76 <_dtoa_r+0xb4e>
 8007fbe:	f10a 0303 	add.w	r3, sl, #3
 8007fc2:	f000 bd56 	b.w	8008a72 <_dtoa_r+0xb4a>
 8007fc6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	ec51 0b17 	vmov	r0, r1, d7
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007fd6:	f7f8 fd87 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fda:	4680      	mov	r8, r0
 8007fdc:	b158      	cbz	r0, 8007ff6 <_dtoa_r+0xce>
 8007fde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fe6:	b113      	cbz	r3, 8007fee <_dtoa_r+0xc6>
 8007fe8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007fea:	4b86      	ldr	r3, [pc, #536]	@ (8008204 <_dtoa_r+0x2dc>)
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008218 <_dtoa_r+0x2f0>
 8007ff2:	f000 bd40 	b.w	8008a76 <_dtoa_r+0xb4e>
 8007ff6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007ffa:	aa14      	add	r2, sp, #80	@ 0x50
 8007ffc:	a915      	add	r1, sp, #84	@ 0x54
 8007ffe:	4648      	mov	r0, r9
 8008000:	f001 f984 	bl	800930c <__d2b>
 8008004:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008008:	9002      	str	r0, [sp, #8]
 800800a:	2e00      	cmp	r6, #0
 800800c:	d078      	beq.n	8008100 <_dtoa_r+0x1d8>
 800800e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008010:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008018:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800801c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008020:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008024:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008028:	4619      	mov	r1, r3
 800802a:	2200      	movs	r2, #0
 800802c:	4b76      	ldr	r3, [pc, #472]	@ (8008208 <_dtoa_r+0x2e0>)
 800802e:	f7f8 f93b 	bl	80002a8 <__aeabi_dsub>
 8008032:	a36b      	add	r3, pc, #428	@ (adr r3, 80081e0 <_dtoa_r+0x2b8>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 faee 	bl	8000618 <__aeabi_dmul>
 800803c:	a36a      	add	r3, pc, #424	@ (adr r3, 80081e8 <_dtoa_r+0x2c0>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	f7f8 f933 	bl	80002ac <__adddf3>
 8008046:	4604      	mov	r4, r0
 8008048:	4630      	mov	r0, r6
 800804a:	460d      	mov	r5, r1
 800804c:	f7f8 fa7a 	bl	8000544 <__aeabi_i2d>
 8008050:	a367      	add	r3, pc, #412	@ (adr r3, 80081f0 <_dtoa_r+0x2c8>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f7f8 fadf 	bl	8000618 <__aeabi_dmul>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 f923 	bl	80002ac <__adddf3>
 8008066:	4604      	mov	r4, r0
 8008068:	460d      	mov	r5, r1
 800806a:	f7f8 fd85 	bl	8000b78 <__aeabi_d2iz>
 800806e:	2200      	movs	r2, #0
 8008070:	4607      	mov	r7, r0
 8008072:	2300      	movs	r3, #0
 8008074:	4620      	mov	r0, r4
 8008076:	4629      	mov	r1, r5
 8008078:	f7f8 fd40 	bl	8000afc <__aeabi_dcmplt>
 800807c:	b140      	cbz	r0, 8008090 <_dtoa_r+0x168>
 800807e:	4638      	mov	r0, r7
 8008080:	f7f8 fa60 	bl	8000544 <__aeabi_i2d>
 8008084:	4622      	mov	r2, r4
 8008086:	462b      	mov	r3, r5
 8008088:	f7f8 fd2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800808c:	b900      	cbnz	r0, 8008090 <_dtoa_r+0x168>
 800808e:	3f01      	subs	r7, #1
 8008090:	2f16      	cmp	r7, #22
 8008092:	d852      	bhi.n	800813a <_dtoa_r+0x212>
 8008094:	4b5d      	ldr	r3, [pc, #372]	@ (800820c <_dtoa_r+0x2e4>)
 8008096:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80080a2:	f7f8 fd2b 	bl	8000afc <__aeabi_dcmplt>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d049      	beq.n	800813e <_dtoa_r+0x216>
 80080aa:	3f01      	subs	r7, #1
 80080ac:	2300      	movs	r3, #0
 80080ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80080b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80080b2:	1b9b      	subs	r3, r3, r6
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	bf45      	ittet	mi
 80080b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80080bc:	9300      	strmi	r3, [sp, #0]
 80080be:	2300      	movpl	r3, #0
 80080c0:	2300      	movmi	r3, #0
 80080c2:	9206      	str	r2, [sp, #24]
 80080c4:	bf54      	ite	pl
 80080c6:	9300      	strpl	r3, [sp, #0]
 80080c8:	9306      	strmi	r3, [sp, #24]
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	db39      	blt.n	8008142 <_dtoa_r+0x21a>
 80080ce:	9b06      	ldr	r3, [sp, #24]
 80080d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80080d2:	443b      	add	r3, r7
 80080d4:	9306      	str	r3, [sp, #24]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9308      	str	r3, [sp, #32]
 80080da:	9b07      	ldr	r3, [sp, #28]
 80080dc:	2b09      	cmp	r3, #9
 80080de:	d863      	bhi.n	80081a8 <_dtoa_r+0x280>
 80080e0:	2b05      	cmp	r3, #5
 80080e2:	bfc4      	itt	gt
 80080e4:	3b04      	subgt	r3, #4
 80080e6:	9307      	strgt	r3, [sp, #28]
 80080e8:	9b07      	ldr	r3, [sp, #28]
 80080ea:	f1a3 0302 	sub.w	r3, r3, #2
 80080ee:	bfcc      	ite	gt
 80080f0:	2400      	movgt	r4, #0
 80080f2:	2401      	movle	r4, #1
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d863      	bhi.n	80081c0 <_dtoa_r+0x298>
 80080f8:	e8df f003 	tbb	[pc, r3]
 80080fc:	2b375452 	.word	0x2b375452
 8008100:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008104:	441e      	add	r6, r3
 8008106:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800810a:	2b20      	cmp	r3, #32
 800810c:	bfc1      	itttt	gt
 800810e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008112:	409f      	lslgt	r7, r3
 8008114:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008118:	fa24 f303 	lsrgt.w	r3, r4, r3
 800811c:	bfd6      	itet	le
 800811e:	f1c3 0320 	rsble	r3, r3, #32
 8008122:	ea47 0003 	orrgt.w	r0, r7, r3
 8008126:	fa04 f003 	lslle.w	r0, r4, r3
 800812a:	f7f8 f9fb 	bl	8000524 <__aeabi_ui2d>
 800812e:	2201      	movs	r2, #1
 8008130:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008134:	3e01      	subs	r6, #1
 8008136:	9212      	str	r2, [sp, #72]	@ 0x48
 8008138:	e776      	b.n	8008028 <_dtoa_r+0x100>
 800813a:	2301      	movs	r3, #1
 800813c:	e7b7      	b.n	80080ae <_dtoa_r+0x186>
 800813e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008140:	e7b6      	b.n	80080b0 <_dtoa_r+0x188>
 8008142:	9b00      	ldr	r3, [sp, #0]
 8008144:	1bdb      	subs	r3, r3, r7
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	427b      	negs	r3, r7
 800814a:	9308      	str	r3, [sp, #32]
 800814c:	2300      	movs	r3, #0
 800814e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008150:	e7c3      	b.n	80080da <_dtoa_r+0x1b2>
 8008152:	2301      	movs	r3, #1
 8008154:	9309      	str	r3, [sp, #36]	@ 0x24
 8008156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008158:	eb07 0b03 	add.w	fp, r7, r3
 800815c:	f10b 0301 	add.w	r3, fp, #1
 8008160:	2b01      	cmp	r3, #1
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	bfb8      	it	lt
 8008166:	2301      	movlt	r3, #1
 8008168:	e006      	b.n	8008178 <_dtoa_r+0x250>
 800816a:	2301      	movs	r3, #1
 800816c:	9309      	str	r3, [sp, #36]	@ 0x24
 800816e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd28      	ble.n	80081c6 <_dtoa_r+0x29e>
 8008174:	469b      	mov	fp, r3
 8008176:	9303      	str	r3, [sp, #12]
 8008178:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800817c:	2100      	movs	r1, #0
 800817e:	2204      	movs	r2, #4
 8008180:	f102 0514 	add.w	r5, r2, #20
 8008184:	429d      	cmp	r5, r3
 8008186:	d926      	bls.n	80081d6 <_dtoa_r+0x2ae>
 8008188:	6041      	str	r1, [r0, #4]
 800818a:	4648      	mov	r0, r9
 800818c:	f000 fd9c 	bl	8008cc8 <_Balloc>
 8008190:	4682      	mov	sl, r0
 8008192:	2800      	cmp	r0, #0
 8008194:	d142      	bne.n	800821c <_dtoa_r+0x2f4>
 8008196:	4b1e      	ldr	r3, [pc, #120]	@ (8008210 <_dtoa_r+0x2e8>)
 8008198:	4602      	mov	r2, r0
 800819a:	f240 11af 	movw	r1, #431	@ 0x1af
 800819e:	e6da      	b.n	8007f56 <_dtoa_r+0x2e>
 80081a0:	2300      	movs	r3, #0
 80081a2:	e7e3      	b.n	800816c <_dtoa_r+0x244>
 80081a4:	2300      	movs	r3, #0
 80081a6:	e7d5      	b.n	8008154 <_dtoa_r+0x22c>
 80081a8:	2401      	movs	r4, #1
 80081aa:	2300      	movs	r3, #0
 80081ac:	9307      	str	r3, [sp, #28]
 80081ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80081b0:	f04f 3bff 	mov.w	fp, #4294967295
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80081ba:	2312      	movs	r3, #18
 80081bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80081be:	e7db      	b.n	8008178 <_dtoa_r+0x250>
 80081c0:	2301      	movs	r3, #1
 80081c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c4:	e7f4      	b.n	80081b0 <_dtoa_r+0x288>
 80081c6:	f04f 0b01 	mov.w	fp, #1
 80081ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80081ce:	465b      	mov	r3, fp
 80081d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80081d4:	e7d0      	b.n	8008178 <_dtoa_r+0x250>
 80081d6:	3101      	adds	r1, #1
 80081d8:	0052      	lsls	r2, r2, #1
 80081da:	e7d1      	b.n	8008180 <_dtoa_r+0x258>
 80081dc:	f3af 8000 	nop.w
 80081e0:	636f4361 	.word	0x636f4361
 80081e4:	3fd287a7 	.word	0x3fd287a7
 80081e8:	8b60c8b3 	.word	0x8b60c8b3
 80081ec:	3fc68a28 	.word	0x3fc68a28
 80081f0:	509f79fb 	.word	0x509f79fb
 80081f4:	3fd34413 	.word	0x3fd34413
 80081f8:	0800a349 	.word	0x0800a349
 80081fc:	0800a360 	.word	0x0800a360
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	0800a319 	.word	0x0800a319
 8008208:	3ff80000 	.word	0x3ff80000
 800820c:	0800a4b0 	.word	0x0800a4b0
 8008210:	0800a3b8 	.word	0x0800a3b8
 8008214:	0800a345 	.word	0x0800a345
 8008218:	0800a318 	.word	0x0800a318
 800821c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008220:	6018      	str	r0, [r3, #0]
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	2b0e      	cmp	r3, #14
 8008226:	f200 80a1 	bhi.w	800836c <_dtoa_r+0x444>
 800822a:	2c00      	cmp	r4, #0
 800822c:	f000 809e 	beq.w	800836c <_dtoa_r+0x444>
 8008230:	2f00      	cmp	r7, #0
 8008232:	dd33      	ble.n	800829c <_dtoa_r+0x374>
 8008234:	4b9c      	ldr	r3, [pc, #624]	@ (80084a8 <_dtoa_r+0x580>)
 8008236:	f007 020f 	and.w	r2, r7, #15
 800823a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800823e:	ed93 7b00 	vldr	d7, [r3]
 8008242:	05f8      	lsls	r0, r7, #23
 8008244:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008248:	ea4f 1427 	mov.w	r4, r7, asr #4
 800824c:	d516      	bpl.n	800827c <_dtoa_r+0x354>
 800824e:	4b97      	ldr	r3, [pc, #604]	@ (80084ac <_dtoa_r+0x584>)
 8008250:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008258:	f7f8 fb08 	bl	800086c <__aeabi_ddiv>
 800825c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008260:	f004 040f 	and.w	r4, r4, #15
 8008264:	2603      	movs	r6, #3
 8008266:	4d91      	ldr	r5, [pc, #580]	@ (80084ac <_dtoa_r+0x584>)
 8008268:	b954      	cbnz	r4, 8008280 <_dtoa_r+0x358>
 800826a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800826e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008272:	f7f8 fafb 	bl	800086c <__aeabi_ddiv>
 8008276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800827a:	e028      	b.n	80082ce <_dtoa_r+0x3a6>
 800827c:	2602      	movs	r6, #2
 800827e:	e7f2      	b.n	8008266 <_dtoa_r+0x33e>
 8008280:	07e1      	lsls	r1, r4, #31
 8008282:	d508      	bpl.n	8008296 <_dtoa_r+0x36e>
 8008284:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008288:	e9d5 2300 	ldrd	r2, r3, [r5]
 800828c:	f7f8 f9c4 	bl	8000618 <__aeabi_dmul>
 8008290:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008294:	3601      	adds	r6, #1
 8008296:	1064      	asrs	r4, r4, #1
 8008298:	3508      	adds	r5, #8
 800829a:	e7e5      	b.n	8008268 <_dtoa_r+0x340>
 800829c:	f000 80af 	beq.w	80083fe <_dtoa_r+0x4d6>
 80082a0:	427c      	negs	r4, r7
 80082a2:	4b81      	ldr	r3, [pc, #516]	@ (80084a8 <_dtoa_r+0x580>)
 80082a4:	4d81      	ldr	r5, [pc, #516]	@ (80084ac <_dtoa_r+0x584>)
 80082a6:	f004 020f 	and.w	r2, r4, #15
 80082aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082b6:	f7f8 f9af 	bl	8000618 <__aeabi_dmul>
 80082ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082be:	1124      	asrs	r4, r4, #4
 80082c0:	2300      	movs	r3, #0
 80082c2:	2602      	movs	r6, #2
 80082c4:	2c00      	cmp	r4, #0
 80082c6:	f040 808f 	bne.w	80083e8 <_dtoa_r+0x4c0>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1d3      	bne.n	8008276 <_dtoa_r+0x34e>
 80082ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 8094 	beq.w	8008402 <_dtoa_r+0x4da>
 80082da:	4b75      	ldr	r3, [pc, #468]	@ (80084b0 <_dtoa_r+0x588>)
 80082dc:	2200      	movs	r2, #0
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f8 fc0b 	bl	8000afc <__aeabi_dcmplt>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f000 808b 	beq.w	8008402 <_dtoa_r+0x4da>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 8087 	beq.w	8008402 <_dtoa_r+0x4da>
 80082f4:	f1bb 0f00 	cmp.w	fp, #0
 80082f8:	dd34      	ble.n	8008364 <_dtoa_r+0x43c>
 80082fa:	4620      	mov	r0, r4
 80082fc:	4b6d      	ldr	r3, [pc, #436]	@ (80084b4 <_dtoa_r+0x58c>)
 80082fe:	2200      	movs	r2, #0
 8008300:	4629      	mov	r1, r5
 8008302:	f7f8 f989 	bl	8000618 <__aeabi_dmul>
 8008306:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800830a:	f107 38ff 	add.w	r8, r7, #4294967295
 800830e:	3601      	adds	r6, #1
 8008310:	465c      	mov	r4, fp
 8008312:	4630      	mov	r0, r6
 8008314:	f7f8 f916 	bl	8000544 <__aeabi_i2d>
 8008318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800831c:	f7f8 f97c 	bl	8000618 <__aeabi_dmul>
 8008320:	4b65      	ldr	r3, [pc, #404]	@ (80084b8 <_dtoa_r+0x590>)
 8008322:	2200      	movs	r2, #0
 8008324:	f7f7 ffc2 	bl	80002ac <__adddf3>
 8008328:	4605      	mov	r5, r0
 800832a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800832e:	2c00      	cmp	r4, #0
 8008330:	d16a      	bne.n	8008408 <_dtoa_r+0x4e0>
 8008332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008336:	4b61      	ldr	r3, [pc, #388]	@ (80084bc <_dtoa_r+0x594>)
 8008338:	2200      	movs	r2, #0
 800833a:	f7f7 ffb5 	bl	80002a8 <__aeabi_dsub>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008346:	462a      	mov	r2, r5
 8008348:	4633      	mov	r3, r6
 800834a:	f7f8 fbf5 	bl	8000b38 <__aeabi_dcmpgt>
 800834e:	2800      	cmp	r0, #0
 8008350:	f040 8298 	bne.w	8008884 <_dtoa_r+0x95c>
 8008354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008358:	462a      	mov	r2, r5
 800835a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800835e:	f7f8 fbcd 	bl	8000afc <__aeabi_dcmplt>
 8008362:	bb38      	cbnz	r0, 80083b4 <_dtoa_r+0x48c>
 8008364:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008368:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800836c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800836e:	2b00      	cmp	r3, #0
 8008370:	f2c0 8157 	blt.w	8008622 <_dtoa_r+0x6fa>
 8008374:	2f0e      	cmp	r7, #14
 8008376:	f300 8154 	bgt.w	8008622 <_dtoa_r+0x6fa>
 800837a:	4b4b      	ldr	r3, [pc, #300]	@ (80084a8 <_dtoa_r+0x580>)
 800837c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008380:	ed93 7b00 	vldr	d7, [r3]
 8008384:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008386:	2b00      	cmp	r3, #0
 8008388:	ed8d 7b00 	vstr	d7, [sp]
 800838c:	f280 80e5 	bge.w	800855a <_dtoa_r+0x632>
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	f300 80e1 	bgt.w	800855a <_dtoa_r+0x632>
 8008398:	d10c      	bne.n	80083b4 <_dtoa_r+0x48c>
 800839a:	4b48      	ldr	r3, [pc, #288]	@ (80084bc <_dtoa_r+0x594>)
 800839c:	2200      	movs	r2, #0
 800839e:	ec51 0b17 	vmov	r0, r1, d7
 80083a2:	f7f8 f939 	bl	8000618 <__aeabi_dmul>
 80083a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083aa:	f7f8 fbbb 	bl	8000b24 <__aeabi_dcmpge>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f000 8266 	beq.w	8008880 <_dtoa_r+0x958>
 80083b4:	2400      	movs	r4, #0
 80083b6:	4625      	mov	r5, r4
 80083b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083ba:	4656      	mov	r6, sl
 80083bc:	ea6f 0803 	mvn.w	r8, r3
 80083c0:	2700      	movs	r7, #0
 80083c2:	4621      	mov	r1, r4
 80083c4:	4648      	mov	r0, r9
 80083c6:	f000 fcbf 	bl	8008d48 <_Bfree>
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	f000 80bd 	beq.w	800854a <_dtoa_r+0x622>
 80083d0:	b12f      	cbz	r7, 80083de <_dtoa_r+0x4b6>
 80083d2:	42af      	cmp	r7, r5
 80083d4:	d003      	beq.n	80083de <_dtoa_r+0x4b6>
 80083d6:	4639      	mov	r1, r7
 80083d8:	4648      	mov	r0, r9
 80083da:	f000 fcb5 	bl	8008d48 <_Bfree>
 80083de:	4629      	mov	r1, r5
 80083e0:	4648      	mov	r0, r9
 80083e2:	f000 fcb1 	bl	8008d48 <_Bfree>
 80083e6:	e0b0      	b.n	800854a <_dtoa_r+0x622>
 80083e8:	07e2      	lsls	r2, r4, #31
 80083ea:	d505      	bpl.n	80083f8 <_dtoa_r+0x4d0>
 80083ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083f0:	f7f8 f912 	bl	8000618 <__aeabi_dmul>
 80083f4:	3601      	adds	r6, #1
 80083f6:	2301      	movs	r3, #1
 80083f8:	1064      	asrs	r4, r4, #1
 80083fa:	3508      	adds	r5, #8
 80083fc:	e762      	b.n	80082c4 <_dtoa_r+0x39c>
 80083fe:	2602      	movs	r6, #2
 8008400:	e765      	b.n	80082ce <_dtoa_r+0x3a6>
 8008402:	9c03      	ldr	r4, [sp, #12]
 8008404:	46b8      	mov	r8, r7
 8008406:	e784      	b.n	8008312 <_dtoa_r+0x3ea>
 8008408:	4b27      	ldr	r3, [pc, #156]	@ (80084a8 <_dtoa_r+0x580>)
 800840a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800840c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008410:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008414:	4454      	add	r4, sl
 8008416:	2900      	cmp	r1, #0
 8008418:	d054      	beq.n	80084c4 <_dtoa_r+0x59c>
 800841a:	4929      	ldr	r1, [pc, #164]	@ (80084c0 <_dtoa_r+0x598>)
 800841c:	2000      	movs	r0, #0
 800841e:	f7f8 fa25 	bl	800086c <__aeabi_ddiv>
 8008422:	4633      	mov	r3, r6
 8008424:	462a      	mov	r2, r5
 8008426:	f7f7 ff3f 	bl	80002a8 <__aeabi_dsub>
 800842a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800842e:	4656      	mov	r6, sl
 8008430:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008434:	f7f8 fba0 	bl	8000b78 <__aeabi_d2iz>
 8008438:	4605      	mov	r5, r0
 800843a:	f7f8 f883 	bl	8000544 <__aeabi_i2d>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008446:	f7f7 ff2f 	bl	80002a8 <__aeabi_dsub>
 800844a:	3530      	adds	r5, #48	@ 0x30
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008454:	f806 5b01 	strb.w	r5, [r6], #1
 8008458:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800845c:	f7f8 fb4e 	bl	8000afc <__aeabi_dcmplt>
 8008460:	2800      	cmp	r0, #0
 8008462:	d172      	bne.n	800854a <_dtoa_r+0x622>
 8008464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008468:	4911      	ldr	r1, [pc, #68]	@ (80084b0 <_dtoa_r+0x588>)
 800846a:	2000      	movs	r0, #0
 800846c:	f7f7 ff1c 	bl	80002a8 <__aeabi_dsub>
 8008470:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008474:	f7f8 fb42 	bl	8000afc <__aeabi_dcmplt>
 8008478:	2800      	cmp	r0, #0
 800847a:	f040 80b4 	bne.w	80085e6 <_dtoa_r+0x6be>
 800847e:	42a6      	cmp	r6, r4
 8008480:	f43f af70 	beq.w	8008364 <_dtoa_r+0x43c>
 8008484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008488:	4b0a      	ldr	r3, [pc, #40]	@ (80084b4 <_dtoa_r+0x58c>)
 800848a:	2200      	movs	r2, #0
 800848c:	f7f8 f8c4 	bl	8000618 <__aeabi_dmul>
 8008490:	4b08      	ldr	r3, [pc, #32]	@ (80084b4 <_dtoa_r+0x58c>)
 8008492:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008496:	2200      	movs	r2, #0
 8008498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800849c:	f7f8 f8bc 	bl	8000618 <__aeabi_dmul>
 80084a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084a4:	e7c4      	b.n	8008430 <_dtoa_r+0x508>
 80084a6:	bf00      	nop
 80084a8:	0800a4b0 	.word	0x0800a4b0
 80084ac:	0800a488 	.word	0x0800a488
 80084b0:	3ff00000 	.word	0x3ff00000
 80084b4:	40240000 	.word	0x40240000
 80084b8:	401c0000 	.word	0x401c0000
 80084bc:	40140000 	.word	0x40140000
 80084c0:	3fe00000 	.word	0x3fe00000
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	f7f8 f8a6 	bl	8000618 <__aeabi_dmul>
 80084cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80084d2:	4656      	mov	r6, sl
 80084d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084d8:	f7f8 fb4e 	bl	8000b78 <__aeabi_d2iz>
 80084dc:	4605      	mov	r5, r0
 80084de:	f7f8 f831 	bl	8000544 <__aeabi_i2d>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084ea:	f7f7 fedd 	bl	80002a8 <__aeabi_dsub>
 80084ee:	3530      	adds	r5, #48	@ 0x30
 80084f0:	f806 5b01 	strb.w	r5, [r6], #1
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	42a6      	cmp	r6, r4
 80084fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	d124      	bne.n	800854e <_dtoa_r+0x626>
 8008504:	4baf      	ldr	r3, [pc, #700]	@ (80087c4 <_dtoa_r+0x89c>)
 8008506:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800850a:	f7f7 fecf 	bl	80002ac <__adddf3>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008516:	f7f8 fb0f 	bl	8000b38 <__aeabi_dcmpgt>
 800851a:	2800      	cmp	r0, #0
 800851c:	d163      	bne.n	80085e6 <_dtoa_r+0x6be>
 800851e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008522:	49a8      	ldr	r1, [pc, #672]	@ (80087c4 <_dtoa_r+0x89c>)
 8008524:	2000      	movs	r0, #0
 8008526:	f7f7 febf 	bl	80002a8 <__aeabi_dsub>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008532:	f7f8 fae3 	bl	8000afc <__aeabi_dcmplt>
 8008536:	2800      	cmp	r0, #0
 8008538:	f43f af14 	beq.w	8008364 <_dtoa_r+0x43c>
 800853c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800853e:	1e73      	subs	r3, r6, #1
 8008540:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008542:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008546:	2b30      	cmp	r3, #48	@ 0x30
 8008548:	d0f8      	beq.n	800853c <_dtoa_r+0x614>
 800854a:	4647      	mov	r7, r8
 800854c:	e03b      	b.n	80085c6 <_dtoa_r+0x69e>
 800854e:	4b9e      	ldr	r3, [pc, #632]	@ (80087c8 <_dtoa_r+0x8a0>)
 8008550:	f7f8 f862 	bl	8000618 <__aeabi_dmul>
 8008554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008558:	e7bc      	b.n	80084d4 <_dtoa_r+0x5ac>
 800855a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800855e:	4656      	mov	r6, sl
 8008560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7f8 f980 	bl	800086c <__aeabi_ddiv>
 800856c:	f7f8 fb04 	bl	8000b78 <__aeabi_d2iz>
 8008570:	4680      	mov	r8, r0
 8008572:	f7f7 ffe7 	bl	8000544 <__aeabi_i2d>
 8008576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800857a:	f7f8 f84d 	bl	8000618 <__aeabi_dmul>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800858a:	f7f7 fe8d 	bl	80002a8 <__aeabi_dsub>
 800858e:	f806 4b01 	strb.w	r4, [r6], #1
 8008592:	9d03      	ldr	r5, [sp, #12]
 8008594:	eba6 040a 	sub.w	r4, r6, sl
 8008598:	42a5      	cmp	r5, r4
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	d133      	bne.n	8008608 <_dtoa_r+0x6e0>
 80085a0:	f7f7 fe84 	bl	80002ac <__adddf3>
 80085a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085a8:	4604      	mov	r4, r0
 80085aa:	460d      	mov	r5, r1
 80085ac:	f7f8 fac4 	bl	8000b38 <__aeabi_dcmpgt>
 80085b0:	b9c0      	cbnz	r0, 80085e4 <_dtoa_r+0x6bc>
 80085b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f8 fa95 	bl	8000ae8 <__aeabi_dcmpeq>
 80085be:	b110      	cbz	r0, 80085c6 <_dtoa_r+0x69e>
 80085c0:	f018 0f01 	tst.w	r8, #1
 80085c4:	d10e      	bne.n	80085e4 <_dtoa_r+0x6bc>
 80085c6:	9902      	ldr	r1, [sp, #8]
 80085c8:	4648      	mov	r0, r9
 80085ca:	f000 fbbd 	bl	8008d48 <_Bfree>
 80085ce:	2300      	movs	r3, #0
 80085d0:	7033      	strb	r3, [r6, #0]
 80085d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085d4:	3701      	adds	r7, #1
 80085d6:	601f      	str	r7, [r3, #0]
 80085d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 824b 	beq.w	8008a76 <_dtoa_r+0xb4e>
 80085e0:	601e      	str	r6, [r3, #0]
 80085e2:	e248      	b.n	8008a76 <_dtoa_r+0xb4e>
 80085e4:	46b8      	mov	r8, r7
 80085e6:	4633      	mov	r3, r6
 80085e8:	461e      	mov	r6, r3
 80085ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ee:	2a39      	cmp	r2, #57	@ 0x39
 80085f0:	d106      	bne.n	8008600 <_dtoa_r+0x6d8>
 80085f2:	459a      	cmp	sl, r3
 80085f4:	d1f8      	bne.n	80085e8 <_dtoa_r+0x6c0>
 80085f6:	2230      	movs	r2, #48	@ 0x30
 80085f8:	f108 0801 	add.w	r8, r8, #1
 80085fc:	f88a 2000 	strb.w	r2, [sl]
 8008600:	781a      	ldrb	r2, [r3, #0]
 8008602:	3201      	adds	r2, #1
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	e7a0      	b.n	800854a <_dtoa_r+0x622>
 8008608:	4b6f      	ldr	r3, [pc, #444]	@ (80087c8 <_dtoa_r+0x8a0>)
 800860a:	2200      	movs	r2, #0
 800860c:	f7f8 f804 	bl	8000618 <__aeabi_dmul>
 8008610:	2200      	movs	r2, #0
 8008612:	2300      	movs	r3, #0
 8008614:	4604      	mov	r4, r0
 8008616:	460d      	mov	r5, r1
 8008618:	f7f8 fa66 	bl	8000ae8 <__aeabi_dcmpeq>
 800861c:	2800      	cmp	r0, #0
 800861e:	d09f      	beq.n	8008560 <_dtoa_r+0x638>
 8008620:	e7d1      	b.n	80085c6 <_dtoa_r+0x69e>
 8008622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008624:	2a00      	cmp	r2, #0
 8008626:	f000 80ea 	beq.w	80087fe <_dtoa_r+0x8d6>
 800862a:	9a07      	ldr	r2, [sp, #28]
 800862c:	2a01      	cmp	r2, #1
 800862e:	f300 80cd 	bgt.w	80087cc <_dtoa_r+0x8a4>
 8008632:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008634:	2a00      	cmp	r2, #0
 8008636:	f000 80c1 	beq.w	80087bc <_dtoa_r+0x894>
 800863a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800863e:	9c08      	ldr	r4, [sp, #32]
 8008640:	9e00      	ldr	r6, [sp, #0]
 8008642:	9a00      	ldr	r2, [sp, #0]
 8008644:	441a      	add	r2, r3
 8008646:	9200      	str	r2, [sp, #0]
 8008648:	9a06      	ldr	r2, [sp, #24]
 800864a:	2101      	movs	r1, #1
 800864c:	441a      	add	r2, r3
 800864e:	4648      	mov	r0, r9
 8008650:	9206      	str	r2, [sp, #24]
 8008652:	f000 fc2d 	bl	8008eb0 <__i2b>
 8008656:	4605      	mov	r5, r0
 8008658:	b166      	cbz	r6, 8008674 <_dtoa_r+0x74c>
 800865a:	9b06      	ldr	r3, [sp, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	dd09      	ble.n	8008674 <_dtoa_r+0x74c>
 8008660:	42b3      	cmp	r3, r6
 8008662:	9a00      	ldr	r2, [sp, #0]
 8008664:	bfa8      	it	ge
 8008666:	4633      	movge	r3, r6
 8008668:	1ad2      	subs	r2, r2, r3
 800866a:	9200      	str	r2, [sp, #0]
 800866c:	9a06      	ldr	r2, [sp, #24]
 800866e:	1af6      	subs	r6, r6, r3
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	9306      	str	r3, [sp, #24]
 8008674:	9b08      	ldr	r3, [sp, #32]
 8008676:	b30b      	cbz	r3, 80086bc <_dtoa_r+0x794>
 8008678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80c6 	beq.w	800880c <_dtoa_r+0x8e4>
 8008680:	2c00      	cmp	r4, #0
 8008682:	f000 80c0 	beq.w	8008806 <_dtoa_r+0x8de>
 8008686:	4629      	mov	r1, r5
 8008688:	4622      	mov	r2, r4
 800868a:	4648      	mov	r0, r9
 800868c:	f000 fcc8 	bl	8009020 <__pow5mult>
 8008690:	9a02      	ldr	r2, [sp, #8]
 8008692:	4601      	mov	r1, r0
 8008694:	4605      	mov	r5, r0
 8008696:	4648      	mov	r0, r9
 8008698:	f000 fc20 	bl	8008edc <__multiply>
 800869c:	9902      	ldr	r1, [sp, #8]
 800869e:	4680      	mov	r8, r0
 80086a0:	4648      	mov	r0, r9
 80086a2:	f000 fb51 	bl	8008d48 <_Bfree>
 80086a6:	9b08      	ldr	r3, [sp, #32]
 80086a8:	1b1b      	subs	r3, r3, r4
 80086aa:	9308      	str	r3, [sp, #32]
 80086ac:	f000 80b1 	beq.w	8008812 <_dtoa_r+0x8ea>
 80086b0:	9a08      	ldr	r2, [sp, #32]
 80086b2:	4641      	mov	r1, r8
 80086b4:	4648      	mov	r0, r9
 80086b6:	f000 fcb3 	bl	8009020 <__pow5mult>
 80086ba:	9002      	str	r0, [sp, #8]
 80086bc:	2101      	movs	r1, #1
 80086be:	4648      	mov	r0, r9
 80086c0:	f000 fbf6 	bl	8008eb0 <__i2b>
 80086c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086c6:	4604      	mov	r4, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 81d8 	beq.w	8008a7e <_dtoa_r+0xb56>
 80086ce:	461a      	mov	r2, r3
 80086d0:	4601      	mov	r1, r0
 80086d2:	4648      	mov	r0, r9
 80086d4:	f000 fca4 	bl	8009020 <__pow5mult>
 80086d8:	9b07      	ldr	r3, [sp, #28]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	4604      	mov	r4, r0
 80086de:	f300 809f 	bgt.w	8008820 <_dtoa_r+0x8f8>
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f040 8097 	bne.w	8008818 <_dtoa_r+0x8f0>
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f040 8093 	bne.w	800881c <_dtoa_r+0x8f4>
 80086f6:	9b05      	ldr	r3, [sp, #20]
 80086f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086fc:	0d1b      	lsrs	r3, r3, #20
 80086fe:	051b      	lsls	r3, r3, #20
 8008700:	b133      	cbz	r3, 8008710 <_dtoa_r+0x7e8>
 8008702:	9b00      	ldr	r3, [sp, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	9b06      	ldr	r3, [sp, #24]
 800870a:	3301      	adds	r3, #1
 800870c:	9306      	str	r3, [sp, #24]
 800870e:	2301      	movs	r3, #1
 8008710:	9308      	str	r3, [sp, #32]
 8008712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 81b8 	beq.w	8008a8a <_dtoa_r+0xb62>
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008720:	6918      	ldr	r0, [r3, #16]
 8008722:	f000 fb79 	bl	8008e18 <__hi0bits>
 8008726:	f1c0 0020 	rsb	r0, r0, #32
 800872a:	9b06      	ldr	r3, [sp, #24]
 800872c:	4418      	add	r0, r3
 800872e:	f010 001f 	ands.w	r0, r0, #31
 8008732:	f000 8082 	beq.w	800883a <_dtoa_r+0x912>
 8008736:	f1c0 0320 	rsb	r3, r0, #32
 800873a:	2b04      	cmp	r3, #4
 800873c:	dd73      	ble.n	8008826 <_dtoa_r+0x8fe>
 800873e:	9b00      	ldr	r3, [sp, #0]
 8008740:	f1c0 001c 	rsb	r0, r0, #28
 8008744:	4403      	add	r3, r0
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	9b06      	ldr	r3, [sp, #24]
 800874a:	4403      	add	r3, r0
 800874c:	4406      	add	r6, r0
 800874e:	9306      	str	r3, [sp, #24]
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	dd05      	ble.n	8008762 <_dtoa_r+0x83a>
 8008756:	9902      	ldr	r1, [sp, #8]
 8008758:	461a      	mov	r2, r3
 800875a:	4648      	mov	r0, r9
 800875c:	f000 fcba 	bl	80090d4 <__lshift>
 8008760:	9002      	str	r0, [sp, #8]
 8008762:	9b06      	ldr	r3, [sp, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	dd05      	ble.n	8008774 <_dtoa_r+0x84c>
 8008768:	4621      	mov	r1, r4
 800876a:	461a      	mov	r2, r3
 800876c:	4648      	mov	r0, r9
 800876e:	f000 fcb1 	bl	80090d4 <__lshift>
 8008772:	4604      	mov	r4, r0
 8008774:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d061      	beq.n	800883e <_dtoa_r+0x916>
 800877a:	9802      	ldr	r0, [sp, #8]
 800877c:	4621      	mov	r1, r4
 800877e:	f000 fd15 	bl	80091ac <__mcmp>
 8008782:	2800      	cmp	r0, #0
 8008784:	da5b      	bge.n	800883e <_dtoa_r+0x916>
 8008786:	2300      	movs	r3, #0
 8008788:	9902      	ldr	r1, [sp, #8]
 800878a:	220a      	movs	r2, #10
 800878c:	4648      	mov	r0, r9
 800878e:	f000 fafd 	bl	8008d8c <__multadd>
 8008792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008794:	9002      	str	r0, [sp, #8]
 8008796:	f107 38ff 	add.w	r8, r7, #4294967295
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8177 	beq.w	8008a8e <_dtoa_r+0xb66>
 80087a0:	4629      	mov	r1, r5
 80087a2:	2300      	movs	r3, #0
 80087a4:	220a      	movs	r2, #10
 80087a6:	4648      	mov	r0, r9
 80087a8:	f000 faf0 	bl	8008d8c <__multadd>
 80087ac:	f1bb 0f00 	cmp.w	fp, #0
 80087b0:	4605      	mov	r5, r0
 80087b2:	dc6f      	bgt.n	8008894 <_dtoa_r+0x96c>
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	dc49      	bgt.n	800884e <_dtoa_r+0x926>
 80087ba:	e06b      	b.n	8008894 <_dtoa_r+0x96c>
 80087bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80087c2:	e73c      	b.n	800863e <_dtoa_r+0x716>
 80087c4:	3fe00000 	.word	0x3fe00000
 80087c8:	40240000 	.word	0x40240000
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	1e5c      	subs	r4, r3, #1
 80087d0:	9b08      	ldr	r3, [sp, #32]
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	db09      	blt.n	80087ea <_dtoa_r+0x8c2>
 80087d6:	1b1c      	subs	r4, r3, r4
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f6bf af30 	bge.w	8008640 <_dtoa_r+0x718>
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	9a03      	ldr	r2, [sp, #12]
 80087e4:	1a9e      	subs	r6, r3, r2
 80087e6:	2300      	movs	r3, #0
 80087e8:	e72b      	b.n	8008642 <_dtoa_r+0x71a>
 80087ea:	9b08      	ldr	r3, [sp, #32]
 80087ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087ee:	9408      	str	r4, [sp, #32]
 80087f0:	1ae3      	subs	r3, r4, r3
 80087f2:	441a      	add	r2, r3
 80087f4:	9e00      	ldr	r6, [sp, #0]
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80087fa:	2400      	movs	r4, #0
 80087fc:	e721      	b.n	8008642 <_dtoa_r+0x71a>
 80087fe:	9c08      	ldr	r4, [sp, #32]
 8008800:	9e00      	ldr	r6, [sp, #0]
 8008802:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008804:	e728      	b.n	8008658 <_dtoa_r+0x730>
 8008806:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800880a:	e751      	b.n	80086b0 <_dtoa_r+0x788>
 800880c:	9a08      	ldr	r2, [sp, #32]
 800880e:	9902      	ldr	r1, [sp, #8]
 8008810:	e750      	b.n	80086b4 <_dtoa_r+0x78c>
 8008812:	f8cd 8008 	str.w	r8, [sp, #8]
 8008816:	e751      	b.n	80086bc <_dtoa_r+0x794>
 8008818:	2300      	movs	r3, #0
 800881a:	e779      	b.n	8008710 <_dtoa_r+0x7e8>
 800881c:	9b04      	ldr	r3, [sp, #16]
 800881e:	e777      	b.n	8008710 <_dtoa_r+0x7e8>
 8008820:	2300      	movs	r3, #0
 8008822:	9308      	str	r3, [sp, #32]
 8008824:	e779      	b.n	800871a <_dtoa_r+0x7f2>
 8008826:	d093      	beq.n	8008750 <_dtoa_r+0x828>
 8008828:	9a00      	ldr	r2, [sp, #0]
 800882a:	331c      	adds	r3, #28
 800882c:	441a      	add	r2, r3
 800882e:	9200      	str	r2, [sp, #0]
 8008830:	9a06      	ldr	r2, [sp, #24]
 8008832:	441a      	add	r2, r3
 8008834:	441e      	add	r6, r3
 8008836:	9206      	str	r2, [sp, #24]
 8008838:	e78a      	b.n	8008750 <_dtoa_r+0x828>
 800883a:	4603      	mov	r3, r0
 800883c:	e7f4      	b.n	8008828 <_dtoa_r+0x900>
 800883e:	9b03      	ldr	r3, [sp, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	46b8      	mov	r8, r7
 8008844:	dc20      	bgt.n	8008888 <_dtoa_r+0x960>
 8008846:	469b      	mov	fp, r3
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	2b02      	cmp	r3, #2
 800884c:	dd1e      	ble.n	800888c <_dtoa_r+0x964>
 800884e:	f1bb 0f00 	cmp.w	fp, #0
 8008852:	f47f adb1 	bne.w	80083b8 <_dtoa_r+0x490>
 8008856:	4621      	mov	r1, r4
 8008858:	465b      	mov	r3, fp
 800885a:	2205      	movs	r2, #5
 800885c:	4648      	mov	r0, r9
 800885e:	f000 fa95 	bl	8008d8c <__multadd>
 8008862:	4601      	mov	r1, r0
 8008864:	4604      	mov	r4, r0
 8008866:	9802      	ldr	r0, [sp, #8]
 8008868:	f000 fca0 	bl	80091ac <__mcmp>
 800886c:	2800      	cmp	r0, #0
 800886e:	f77f ada3 	ble.w	80083b8 <_dtoa_r+0x490>
 8008872:	4656      	mov	r6, sl
 8008874:	2331      	movs	r3, #49	@ 0x31
 8008876:	f806 3b01 	strb.w	r3, [r6], #1
 800887a:	f108 0801 	add.w	r8, r8, #1
 800887e:	e59f      	b.n	80083c0 <_dtoa_r+0x498>
 8008880:	9c03      	ldr	r4, [sp, #12]
 8008882:	46b8      	mov	r8, r7
 8008884:	4625      	mov	r5, r4
 8008886:	e7f4      	b.n	8008872 <_dtoa_r+0x94a>
 8008888:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800888c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 8101 	beq.w	8008a96 <_dtoa_r+0xb6e>
 8008894:	2e00      	cmp	r6, #0
 8008896:	dd05      	ble.n	80088a4 <_dtoa_r+0x97c>
 8008898:	4629      	mov	r1, r5
 800889a:	4632      	mov	r2, r6
 800889c:	4648      	mov	r0, r9
 800889e:	f000 fc19 	bl	80090d4 <__lshift>
 80088a2:	4605      	mov	r5, r0
 80088a4:	9b08      	ldr	r3, [sp, #32]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d05c      	beq.n	8008964 <_dtoa_r+0xa3c>
 80088aa:	6869      	ldr	r1, [r5, #4]
 80088ac:	4648      	mov	r0, r9
 80088ae:	f000 fa0b 	bl	8008cc8 <_Balloc>
 80088b2:	4606      	mov	r6, r0
 80088b4:	b928      	cbnz	r0, 80088c2 <_dtoa_r+0x99a>
 80088b6:	4b82      	ldr	r3, [pc, #520]	@ (8008ac0 <_dtoa_r+0xb98>)
 80088b8:	4602      	mov	r2, r0
 80088ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088be:	f7ff bb4a 	b.w	8007f56 <_dtoa_r+0x2e>
 80088c2:	692a      	ldr	r2, [r5, #16]
 80088c4:	3202      	adds	r2, #2
 80088c6:	0092      	lsls	r2, r2, #2
 80088c8:	f105 010c 	add.w	r1, r5, #12
 80088cc:	300c      	adds	r0, #12
 80088ce:	f000 ffa3 	bl	8009818 <memcpy>
 80088d2:	2201      	movs	r2, #1
 80088d4:	4631      	mov	r1, r6
 80088d6:	4648      	mov	r0, r9
 80088d8:	f000 fbfc 	bl	80090d4 <__lshift>
 80088dc:	f10a 0301 	add.w	r3, sl, #1
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	eb0a 030b 	add.w	r3, sl, fp
 80088e6:	9308      	str	r3, [sp, #32]
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	462f      	mov	r7, r5
 80088f0:	9306      	str	r3, [sp, #24]
 80088f2:	4605      	mov	r5, r0
 80088f4:	9b00      	ldr	r3, [sp, #0]
 80088f6:	9802      	ldr	r0, [sp, #8]
 80088f8:	4621      	mov	r1, r4
 80088fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80088fe:	f7ff fa8a 	bl	8007e16 <quorem>
 8008902:	4603      	mov	r3, r0
 8008904:	3330      	adds	r3, #48	@ 0x30
 8008906:	9003      	str	r0, [sp, #12]
 8008908:	4639      	mov	r1, r7
 800890a:	9802      	ldr	r0, [sp, #8]
 800890c:	9309      	str	r3, [sp, #36]	@ 0x24
 800890e:	f000 fc4d 	bl	80091ac <__mcmp>
 8008912:	462a      	mov	r2, r5
 8008914:	9004      	str	r0, [sp, #16]
 8008916:	4621      	mov	r1, r4
 8008918:	4648      	mov	r0, r9
 800891a:	f000 fc63 	bl	80091e4 <__mdiff>
 800891e:	68c2      	ldr	r2, [r0, #12]
 8008920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008922:	4606      	mov	r6, r0
 8008924:	bb02      	cbnz	r2, 8008968 <_dtoa_r+0xa40>
 8008926:	4601      	mov	r1, r0
 8008928:	9802      	ldr	r0, [sp, #8]
 800892a:	f000 fc3f 	bl	80091ac <__mcmp>
 800892e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008930:	4602      	mov	r2, r0
 8008932:	4631      	mov	r1, r6
 8008934:	4648      	mov	r0, r9
 8008936:	920c      	str	r2, [sp, #48]	@ 0x30
 8008938:	9309      	str	r3, [sp, #36]	@ 0x24
 800893a:	f000 fa05 	bl	8008d48 <_Bfree>
 800893e:	9b07      	ldr	r3, [sp, #28]
 8008940:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008942:	9e00      	ldr	r6, [sp, #0]
 8008944:	ea42 0103 	orr.w	r1, r2, r3
 8008948:	9b06      	ldr	r3, [sp, #24]
 800894a:	4319      	orrs	r1, r3
 800894c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894e:	d10d      	bne.n	800896c <_dtoa_r+0xa44>
 8008950:	2b39      	cmp	r3, #57	@ 0x39
 8008952:	d027      	beq.n	80089a4 <_dtoa_r+0xa7c>
 8008954:	9a04      	ldr	r2, [sp, #16]
 8008956:	2a00      	cmp	r2, #0
 8008958:	dd01      	ble.n	800895e <_dtoa_r+0xa36>
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	3331      	adds	r3, #49	@ 0x31
 800895e:	f88b 3000 	strb.w	r3, [fp]
 8008962:	e52e      	b.n	80083c2 <_dtoa_r+0x49a>
 8008964:	4628      	mov	r0, r5
 8008966:	e7b9      	b.n	80088dc <_dtoa_r+0x9b4>
 8008968:	2201      	movs	r2, #1
 800896a:	e7e2      	b.n	8008932 <_dtoa_r+0xa0a>
 800896c:	9904      	ldr	r1, [sp, #16]
 800896e:	2900      	cmp	r1, #0
 8008970:	db04      	blt.n	800897c <_dtoa_r+0xa54>
 8008972:	9807      	ldr	r0, [sp, #28]
 8008974:	4301      	orrs	r1, r0
 8008976:	9806      	ldr	r0, [sp, #24]
 8008978:	4301      	orrs	r1, r0
 800897a:	d120      	bne.n	80089be <_dtoa_r+0xa96>
 800897c:	2a00      	cmp	r2, #0
 800897e:	ddee      	ble.n	800895e <_dtoa_r+0xa36>
 8008980:	9902      	ldr	r1, [sp, #8]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	2201      	movs	r2, #1
 8008986:	4648      	mov	r0, r9
 8008988:	f000 fba4 	bl	80090d4 <__lshift>
 800898c:	4621      	mov	r1, r4
 800898e:	9002      	str	r0, [sp, #8]
 8008990:	f000 fc0c 	bl	80091ac <__mcmp>
 8008994:	2800      	cmp	r0, #0
 8008996:	9b00      	ldr	r3, [sp, #0]
 8008998:	dc02      	bgt.n	80089a0 <_dtoa_r+0xa78>
 800899a:	d1e0      	bne.n	800895e <_dtoa_r+0xa36>
 800899c:	07da      	lsls	r2, r3, #31
 800899e:	d5de      	bpl.n	800895e <_dtoa_r+0xa36>
 80089a0:	2b39      	cmp	r3, #57	@ 0x39
 80089a2:	d1da      	bne.n	800895a <_dtoa_r+0xa32>
 80089a4:	2339      	movs	r3, #57	@ 0x39
 80089a6:	f88b 3000 	strb.w	r3, [fp]
 80089aa:	4633      	mov	r3, r6
 80089ac:	461e      	mov	r6, r3
 80089ae:	3b01      	subs	r3, #1
 80089b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80089b4:	2a39      	cmp	r2, #57	@ 0x39
 80089b6:	d04e      	beq.n	8008a56 <_dtoa_r+0xb2e>
 80089b8:	3201      	adds	r2, #1
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e501      	b.n	80083c2 <_dtoa_r+0x49a>
 80089be:	2a00      	cmp	r2, #0
 80089c0:	dd03      	ble.n	80089ca <_dtoa_r+0xaa2>
 80089c2:	2b39      	cmp	r3, #57	@ 0x39
 80089c4:	d0ee      	beq.n	80089a4 <_dtoa_r+0xa7c>
 80089c6:	3301      	adds	r3, #1
 80089c8:	e7c9      	b.n	800895e <_dtoa_r+0xa36>
 80089ca:	9a00      	ldr	r2, [sp, #0]
 80089cc:	9908      	ldr	r1, [sp, #32]
 80089ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089d2:	428a      	cmp	r2, r1
 80089d4:	d028      	beq.n	8008a28 <_dtoa_r+0xb00>
 80089d6:	9902      	ldr	r1, [sp, #8]
 80089d8:	2300      	movs	r3, #0
 80089da:	220a      	movs	r2, #10
 80089dc:	4648      	mov	r0, r9
 80089de:	f000 f9d5 	bl	8008d8c <__multadd>
 80089e2:	42af      	cmp	r7, r5
 80089e4:	9002      	str	r0, [sp, #8]
 80089e6:	f04f 0300 	mov.w	r3, #0
 80089ea:	f04f 020a 	mov.w	r2, #10
 80089ee:	4639      	mov	r1, r7
 80089f0:	4648      	mov	r0, r9
 80089f2:	d107      	bne.n	8008a04 <_dtoa_r+0xadc>
 80089f4:	f000 f9ca 	bl	8008d8c <__multadd>
 80089f8:	4607      	mov	r7, r0
 80089fa:	4605      	mov	r5, r0
 80089fc:	9b00      	ldr	r3, [sp, #0]
 80089fe:	3301      	adds	r3, #1
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	e777      	b.n	80088f4 <_dtoa_r+0x9cc>
 8008a04:	f000 f9c2 	bl	8008d8c <__multadd>
 8008a08:	4629      	mov	r1, r5
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	220a      	movs	r2, #10
 8008a10:	4648      	mov	r0, r9
 8008a12:	f000 f9bb 	bl	8008d8c <__multadd>
 8008a16:	4605      	mov	r5, r0
 8008a18:	e7f0      	b.n	80089fc <_dtoa_r+0xad4>
 8008a1a:	f1bb 0f00 	cmp.w	fp, #0
 8008a1e:	bfcc      	ite	gt
 8008a20:	465e      	movgt	r6, fp
 8008a22:	2601      	movle	r6, #1
 8008a24:	4456      	add	r6, sl
 8008a26:	2700      	movs	r7, #0
 8008a28:	9902      	ldr	r1, [sp, #8]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	4648      	mov	r0, r9
 8008a30:	f000 fb50 	bl	80090d4 <__lshift>
 8008a34:	4621      	mov	r1, r4
 8008a36:	9002      	str	r0, [sp, #8]
 8008a38:	f000 fbb8 	bl	80091ac <__mcmp>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	dcb4      	bgt.n	80089aa <_dtoa_r+0xa82>
 8008a40:	d102      	bne.n	8008a48 <_dtoa_r+0xb20>
 8008a42:	9b00      	ldr	r3, [sp, #0]
 8008a44:	07db      	lsls	r3, r3, #31
 8008a46:	d4b0      	bmi.n	80089aa <_dtoa_r+0xa82>
 8008a48:	4633      	mov	r3, r6
 8008a4a:	461e      	mov	r6, r3
 8008a4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a50:	2a30      	cmp	r2, #48	@ 0x30
 8008a52:	d0fa      	beq.n	8008a4a <_dtoa_r+0xb22>
 8008a54:	e4b5      	b.n	80083c2 <_dtoa_r+0x49a>
 8008a56:	459a      	cmp	sl, r3
 8008a58:	d1a8      	bne.n	80089ac <_dtoa_r+0xa84>
 8008a5a:	2331      	movs	r3, #49	@ 0x31
 8008a5c:	f108 0801 	add.w	r8, r8, #1
 8008a60:	f88a 3000 	strb.w	r3, [sl]
 8008a64:	e4ad      	b.n	80083c2 <_dtoa_r+0x49a>
 8008a66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008ac4 <_dtoa_r+0xb9c>
 8008a6c:	b11b      	cbz	r3, 8008a76 <_dtoa_r+0xb4e>
 8008a6e:	f10a 0308 	add.w	r3, sl, #8
 8008a72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	4650      	mov	r0, sl
 8008a78:	b017      	add	sp, #92	@ 0x5c
 8008a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7e:	9b07      	ldr	r3, [sp, #28]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	f77f ae2e 	ble.w	80086e2 <_dtoa_r+0x7ba>
 8008a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a88:	9308      	str	r3, [sp, #32]
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e64d      	b.n	800872a <_dtoa_r+0x802>
 8008a8e:	f1bb 0f00 	cmp.w	fp, #0
 8008a92:	f77f aed9 	ble.w	8008848 <_dtoa_r+0x920>
 8008a96:	4656      	mov	r6, sl
 8008a98:	9802      	ldr	r0, [sp, #8]
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f7ff f9bb 	bl	8007e16 <quorem>
 8008aa0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008aa4:	f806 3b01 	strb.w	r3, [r6], #1
 8008aa8:	eba6 020a 	sub.w	r2, r6, sl
 8008aac:	4593      	cmp	fp, r2
 8008aae:	ddb4      	ble.n	8008a1a <_dtoa_r+0xaf2>
 8008ab0:	9902      	ldr	r1, [sp, #8]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	4648      	mov	r0, r9
 8008ab8:	f000 f968 	bl	8008d8c <__multadd>
 8008abc:	9002      	str	r0, [sp, #8]
 8008abe:	e7eb      	b.n	8008a98 <_dtoa_r+0xb70>
 8008ac0:	0800a3b8 	.word	0x0800a3b8
 8008ac4:	0800a33c 	.word	0x0800a33c

08008ac8 <_free_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4605      	mov	r5, r0
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d041      	beq.n	8008b54 <_free_r+0x8c>
 8008ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad4:	1f0c      	subs	r4, r1, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfb8      	it	lt
 8008ada:	18e4      	addlt	r4, r4, r3
 8008adc:	f000 f8e8 	bl	8008cb0 <__malloc_lock>
 8008ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b58 <_free_r+0x90>)
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	b933      	cbnz	r3, 8008af4 <_free_r+0x2c>
 8008ae6:	6063      	str	r3, [r4, #4]
 8008ae8:	6014      	str	r4, [r2, #0]
 8008aea:	4628      	mov	r0, r5
 8008aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af0:	f000 b8e4 	b.w	8008cbc <__malloc_unlock>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d908      	bls.n	8008b0a <_free_r+0x42>
 8008af8:	6820      	ldr	r0, [r4, #0]
 8008afa:	1821      	adds	r1, r4, r0
 8008afc:	428b      	cmp	r3, r1
 8008afe:	bf01      	itttt	eq
 8008b00:	6819      	ldreq	r1, [r3, #0]
 8008b02:	685b      	ldreq	r3, [r3, #4]
 8008b04:	1809      	addeq	r1, r1, r0
 8008b06:	6021      	streq	r1, [r4, #0]
 8008b08:	e7ed      	b.n	8008ae6 <_free_r+0x1e>
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	b10b      	cbz	r3, 8008b14 <_free_r+0x4c>
 8008b10:	42a3      	cmp	r3, r4
 8008b12:	d9fa      	bls.n	8008b0a <_free_r+0x42>
 8008b14:	6811      	ldr	r1, [r2, #0]
 8008b16:	1850      	adds	r0, r2, r1
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d10b      	bne.n	8008b34 <_free_r+0x6c>
 8008b1c:	6820      	ldr	r0, [r4, #0]
 8008b1e:	4401      	add	r1, r0
 8008b20:	1850      	adds	r0, r2, r1
 8008b22:	4283      	cmp	r3, r0
 8008b24:	6011      	str	r1, [r2, #0]
 8008b26:	d1e0      	bne.n	8008aea <_free_r+0x22>
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	6053      	str	r3, [r2, #4]
 8008b2e:	4408      	add	r0, r1
 8008b30:	6010      	str	r0, [r2, #0]
 8008b32:	e7da      	b.n	8008aea <_free_r+0x22>
 8008b34:	d902      	bls.n	8008b3c <_free_r+0x74>
 8008b36:	230c      	movs	r3, #12
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	e7d6      	b.n	8008aea <_free_r+0x22>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	1821      	adds	r1, r4, r0
 8008b40:	428b      	cmp	r3, r1
 8008b42:	bf04      	itt	eq
 8008b44:	6819      	ldreq	r1, [r3, #0]
 8008b46:	685b      	ldreq	r3, [r3, #4]
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	bf04      	itt	eq
 8008b4c:	1809      	addeq	r1, r1, r0
 8008b4e:	6021      	streq	r1, [r4, #0]
 8008b50:	6054      	str	r4, [r2, #4]
 8008b52:	e7ca      	b.n	8008aea <_free_r+0x22>
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
 8008b56:	bf00      	nop
 8008b58:	200039a8 	.word	0x200039a8

08008b5c <malloc>:
 8008b5c:	4b02      	ldr	r3, [pc, #8]	@ (8008b68 <malloc+0xc>)
 8008b5e:	4601      	mov	r1, r0
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	f000 b825 	b.w	8008bb0 <_malloc_r>
 8008b66:	bf00      	nop
 8008b68:	20000034 	.word	0x20000034

08008b6c <sbrk_aligned>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4e0f      	ldr	r6, [pc, #60]	@ (8008bac <sbrk_aligned+0x40>)
 8008b70:	460c      	mov	r4, r1
 8008b72:	6831      	ldr	r1, [r6, #0]
 8008b74:	4605      	mov	r5, r0
 8008b76:	b911      	cbnz	r1, 8008b7e <sbrk_aligned+0x12>
 8008b78:	f000 fe3e 	bl	80097f8 <_sbrk_r>
 8008b7c:	6030      	str	r0, [r6, #0]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 fe39 	bl	80097f8 <_sbrk_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	d103      	bne.n	8008b92 <sbrk_aligned+0x26>
 8008b8a:	f04f 34ff 	mov.w	r4, #4294967295
 8008b8e:	4620      	mov	r0, r4
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	1cc4      	adds	r4, r0, #3
 8008b94:	f024 0403 	bic.w	r4, r4, #3
 8008b98:	42a0      	cmp	r0, r4
 8008b9a:	d0f8      	beq.n	8008b8e <sbrk_aligned+0x22>
 8008b9c:	1a21      	subs	r1, r4, r0
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 fe2a 	bl	80097f8 <_sbrk_r>
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d1f2      	bne.n	8008b8e <sbrk_aligned+0x22>
 8008ba8:	e7ef      	b.n	8008b8a <sbrk_aligned+0x1e>
 8008baa:	bf00      	nop
 8008bac:	200039a4 	.word	0x200039a4

08008bb0 <_malloc_r>:
 8008bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb4:	1ccd      	adds	r5, r1, #3
 8008bb6:	f025 0503 	bic.w	r5, r5, #3
 8008bba:	3508      	adds	r5, #8
 8008bbc:	2d0c      	cmp	r5, #12
 8008bbe:	bf38      	it	cc
 8008bc0:	250c      	movcc	r5, #12
 8008bc2:	2d00      	cmp	r5, #0
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	db01      	blt.n	8008bcc <_malloc_r+0x1c>
 8008bc8:	42a9      	cmp	r1, r5
 8008bca:	d904      	bls.n	8008bd6 <_malloc_r+0x26>
 8008bcc:	230c      	movs	r3, #12
 8008bce:	6033      	str	r3, [r6, #0]
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cac <_malloc_r+0xfc>
 8008bda:	f000 f869 	bl	8008cb0 <__malloc_lock>
 8008bde:	f8d8 3000 	ldr.w	r3, [r8]
 8008be2:	461c      	mov	r4, r3
 8008be4:	bb44      	cbnz	r4, 8008c38 <_malloc_r+0x88>
 8008be6:	4629      	mov	r1, r5
 8008be8:	4630      	mov	r0, r6
 8008bea:	f7ff ffbf 	bl	8008b6c <sbrk_aligned>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	d158      	bne.n	8008ca6 <_malloc_r+0xf6>
 8008bf4:	f8d8 4000 	ldr.w	r4, [r8]
 8008bf8:	4627      	mov	r7, r4
 8008bfa:	2f00      	cmp	r7, #0
 8008bfc:	d143      	bne.n	8008c86 <_malloc_r+0xd6>
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	d04b      	beq.n	8008c9a <_malloc_r+0xea>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	4639      	mov	r1, r7
 8008c06:	4630      	mov	r0, r6
 8008c08:	eb04 0903 	add.w	r9, r4, r3
 8008c0c:	f000 fdf4 	bl	80097f8 <_sbrk_r>
 8008c10:	4581      	cmp	r9, r0
 8008c12:	d142      	bne.n	8008c9a <_malloc_r+0xea>
 8008c14:	6821      	ldr	r1, [r4, #0]
 8008c16:	1a6d      	subs	r5, r5, r1
 8008c18:	4629      	mov	r1, r5
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7ff ffa6 	bl	8008b6c <sbrk_aligned>
 8008c20:	3001      	adds	r0, #1
 8008c22:	d03a      	beq.n	8008c9a <_malloc_r+0xea>
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	442b      	add	r3, r5
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	bb62      	cbnz	r2, 8008c8c <_malloc_r+0xdc>
 8008c32:	f8c8 7000 	str.w	r7, [r8]
 8008c36:	e00f      	b.n	8008c58 <_malloc_r+0xa8>
 8008c38:	6822      	ldr	r2, [r4, #0]
 8008c3a:	1b52      	subs	r2, r2, r5
 8008c3c:	d420      	bmi.n	8008c80 <_malloc_r+0xd0>
 8008c3e:	2a0b      	cmp	r2, #11
 8008c40:	d917      	bls.n	8008c72 <_malloc_r+0xc2>
 8008c42:	1961      	adds	r1, r4, r5
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	6025      	str	r5, [r4, #0]
 8008c48:	bf18      	it	ne
 8008c4a:	6059      	strne	r1, [r3, #4]
 8008c4c:	6863      	ldr	r3, [r4, #4]
 8008c4e:	bf08      	it	eq
 8008c50:	f8c8 1000 	streq.w	r1, [r8]
 8008c54:	5162      	str	r2, [r4, r5]
 8008c56:	604b      	str	r3, [r1, #4]
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f000 f82f 	bl	8008cbc <__malloc_unlock>
 8008c5e:	f104 000b 	add.w	r0, r4, #11
 8008c62:	1d23      	adds	r3, r4, #4
 8008c64:	f020 0007 	bic.w	r0, r0, #7
 8008c68:	1ac2      	subs	r2, r0, r3
 8008c6a:	bf1c      	itt	ne
 8008c6c:	1a1b      	subne	r3, r3, r0
 8008c6e:	50a3      	strne	r3, [r4, r2]
 8008c70:	e7af      	b.n	8008bd2 <_malloc_r+0x22>
 8008c72:	6862      	ldr	r2, [r4, #4]
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	bf0c      	ite	eq
 8008c78:	f8c8 2000 	streq.w	r2, [r8]
 8008c7c:	605a      	strne	r2, [r3, #4]
 8008c7e:	e7eb      	b.n	8008c58 <_malloc_r+0xa8>
 8008c80:	4623      	mov	r3, r4
 8008c82:	6864      	ldr	r4, [r4, #4]
 8008c84:	e7ae      	b.n	8008be4 <_malloc_r+0x34>
 8008c86:	463c      	mov	r4, r7
 8008c88:	687f      	ldr	r7, [r7, #4]
 8008c8a:	e7b6      	b.n	8008bfa <_malloc_r+0x4a>
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d1fb      	bne.n	8008c8c <_malloc_r+0xdc>
 8008c94:	2300      	movs	r3, #0
 8008c96:	6053      	str	r3, [r2, #4]
 8008c98:	e7de      	b.n	8008c58 <_malloc_r+0xa8>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	6033      	str	r3, [r6, #0]
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 f80c 	bl	8008cbc <__malloc_unlock>
 8008ca4:	e794      	b.n	8008bd0 <_malloc_r+0x20>
 8008ca6:	6005      	str	r5, [r0, #0]
 8008ca8:	e7d6      	b.n	8008c58 <_malloc_r+0xa8>
 8008caa:	bf00      	nop
 8008cac:	200039a8 	.word	0x200039a8

08008cb0 <__malloc_lock>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	@ (8008cb8 <__malloc_lock+0x8>)
 8008cb2:	f7ff b8ae 	b.w	8007e12 <__retarget_lock_acquire_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	200039a0 	.word	0x200039a0

08008cbc <__malloc_unlock>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	@ (8008cc4 <__malloc_unlock+0x8>)
 8008cbe:	f7ff b8a9 	b.w	8007e14 <__retarget_lock_release_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	200039a0 	.word	0x200039a0

08008cc8 <_Balloc>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	69c6      	ldr	r6, [r0, #28]
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	b976      	cbnz	r6, 8008cf0 <_Balloc+0x28>
 8008cd2:	2010      	movs	r0, #16
 8008cd4:	f7ff ff42 	bl	8008b5c <malloc>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	61e0      	str	r0, [r4, #28]
 8008cdc:	b920      	cbnz	r0, 8008ce8 <_Balloc+0x20>
 8008cde:	4b18      	ldr	r3, [pc, #96]	@ (8008d40 <_Balloc+0x78>)
 8008ce0:	4818      	ldr	r0, [pc, #96]	@ (8008d44 <_Balloc+0x7c>)
 8008ce2:	216b      	movs	r1, #107	@ 0x6b
 8008ce4:	f000 fda6 	bl	8009834 <__assert_func>
 8008ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cec:	6006      	str	r6, [r0, #0]
 8008cee:	60c6      	str	r6, [r0, #12]
 8008cf0:	69e6      	ldr	r6, [r4, #28]
 8008cf2:	68f3      	ldr	r3, [r6, #12]
 8008cf4:	b183      	cbz	r3, 8008d18 <_Balloc+0x50>
 8008cf6:	69e3      	ldr	r3, [r4, #28]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cfe:	b9b8      	cbnz	r0, 8008d30 <_Balloc+0x68>
 8008d00:	2101      	movs	r1, #1
 8008d02:	fa01 f605 	lsl.w	r6, r1, r5
 8008d06:	1d72      	adds	r2, r6, #5
 8008d08:	0092      	lsls	r2, r2, #2
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 fdb0 	bl	8009870 <_calloc_r>
 8008d10:	b160      	cbz	r0, 8008d2c <_Balloc+0x64>
 8008d12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d16:	e00e      	b.n	8008d36 <_Balloc+0x6e>
 8008d18:	2221      	movs	r2, #33	@ 0x21
 8008d1a:	2104      	movs	r1, #4
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fda7 	bl	8009870 <_calloc_r>
 8008d22:	69e3      	ldr	r3, [r4, #28]
 8008d24:	60f0      	str	r0, [r6, #12]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e4      	bne.n	8008cf6 <_Balloc+0x2e>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}
 8008d30:	6802      	ldr	r2, [r0, #0]
 8008d32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d36:	2300      	movs	r3, #0
 8008d38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d3c:	e7f7      	b.n	8008d2e <_Balloc+0x66>
 8008d3e:	bf00      	nop
 8008d40:	0800a349 	.word	0x0800a349
 8008d44:	0800a3c9 	.word	0x0800a3c9

08008d48 <_Bfree>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	69c6      	ldr	r6, [r0, #28]
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	b976      	cbnz	r6, 8008d70 <_Bfree+0x28>
 8008d52:	2010      	movs	r0, #16
 8008d54:	f7ff ff02 	bl	8008b5c <malloc>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	61e8      	str	r0, [r5, #28]
 8008d5c:	b920      	cbnz	r0, 8008d68 <_Bfree+0x20>
 8008d5e:	4b09      	ldr	r3, [pc, #36]	@ (8008d84 <_Bfree+0x3c>)
 8008d60:	4809      	ldr	r0, [pc, #36]	@ (8008d88 <_Bfree+0x40>)
 8008d62:	218f      	movs	r1, #143	@ 0x8f
 8008d64:	f000 fd66 	bl	8009834 <__assert_func>
 8008d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d6c:	6006      	str	r6, [r0, #0]
 8008d6e:	60c6      	str	r6, [r0, #12]
 8008d70:	b13c      	cbz	r4, 8008d82 <_Bfree+0x3a>
 8008d72:	69eb      	ldr	r3, [r5, #28]
 8008d74:	6862      	ldr	r2, [r4, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d7c:	6021      	str	r1, [r4, #0]
 8008d7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	0800a349 	.word	0x0800a349
 8008d88:	0800a3c9 	.word	0x0800a3c9

08008d8c <__multadd>:
 8008d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d90:	690d      	ldr	r5, [r1, #16]
 8008d92:	4607      	mov	r7, r0
 8008d94:	460c      	mov	r4, r1
 8008d96:	461e      	mov	r6, r3
 8008d98:	f101 0c14 	add.w	ip, r1, #20
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f8dc 3000 	ldr.w	r3, [ip]
 8008da2:	b299      	uxth	r1, r3
 8008da4:	fb02 6101 	mla	r1, r2, r1, r6
 8008da8:	0c1e      	lsrs	r6, r3, #16
 8008daa:	0c0b      	lsrs	r3, r1, #16
 8008dac:	fb02 3306 	mla	r3, r2, r6, r3
 8008db0:	b289      	uxth	r1, r1
 8008db2:	3001      	adds	r0, #1
 8008db4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008db8:	4285      	cmp	r5, r0
 8008dba:	f84c 1b04 	str.w	r1, [ip], #4
 8008dbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dc2:	dcec      	bgt.n	8008d9e <__multadd+0x12>
 8008dc4:	b30e      	cbz	r6, 8008e0a <__multadd+0x7e>
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	42ab      	cmp	r3, r5
 8008dca:	dc19      	bgt.n	8008e00 <__multadd+0x74>
 8008dcc:	6861      	ldr	r1, [r4, #4]
 8008dce:	4638      	mov	r0, r7
 8008dd0:	3101      	adds	r1, #1
 8008dd2:	f7ff ff79 	bl	8008cc8 <_Balloc>
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	b928      	cbnz	r0, 8008de6 <__multadd+0x5a>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <__multadd+0x84>)
 8008dde:	480d      	ldr	r0, [pc, #52]	@ (8008e14 <__multadd+0x88>)
 8008de0:	21ba      	movs	r1, #186	@ 0xba
 8008de2:	f000 fd27 	bl	8009834 <__assert_func>
 8008de6:	6922      	ldr	r2, [r4, #16]
 8008de8:	3202      	adds	r2, #2
 8008dea:	f104 010c 	add.w	r1, r4, #12
 8008dee:	0092      	lsls	r2, r2, #2
 8008df0:	300c      	adds	r0, #12
 8008df2:	f000 fd11 	bl	8009818 <memcpy>
 8008df6:	4621      	mov	r1, r4
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff ffa5 	bl	8008d48 <_Bfree>
 8008dfe:	4644      	mov	r4, r8
 8008e00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e04:	3501      	adds	r5, #1
 8008e06:	615e      	str	r6, [r3, #20]
 8008e08:	6125      	str	r5, [r4, #16]
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e10:	0800a3b8 	.word	0x0800a3b8
 8008e14:	0800a3c9 	.word	0x0800a3c9

08008e18 <__hi0bits>:
 8008e18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	bf36      	itet	cc
 8008e20:	0403      	lslcc	r3, r0, #16
 8008e22:	2000      	movcs	r0, #0
 8008e24:	2010      	movcc	r0, #16
 8008e26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e2a:	bf3c      	itt	cc
 8008e2c:	021b      	lslcc	r3, r3, #8
 8008e2e:	3008      	addcc	r0, #8
 8008e30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e34:	bf3c      	itt	cc
 8008e36:	011b      	lslcc	r3, r3, #4
 8008e38:	3004      	addcc	r0, #4
 8008e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e3e:	bf3c      	itt	cc
 8008e40:	009b      	lslcc	r3, r3, #2
 8008e42:	3002      	addcc	r0, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	db05      	blt.n	8008e54 <__hi0bits+0x3c>
 8008e48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e4c:	f100 0001 	add.w	r0, r0, #1
 8008e50:	bf08      	it	eq
 8008e52:	2020      	moveq	r0, #32
 8008e54:	4770      	bx	lr

08008e56 <__lo0bits>:
 8008e56:	6803      	ldr	r3, [r0, #0]
 8008e58:	4602      	mov	r2, r0
 8008e5a:	f013 0007 	ands.w	r0, r3, #7
 8008e5e:	d00b      	beq.n	8008e78 <__lo0bits+0x22>
 8008e60:	07d9      	lsls	r1, r3, #31
 8008e62:	d421      	bmi.n	8008ea8 <__lo0bits+0x52>
 8008e64:	0798      	lsls	r0, r3, #30
 8008e66:	bf49      	itett	mi
 8008e68:	085b      	lsrmi	r3, r3, #1
 8008e6a:	089b      	lsrpl	r3, r3, #2
 8008e6c:	2001      	movmi	r0, #1
 8008e6e:	6013      	strmi	r3, [r2, #0]
 8008e70:	bf5c      	itt	pl
 8008e72:	6013      	strpl	r3, [r2, #0]
 8008e74:	2002      	movpl	r0, #2
 8008e76:	4770      	bx	lr
 8008e78:	b299      	uxth	r1, r3
 8008e7a:	b909      	cbnz	r1, 8008e80 <__lo0bits+0x2a>
 8008e7c:	0c1b      	lsrs	r3, r3, #16
 8008e7e:	2010      	movs	r0, #16
 8008e80:	b2d9      	uxtb	r1, r3
 8008e82:	b909      	cbnz	r1, 8008e88 <__lo0bits+0x32>
 8008e84:	3008      	adds	r0, #8
 8008e86:	0a1b      	lsrs	r3, r3, #8
 8008e88:	0719      	lsls	r1, r3, #28
 8008e8a:	bf04      	itt	eq
 8008e8c:	091b      	lsreq	r3, r3, #4
 8008e8e:	3004      	addeq	r0, #4
 8008e90:	0799      	lsls	r1, r3, #30
 8008e92:	bf04      	itt	eq
 8008e94:	089b      	lsreq	r3, r3, #2
 8008e96:	3002      	addeq	r0, #2
 8008e98:	07d9      	lsls	r1, r3, #31
 8008e9a:	d403      	bmi.n	8008ea4 <__lo0bits+0x4e>
 8008e9c:	085b      	lsrs	r3, r3, #1
 8008e9e:	f100 0001 	add.w	r0, r0, #1
 8008ea2:	d003      	beq.n	8008eac <__lo0bits+0x56>
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	4770      	bx	lr
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	4770      	bx	lr
 8008eac:	2020      	movs	r0, #32
 8008eae:	4770      	bx	lr

08008eb0 <__i2b>:
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	f7ff ff07 	bl	8008cc8 <_Balloc>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	b928      	cbnz	r0, 8008eca <__i2b+0x1a>
 8008ebe:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <__i2b+0x24>)
 8008ec0:	4805      	ldr	r0, [pc, #20]	@ (8008ed8 <__i2b+0x28>)
 8008ec2:	f240 1145 	movw	r1, #325	@ 0x145
 8008ec6:	f000 fcb5 	bl	8009834 <__assert_func>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	6144      	str	r4, [r0, #20]
 8008ece:	6103      	str	r3, [r0, #16]
 8008ed0:	bd10      	pop	{r4, pc}
 8008ed2:	bf00      	nop
 8008ed4:	0800a3b8 	.word	0x0800a3b8
 8008ed8:	0800a3c9 	.word	0x0800a3c9

08008edc <__multiply>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	4617      	mov	r7, r2
 8008ee2:	690a      	ldr	r2, [r1, #16]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	bfa8      	it	ge
 8008eea:	463b      	movge	r3, r7
 8008eec:	4689      	mov	r9, r1
 8008eee:	bfa4      	itt	ge
 8008ef0:	460f      	movge	r7, r1
 8008ef2:	4699      	movge	r9, r3
 8008ef4:	693d      	ldr	r5, [r7, #16]
 8008ef6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	eb05 060a 	add.w	r6, r5, sl
 8008f02:	42b3      	cmp	r3, r6
 8008f04:	b085      	sub	sp, #20
 8008f06:	bfb8      	it	lt
 8008f08:	3101      	addlt	r1, #1
 8008f0a:	f7ff fedd 	bl	8008cc8 <_Balloc>
 8008f0e:	b930      	cbnz	r0, 8008f1e <__multiply+0x42>
 8008f10:	4602      	mov	r2, r0
 8008f12:	4b41      	ldr	r3, [pc, #260]	@ (8009018 <__multiply+0x13c>)
 8008f14:	4841      	ldr	r0, [pc, #260]	@ (800901c <__multiply+0x140>)
 8008f16:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f1a:	f000 fc8b 	bl	8009834 <__assert_func>
 8008f1e:	f100 0414 	add.w	r4, r0, #20
 8008f22:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008f26:	4623      	mov	r3, r4
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4573      	cmp	r3, lr
 8008f2c:	d320      	bcc.n	8008f70 <__multiply+0x94>
 8008f2e:	f107 0814 	add.w	r8, r7, #20
 8008f32:	f109 0114 	add.w	r1, r9, #20
 8008f36:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008f3a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008f3e:	9302      	str	r3, [sp, #8]
 8008f40:	1beb      	subs	r3, r5, r7
 8008f42:	3b15      	subs	r3, #21
 8008f44:	f023 0303 	bic.w	r3, r3, #3
 8008f48:	3304      	adds	r3, #4
 8008f4a:	3715      	adds	r7, #21
 8008f4c:	42bd      	cmp	r5, r7
 8008f4e:	bf38      	it	cc
 8008f50:	2304      	movcc	r3, #4
 8008f52:	9301      	str	r3, [sp, #4]
 8008f54:	9b02      	ldr	r3, [sp, #8]
 8008f56:	9103      	str	r1, [sp, #12]
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	d80c      	bhi.n	8008f76 <__multiply+0x9a>
 8008f5c:	2e00      	cmp	r6, #0
 8008f5e:	dd03      	ble.n	8008f68 <__multiply+0x8c>
 8008f60:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d055      	beq.n	8009014 <__multiply+0x138>
 8008f68:	6106      	str	r6, [r0, #16]
 8008f6a:	b005      	add	sp, #20
 8008f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f70:	f843 2b04 	str.w	r2, [r3], #4
 8008f74:	e7d9      	b.n	8008f2a <__multiply+0x4e>
 8008f76:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f7a:	f1ba 0f00 	cmp.w	sl, #0
 8008f7e:	d01f      	beq.n	8008fc0 <__multiply+0xe4>
 8008f80:	46c4      	mov	ip, r8
 8008f82:	46a1      	mov	r9, r4
 8008f84:	2700      	movs	r7, #0
 8008f86:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f8a:	f8d9 3000 	ldr.w	r3, [r9]
 8008f8e:	fa1f fb82 	uxth.w	fp, r2
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f98:	443b      	add	r3, r7
 8008f9a:	f8d9 7000 	ldr.w	r7, [r9]
 8008f9e:	0c12      	lsrs	r2, r2, #16
 8008fa0:	0c3f      	lsrs	r7, r7, #16
 8008fa2:	fb0a 7202 	mla	r2, sl, r2, r7
 8008fa6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fb0:	4565      	cmp	r5, ip
 8008fb2:	f849 3b04 	str.w	r3, [r9], #4
 8008fb6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008fba:	d8e4      	bhi.n	8008f86 <__multiply+0xaa>
 8008fbc:	9b01      	ldr	r3, [sp, #4]
 8008fbe:	50e7      	str	r7, [r4, r3]
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008fc6:	3104      	adds	r1, #4
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	d020      	beq.n	8009010 <__multiply+0x134>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	4647      	mov	r7, r8
 8008fd2:	46a4      	mov	ip, r4
 8008fd4:	f04f 0a00 	mov.w	sl, #0
 8008fd8:	f8b7 b000 	ldrh.w	fp, [r7]
 8008fdc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008fe0:	fb09 220b 	mla	r2, r9, fp, r2
 8008fe4:	4452      	add	r2, sl
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fec:	f84c 3b04 	str.w	r3, [ip], #4
 8008ff0:	f857 3b04 	ldr.w	r3, [r7], #4
 8008ff4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ff8:	f8bc 3000 	ldrh.w	r3, [ip]
 8008ffc:	fb09 330a 	mla	r3, r9, sl, r3
 8009000:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009004:	42bd      	cmp	r5, r7
 8009006:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800900a:	d8e5      	bhi.n	8008fd8 <__multiply+0xfc>
 800900c:	9a01      	ldr	r2, [sp, #4]
 800900e:	50a3      	str	r3, [r4, r2]
 8009010:	3404      	adds	r4, #4
 8009012:	e79f      	b.n	8008f54 <__multiply+0x78>
 8009014:	3e01      	subs	r6, #1
 8009016:	e7a1      	b.n	8008f5c <__multiply+0x80>
 8009018:	0800a3b8 	.word	0x0800a3b8
 800901c:	0800a3c9 	.word	0x0800a3c9

08009020 <__pow5mult>:
 8009020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009024:	4615      	mov	r5, r2
 8009026:	f012 0203 	ands.w	r2, r2, #3
 800902a:	4607      	mov	r7, r0
 800902c:	460e      	mov	r6, r1
 800902e:	d007      	beq.n	8009040 <__pow5mult+0x20>
 8009030:	4c25      	ldr	r4, [pc, #148]	@ (80090c8 <__pow5mult+0xa8>)
 8009032:	3a01      	subs	r2, #1
 8009034:	2300      	movs	r3, #0
 8009036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800903a:	f7ff fea7 	bl	8008d8c <__multadd>
 800903e:	4606      	mov	r6, r0
 8009040:	10ad      	asrs	r5, r5, #2
 8009042:	d03d      	beq.n	80090c0 <__pow5mult+0xa0>
 8009044:	69fc      	ldr	r4, [r7, #28]
 8009046:	b97c      	cbnz	r4, 8009068 <__pow5mult+0x48>
 8009048:	2010      	movs	r0, #16
 800904a:	f7ff fd87 	bl	8008b5c <malloc>
 800904e:	4602      	mov	r2, r0
 8009050:	61f8      	str	r0, [r7, #28]
 8009052:	b928      	cbnz	r0, 8009060 <__pow5mult+0x40>
 8009054:	4b1d      	ldr	r3, [pc, #116]	@ (80090cc <__pow5mult+0xac>)
 8009056:	481e      	ldr	r0, [pc, #120]	@ (80090d0 <__pow5mult+0xb0>)
 8009058:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800905c:	f000 fbea 	bl	8009834 <__assert_func>
 8009060:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009064:	6004      	str	r4, [r0, #0]
 8009066:	60c4      	str	r4, [r0, #12]
 8009068:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800906c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009070:	b94c      	cbnz	r4, 8009086 <__pow5mult+0x66>
 8009072:	f240 2171 	movw	r1, #625	@ 0x271
 8009076:	4638      	mov	r0, r7
 8009078:	f7ff ff1a 	bl	8008eb0 <__i2b>
 800907c:	2300      	movs	r3, #0
 800907e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009082:	4604      	mov	r4, r0
 8009084:	6003      	str	r3, [r0, #0]
 8009086:	f04f 0900 	mov.w	r9, #0
 800908a:	07eb      	lsls	r3, r5, #31
 800908c:	d50a      	bpl.n	80090a4 <__pow5mult+0x84>
 800908e:	4631      	mov	r1, r6
 8009090:	4622      	mov	r2, r4
 8009092:	4638      	mov	r0, r7
 8009094:	f7ff ff22 	bl	8008edc <__multiply>
 8009098:	4631      	mov	r1, r6
 800909a:	4680      	mov	r8, r0
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff fe53 	bl	8008d48 <_Bfree>
 80090a2:	4646      	mov	r6, r8
 80090a4:	106d      	asrs	r5, r5, #1
 80090a6:	d00b      	beq.n	80090c0 <__pow5mult+0xa0>
 80090a8:	6820      	ldr	r0, [r4, #0]
 80090aa:	b938      	cbnz	r0, 80090bc <__pow5mult+0x9c>
 80090ac:	4622      	mov	r2, r4
 80090ae:	4621      	mov	r1, r4
 80090b0:	4638      	mov	r0, r7
 80090b2:	f7ff ff13 	bl	8008edc <__multiply>
 80090b6:	6020      	str	r0, [r4, #0]
 80090b8:	f8c0 9000 	str.w	r9, [r0]
 80090bc:	4604      	mov	r4, r0
 80090be:	e7e4      	b.n	800908a <__pow5mult+0x6a>
 80090c0:	4630      	mov	r0, r6
 80090c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c6:	bf00      	nop
 80090c8:	0800a47c 	.word	0x0800a47c
 80090cc:	0800a349 	.word	0x0800a349
 80090d0:	0800a3c9 	.word	0x0800a3c9

080090d4 <__lshift>:
 80090d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d8:	460c      	mov	r4, r1
 80090da:	6849      	ldr	r1, [r1, #4]
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	4607      	mov	r7, r0
 80090e6:	4691      	mov	r9, r2
 80090e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090ec:	f108 0601 	add.w	r6, r8, #1
 80090f0:	42b3      	cmp	r3, r6
 80090f2:	db0b      	blt.n	800910c <__lshift+0x38>
 80090f4:	4638      	mov	r0, r7
 80090f6:	f7ff fde7 	bl	8008cc8 <_Balloc>
 80090fa:	4605      	mov	r5, r0
 80090fc:	b948      	cbnz	r0, 8009112 <__lshift+0x3e>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b28      	ldr	r3, [pc, #160]	@ (80091a4 <__lshift+0xd0>)
 8009102:	4829      	ldr	r0, [pc, #164]	@ (80091a8 <__lshift+0xd4>)
 8009104:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009108:	f000 fb94 	bl	8009834 <__assert_func>
 800910c:	3101      	adds	r1, #1
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	e7ee      	b.n	80090f0 <__lshift+0x1c>
 8009112:	2300      	movs	r3, #0
 8009114:	f100 0114 	add.w	r1, r0, #20
 8009118:	f100 0210 	add.w	r2, r0, #16
 800911c:	4618      	mov	r0, r3
 800911e:	4553      	cmp	r3, sl
 8009120:	db33      	blt.n	800918a <__lshift+0xb6>
 8009122:	6920      	ldr	r0, [r4, #16]
 8009124:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009128:	f104 0314 	add.w	r3, r4, #20
 800912c:	f019 091f 	ands.w	r9, r9, #31
 8009130:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009134:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009138:	d02b      	beq.n	8009192 <__lshift+0xbe>
 800913a:	f1c9 0e20 	rsb	lr, r9, #32
 800913e:	468a      	mov	sl, r1
 8009140:	2200      	movs	r2, #0
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	fa00 f009 	lsl.w	r0, r0, r9
 8009148:	4310      	orrs	r0, r2
 800914a:	f84a 0b04 	str.w	r0, [sl], #4
 800914e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009152:	459c      	cmp	ip, r3
 8009154:	fa22 f20e 	lsr.w	r2, r2, lr
 8009158:	d8f3      	bhi.n	8009142 <__lshift+0x6e>
 800915a:	ebac 0304 	sub.w	r3, ip, r4
 800915e:	3b15      	subs	r3, #21
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	3304      	adds	r3, #4
 8009166:	f104 0015 	add.w	r0, r4, #21
 800916a:	4560      	cmp	r0, ip
 800916c:	bf88      	it	hi
 800916e:	2304      	movhi	r3, #4
 8009170:	50ca      	str	r2, [r1, r3]
 8009172:	b10a      	cbz	r2, 8009178 <__lshift+0xa4>
 8009174:	f108 0602 	add.w	r6, r8, #2
 8009178:	3e01      	subs	r6, #1
 800917a:	4638      	mov	r0, r7
 800917c:	612e      	str	r6, [r5, #16]
 800917e:	4621      	mov	r1, r4
 8009180:	f7ff fde2 	bl	8008d48 <_Bfree>
 8009184:	4628      	mov	r0, r5
 8009186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918a:	f842 0f04 	str.w	r0, [r2, #4]!
 800918e:	3301      	adds	r3, #1
 8009190:	e7c5      	b.n	800911e <__lshift+0x4a>
 8009192:	3904      	subs	r1, #4
 8009194:	f853 2b04 	ldr.w	r2, [r3], #4
 8009198:	f841 2f04 	str.w	r2, [r1, #4]!
 800919c:	459c      	cmp	ip, r3
 800919e:	d8f9      	bhi.n	8009194 <__lshift+0xc0>
 80091a0:	e7ea      	b.n	8009178 <__lshift+0xa4>
 80091a2:	bf00      	nop
 80091a4:	0800a3b8 	.word	0x0800a3b8
 80091a8:	0800a3c9 	.word	0x0800a3c9

080091ac <__mcmp>:
 80091ac:	690a      	ldr	r2, [r1, #16]
 80091ae:	4603      	mov	r3, r0
 80091b0:	6900      	ldr	r0, [r0, #16]
 80091b2:	1a80      	subs	r0, r0, r2
 80091b4:	b530      	push	{r4, r5, lr}
 80091b6:	d10e      	bne.n	80091d6 <__mcmp+0x2a>
 80091b8:	3314      	adds	r3, #20
 80091ba:	3114      	adds	r1, #20
 80091bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091cc:	4295      	cmp	r5, r2
 80091ce:	d003      	beq.n	80091d8 <__mcmp+0x2c>
 80091d0:	d205      	bcs.n	80091de <__mcmp+0x32>
 80091d2:	f04f 30ff 	mov.w	r0, #4294967295
 80091d6:	bd30      	pop	{r4, r5, pc}
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d3f3      	bcc.n	80091c4 <__mcmp+0x18>
 80091dc:	e7fb      	b.n	80091d6 <__mcmp+0x2a>
 80091de:	2001      	movs	r0, #1
 80091e0:	e7f9      	b.n	80091d6 <__mcmp+0x2a>
	...

080091e4 <__mdiff>:
 80091e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	4689      	mov	r9, r1
 80091ea:	4606      	mov	r6, r0
 80091ec:	4611      	mov	r1, r2
 80091ee:	4648      	mov	r0, r9
 80091f0:	4614      	mov	r4, r2
 80091f2:	f7ff ffdb 	bl	80091ac <__mcmp>
 80091f6:	1e05      	subs	r5, r0, #0
 80091f8:	d112      	bne.n	8009220 <__mdiff+0x3c>
 80091fa:	4629      	mov	r1, r5
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff fd63 	bl	8008cc8 <_Balloc>
 8009202:	4602      	mov	r2, r0
 8009204:	b928      	cbnz	r0, 8009212 <__mdiff+0x2e>
 8009206:	4b3f      	ldr	r3, [pc, #252]	@ (8009304 <__mdiff+0x120>)
 8009208:	f240 2137 	movw	r1, #567	@ 0x237
 800920c:	483e      	ldr	r0, [pc, #248]	@ (8009308 <__mdiff+0x124>)
 800920e:	f000 fb11 	bl	8009834 <__assert_func>
 8009212:	2301      	movs	r3, #1
 8009214:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009218:	4610      	mov	r0, r2
 800921a:	b003      	add	sp, #12
 800921c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009220:	bfbc      	itt	lt
 8009222:	464b      	movlt	r3, r9
 8009224:	46a1      	movlt	r9, r4
 8009226:	4630      	mov	r0, r6
 8009228:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800922c:	bfba      	itte	lt
 800922e:	461c      	movlt	r4, r3
 8009230:	2501      	movlt	r5, #1
 8009232:	2500      	movge	r5, #0
 8009234:	f7ff fd48 	bl	8008cc8 <_Balloc>
 8009238:	4602      	mov	r2, r0
 800923a:	b918      	cbnz	r0, 8009244 <__mdiff+0x60>
 800923c:	4b31      	ldr	r3, [pc, #196]	@ (8009304 <__mdiff+0x120>)
 800923e:	f240 2145 	movw	r1, #581	@ 0x245
 8009242:	e7e3      	b.n	800920c <__mdiff+0x28>
 8009244:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009248:	6926      	ldr	r6, [r4, #16]
 800924a:	60c5      	str	r5, [r0, #12]
 800924c:	f109 0310 	add.w	r3, r9, #16
 8009250:	f109 0514 	add.w	r5, r9, #20
 8009254:	f104 0e14 	add.w	lr, r4, #20
 8009258:	f100 0b14 	add.w	fp, r0, #20
 800925c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009260:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	46d9      	mov	r9, fp
 8009268:	f04f 0c00 	mov.w	ip, #0
 800926c:	9b01      	ldr	r3, [sp, #4]
 800926e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009272:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	fa1f f38a 	uxth.w	r3, sl
 800927c:	4619      	mov	r1, r3
 800927e:	b283      	uxth	r3, r0
 8009280:	1acb      	subs	r3, r1, r3
 8009282:	0c00      	lsrs	r0, r0, #16
 8009284:	4463      	add	r3, ip
 8009286:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800928a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800928e:	b29b      	uxth	r3, r3
 8009290:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009294:	4576      	cmp	r6, lr
 8009296:	f849 3b04 	str.w	r3, [r9], #4
 800929a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800929e:	d8e5      	bhi.n	800926c <__mdiff+0x88>
 80092a0:	1b33      	subs	r3, r6, r4
 80092a2:	3b15      	subs	r3, #21
 80092a4:	f023 0303 	bic.w	r3, r3, #3
 80092a8:	3415      	adds	r4, #21
 80092aa:	3304      	adds	r3, #4
 80092ac:	42a6      	cmp	r6, r4
 80092ae:	bf38      	it	cc
 80092b0:	2304      	movcc	r3, #4
 80092b2:	441d      	add	r5, r3
 80092b4:	445b      	add	r3, fp
 80092b6:	461e      	mov	r6, r3
 80092b8:	462c      	mov	r4, r5
 80092ba:	4544      	cmp	r4, r8
 80092bc:	d30e      	bcc.n	80092dc <__mdiff+0xf8>
 80092be:	f108 0103 	add.w	r1, r8, #3
 80092c2:	1b49      	subs	r1, r1, r5
 80092c4:	f021 0103 	bic.w	r1, r1, #3
 80092c8:	3d03      	subs	r5, #3
 80092ca:	45a8      	cmp	r8, r5
 80092cc:	bf38      	it	cc
 80092ce:	2100      	movcc	r1, #0
 80092d0:	440b      	add	r3, r1
 80092d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092d6:	b191      	cbz	r1, 80092fe <__mdiff+0x11a>
 80092d8:	6117      	str	r7, [r2, #16]
 80092da:	e79d      	b.n	8009218 <__mdiff+0x34>
 80092dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80092e0:	46e6      	mov	lr, ip
 80092e2:	0c08      	lsrs	r0, r1, #16
 80092e4:	fa1c fc81 	uxtah	ip, ip, r1
 80092e8:	4471      	add	r1, lr
 80092ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80092ee:	b289      	uxth	r1, r1
 80092f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092f4:	f846 1b04 	str.w	r1, [r6], #4
 80092f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092fc:	e7dd      	b.n	80092ba <__mdiff+0xd6>
 80092fe:	3f01      	subs	r7, #1
 8009300:	e7e7      	b.n	80092d2 <__mdiff+0xee>
 8009302:	bf00      	nop
 8009304:	0800a3b8 	.word	0x0800a3b8
 8009308:	0800a3c9 	.word	0x0800a3c9

0800930c <__d2b>:
 800930c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009310:	460f      	mov	r7, r1
 8009312:	2101      	movs	r1, #1
 8009314:	ec59 8b10 	vmov	r8, r9, d0
 8009318:	4616      	mov	r6, r2
 800931a:	f7ff fcd5 	bl	8008cc8 <_Balloc>
 800931e:	4604      	mov	r4, r0
 8009320:	b930      	cbnz	r0, 8009330 <__d2b+0x24>
 8009322:	4602      	mov	r2, r0
 8009324:	4b23      	ldr	r3, [pc, #140]	@ (80093b4 <__d2b+0xa8>)
 8009326:	4824      	ldr	r0, [pc, #144]	@ (80093b8 <__d2b+0xac>)
 8009328:	f240 310f 	movw	r1, #783	@ 0x30f
 800932c:	f000 fa82 	bl	8009834 <__assert_func>
 8009330:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009334:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009338:	b10d      	cbz	r5, 800933e <__d2b+0x32>
 800933a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	f1b8 0300 	subs.w	r3, r8, #0
 8009344:	d023      	beq.n	800938e <__d2b+0x82>
 8009346:	4668      	mov	r0, sp
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	f7ff fd84 	bl	8008e56 <__lo0bits>
 800934e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009352:	b1d0      	cbz	r0, 800938a <__d2b+0x7e>
 8009354:	f1c0 0320 	rsb	r3, r0, #32
 8009358:	fa02 f303 	lsl.w	r3, r2, r3
 800935c:	430b      	orrs	r3, r1
 800935e:	40c2      	lsrs	r2, r0
 8009360:	6163      	str	r3, [r4, #20]
 8009362:	9201      	str	r2, [sp, #4]
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	61a3      	str	r3, [r4, #24]
 8009368:	2b00      	cmp	r3, #0
 800936a:	bf0c      	ite	eq
 800936c:	2201      	moveq	r2, #1
 800936e:	2202      	movne	r2, #2
 8009370:	6122      	str	r2, [r4, #16]
 8009372:	b1a5      	cbz	r5, 800939e <__d2b+0x92>
 8009374:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009378:	4405      	add	r5, r0
 800937a:	603d      	str	r5, [r7, #0]
 800937c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009380:	6030      	str	r0, [r6, #0]
 8009382:	4620      	mov	r0, r4
 8009384:	b003      	add	sp, #12
 8009386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800938a:	6161      	str	r1, [r4, #20]
 800938c:	e7ea      	b.n	8009364 <__d2b+0x58>
 800938e:	a801      	add	r0, sp, #4
 8009390:	f7ff fd61 	bl	8008e56 <__lo0bits>
 8009394:	9b01      	ldr	r3, [sp, #4]
 8009396:	6163      	str	r3, [r4, #20]
 8009398:	3020      	adds	r0, #32
 800939a:	2201      	movs	r2, #1
 800939c:	e7e8      	b.n	8009370 <__d2b+0x64>
 800939e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093a6:	6038      	str	r0, [r7, #0]
 80093a8:	6918      	ldr	r0, [r3, #16]
 80093aa:	f7ff fd35 	bl	8008e18 <__hi0bits>
 80093ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093b2:	e7e5      	b.n	8009380 <__d2b+0x74>
 80093b4:	0800a3b8 	.word	0x0800a3b8
 80093b8:	0800a3c9 	.word	0x0800a3c9

080093bc <__ssputs_r>:
 80093bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c0:	688e      	ldr	r6, [r1, #8]
 80093c2:	461f      	mov	r7, r3
 80093c4:	42be      	cmp	r6, r7
 80093c6:	680b      	ldr	r3, [r1, #0]
 80093c8:	4682      	mov	sl, r0
 80093ca:	460c      	mov	r4, r1
 80093cc:	4690      	mov	r8, r2
 80093ce:	d82d      	bhi.n	800942c <__ssputs_r+0x70>
 80093d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093d8:	d026      	beq.n	8009428 <__ssputs_r+0x6c>
 80093da:	6965      	ldr	r5, [r4, #20]
 80093dc:	6909      	ldr	r1, [r1, #16]
 80093de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093e2:	eba3 0901 	sub.w	r9, r3, r1
 80093e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093ea:	1c7b      	adds	r3, r7, #1
 80093ec:	444b      	add	r3, r9
 80093ee:	106d      	asrs	r5, r5, #1
 80093f0:	429d      	cmp	r5, r3
 80093f2:	bf38      	it	cc
 80093f4:	461d      	movcc	r5, r3
 80093f6:	0553      	lsls	r3, r2, #21
 80093f8:	d527      	bpl.n	800944a <__ssputs_r+0x8e>
 80093fa:	4629      	mov	r1, r5
 80093fc:	f7ff fbd8 	bl	8008bb0 <_malloc_r>
 8009400:	4606      	mov	r6, r0
 8009402:	b360      	cbz	r0, 800945e <__ssputs_r+0xa2>
 8009404:	6921      	ldr	r1, [r4, #16]
 8009406:	464a      	mov	r2, r9
 8009408:	f000 fa06 	bl	8009818 <memcpy>
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009416:	81a3      	strh	r3, [r4, #12]
 8009418:	6126      	str	r6, [r4, #16]
 800941a:	6165      	str	r5, [r4, #20]
 800941c:	444e      	add	r6, r9
 800941e:	eba5 0509 	sub.w	r5, r5, r9
 8009422:	6026      	str	r6, [r4, #0]
 8009424:	60a5      	str	r5, [r4, #8]
 8009426:	463e      	mov	r6, r7
 8009428:	42be      	cmp	r6, r7
 800942a:	d900      	bls.n	800942e <__ssputs_r+0x72>
 800942c:	463e      	mov	r6, r7
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	4632      	mov	r2, r6
 8009432:	4641      	mov	r1, r8
 8009434:	f000 f9c6 	bl	80097c4 <memmove>
 8009438:	68a3      	ldr	r3, [r4, #8]
 800943a:	1b9b      	subs	r3, r3, r6
 800943c:	60a3      	str	r3, [r4, #8]
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	4433      	add	r3, r6
 8009442:	6023      	str	r3, [r4, #0]
 8009444:	2000      	movs	r0, #0
 8009446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944a:	462a      	mov	r2, r5
 800944c:	f000 fa36 	bl	80098bc <_realloc_r>
 8009450:	4606      	mov	r6, r0
 8009452:	2800      	cmp	r0, #0
 8009454:	d1e0      	bne.n	8009418 <__ssputs_r+0x5c>
 8009456:	6921      	ldr	r1, [r4, #16]
 8009458:	4650      	mov	r0, sl
 800945a:	f7ff fb35 	bl	8008ac8 <_free_r>
 800945e:	230c      	movs	r3, #12
 8009460:	f8ca 3000 	str.w	r3, [sl]
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	f04f 30ff 	mov.w	r0, #4294967295
 8009470:	e7e9      	b.n	8009446 <__ssputs_r+0x8a>
	...

08009474 <_svfiprintf_r>:
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	4698      	mov	r8, r3
 800947a:	898b      	ldrh	r3, [r1, #12]
 800947c:	061b      	lsls	r3, r3, #24
 800947e:	b09d      	sub	sp, #116	@ 0x74
 8009480:	4607      	mov	r7, r0
 8009482:	460d      	mov	r5, r1
 8009484:	4614      	mov	r4, r2
 8009486:	d510      	bpl.n	80094aa <_svfiprintf_r+0x36>
 8009488:	690b      	ldr	r3, [r1, #16]
 800948a:	b973      	cbnz	r3, 80094aa <_svfiprintf_r+0x36>
 800948c:	2140      	movs	r1, #64	@ 0x40
 800948e:	f7ff fb8f 	bl	8008bb0 <_malloc_r>
 8009492:	6028      	str	r0, [r5, #0]
 8009494:	6128      	str	r0, [r5, #16]
 8009496:	b930      	cbnz	r0, 80094a6 <_svfiprintf_r+0x32>
 8009498:	230c      	movs	r3, #12
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	b01d      	add	sp, #116	@ 0x74
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	2340      	movs	r3, #64	@ 0x40
 80094a8:	616b      	str	r3, [r5, #20]
 80094aa:	2300      	movs	r3, #0
 80094ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ae:	2320      	movs	r3, #32
 80094b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80094b8:	2330      	movs	r3, #48	@ 0x30
 80094ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009658 <_svfiprintf_r+0x1e4>
 80094be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094c2:	f04f 0901 	mov.w	r9, #1
 80094c6:	4623      	mov	r3, r4
 80094c8:	469a      	mov	sl, r3
 80094ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ce:	b10a      	cbz	r2, 80094d4 <_svfiprintf_r+0x60>
 80094d0:	2a25      	cmp	r2, #37	@ 0x25
 80094d2:	d1f9      	bne.n	80094c8 <_svfiprintf_r+0x54>
 80094d4:	ebba 0b04 	subs.w	fp, sl, r4
 80094d8:	d00b      	beq.n	80094f2 <_svfiprintf_r+0x7e>
 80094da:	465b      	mov	r3, fp
 80094dc:	4622      	mov	r2, r4
 80094de:	4629      	mov	r1, r5
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff ff6b 	bl	80093bc <__ssputs_r>
 80094e6:	3001      	adds	r0, #1
 80094e8:	f000 80a7 	beq.w	800963a <_svfiprintf_r+0x1c6>
 80094ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094ee:	445a      	add	r2, fp
 80094f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80094f2:	f89a 3000 	ldrb.w	r3, [sl]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 809f 	beq.w	800963a <_svfiprintf_r+0x1c6>
 80094fc:	2300      	movs	r3, #0
 80094fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009506:	f10a 0a01 	add.w	sl, sl, #1
 800950a:	9304      	str	r3, [sp, #16]
 800950c:	9307      	str	r3, [sp, #28]
 800950e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009512:	931a      	str	r3, [sp, #104]	@ 0x68
 8009514:	4654      	mov	r4, sl
 8009516:	2205      	movs	r2, #5
 8009518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951c:	484e      	ldr	r0, [pc, #312]	@ (8009658 <_svfiprintf_r+0x1e4>)
 800951e:	f7f6 fe67 	bl	80001f0 <memchr>
 8009522:	9a04      	ldr	r2, [sp, #16]
 8009524:	b9d8      	cbnz	r0, 800955e <_svfiprintf_r+0xea>
 8009526:	06d0      	lsls	r0, r2, #27
 8009528:	bf44      	itt	mi
 800952a:	2320      	movmi	r3, #32
 800952c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009530:	0711      	lsls	r1, r2, #28
 8009532:	bf44      	itt	mi
 8009534:	232b      	movmi	r3, #43	@ 0x2b
 8009536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800953a:	f89a 3000 	ldrb.w	r3, [sl]
 800953e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009540:	d015      	beq.n	800956e <_svfiprintf_r+0xfa>
 8009542:	9a07      	ldr	r2, [sp, #28]
 8009544:	4654      	mov	r4, sl
 8009546:	2000      	movs	r0, #0
 8009548:	f04f 0c0a 	mov.w	ip, #10
 800954c:	4621      	mov	r1, r4
 800954e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009552:	3b30      	subs	r3, #48	@ 0x30
 8009554:	2b09      	cmp	r3, #9
 8009556:	d94b      	bls.n	80095f0 <_svfiprintf_r+0x17c>
 8009558:	b1b0      	cbz	r0, 8009588 <_svfiprintf_r+0x114>
 800955a:	9207      	str	r2, [sp, #28]
 800955c:	e014      	b.n	8009588 <_svfiprintf_r+0x114>
 800955e:	eba0 0308 	sub.w	r3, r0, r8
 8009562:	fa09 f303 	lsl.w	r3, r9, r3
 8009566:	4313      	orrs	r3, r2
 8009568:	9304      	str	r3, [sp, #16]
 800956a:	46a2      	mov	sl, r4
 800956c:	e7d2      	b.n	8009514 <_svfiprintf_r+0xa0>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	1d19      	adds	r1, r3, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	9103      	str	r1, [sp, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfbb      	ittet	lt
 800957a:	425b      	neglt	r3, r3
 800957c:	f042 0202 	orrlt.w	r2, r2, #2
 8009580:	9307      	strge	r3, [sp, #28]
 8009582:	9307      	strlt	r3, [sp, #28]
 8009584:	bfb8      	it	lt
 8009586:	9204      	strlt	r2, [sp, #16]
 8009588:	7823      	ldrb	r3, [r4, #0]
 800958a:	2b2e      	cmp	r3, #46	@ 0x2e
 800958c:	d10a      	bne.n	80095a4 <_svfiprintf_r+0x130>
 800958e:	7863      	ldrb	r3, [r4, #1]
 8009590:	2b2a      	cmp	r3, #42	@ 0x2a
 8009592:	d132      	bne.n	80095fa <_svfiprintf_r+0x186>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	1d1a      	adds	r2, r3, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	9203      	str	r2, [sp, #12]
 800959c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095a0:	3402      	adds	r4, #2
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009668 <_svfiprintf_r+0x1f4>
 80095a8:	7821      	ldrb	r1, [r4, #0]
 80095aa:	2203      	movs	r2, #3
 80095ac:	4650      	mov	r0, sl
 80095ae:	f7f6 fe1f 	bl	80001f0 <memchr>
 80095b2:	b138      	cbz	r0, 80095c4 <_svfiprintf_r+0x150>
 80095b4:	9b04      	ldr	r3, [sp, #16]
 80095b6:	eba0 000a 	sub.w	r0, r0, sl
 80095ba:	2240      	movs	r2, #64	@ 0x40
 80095bc:	4082      	lsls	r2, r0
 80095be:	4313      	orrs	r3, r2
 80095c0:	3401      	adds	r4, #1
 80095c2:	9304      	str	r3, [sp, #16]
 80095c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c8:	4824      	ldr	r0, [pc, #144]	@ (800965c <_svfiprintf_r+0x1e8>)
 80095ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095ce:	2206      	movs	r2, #6
 80095d0:	f7f6 fe0e 	bl	80001f0 <memchr>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d036      	beq.n	8009646 <_svfiprintf_r+0x1d2>
 80095d8:	4b21      	ldr	r3, [pc, #132]	@ (8009660 <_svfiprintf_r+0x1ec>)
 80095da:	bb1b      	cbnz	r3, 8009624 <_svfiprintf_r+0x1b0>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	3307      	adds	r3, #7
 80095e0:	f023 0307 	bic.w	r3, r3, #7
 80095e4:	3308      	adds	r3, #8
 80095e6:	9303      	str	r3, [sp, #12]
 80095e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ea:	4433      	add	r3, r6
 80095ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ee:	e76a      	b.n	80094c6 <_svfiprintf_r+0x52>
 80095f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80095f4:	460c      	mov	r4, r1
 80095f6:	2001      	movs	r0, #1
 80095f8:	e7a8      	b.n	800954c <_svfiprintf_r+0xd8>
 80095fa:	2300      	movs	r3, #0
 80095fc:	3401      	adds	r4, #1
 80095fe:	9305      	str	r3, [sp, #20]
 8009600:	4619      	mov	r1, r3
 8009602:	f04f 0c0a 	mov.w	ip, #10
 8009606:	4620      	mov	r0, r4
 8009608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800960c:	3a30      	subs	r2, #48	@ 0x30
 800960e:	2a09      	cmp	r2, #9
 8009610:	d903      	bls.n	800961a <_svfiprintf_r+0x1a6>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0c6      	beq.n	80095a4 <_svfiprintf_r+0x130>
 8009616:	9105      	str	r1, [sp, #20]
 8009618:	e7c4      	b.n	80095a4 <_svfiprintf_r+0x130>
 800961a:	fb0c 2101 	mla	r1, ip, r1, r2
 800961e:	4604      	mov	r4, r0
 8009620:	2301      	movs	r3, #1
 8009622:	e7f0      	b.n	8009606 <_svfiprintf_r+0x192>
 8009624:	ab03      	add	r3, sp, #12
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	462a      	mov	r2, r5
 800962a:	4b0e      	ldr	r3, [pc, #56]	@ (8009664 <_svfiprintf_r+0x1f0>)
 800962c:	a904      	add	r1, sp, #16
 800962e:	4638      	mov	r0, r7
 8009630:	f7fd fe80 	bl	8007334 <_printf_float>
 8009634:	1c42      	adds	r2, r0, #1
 8009636:	4606      	mov	r6, r0
 8009638:	d1d6      	bne.n	80095e8 <_svfiprintf_r+0x174>
 800963a:	89ab      	ldrh	r3, [r5, #12]
 800963c:	065b      	lsls	r3, r3, #25
 800963e:	f53f af2d 	bmi.w	800949c <_svfiprintf_r+0x28>
 8009642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009644:	e72c      	b.n	80094a0 <_svfiprintf_r+0x2c>
 8009646:	ab03      	add	r3, sp, #12
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	462a      	mov	r2, r5
 800964c:	4b05      	ldr	r3, [pc, #20]	@ (8009664 <_svfiprintf_r+0x1f0>)
 800964e:	a904      	add	r1, sp, #16
 8009650:	4638      	mov	r0, r7
 8009652:	f7fe f907 	bl	8007864 <_printf_i>
 8009656:	e7ed      	b.n	8009634 <_svfiprintf_r+0x1c0>
 8009658:	0800a422 	.word	0x0800a422
 800965c:	0800a42c 	.word	0x0800a42c
 8009660:	08007335 	.word	0x08007335
 8009664:	080093bd 	.word	0x080093bd
 8009668:	0800a428 	.word	0x0800a428

0800966c <__sflush_r>:
 800966c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009674:	0716      	lsls	r6, r2, #28
 8009676:	4605      	mov	r5, r0
 8009678:	460c      	mov	r4, r1
 800967a:	d454      	bmi.n	8009726 <__sflush_r+0xba>
 800967c:	684b      	ldr	r3, [r1, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	dc02      	bgt.n	8009688 <__sflush_r+0x1c>
 8009682:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd48      	ble.n	800971a <__sflush_r+0xae>
 8009688:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800968a:	2e00      	cmp	r6, #0
 800968c:	d045      	beq.n	800971a <__sflush_r+0xae>
 800968e:	2300      	movs	r3, #0
 8009690:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009694:	682f      	ldr	r7, [r5, #0]
 8009696:	6a21      	ldr	r1, [r4, #32]
 8009698:	602b      	str	r3, [r5, #0]
 800969a:	d030      	beq.n	80096fe <__sflush_r+0x92>
 800969c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	0759      	lsls	r1, r3, #29
 80096a2:	d505      	bpl.n	80096b0 <__sflush_r+0x44>
 80096a4:	6863      	ldr	r3, [r4, #4]
 80096a6:	1ad2      	subs	r2, r2, r3
 80096a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096aa:	b10b      	cbz	r3, 80096b0 <__sflush_r+0x44>
 80096ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096ae:	1ad2      	subs	r2, r2, r3
 80096b0:	2300      	movs	r3, #0
 80096b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096b4:	6a21      	ldr	r1, [r4, #32]
 80096b6:	4628      	mov	r0, r5
 80096b8:	47b0      	blx	r6
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	d106      	bne.n	80096ce <__sflush_r+0x62>
 80096c0:	6829      	ldr	r1, [r5, #0]
 80096c2:	291d      	cmp	r1, #29
 80096c4:	d82b      	bhi.n	800971e <__sflush_r+0xb2>
 80096c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009770 <__sflush_r+0x104>)
 80096c8:	40ca      	lsrs	r2, r1
 80096ca:	07d6      	lsls	r6, r2, #31
 80096cc:	d527      	bpl.n	800971e <__sflush_r+0xb2>
 80096ce:	2200      	movs	r2, #0
 80096d0:	6062      	str	r2, [r4, #4]
 80096d2:	04d9      	lsls	r1, r3, #19
 80096d4:	6922      	ldr	r2, [r4, #16]
 80096d6:	6022      	str	r2, [r4, #0]
 80096d8:	d504      	bpl.n	80096e4 <__sflush_r+0x78>
 80096da:	1c42      	adds	r2, r0, #1
 80096dc:	d101      	bne.n	80096e2 <__sflush_r+0x76>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	b903      	cbnz	r3, 80096e4 <__sflush_r+0x78>
 80096e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80096e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096e6:	602f      	str	r7, [r5, #0]
 80096e8:	b1b9      	cbz	r1, 800971a <__sflush_r+0xae>
 80096ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096ee:	4299      	cmp	r1, r3
 80096f0:	d002      	beq.n	80096f8 <__sflush_r+0x8c>
 80096f2:	4628      	mov	r0, r5
 80096f4:	f7ff f9e8 	bl	8008ac8 <_free_r>
 80096f8:	2300      	movs	r3, #0
 80096fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80096fc:	e00d      	b.n	800971a <__sflush_r+0xae>
 80096fe:	2301      	movs	r3, #1
 8009700:	4628      	mov	r0, r5
 8009702:	47b0      	blx	r6
 8009704:	4602      	mov	r2, r0
 8009706:	1c50      	adds	r0, r2, #1
 8009708:	d1c9      	bne.n	800969e <__sflush_r+0x32>
 800970a:	682b      	ldr	r3, [r5, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0c6      	beq.n	800969e <__sflush_r+0x32>
 8009710:	2b1d      	cmp	r3, #29
 8009712:	d001      	beq.n	8009718 <__sflush_r+0xac>
 8009714:	2b16      	cmp	r3, #22
 8009716:	d11e      	bne.n	8009756 <__sflush_r+0xea>
 8009718:	602f      	str	r7, [r5, #0]
 800971a:	2000      	movs	r0, #0
 800971c:	e022      	b.n	8009764 <__sflush_r+0xf8>
 800971e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009722:	b21b      	sxth	r3, r3
 8009724:	e01b      	b.n	800975e <__sflush_r+0xf2>
 8009726:	690f      	ldr	r7, [r1, #16]
 8009728:	2f00      	cmp	r7, #0
 800972a:	d0f6      	beq.n	800971a <__sflush_r+0xae>
 800972c:	0793      	lsls	r3, r2, #30
 800972e:	680e      	ldr	r6, [r1, #0]
 8009730:	bf08      	it	eq
 8009732:	694b      	ldreq	r3, [r1, #20]
 8009734:	600f      	str	r7, [r1, #0]
 8009736:	bf18      	it	ne
 8009738:	2300      	movne	r3, #0
 800973a:	eba6 0807 	sub.w	r8, r6, r7
 800973e:	608b      	str	r3, [r1, #8]
 8009740:	f1b8 0f00 	cmp.w	r8, #0
 8009744:	dde9      	ble.n	800971a <__sflush_r+0xae>
 8009746:	6a21      	ldr	r1, [r4, #32]
 8009748:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800974a:	4643      	mov	r3, r8
 800974c:	463a      	mov	r2, r7
 800974e:	4628      	mov	r0, r5
 8009750:	47b0      	blx	r6
 8009752:	2800      	cmp	r0, #0
 8009754:	dc08      	bgt.n	8009768 <__sflush_r+0xfc>
 8009756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	f04f 30ff 	mov.w	r0, #4294967295
 8009764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009768:	4407      	add	r7, r0
 800976a:	eba8 0800 	sub.w	r8, r8, r0
 800976e:	e7e7      	b.n	8009740 <__sflush_r+0xd4>
 8009770:	20400001 	.word	0x20400001

08009774 <_fflush_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	690b      	ldr	r3, [r1, #16]
 8009778:	4605      	mov	r5, r0
 800977a:	460c      	mov	r4, r1
 800977c:	b913      	cbnz	r3, 8009784 <_fflush_r+0x10>
 800977e:	2500      	movs	r5, #0
 8009780:	4628      	mov	r0, r5
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	b118      	cbz	r0, 800978e <_fflush_r+0x1a>
 8009786:	6a03      	ldr	r3, [r0, #32]
 8009788:	b90b      	cbnz	r3, 800978e <_fflush_r+0x1a>
 800978a:	f7fe fa15 	bl	8007bb8 <__sinit>
 800978e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0f3      	beq.n	800977e <_fflush_r+0xa>
 8009796:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009798:	07d0      	lsls	r0, r2, #31
 800979a:	d404      	bmi.n	80097a6 <_fflush_r+0x32>
 800979c:	0599      	lsls	r1, r3, #22
 800979e:	d402      	bmi.n	80097a6 <_fflush_r+0x32>
 80097a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097a2:	f7fe fb36 	bl	8007e12 <__retarget_lock_acquire_recursive>
 80097a6:	4628      	mov	r0, r5
 80097a8:	4621      	mov	r1, r4
 80097aa:	f7ff ff5f 	bl	800966c <__sflush_r>
 80097ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097b0:	07da      	lsls	r2, r3, #31
 80097b2:	4605      	mov	r5, r0
 80097b4:	d4e4      	bmi.n	8009780 <_fflush_r+0xc>
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	059b      	lsls	r3, r3, #22
 80097ba:	d4e1      	bmi.n	8009780 <_fflush_r+0xc>
 80097bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097be:	f7fe fb29 	bl	8007e14 <__retarget_lock_release_recursive>
 80097c2:	e7dd      	b.n	8009780 <_fflush_r+0xc>

080097c4 <memmove>:
 80097c4:	4288      	cmp	r0, r1
 80097c6:	b510      	push	{r4, lr}
 80097c8:	eb01 0402 	add.w	r4, r1, r2
 80097cc:	d902      	bls.n	80097d4 <memmove+0x10>
 80097ce:	4284      	cmp	r4, r0
 80097d0:	4623      	mov	r3, r4
 80097d2:	d807      	bhi.n	80097e4 <memmove+0x20>
 80097d4:	1e43      	subs	r3, r0, #1
 80097d6:	42a1      	cmp	r1, r4
 80097d8:	d008      	beq.n	80097ec <memmove+0x28>
 80097da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097e2:	e7f8      	b.n	80097d6 <memmove+0x12>
 80097e4:	4402      	add	r2, r0
 80097e6:	4601      	mov	r1, r0
 80097e8:	428a      	cmp	r2, r1
 80097ea:	d100      	bne.n	80097ee <memmove+0x2a>
 80097ec:	bd10      	pop	{r4, pc}
 80097ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097f6:	e7f7      	b.n	80097e8 <memmove+0x24>

080097f8 <_sbrk_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d06      	ldr	r5, [pc, #24]	@ (8009814 <_sbrk_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7f8 fad4 	bl	8001db0 <_sbrk>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_sbrk_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_sbrk_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	2000399c 	.word	0x2000399c

08009818 <memcpy>:
 8009818:	440a      	add	r2, r1
 800981a:	4291      	cmp	r1, r2
 800981c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009820:	d100      	bne.n	8009824 <memcpy+0xc>
 8009822:	4770      	bx	lr
 8009824:	b510      	push	{r4, lr}
 8009826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982e:	4291      	cmp	r1, r2
 8009830:	d1f9      	bne.n	8009826 <memcpy+0xe>
 8009832:	bd10      	pop	{r4, pc}

08009834 <__assert_func>:
 8009834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009836:	4614      	mov	r4, r2
 8009838:	461a      	mov	r2, r3
 800983a:	4b09      	ldr	r3, [pc, #36]	@ (8009860 <__assert_func+0x2c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4605      	mov	r5, r0
 8009840:	68d8      	ldr	r0, [r3, #12]
 8009842:	b14c      	cbz	r4, 8009858 <__assert_func+0x24>
 8009844:	4b07      	ldr	r3, [pc, #28]	@ (8009864 <__assert_func+0x30>)
 8009846:	9100      	str	r1, [sp, #0]
 8009848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800984c:	4906      	ldr	r1, [pc, #24]	@ (8009868 <__assert_func+0x34>)
 800984e:	462b      	mov	r3, r5
 8009850:	f000 f870 	bl	8009934 <fiprintf>
 8009854:	f000 f880 	bl	8009958 <abort>
 8009858:	4b04      	ldr	r3, [pc, #16]	@ (800986c <__assert_func+0x38>)
 800985a:	461c      	mov	r4, r3
 800985c:	e7f3      	b.n	8009846 <__assert_func+0x12>
 800985e:	bf00      	nop
 8009860:	20000034 	.word	0x20000034
 8009864:	0800a43d 	.word	0x0800a43d
 8009868:	0800a44a 	.word	0x0800a44a
 800986c:	0800a478 	.word	0x0800a478

08009870 <_calloc_r>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	fba1 5402 	umull	r5, r4, r1, r2
 8009876:	b934      	cbnz	r4, 8009886 <_calloc_r+0x16>
 8009878:	4629      	mov	r1, r5
 800987a:	f7ff f999 	bl	8008bb0 <_malloc_r>
 800987e:	4606      	mov	r6, r0
 8009880:	b928      	cbnz	r0, 800988e <_calloc_r+0x1e>
 8009882:	4630      	mov	r0, r6
 8009884:	bd70      	pop	{r4, r5, r6, pc}
 8009886:	220c      	movs	r2, #12
 8009888:	6002      	str	r2, [r0, #0]
 800988a:	2600      	movs	r6, #0
 800988c:	e7f9      	b.n	8009882 <_calloc_r+0x12>
 800988e:	462a      	mov	r2, r5
 8009890:	4621      	mov	r1, r4
 8009892:	f7fe fa40 	bl	8007d16 <memset>
 8009896:	e7f4      	b.n	8009882 <_calloc_r+0x12>

08009898 <__ascii_mbtowc>:
 8009898:	b082      	sub	sp, #8
 800989a:	b901      	cbnz	r1, 800989e <__ascii_mbtowc+0x6>
 800989c:	a901      	add	r1, sp, #4
 800989e:	b142      	cbz	r2, 80098b2 <__ascii_mbtowc+0x1a>
 80098a0:	b14b      	cbz	r3, 80098b6 <__ascii_mbtowc+0x1e>
 80098a2:	7813      	ldrb	r3, [r2, #0]
 80098a4:	600b      	str	r3, [r1, #0]
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	1e10      	subs	r0, r2, #0
 80098aa:	bf18      	it	ne
 80098ac:	2001      	movne	r0, #1
 80098ae:	b002      	add	sp, #8
 80098b0:	4770      	bx	lr
 80098b2:	4610      	mov	r0, r2
 80098b4:	e7fb      	b.n	80098ae <__ascii_mbtowc+0x16>
 80098b6:	f06f 0001 	mvn.w	r0, #1
 80098ba:	e7f8      	b.n	80098ae <__ascii_mbtowc+0x16>

080098bc <_realloc_r>:
 80098bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c0:	4607      	mov	r7, r0
 80098c2:	4614      	mov	r4, r2
 80098c4:	460d      	mov	r5, r1
 80098c6:	b921      	cbnz	r1, 80098d2 <_realloc_r+0x16>
 80098c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098cc:	4611      	mov	r1, r2
 80098ce:	f7ff b96f 	b.w	8008bb0 <_malloc_r>
 80098d2:	b92a      	cbnz	r2, 80098e0 <_realloc_r+0x24>
 80098d4:	f7ff f8f8 	bl	8008ac8 <_free_r>
 80098d8:	4625      	mov	r5, r4
 80098da:	4628      	mov	r0, r5
 80098dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e0:	f000 f841 	bl	8009966 <_malloc_usable_size_r>
 80098e4:	4284      	cmp	r4, r0
 80098e6:	4606      	mov	r6, r0
 80098e8:	d802      	bhi.n	80098f0 <_realloc_r+0x34>
 80098ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098ee:	d8f4      	bhi.n	80098da <_realloc_r+0x1e>
 80098f0:	4621      	mov	r1, r4
 80098f2:	4638      	mov	r0, r7
 80098f4:	f7ff f95c 	bl	8008bb0 <_malloc_r>
 80098f8:	4680      	mov	r8, r0
 80098fa:	b908      	cbnz	r0, 8009900 <_realloc_r+0x44>
 80098fc:	4645      	mov	r5, r8
 80098fe:	e7ec      	b.n	80098da <_realloc_r+0x1e>
 8009900:	42b4      	cmp	r4, r6
 8009902:	4622      	mov	r2, r4
 8009904:	4629      	mov	r1, r5
 8009906:	bf28      	it	cs
 8009908:	4632      	movcs	r2, r6
 800990a:	f7ff ff85 	bl	8009818 <memcpy>
 800990e:	4629      	mov	r1, r5
 8009910:	4638      	mov	r0, r7
 8009912:	f7ff f8d9 	bl	8008ac8 <_free_r>
 8009916:	e7f1      	b.n	80098fc <_realloc_r+0x40>

08009918 <__ascii_wctomb>:
 8009918:	4603      	mov	r3, r0
 800991a:	4608      	mov	r0, r1
 800991c:	b141      	cbz	r1, 8009930 <__ascii_wctomb+0x18>
 800991e:	2aff      	cmp	r2, #255	@ 0xff
 8009920:	d904      	bls.n	800992c <__ascii_wctomb+0x14>
 8009922:	228a      	movs	r2, #138	@ 0x8a
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	f04f 30ff 	mov.w	r0, #4294967295
 800992a:	4770      	bx	lr
 800992c:	700a      	strb	r2, [r1, #0]
 800992e:	2001      	movs	r0, #1
 8009930:	4770      	bx	lr
	...

08009934 <fiprintf>:
 8009934:	b40e      	push	{r1, r2, r3}
 8009936:	b503      	push	{r0, r1, lr}
 8009938:	4601      	mov	r1, r0
 800993a:	ab03      	add	r3, sp, #12
 800993c:	4805      	ldr	r0, [pc, #20]	@ (8009954 <fiprintf+0x20>)
 800993e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009942:	6800      	ldr	r0, [r0, #0]
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	f000 f83f 	bl	80099c8 <_vfiprintf_r>
 800994a:	b002      	add	sp, #8
 800994c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009950:	b003      	add	sp, #12
 8009952:	4770      	bx	lr
 8009954:	20000034 	.word	0x20000034

08009958 <abort>:
 8009958:	b508      	push	{r3, lr}
 800995a:	2006      	movs	r0, #6
 800995c:	f000 fa08 	bl	8009d70 <raise>
 8009960:	2001      	movs	r0, #1
 8009962:	f7f8 f9ad 	bl	8001cc0 <_exit>

08009966 <_malloc_usable_size_r>:
 8009966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800996a:	1f18      	subs	r0, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	bfbc      	itt	lt
 8009970:	580b      	ldrlt	r3, [r1, r0]
 8009972:	18c0      	addlt	r0, r0, r3
 8009974:	4770      	bx	lr

08009976 <__sfputc_r>:
 8009976:	6893      	ldr	r3, [r2, #8]
 8009978:	3b01      	subs	r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	b410      	push	{r4}
 800997e:	6093      	str	r3, [r2, #8]
 8009980:	da08      	bge.n	8009994 <__sfputc_r+0x1e>
 8009982:	6994      	ldr	r4, [r2, #24]
 8009984:	42a3      	cmp	r3, r4
 8009986:	db01      	blt.n	800998c <__sfputc_r+0x16>
 8009988:	290a      	cmp	r1, #10
 800998a:	d103      	bne.n	8009994 <__sfputc_r+0x1e>
 800998c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009990:	f000 b932 	b.w	8009bf8 <__swbuf_r>
 8009994:	6813      	ldr	r3, [r2, #0]
 8009996:	1c58      	adds	r0, r3, #1
 8009998:	6010      	str	r0, [r2, #0]
 800999a:	7019      	strb	r1, [r3, #0]
 800999c:	4608      	mov	r0, r1
 800999e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <__sfputs_r>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	4606      	mov	r6, r0
 80099a8:	460f      	mov	r7, r1
 80099aa:	4614      	mov	r4, r2
 80099ac:	18d5      	adds	r5, r2, r3
 80099ae:	42ac      	cmp	r4, r5
 80099b0:	d101      	bne.n	80099b6 <__sfputs_r+0x12>
 80099b2:	2000      	movs	r0, #0
 80099b4:	e007      	b.n	80099c6 <__sfputs_r+0x22>
 80099b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ba:	463a      	mov	r2, r7
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff ffda 	bl	8009976 <__sfputc_r>
 80099c2:	1c43      	adds	r3, r0, #1
 80099c4:	d1f3      	bne.n	80099ae <__sfputs_r+0xa>
 80099c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099c8 <_vfiprintf_r>:
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	460d      	mov	r5, r1
 80099ce:	b09d      	sub	sp, #116	@ 0x74
 80099d0:	4614      	mov	r4, r2
 80099d2:	4698      	mov	r8, r3
 80099d4:	4606      	mov	r6, r0
 80099d6:	b118      	cbz	r0, 80099e0 <_vfiprintf_r+0x18>
 80099d8:	6a03      	ldr	r3, [r0, #32]
 80099da:	b90b      	cbnz	r3, 80099e0 <_vfiprintf_r+0x18>
 80099dc:	f7fe f8ec 	bl	8007bb8 <__sinit>
 80099e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099e2:	07d9      	lsls	r1, r3, #31
 80099e4:	d405      	bmi.n	80099f2 <_vfiprintf_r+0x2a>
 80099e6:	89ab      	ldrh	r3, [r5, #12]
 80099e8:	059a      	lsls	r2, r3, #22
 80099ea:	d402      	bmi.n	80099f2 <_vfiprintf_r+0x2a>
 80099ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ee:	f7fe fa10 	bl	8007e12 <__retarget_lock_acquire_recursive>
 80099f2:	89ab      	ldrh	r3, [r5, #12]
 80099f4:	071b      	lsls	r3, r3, #28
 80099f6:	d501      	bpl.n	80099fc <_vfiprintf_r+0x34>
 80099f8:	692b      	ldr	r3, [r5, #16]
 80099fa:	b99b      	cbnz	r3, 8009a24 <_vfiprintf_r+0x5c>
 80099fc:	4629      	mov	r1, r5
 80099fe:	4630      	mov	r0, r6
 8009a00:	f000 f938 	bl	8009c74 <__swsetup_r>
 8009a04:	b170      	cbz	r0, 8009a24 <_vfiprintf_r+0x5c>
 8009a06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a08:	07dc      	lsls	r4, r3, #31
 8009a0a:	d504      	bpl.n	8009a16 <_vfiprintf_r+0x4e>
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	b01d      	add	sp, #116	@ 0x74
 8009a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	0598      	lsls	r0, r3, #22
 8009a1a:	d4f7      	bmi.n	8009a0c <_vfiprintf_r+0x44>
 8009a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a1e:	f7fe f9f9 	bl	8007e14 <__retarget_lock_release_recursive>
 8009a22:	e7f3      	b.n	8009a0c <_vfiprintf_r+0x44>
 8009a24:	2300      	movs	r3, #0
 8009a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a28:	2320      	movs	r3, #32
 8009a2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a32:	2330      	movs	r3, #48	@ 0x30
 8009a34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009be4 <_vfiprintf_r+0x21c>
 8009a38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a3c:	f04f 0901 	mov.w	r9, #1
 8009a40:	4623      	mov	r3, r4
 8009a42:	469a      	mov	sl, r3
 8009a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a48:	b10a      	cbz	r2, 8009a4e <_vfiprintf_r+0x86>
 8009a4a:	2a25      	cmp	r2, #37	@ 0x25
 8009a4c:	d1f9      	bne.n	8009a42 <_vfiprintf_r+0x7a>
 8009a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a52:	d00b      	beq.n	8009a6c <_vfiprintf_r+0xa4>
 8009a54:	465b      	mov	r3, fp
 8009a56:	4622      	mov	r2, r4
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7ff ffa2 	bl	80099a4 <__sfputs_r>
 8009a60:	3001      	adds	r0, #1
 8009a62:	f000 80a7 	beq.w	8009bb4 <_vfiprintf_r+0x1ec>
 8009a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a68:	445a      	add	r2, fp
 8009a6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 809f 	beq.w	8009bb4 <_vfiprintf_r+0x1ec>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a80:	f10a 0a01 	add.w	sl, sl, #1
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	9307      	str	r3, [sp, #28]
 8009a88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a8e:	4654      	mov	r4, sl
 8009a90:	2205      	movs	r2, #5
 8009a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a96:	4853      	ldr	r0, [pc, #332]	@ (8009be4 <_vfiprintf_r+0x21c>)
 8009a98:	f7f6 fbaa 	bl	80001f0 <memchr>
 8009a9c:	9a04      	ldr	r2, [sp, #16]
 8009a9e:	b9d8      	cbnz	r0, 8009ad8 <_vfiprintf_r+0x110>
 8009aa0:	06d1      	lsls	r1, r2, #27
 8009aa2:	bf44      	itt	mi
 8009aa4:	2320      	movmi	r3, #32
 8009aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aaa:	0713      	lsls	r3, r2, #28
 8009aac:	bf44      	itt	mi
 8009aae:	232b      	movmi	r3, #43	@ 0x2b
 8009ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aba:	d015      	beq.n	8009ae8 <_vfiprintf_r+0x120>
 8009abc:	9a07      	ldr	r2, [sp, #28]
 8009abe:	4654      	mov	r4, sl
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	f04f 0c0a 	mov.w	ip, #10
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009acc:	3b30      	subs	r3, #48	@ 0x30
 8009ace:	2b09      	cmp	r3, #9
 8009ad0:	d94b      	bls.n	8009b6a <_vfiprintf_r+0x1a2>
 8009ad2:	b1b0      	cbz	r0, 8009b02 <_vfiprintf_r+0x13a>
 8009ad4:	9207      	str	r2, [sp, #28]
 8009ad6:	e014      	b.n	8009b02 <_vfiprintf_r+0x13a>
 8009ad8:	eba0 0308 	sub.w	r3, r0, r8
 8009adc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	46a2      	mov	sl, r4
 8009ae6:	e7d2      	b.n	8009a8e <_vfiprintf_r+0xc6>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	1d19      	adds	r1, r3, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	9103      	str	r1, [sp, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	bfbb      	ittet	lt
 8009af4:	425b      	neglt	r3, r3
 8009af6:	f042 0202 	orrlt.w	r2, r2, #2
 8009afa:	9307      	strge	r3, [sp, #28]
 8009afc:	9307      	strlt	r3, [sp, #28]
 8009afe:	bfb8      	it	lt
 8009b00:	9204      	strlt	r2, [sp, #16]
 8009b02:	7823      	ldrb	r3, [r4, #0]
 8009b04:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b06:	d10a      	bne.n	8009b1e <_vfiprintf_r+0x156>
 8009b08:	7863      	ldrb	r3, [r4, #1]
 8009b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b0c:	d132      	bne.n	8009b74 <_vfiprintf_r+0x1ac>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	1d1a      	adds	r2, r3, #4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	9203      	str	r2, [sp, #12]
 8009b16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b1a:	3402      	adds	r4, #2
 8009b1c:	9305      	str	r3, [sp, #20]
 8009b1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009bf4 <_vfiprintf_r+0x22c>
 8009b22:	7821      	ldrb	r1, [r4, #0]
 8009b24:	2203      	movs	r2, #3
 8009b26:	4650      	mov	r0, sl
 8009b28:	f7f6 fb62 	bl	80001f0 <memchr>
 8009b2c:	b138      	cbz	r0, 8009b3e <_vfiprintf_r+0x176>
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	eba0 000a 	sub.w	r0, r0, sl
 8009b34:	2240      	movs	r2, #64	@ 0x40
 8009b36:	4082      	lsls	r2, r0
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	3401      	adds	r4, #1
 8009b3c:	9304      	str	r3, [sp, #16]
 8009b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b42:	4829      	ldr	r0, [pc, #164]	@ (8009be8 <_vfiprintf_r+0x220>)
 8009b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b48:	2206      	movs	r2, #6
 8009b4a:	f7f6 fb51 	bl	80001f0 <memchr>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d03f      	beq.n	8009bd2 <_vfiprintf_r+0x20a>
 8009b52:	4b26      	ldr	r3, [pc, #152]	@ (8009bec <_vfiprintf_r+0x224>)
 8009b54:	bb1b      	cbnz	r3, 8009b9e <_vfiprintf_r+0x1d6>
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	3307      	adds	r3, #7
 8009b5a:	f023 0307 	bic.w	r3, r3, #7
 8009b5e:	3308      	adds	r3, #8
 8009b60:	9303      	str	r3, [sp, #12]
 8009b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b64:	443b      	add	r3, r7
 8009b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b68:	e76a      	b.n	8009a40 <_vfiprintf_r+0x78>
 8009b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b6e:	460c      	mov	r4, r1
 8009b70:	2001      	movs	r0, #1
 8009b72:	e7a8      	b.n	8009ac6 <_vfiprintf_r+0xfe>
 8009b74:	2300      	movs	r3, #0
 8009b76:	3401      	adds	r4, #1
 8009b78:	9305      	str	r3, [sp, #20]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	f04f 0c0a 	mov.w	ip, #10
 8009b80:	4620      	mov	r0, r4
 8009b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b86:	3a30      	subs	r2, #48	@ 0x30
 8009b88:	2a09      	cmp	r2, #9
 8009b8a:	d903      	bls.n	8009b94 <_vfiprintf_r+0x1cc>
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d0c6      	beq.n	8009b1e <_vfiprintf_r+0x156>
 8009b90:	9105      	str	r1, [sp, #20]
 8009b92:	e7c4      	b.n	8009b1e <_vfiprintf_r+0x156>
 8009b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b98:	4604      	mov	r4, r0
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e7f0      	b.n	8009b80 <_vfiprintf_r+0x1b8>
 8009b9e:	ab03      	add	r3, sp, #12
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	462a      	mov	r2, r5
 8009ba4:	4b12      	ldr	r3, [pc, #72]	@ (8009bf0 <_vfiprintf_r+0x228>)
 8009ba6:	a904      	add	r1, sp, #16
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7fd fbc3 	bl	8007334 <_printf_float>
 8009bae:	4607      	mov	r7, r0
 8009bb0:	1c78      	adds	r0, r7, #1
 8009bb2:	d1d6      	bne.n	8009b62 <_vfiprintf_r+0x19a>
 8009bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bb6:	07d9      	lsls	r1, r3, #31
 8009bb8:	d405      	bmi.n	8009bc6 <_vfiprintf_r+0x1fe>
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	059a      	lsls	r2, r3, #22
 8009bbe:	d402      	bmi.n	8009bc6 <_vfiprintf_r+0x1fe>
 8009bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bc2:	f7fe f927 	bl	8007e14 <__retarget_lock_release_recursive>
 8009bc6:	89ab      	ldrh	r3, [r5, #12]
 8009bc8:	065b      	lsls	r3, r3, #25
 8009bca:	f53f af1f 	bmi.w	8009a0c <_vfiprintf_r+0x44>
 8009bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bd0:	e71e      	b.n	8009a10 <_vfiprintf_r+0x48>
 8009bd2:	ab03      	add	r3, sp, #12
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4b05      	ldr	r3, [pc, #20]	@ (8009bf0 <_vfiprintf_r+0x228>)
 8009bda:	a904      	add	r1, sp, #16
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7fd fe41 	bl	8007864 <_printf_i>
 8009be2:	e7e4      	b.n	8009bae <_vfiprintf_r+0x1e6>
 8009be4:	0800a422 	.word	0x0800a422
 8009be8:	0800a42c 	.word	0x0800a42c
 8009bec:	08007335 	.word	0x08007335
 8009bf0:	080099a5 	.word	0x080099a5
 8009bf4:	0800a428 	.word	0x0800a428

08009bf8 <__swbuf_r>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	460e      	mov	r6, r1
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	4605      	mov	r5, r0
 8009c00:	b118      	cbz	r0, 8009c0a <__swbuf_r+0x12>
 8009c02:	6a03      	ldr	r3, [r0, #32]
 8009c04:	b90b      	cbnz	r3, 8009c0a <__swbuf_r+0x12>
 8009c06:	f7fd ffd7 	bl	8007bb8 <__sinit>
 8009c0a:	69a3      	ldr	r3, [r4, #24]
 8009c0c:	60a3      	str	r3, [r4, #8]
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	071a      	lsls	r2, r3, #28
 8009c12:	d501      	bpl.n	8009c18 <__swbuf_r+0x20>
 8009c14:	6923      	ldr	r3, [r4, #16]
 8009c16:	b943      	cbnz	r3, 8009c2a <__swbuf_r+0x32>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f000 f82a 	bl	8009c74 <__swsetup_r>
 8009c20:	b118      	cbz	r0, 8009c2a <__swbuf_r+0x32>
 8009c22:	f04f 37ff 	mov.w	r7, #4294967295
 8009c26:	4638      	mov	r0, r7
 8009c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	6922      	ldr	r2, [r4, #16]
 8009c2e:	1a98      	subs	r0, r3, r2
 8009c30:	6963      	ldr	r3, [r4, #20]
 8009c32:	b2f6      	uxtb	r6, r6
 8009c34:	4283      	cmp	r3, r0
 8009c36:	4637      	mov	r7, r6
 8009c38:	dc05      	bgt.n	8009c46 <__swbuf_r+0x4e>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f7ff fd99 	bl	8009774 <_fflush_r>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d1ed      	bne.n	8009c22 <__swbuf_r+0x2a>
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	60a3      	str	r3, [r4, #8]
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	6022      	str	r2, [r4, #0]
 8009c52:	701e      	strb	r6, [r3, #0]
 8009c54:	6962      	ldr	r2, [r4, #20]
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d004      	beq.n	8009c66 <__swbuf_r+0x6e>
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	07db      	lsls	r3, r3, #31
 8009c60:	d5e1      	bpl.n	8009c26 <__swbuf_r+0x2e>
 8009c62:	2e0a      	cmp	r6, #10
 8009c64:	d1df      	bne.n	8009c26 <__swbuf_r+0x2e>
 8009c66:	4621      	mov	r1, r4
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f7ff fd83 	bl	8009774 <_fflush_r>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d0d9      	beq.n	8009c26 <__swbuf_r+0x2e>
 8009c72:	e7d6      	b.n	8009c22 <__swbuf_r+0x2a>

08009c74 <__swsetup_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4b29      	ldr	r3, [pc, #164]	@ (8009d1c <__swsetup_r+0xa8>)
 8009c78:	4605      	mov	r5, r0
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	b118      	cbz	r0, 8009c88 <__swsetup_r+0x14>
 8009c80:	6a03      	ldr	r3, [r0, #32]
 8009c82:	b90b      	cbnz	r3, 8009c88 <__swsetup_r+0x14>
 8009c84:	f7fd ff98 	bl	8007bb8 <__sinit>
 8009c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8c:	0719      	lsls	r1, r3, #28
 8009c8e:	d422      	bmi.n	8009cd6 <__swsetup_r+0x62>
 8009c90:	06da      	lsls	r2, r3, #27
 8009c92:	d407      	bmi.n	8009ca4 <__swsetup_r+0x30>
 8009c94:	2209      	movs	r2, #9
 8009c96:	602a      	str	r2, [r5, #0]
 8009c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c9c:	81a3      	strh	r3, [r4, #12]
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca2:	e033      	b.n	8009d0c <__swsetup_r+0x98>
 8009ca4:	0758      	lsls	r0, r3, #29
 8009ca6:	d512      	bpl.n	8009cce <__swsetup_r+0x5a>
 8009ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009caa:	b141      	cbz	r1, 8009cbe <__swsetup_r+0x4a>
 8009cac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d002      	beq.n	8009cba <__swsetup_r+0x46>
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7fe ff07 	bl	8008ac8 <_free_r>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6063      	str	r3, [r4, #4]
 8009cca:	6923      	ldr	r3, [r4, #16]
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	89a3      	ldrh	r3, [r4, #12]
 8009cd0:	f043 0308 	orr.w	r3, r3, #8
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	6923      	ldr	r3, [r4, #16]
 8009cd8:	b94b      	cbnz	r3, 8009cee <__swsetup_r+0x7a>
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ce4:	d003      	beq.n	8009cee <__swsetup_r+0x7a>
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f000 f883 	bl	8009df4 <__smakebuf_r>
 8009cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf2:	f013 0201 	ands.w	r2, r3, #1
 8009cf6:	d00a      	beq.n	8009d0e <__swsetup_r+0x9a>
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	60a2      	str	r2, [r4, #8]
 8009cfc:	6962      	ldr	r2, [r4, #20]
 8009cfe:	4252      	negs	r2, r2
 8009d00:	61a2      	str	r2, [r4, #24]
 8009d02:	6922      	ldr	r2, [r4, #16]
 8009d04:	b942      	cbnz	r2, 8009d18 <__swsetup_r+0xa4>
 8009d06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d0a:	d1c5      	bne.n	8009c98 <__swsetup_r+0x24>
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	0799      	lsls	r1, r3, #30
 8009d10:	bf58      	it	pl
 8009d12:	6962      	ldrpl	r2, [r4, #20]
 8009d14:	60a2      	str	r2, [r4, #8]
 8009d16:	e7f4      	b.n	8009d02 <__swsetup_r+0x8e>
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e7f7      	b.n	8009d0c <__swsetup_r+0x98>
 8009d1c:	20000034 	.word	0x20000034

08009d20 <_raise_r>:
 8009d20:	291f      	cmp	r1, #31
 8009d22:	b538      	push	{r3, r4, r5, lr}
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	d904      	bls.n	8009d34 <_raise_r+0x14>
 8009d2a:	2316      	movs	r3, #22
 8009d2c:	6003      	str	r3, [r0, #0]
 8009d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d36:	b112      	cbz	r2, 8009d3e <_raise_r+0x1e>
 8009d38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d3c:	b94b      	cbnz	r3, 8009d52 <_raise_r+0x32>
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f830 	bl	8009da4 <_getpid_r>
 8009d44:	4622      	mov	r2, r4
 8009d46:	4601      	mov	r1, r0
 8009d48:	4628      	mov	r0, r5
 8009d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d4e:	f000 b817 	b.w	8009d80 <_kill_r>
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d00a      	beq.n	8009d6c <_raise_r+0x4c>
 8009d56:	1c59      	adds	r1, r3, #1
 8009d58:	d103      	bne.n	8009d62 <_raise_r+0x42>
 8009d5a:	2316      	movs	r3, #22
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	2001      	movs	r0, #1
 8009d60:	e7e7      	b.n	8009d32 <_raise_r+0x12>
 8009d62:	2100      	movs	r1, #0
 8009d64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d68:	4620      	mov	r0, r4
 8009d6a:	4798      	blx	r3
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e7e0      	b.n	8009d32 <_raise_r+0x12>

08009d70 <raise>:
 8009d70:	4b02      	ldr	r3, [pc, #8]	@ (8009d7c <raise+0xc>)
 8009d72:	4601      	mov	r1, r0
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	f7ff bfd3 	b.w	8009d20 <_raise_r>
 8009d7a:	bf00      	nop
 8009d7c:	20000034 	.word	0x20000034

08009d80 <_kill_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	@ (8009da0 <_kill_r+0x20>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	602b      	str	r3, [r5, #0]
 8009d8e:	f7f7 ff87 	bl	8001ca0 <_kill>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d102      	bne.n	8009d9c <_kill_r+0x1c>
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	b103      	cbz	r3, 8009d9c <_kill_r+0x1c>
 8009d9a:	6023      	str	r3, [r4, #0]
 8009d9c:	bd38      	pop	{r3, r4, r5, pc}
 8009d9e:	bf00      	nop
 8009da0:	2000399c 	.word	0x2000399c

08009da4 <_getpid_r>:
 8009da4:	f7f7 bf74 	b.w	8001c90 <_getpid>

08009da8 <__swhatbuf_r>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	460c      	mov	r4, r1
 8009dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db0:	2900      	cmp	r1, #0
 8009db2:	b096      	sub	sp, #88	@ 0x58
 8009db4:	4615      	mov	r5, r2
 8009db6:	461e      	mov	r6, r3
 8009db8:	da0d      	bge.n	8009dd6 <__swhatbuf_r+0x2e>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009dc0:	f04f 0100 	mov.w	r1, #0
 8009dc4:	bf14      	ite	ne
 8009dc6:	2340      	movne	r3, #64	@ 0x40
 8009dc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009dcc:	2000      	movs	r0, #0
 8009dce:	6031      	str	r1, [r6, #0]
 8009dd0:	602b      	str	r3, [r5, #0]
 8009dd2:	b016      	add	sp, #88	@ 0x58
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
 8009dd6:	466a      	mov	r2, sp
 8009dd8:	f000 f848 	bl	8009e6c <_fstat_r>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	dbec      	blt.n	8009dba <__swhatbuf_r+0x12>
 8009de0:	9901      	ldr	r1, [sp, #4]
 8009de2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009de6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dea:	4259      	negs	r1, r3
 8009dec:	4159      	adcs	r1, r3
 8009dee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009df2:	e7eb      	b.n	8009dcc <__swhatbuf_r+0x24>

08009df4 <__smakebuf_r>:
 8009df4:	898b      	ldrh	r3, [r1, #12]
 8009df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009df8:	079d      	lsls	r5, r3, #30
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	d507      	bpl.n	8009e10 <__smakebuf_r+0x1c>
 8009e00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	6123      	str	r3, [r4, #16]
 8009e08:	2301      	movs	r3, #1
 8009e0a:	6163      	str	r3, [r4, #20]
 8009e0c:	b003      	add	sp, #12
 8009e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e10:	ab01      	add	r3, sp, #4
 8009e12:	466a      	mov	r2, sp
 8009e14:	f7ff ffc8 	bl	8009da8 <__swhatbuf_r>
 8009e18:	9f00      	ldr	r7, [sp, #0]
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f7fe fec6 	bl	8008bb0 <_malloc_r>
 8009e24:	b948      	cbnz	r0, 8009e3a <__smakebuf_r+0x46>
 8009e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e2a:	059a      	lsls	r2, r3, #22
 8009e2c:	d4ee      	bmi.n	8009e0c <__smakebuf_r+0x18>
 8009e2e:	f023 0303 	bic.w	r3, r3, #3
 8009e32:	f043 0302 	orr.w	r3, r3, #2
 8009e36:	81a3      	strh	r3, [r4, #12]
 8009e38:	e7e2      	b.n	8009e00 <__smakebuf_r+0xc>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	6020      	str	r0, [r4, #0]
 8009e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	9b01      	ldr	r3, [sp, #4]
 8009e46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e4a:	b15b      	cbz	r3, 8009e64 <__smakebuf_r+0x70>
 8009e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e50:	4630      	mov	r0, r6
 8009e52:	f000 f81d 	bl	8009e90 <_isatty_r>
 8009e56:	b128      	cbz	r0, 8009e64 <__smakebuf_r+0x70>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f023 0303 	bic.w	r3, r3, #3
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	431d      	orrs	r5, r3
 8009e68:	81a5      	strh	r5, [r4, #12]
 8009e6a:	e7cf      	b.n	8009e0c <__smakebuf_r+0x18>

08009e6c <_fstat_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d07      	ldr	r5, [pc, #28]	@ (8009e8c <_fstat_r+0x20>)
 8009e70:	2300      	movs	r3, #0
 8009e72:	4604      	mov	r4, r0
 8009e74:	4608      	mov	r0, r1
 8009e76:	4611      	mov	r1, r2
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	f7f7 ff71 	bl	8001d60 <_fstat>
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	d102      	bne.n	8009e88 <_fstat_r+0x1c>
 8009e82:	682b      	ldr	r3, [r5, #0]
 8009e84:	b103      	cbz	r3, 8009e88 <_fstat_r+0x1c>
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	bd38      	pop	{r3, r4, r5, pc}
 8009e8a:	bf00      	nop
 8009e8c:	2000399c 	.word	0x2000399c

08009e90 <_isatty_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4d06      	ldr	r5, [pc, #24]	@ (8009eac <_isatty_r+0x1c>)
 8009e94:	2300      	movs	r3, #0
 8009e96:	4604      	mov	r4, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	602b      	str	r3, [r5, #0]
 8009e9c:	f7f7 ff70 	bl	8001d80 <_isatty>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_isatty_r+0x1a>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_isatty_r+0x1a>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	2000399c 	.word	0x2000399c

08009eb0 <_init>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	bf00      	nop
 8009eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb6:	bc08      	pop	{r3}
 8009eb8:	469e      	mov	lr, r3
 8009eba:	4770      	bx	lr

08009ebc <_fini>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr
