
pe2_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08009fd0  08009fd0  0000afd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a77c  0800a77c  0000c1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a77c  0800a77c  0000b77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a784  0800a784  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a784  0800a784  0000b784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a788  0800a788  0000b788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800a78c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037bc  200001f0  0800a97c  0000c1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039ac  0800a97c  0000c9ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee70  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002279  00000000  00000000  0001b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001d310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac9  00000000  00000000  0001e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f65  00000000  00000000  0001eba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011821  00000000  00000000  00035b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3e6  00000000  00000000  0004732f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b30  00000000  00000000  000d1758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d6288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fb8 	.word	0x08009fb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009fb8 	.word	0x08009fb8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <screen_render>:
 */

#include "16x2_screen.h"
#include "main.h"

void screen_render(uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7){
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4623      	mov	r3, r4
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	717b      	strb	r3, [r7, #5]
 8000c82:	4613      	mov	r3, r2
 8000c84:	713b      	strb	r3, [r7, #4]

		if (d4 == 1){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d105      	bne.n	8000c98 <screen_render+0x30>
			HAL_GPIO_WritePin(TXB_16x2_D4_GPIO_Port, TXB_16x2_D4_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	481b      	ldr	r0, [pc, #108]	@ (8000d00 <screen_render+0x98>)
 8000c92:	f002 ffbf 	bl	8003c14 <HAL_GPIO_WritePin>
 8000c96:	e004      	b.n	8000ca2 <screen_render+0x3a>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D4_GPIO_Port, TXB_16x2_D4_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	4818      	ldr	r0, [pc, #96]	@ (8000d00 <screen_render+0x98>)
 8000c9e:	f002 ffb9 	bl	8003c14 <HAL_GPIO_WritePin>
		}

		if (d5 == 1){
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <screen_render+0x4c>
			HAL_GPIO_WritePin(TXB_16x2_D5_GPIO_Port, TXB_16x2_D5_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2140      	movs	r1, #64	@ 0x40
 8000cac:	4814      	ldr	r0, [pc, #80]	@ (8000d00 <screen_render+0x98>)
 8000cae:	f002 ffb1 	bl	8003c14 <HAL_GPIO_WritePin>
 8000cb2:	e004      	b.n	8000cbe <screen_render+0x56>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D5_GPIO_Port, TXB_16x2_D5_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2140      	movs	r1, #64	@ 0x40
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <screen_render+0x98>)
 8000cba:	f002 ffab 	bl	8003c14 <HAL_GPIO_WritePin>
		}

		if (d6 == 1){
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d105      	bne.n	8000cd0 <screen_render+0x68>
			HAL_GPIO_WritePin(TXB_16x2_D6_GPIO_Port, TXB_16x2_D6_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <screen_render+0x98>)
 8000cca:	f002 ffa3 	bl	8003c14 <HAL_GPIO_WritePin>
 8000cce:	e004      	b.n	8000cda <screen_render+0x72>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D6_GPIO_Port, TXB_16x2_D6_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	480a      	ldr	r0, [pc, #40]	@ (8000d00 <screen_render+0x98>)
 8000cd6:	f002 ff9d 	bl	8003c14 <HAL_GPIO_WritePin>
		}

		if (d7 == 1){
 8000cda:	793b      	ldrb	r3, [r7, #4]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <screen_render+0x84>
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	4806      	ldr	r0, [pc, #24]	@ (8000d00 <screen_render+0x98>)
 8000ce6:	f002 ff95 	bl	8003c14 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_RESET);
		}

	}
 8000cea:	e004      	b.n	8000cf6 <screen_render+0x8e>
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <screen_render+0x98>)
 8000cf2:	f002 ff8f 	bl	8003c14 <HAL_GPIO_WritePin>
	}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	48000400 	.word	0x48000400

08000d04 <send_to_screen>:

	void send_to_screen(uint8_t data, uint8_t nob, uint8_t cod){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	4613      	mov	r3, r2
 8000d14:	717b      	strb	r3, [r7, #5]

		HAL_Delay(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f002 fae8 	bl	80032ec <HAL_Delay>

		if (cod == 'c'){ // c = command 		d = data
 8000d1c:	797b      	ldrb	r3, [r7, #5]
 8000d1e:	2b63      	cmp	r3, #99	@ 0x63
 8000d20:	d106      	bne.n	8000d30 <send_to_screen+0x2c>
			HAL_GPIO_WritePin(TXB_16x2_RS_GPIO_Port, TXB_16x2_RS_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d28:	484a      	ldr	r0, [pc, #296]	@ (8000e54 <send_to_screen+0x150>)
 8000d2a:	f002 ff73 	bl	8003c14 <HAL_GPIO_WritePin>
 8000d2e:	e005      	b.n	8000d3c <send_to_screen+0x38>
		}

		else{
			HAL_GPIO_WritePin(TXB_16x2_RS_GPIO_Port, TXB_16x2_RS_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d36:	4847      	ldr	r0, [pc, #284]	@ (8000e54 <send_to_screen+0x150>)
 8000d38:	f002 ff6c 	bl	8003c14 <HAL_GPIO_WritePin>
		}

		if (nob == 'b'){ // b = byte		n = nibble
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	2b62      	cmp	r3, #98	@ 0x62
 8000d40:	d141      	bne.n	8000dc6 <send_to_screen+0xc2>
			uint8_t d4 = (data >> 4) & 0x01; // Bit 0
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
			uint8_t d5 = (data >> 5) & 0x01; // Bit 1
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	095b      	lsrs	r3, r3, #5
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	73bb      	strb	r3, [r7, #14]
			uint8_t d6 = (data >> 6) & 0x01; // Bit 2
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	099b      	lsrs	r3, r3, #6
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	737b      	strb	r3, [r7, #13]
			uint8_t d7 = (data >> 7) & 0x01; // Bit 3
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	09db      	lsrs	r3, r3, #7
 8000d6a:	733b      	strb	r3, [r7, #12]

			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d72:	4838      	ldr	r0, [pc, #224]	@ (8000e54 <send_to_screen+0x150>)
 8000d74:	f002 ff4e 	bl	8003c14 <HAL_GPIO_WritePin>
			screen_render(d4, d5, d6, d7);
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	7b7a      	ldrb	r2, [r7, #13]
 8000d7c:	7bb9      	ldrb	r1, [r7, #14]
 8000d7e:	7bf8      	ldrb	r0, [r7, #15]
 8000d80:	f7ff ff72 	bl	8000c68 <screen_render>
			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d8a:	4832      	ldr	r0, [pc, #200]	@ (8000e54 <send_to_screen+0x150>)
 8000d8c:	f002 ff42 	bl	8003c14 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f002 faab 	bl	80032ec <HAL_Delay>
			screen_render(d4, d5, d6, d7);
 8000d96:	7b3b      	ldrb	r3, [r7, #12]
 8000d98:	7b7a      	ldrb	r2, [r7, #13]
 8000d9a:	7bb9      	ldrb	r1, [r7, #14]
 8000d9c:	7bf8      	ldrb	r0, [r7, #15]
 8000d9e:	f7ff ff63 	bl	8000c68 <screen_render>
			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da8:	482a      	ldr	r0, [pc, #168]	@ (8000e54 <send_to_screen+0x150>)
 8000daa:	f002 ff33 	bl	8003c14 <HAL_GPIO_WritePin>
			screen_render(d4, d5, d6, d7);
 8000dae:	7b3b      	ldrb	r3, [r7, #12]
 8000db0:	7b7a      	ldrb	r2, [r7, #13]
 8000db2:	7bb9      	ldrb	r1, [r7, #14]
 8000db4:	7bf8      	ldrb	r0, [r7, #15]
 8000db6:	f7ff ff57 	bl	8000c68 <screen_render>
			screen_render(0, 0, 0, 0); // pins standaart 0
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff51 	bl	8000c68 <screen_render>
		}

		uint8_t d4 = (data >> 0) & 0x01; // Bit 0
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	72fb      	strb	r3, [r7, #11]
		uint8_t d5 = (data >> 1) & 0x01; // Bit 1
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	085b      	lsrs	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	72bb      	strb	r3, [r7, #10]
		uint8_t d6 = (data >> 2) & 0x01; // Bit 2
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	727b      	strb	r3, [r7, #9]
		uint8_t d7 = (data >> 3) & 0x01; // Bit 3
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	723b      	strb	r3, [r7, #8]

		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df8:	4816      	ldr	r0, [pc, #88]	@ (8000e54 <send_to_screen+0x150>)
 8000dfa:	f002 ff0b 	bl	8003c14 <HAL_GPIO_WritePin>
		screen_render(d4, d5, d6, d7);
 8000dfe:	7a3b      	ldrb	r3, [r7, #8]
 8000e00:	7a7a      	ldrb	r2, [r7, #9]
 8000e02:	7ab9      	ldrb	r1, [r7, #10]
 8000e04:	7af8      	ldrb	r0, [r7, #11]
 8000e06:	f7ff ff2f 	bl	8000c68 <screen_render>
		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e10:	4810      	ldr	r0, [pc, #64]	@ (8000e54 <send_to_screen+0x150>)
 8000e12:	f002 feff 	bl	8003c14 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f002 fa68 	bl	80032ec <HAL_Delay>
		screen_render(d4, d5, d6, d7);
 8000e1c:	7a3b      	ldrb	r3, [r7, #8]
 8000e1e:	7a7a      	ldrb	r2, [r7, #9]
 8000e20:	7ab9      	ldrb	r1, [r7, #10]
 8000e22:	7af8      	ldrb	r0, [r7, #11]
 8000e24:	f7ff ff20 	bl	8000c68 <screen_render>
		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <send_to_screen+0x150>)
 8000e30:	f002 fef0 	bl	8003c14 <HAL_GPIO_WritePin>
		screen_render(d4, d5, d6, d7);
 8000e34:	7a3b      	ldrb	r3, [r7, #8]
 8000e36:	7a7a      	ldrb	r2, [r7, #9]
 8000e38:	7ab9      	ldrb	r1, [r7, #10]
 8000e3a:	7af8      	ldrb	r0, [r7, #11]
 8000e3c:	f7ff ff14 	bl	8000c68 <screen_render>
		screen_render(0, 0, 0, 0); // pins standaart 0
 8000e40:	2300      	movs	r3, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff ff0e 	bl	8000c68 <screen_render>
	}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	48000400 	.word	0x48000400

08000e58 <screen_start>:

	void screen_start(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

		send_to_screen(0b0011, 'n', 'c');
 8000e5c:	2263      	movs	r2, #99	@ 0x63
 8000e5e:	216e      	movs	r1, #110	@ 0x6e
 8000e60:	2003      	movs	r0, #3
 8000e62:	f7ff ff4f 	bl	8000d04 <send_to_screen>
		send_to_screen(0b0011, 'n', 'c');
 8000e66:	2263      	movs	r2, #99	@ 0x63
 8000e68:	216e      	movs	r1, #110	@ 0x6e
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f7ff ff4a 	bl	8000d04 <send_to_screen>
		send_to_screen(0b0011, 'n', 'c');
 8000e70:	2263      	movs	r2, #99	@ 0x63
 8000e72:	216e      	movs	r1, #110	@ 0x6e
 8000e74:	2003      	movs	r0, #3
 8000e76:	f7ff ff45 	bl	8000d04 <send_to_screen>
	}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <init_screen>:

	void init_screen(){
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0

		HAL_Delay(30); //wachten tot het scherm volledig is opgestart
 8000e82:	201e      	movs	r0, #30
 8000e84:	f002 fa32 	bl	80032ec <HAL_Delay>
		screen_start();
 8000e88:	f7ff ffe6 	bl	8000e58 <screen_start>
		send_to_screen(0b0010, 'n', 'c');		//4 bit modus
 8000e8c:	2263      	movs	r2, #99	@ 0x63
 8000e8e:	216e      	movs	r1, #110	@ 0x6e
 8000e90:	2002      	movs	r0, #2
 8000e92:	f7ff ff37 	bl	8000d04 <send_to_screen>
		send_to_screen(0b00101000, 'b', 'c');	//4 bit modus
 8000e96:	2263      	movs	r2, #99	@ 0x63
 8000e98:	2162      	movs	r1, #98	@ 0x62
 8000e9a:	2028      	movs	r0, #40	@ 0x28
 8000e9c:	f7ff ff32 	bl	8000d04 <send_to_screen>
		send_to_screen(0b00001111, 'b', 'c');	//display on
 8000ea0:	2263      	movs	r2, #99	@ 0x63
 8000ea2:	2162      	movs	r1, #98	@ 0x62
 8000ea4:	200f      	movs	r0, #15
 8000ea6:	f7ff ff2d 	bl	8000d04 <send_to_screen>
		send_to_screen(0b00000001, 'b', 'c');	//clear display
 8000eaa:	2263      	movs	r2, #99	@ 0x63
 8000eac:	2162      	movs	r1, #98	@ 0x62
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff28 	bl	8000d04 <send_to_screen>
		send_to_screen(0b00000110, 'b', 'c');	//entry mode
 8000eb4:	2263      	movs	r2, #99	@ 0x63
 8000eb6:	2162      	movs	r1, #98	@ 0x62
 8000eb8:	2006      	movs	r0, #6
 8000eba:	f7ff ff23 	bl	8000d04 <send_to_screen>
	}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <write_to_screen>:

	void write_to_screen(char* scherm){
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]

		uint8_t lengte = strlen(scherm);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff f9e0 	bl	8000290 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73bb      	strb	r3, [r7, #14]

		for (uint8_t i = 0; i < lengte; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e00b      	b.n	8000ef2 <write_to_screen+0x30>
				send_to_screen(scherm[i], 'b', 'd');
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2264      	movs	r2, #100	@ 0x64
 8000ee4:	2162      	movs	r1, #98	@ 0x62
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff0c 	bl	8000d04 <send_to_screen>
		for (uint8_t i = 0; i < lengte; i++) {
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3ef      	bcc.n	8000eda <write_to_screen+0x18>
		}
	}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <digit_to_screen>:

	void digit_to_screen(int32_t scherm) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	    char scherm_str[12];
	    int len;

	    len = snprintf(scherm_str, sizeof(scherm_str), "%ld", scherm);
 8000f0c:	f107 000c 	add.w	r0, r7, #12
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <digit_to_screen+0x58>)
 8000f14:	210c      	movs	r1, #12
 8000f16:	f006 ff07 	bl	8007d28 <sniprintf>
 8000f1a:	61b8      	str	r0, [r7, #24]
	    if (len < 0 || len >= sizeof(scherm_str)) {
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db17      	blt.n	8000f52 <digit_to_screen+0x4e>
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2b0b      	cmp	r3, #11
 8000f26:	d814      	bhi.n	8000f52 <digit_to_screen+0x4e>
	        return;
	    }

	    for (int i = 0; i < len; i++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	e00c      	b.n	8000f48 <digit_to_screen+0x44>
	        send_to_screen(scherm_str[i], 'b', 'd');
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2264      	movs	r2, #100	@ 0x64
 8000f3a:	2162      	movs	r1, #98	@ 0x62
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fee1 	bl	8000d04 <send_to_screen>
	    for (int i = 0; i < len; i++) {
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbee      	blt.n	8000f2e <digit_to_screen+0x2a>
 8000f50:	e000      	b.n	8000f54 <digit_to_screen+0x50>
	        return;
 8000f52:	bf00      	nop
	    }
	}
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08009fd0 	.word	0x08009fd0

08000f60 <float_to_screen>:

	void float_to_screen(float scherm) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	ed87 0a01 	vstr	s0, [r7, #4]
		char scherm_str[20];
		int len;

		len = snprintf(scherm_str, sizeof(scherm_str), "%.1f", scherm);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fafc 	bl	8000568 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	f107 000c 	add.w	r0, r7, #12
 8000f78:	e9cd 2300 	strd	r2, r3, [sp]
 8000f7c:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <float_to_screen+0x64>)
 8000f7e:	2114      	movs	r1, #20
 8000f80:	f006 fed2 	bl	8007d28 <sniprintf>
 8000f84:	6238      	str	r0, [r7, #32]
		if (len < 0 || len >= sizeof(scherm_str)) {
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db17      	blt.n	8000fbc <float_to_screen+0x5c>
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	2b13      	cmp	r3, #19
 8000f90:	d814      	bhi.n	8000fbc <float_to_screen+0x5c>
			return;
		}

		for (int i = 0; i < len; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f96:	e00c      	b.n	8000fb2 <float_to_screen+0x52>
			send_to_screen(scherm_str[i], 'b', 'd');
 8000f98:	f107 020c 	add.w	r2, r7, #12
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2264      	movs	r2, #100	@ 0x64
 8000fa4:	2162      	movs	r1, #98	@ 0x62
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff feac 	bl	8000d04 <send_to_screen>
		for (int i = 0; i < len; i++) {
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	3301      	adds	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dbee      	blt.n	8000f98 <float_to_screen+0x38>
 8000fba:	e000      	b.n	8000fbe <float_to_screen+0x5e>
			return;
 8000fbc:	bf00      	nop
		}
	}
 8000fbe:	3728      	adds	r7, #40	@ 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08009fd4 	.word	0x08009fd4

08000fc8 <cursor_pos>:

	void cursor_pos(uint8_t line, uint8_t pos) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
		uint8_t address;

		if (line == 1) {
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <cursor_pos+0x1e>
			address = 0x00 + (pos - 1); // Line 1 starts at 0x00
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e002      	b.n	8000fec <cursor_pos+0x24>
		}
		else{
			address = 0x40 + (pos - 1); // Line 2 starts at 0x40
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	333f      	adds	r3, #63	@ 0x3f
 8000fea:	73fb      	strb	r3, [r7, #15]
		}

		send_to_screen(0b10000000 | address, 'b', 'c');
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2263      	movs	r2, #99	@ 0x63
 8000ff6:	2162      	movs	r1, #98	@ 0x62
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe83 	bl	8000d04 <send_to_screen>

	}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <calculateCRC>:
UART_HandleTypeDef huart1;

volatile float rs485 = 0;

// Function to calculate CRC16 (Modbus RTU)
uint16_t calculateCRC(uint8_t *data, uint8_t length) {
 8001006:	b480      	push	{r7}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	70fb      	strb	r3, [r7, #3]

  uint16_t crc = 0xFFFF;
 8001012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001016:	81fb      	strh	r3, [r7, #14]

  for (uint8_t i = 0; i < length; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	737b      	strb	r3, [r7, #13]
 800101c:	e026      	b.n	800106c <calculateCRC+0x66>

	crc ^= data[i];
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	4053      	eors	r3, r2
 800102c:	81fb      	strh	r3, [r7, #14]

	for (uint8_t j = 0; j < 8; j++) {
 800102e:	2300      	movs	r3, #0
 8001030:	733b      	strb	r3, [r7, #12]
 8001032:	e015      	b.n	8001060 <calculateCRC+0x5a>

	  if (crc & 0x0001) {
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00a      	beq.n	8001054 <calculateCRC+0x4e>
		crc >>= 1;
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	81fb      	strh	r3, [r7, #14]
		crc ^= 0xA001;
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800104a:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 800104e:	43db      	mvns	r3, r3
 8001050:	81fb      	strh	r3, [r7, #14]
 8001052:	e002      	b.n	800105a <calculateCRC+0x54>
	  }
	  else {
		crc >>= 1;
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	81fb      	strh	r3, [r7, #14]
	for (uint8_t j = 0; j < 8; j++) {
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	733b      	strb	r3, [r7, #12]
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d9e6      	bls.n	8001034 <calculateCRC+0x2e>
  for (uint8_t i = 0; i < length; i++) {
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	3301      	adds	r3, #1
 800106a:	737b      	strb	r3, [r7, #13]
 800106c:	7b7a      	ldrb	r2, [r7, #13]
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3d4      	bcc.n	800101e <calculateCRC+0x18>
	  }

	}
  }
  return crc;
 8001074:	89fb      	ldrh	r3, [r7, #14]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <sendCommand>:


// Function to send Modbus RTU command
void sendCommand(uint8_t address, uint8_t functionCode, uint16_t startAddress, uint16_t numData) {
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	4604      	mov	r4, r0
 800108c:	4608      	mov	r0, r1
 800108e:	4611      	mov	r1, r2
 8001090:	461a      	mov	r2, r3
 8001092:	4623      	mov	r3, r4
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	4603      	mov	r3, r0
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	460b      	mov	r3, r1
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	807b      	strh	r3, [r7, #2]

  uint8_t command[8];
  uint16_t crc;

  HAL_GPIO_WritePin(MAX3485_EN_GPIO_Port, MAX3485_EN_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ac:	f002 fdb2 	bl	8003c14 <HAL_GPIO_WritePin>

  command[0] = address;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	733b      	strb	r3, [r7, #12]
  command[1] = functionCode;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	737b      	strb	r3, [r7, #13]
  command[2] = (startAddress >> 8) & 0xFF; // High byte of start address
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	73bb      	strb	r3, [r7, #14]
  command[3] = startAddress & 0xFF;        // Low byte of start address
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	73fb      	strb	r3, [r7, #15]
  command[4] = (numData >> 8) & 0xFF;     // High byte of number of data
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	743b      	strb	r3, [r7, #16]
  command[5] = numData & 0xFF;            // Low byte of number of data
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	747b      	strb	r3, [r7, #17]

  crc = calculateCRC(command, 6);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2106      	movs	r1, #6
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff91 	bl	8001006 <calculateCRC>
 80010e4:	4603      	mov	r3, r0
 80010e6:	82fb      	strh	r3, [r7, #22]
  command[6] = crc & 0xFF;        // Low byte of CRC
 80010e8:	8afb      	ldrh	r3, [r7, #22]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	74bb      	strb	r3, [r7, #18]
  command[7] = (crc >> 8) & 0xFF; // High byte of CRC
 80010ee:	8afb      	ldrh	r3, [r7, #22]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	74fb      	strb	r3, [r7, #19]

  HAL_UART_Transmit(&huart1, command, 8, HAL_MAX_DELAY);
 80010f8:	f107 010c 	add.w	r1, r7, #12
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	2208      	movs	r2, #8
 8001102:	4809      	ldr	r0, [pc, #36]	@ (8001128 <sendCommand+0xa4>)
 8001104:	f005 fc56 	bl	80069b4 <HAL_UART_Transmit>
  __HAL_UART_CLEAR_FLAG(&huart1,UART_CLEAR_OREF);
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <sendCommand+0xa4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2208      	movs	r2, #8
 800110e:	621a      	str	r2, [r3, #32]

  HAL_GPIO_WritePin(MAX3485_EN_GPIO_Port, MAX3485_EN_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f002 fd7b 	bl	8003c14 <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	bf00      	nop
 8001128:	2000020c 	.word	0x2000020c

0800112c <readResponse>:

void readResponse(uint16_t expectedBytes) {
 800112c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001130:	b087      	sub	sp, #28
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	466b      	mov	r3, sp
 800113a:	461e      	mov	r6, r3

	uint8_t data[expectedBytes];
 800113c:	88f9      	ldrh	r1, [r7, #6]
 800113e:	460b      	mov	r3, r1
 8001140:	3b01      	subs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	b28b      	uxth	r3, r1
 8001146:	2200      	movs	r2, #0
 8001148:	4698      	mov	r8, r3
 800114a:	4691      	mov	r9, r2
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001158:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001160:	b28b      	uxth	r3, r1
 8001162:	2200      	movs	r2, #0
 8001164:	461c      	mov	r4, r3
 8001166:	4615      	mov	r5, r2
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	460b      	mov	r3, r1
 800117a:	3307      	adds	r3, #7
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	ebad 0d03 	sub.w	sp, sp, r3
 8001184:	466b      	mov	r3, sp
 8001186:	3300      	adds	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]

	HAL_StatusTypeDef ret;
	ret = HAL_UART_Receive(&huart1, data, expectedBytes, 10);
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	230a      	movs	r3, #10
 800118e:	68f9      	ldr	r1, [r7, #12]
 8001190:	4826      	ldr	r0, [pc, #152]	@ (800122c <readResponse+0x100>)
 8001192:	f005 fc98 	bl	8006ac6 <HAL_UART_Receive>
 8001196:	4603      	mov	r3, r0
 8001198:	72fb      	strb	r3, [r7, #11]

	if(ret == HAL_OK){
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d13f      	bne.n	8001220 <readResponse+0xf4>

		int16_t pressureRaw = 32767;
 80011a0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80011a4:	82fb      	strh	r3, [r7, #22]

		for(uint8_t t = 0; t <= expectedBytes; t++){
 80011a6:	2300      	movs	r3, #0
 80011a8:	757b      	strb	r3, [r7, #21]
 80011aa:	e021      	b.n	80011f0 <readResponse+0xc4>
			if(data[t] == 0x01 && data[t+1] == 0x03 && data[t+2] == 0x02){
 80011ac:	7d7b      	ldrb	r3, [r7, #21]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d119      	bne.n	80011ea <readResponse+0xbe>
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	3301      	adds	r3, #1
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d113      	bne.n	80011ea <readResponse+0xbe>
 80011c2:	7d7b      	ldrb	r3, [r7, #21]
 80011c4:	3302      	adds	r3, #2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d10d      	bne.n	80011ea <readResponse+0xbe>
				pressureRaw = (data[t+3] << 8) | data[t+4];
 80011ce:	7d7b      	ldrb	r3, [r7, #21]
 80011d0:	3303      	adds	r3, #3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7d7b      	ldrb	r3, [r7, #21]
 80011de:	3304      	adds	r3, #4
 80011e0:	68f9      	ldr	r1, [r7, #12]
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	82fb      	strh	r3, [r7, #22]
		for(uint8_t t = 0; t <= expectedBytes; t++){
 80011ea:	7d7b      	ldrb	r3, [r7, #21]
 80011ec:	3301      	adds	r3, #1
 80011ee:	757b      	strb	r3, [r7, #21]
 80011f0:	7d7b      	ldrb	r3, [r7, #21]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d2d8      	bcs.n	80011ac <readResponse+0x80>
			}
		}

		if(pressureRaw != 32767){
 80011fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001202:	4293      	cmp	r3, r2
 8001204:	d00c      	beq.n	8001220 <readResponse+0xf4>
			rs485 = (float)pressureRaw / 10.0f;
 8001206:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <readResponse+0x104>)
 800121c:	edc3 7a00 	vstr	s15, [r3]
 8001220:	46b5      	mov	sp, r6

		}

	}

}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800122c:	2000020c 	.word	0x2000020c
 8001230:	20000294 	.word	0x20000294
 8001234:	00000000 	.word	0x00000000

08001238 <ui>:

volatile uint8_t brightness = 10; //0-255

const char *form = "cy";

void ui(void){
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
//---------------------------------------------------------------------------------------------------------------------------------------------------------
	 switch(menu){
 800123e:	4bb9      	ldr	r3, [pc, #740]	@ (8001524 <ui+0x2ec>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3b01      	subs	r3, #1
 8001244:	2b07      	cmp	r3, #7
 8001246:	f201 8153 	bhi.w	80024f0 <ui+0x12b8>
 800124a:	a201      	add	r2, pc, #4	@ (adr r2, 8001250 <ui+0x18>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	08001271 	.word	0x08001271
 8001254:	080013f5 	.word	0x080013f5
 8001258:	080014ff 	.word	0x080014ff
 800125c:	08001789 	.word	0x08001789
 8001260:	080019cd 	.word	0x080019cd
 8001264:	08001c69 	.word	0x08001c69
 8001268:	08001f53 	.word	0x08001f53
 800126c:	08002199 	.word	0x08002199
		case 1: //tutorial
			switch(page){
 8001270:	4bad      	ldr	r3, [pc, #692]	@ (8001528 <ui+0x2f0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3b01      	subs	r3, #1
 8001278:	2b07      	cmp	r3, #7
 800127a:	f200 80a8 	bhi.w	80013ce <ui+0x196>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <ui+0x4c>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012a5 	.word	0x080012a5
 8001288:	080012c3 	.word	0x080012c3
 800128c:	0800130b 	.word	0x0800130b
 8001290:	08001329 	.word	0x08001329
 8001294:	08001347 	.word	0x08001347
 8001298:	08001365 	.word	0x08001365
 800129c:	08001383 	.word	0x08001383
 80012a0:	080013b1 	.word	0x080013b1
				case 1:
					 cursor_pos(1, 1);
 80012a4:	2101      	movs	r1, #1
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fe8e 	bl	8000fc8 <cursor_pos>
					 write_to_screen("     Welkom!    ");
 80012ac:	489f      	ldr	r0, [pc, #636]	@ (800152c <ui+0x2f4>)
 80012ae:	f7ff fe08 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80012b2:	2101      	movs	r1, #1
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff fe87 	bl	8000fc8 <cursor_pos>
					 write_to_screen("press o for next");
 80012ba:	489d      	ldr	r0, [pc, #628]	@ (8001530 <ui+0x2f8>)
 80012bc:	f7ff fe01 	bl	8000ec2 <write_to_screen>
				break;
 80012c0:	e096      	b.n	80013f0 <ui+0x1b8>
				case 2:
					 cursor_pos(1, 1);
 80012c2:	2101      	movs	r1, #1
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fe7f 	bl	8000fc8 <cursor_pos>
					 write_to_screen("    this is a   ");
 80012ca:	489a      	ldr	r0, [pc, #616]	@ (8001534 <ui+0x2fc>)
 80012cc:	f7ff fdf9 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80012d0:	2101      	movs	r1, #1
 80012d2:	2002      	movs	r0, #2
 80012d4:	f7ff fe78 	bl	8000fc8 <cursor_pos>
					 write_to_screen("    tutorial    ");
 80012d8:	4897      	ldr	r0, [pc, #604]	@ (8001538 <ui+0x300>)
 80012da:	f7ff fdf2 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 80012de:	4b97      	ldr	r3, [pc, #604]	@ (800153c <ui+0x304>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f040 8082 	bne.w	80013ee <ui+0x1b6>
						 menu = 2;
 80012ea:	4b8e      	ldr	r3, [pc, #568]	@ (8001524 <ui+0x2ec>)
 80012ec:	2202      	movs	r2, #2
 80012ee:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80012f0:	4b92      	ldr	r3, [pc, #584]	@ (800153c <ui+0x304>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80012f6:	4b92      	ldr	r3, [pc, #584]	@ (8001540 <ui+0x308>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
						 page = 1;
 80012fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001528 <ui+0x2f0>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001302:	4b90      	ldr	r3, [pc, #576]	@ (8001544 <ui+0x30c>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001308:	e071      	b.n	80013ee <ui+0x1b6>
				case 3:
					 cursor_pos(1, 1);
 800130a:	2101      	movs	r1, #1
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fe5b 	bl	8000fc8 <cursor_pos>
					 write_to_screen("   o is to go   ");
 8001312:	488d      	ldr	r0, [pc, #564]	@ (8001548 <ui+0x310>)
 8001314:	f7ff fdd5 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001318:	2101      	movs	r1, #1
 800131a:	2002      	movs	r0, #2
 800131c:	f7ff fe54 	bl	8000fc8 <cursor_pos>
					 write_to_screen("to the next page");
 8001320:	488a      	ldr	r0, [pc, #552]	@ (800154c <ui+0x314>)
 8001322:	f7ff fdce 	bl	8000ec2 <write_to_screen>
				break;
 8001326:	e063      	b.n	80013f0 <ui+0x1b8>
				case 4:
					 cursor_pos(1, 1);
 8001328:	2101      	movs	r1, #1
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fe4c 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" and x is to go ");
 8001330:	4887      	ldr	r0, [pc, #540]	@ (8001550 <ui+0x318>)
 8001332:	f7ff fdc6 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001336:	2101      	movs	r1, #1
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff fe45 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" back a page    ");
 800133e:	4885      	ldr	r0, [pc, #532]	@ (8001554 <ui+0x31c>)
 8001340:	f7ff fdbf 	bl	8000ec2 <write_to_screen>
				break;
 8001344:	e054      	b.n	80013f0 <ui+0x1b8>
				case 5:
					 cursor_pos(1, 1);
 8001346:	2101      	movs	r1, #1
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fe3d 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" ^ is to select ");
 800134e:	4882      	ldr	r0, [pc, #520]	@ (8001558 <ui+0x320>)
 8001350:	f7ff fdb7 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001354:	2101      	movs	r1, #1
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff fe36 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  your choice   ");
 800135c:	487f      	ldr	r0, [pc, #508]	@ (800155c <ui+0x324>)
 800135e:	f7ff fdb0 	bl	8000ec2 <write_to_screen>
				break;
 8001362:	e045      	b.n	80013f0 <ui+0x1b8>
				case 6:
					 cursor_pos(1, 1);
 8001364:	2101      	movs	r1, #1
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fe2e 	bl	8000fc8 <cursor_pos>
					 write_to_screen("and also to     ");
 800136c:	487c      	ldr	r0, [pc, #496]	@ (8001560 <ui+0x328>)
 800136e:	f7ff fda8 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001372:	2101      	movs	r1, #1
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff fe27 	bl	8000fc8 <cursor_pos>
					 write_to_screen("increase a value");
 800137a:	487a      	ldr	r0, [pc, #488]	@ (8001564 <ui+0x32c>)
 800137c:	f7ff fda1 	bl	8000ec2 <write_to_screen>
				break;
 8001380:	e036      	b.n	80013f0 <ui+0x1b8>
				case 7:
					 cursor_pos(1, 1);
 8001382:	2101      	movs	r1, #1
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff fe1f 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" ");
 800138a:	4877      	ldr	r0, [pc, #476]	@ (8001568 <ui+0x330>)
 800138c:	f7ff fd99 	bl	8000ec2 <write_to_screen>
					 send_to_screen(0b11011011, 'b', 'd');
 8001390:	2264      	movs	r2, #100	@ 0x64
 8001392:	2162      	movs	r1, #98	@ 0x62
 8001394:	20db      	movs	r0, #219	@ 0xdb
 8001396:	f7ff fcb5 	bl	8000d04 <send_to_screen>
					 write_to_screen(" is used to    ");
 800139a:	4874      	ldr	r0, [pc, #464]	@ (800156c <ui+0x334>)
 800139c:	f7ff fd91 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80013a0:	2101      	movs	r1, #1
 80013a2:	2002      	movs	r0, #2
 80013a4:	f7ff fe10 	bl	8000fc8 <cursor_pos>
					 write_to_screen("confirm a choice");
 80013a8:	4871      	ldr	r0, [pc, #452]	@ (8001570 <ui+0x338>)
 80013aa:	f7ff fd8a 	bl	8000ec2 <write_to_screen>
				break;
 80013ae:	e01f      	b.n	80013f0 <ui+0x1b8>
				case 8:
					 cursor_pos(1, 1);
 80013b0:	2101      	movs	r1, #1
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fe08 	bl	8000fc8 <cursor_pos>
					 write_to_screen("and also to     ");
 80013b8:	4869      	ldr	r0, [pc, #420]	@ (8001560 <ui+0x328>)
 80013ba:	f7ff fd82 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80013be:	2101      	movs	r1, #1
 80013c0:	2002      	movs	r0, #2
 80013c2:	f7ff fe01 	bl	8000fc8 <cursor_pos>
					 write_to_screen("decrease a value");
 80013c6:	486b      	ldr	r0, [pc, #428]	@ (8001574 <ui+0x33c>)
 80013c8:	f7ff fd7b 	bl	8000ec2 <write_to_screen>
				break;
 80013cc:	e010      	b.n	80013f0 <ui+0x1b8>
				default:
					 menu = 2;
 80013ce:	4b55      	ldr	r3, [pc, #340]	@ (8001524 <ui+0x2ec>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
					 page = 1;
 80013d4:	4b54      	ldr	r3, [pc, #336]	@ (8001528 <ui+0x2f0>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
					 conf = 0;
 80013da:	4b58      	ldr	r3, [pc, #352]	@ (800153c <ui+0x304>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
					 select = 1;
 80013e0:	4b57      	ldr	r3, [pc, #348]	@ (8001540 <ui+0x308>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
					 update = 1;
 80013e6:	4b57      	ldr	r3, [pc, #348]	@ (8001544 <ui+0x30c>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
				break;
 80013ec:	e000      	b.n	80013f0 <ui+0x1b8>
				break;
 80013ee:	bf00      	nop
			}
		break;
 80013f0:	f001 b882 	b.w	80024f8 <ui+0x12c0>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 2: //menu selecter
			switch(page){
 80013f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001528 <ui+0x2f0>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d176      	bne.n	80014ec <ui+0x2b4>
				case 1:
					 cursor_pos(1, 1);
 80013fe:	2101      	movs	r1, #1
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fde1 	bl	8000fc8 <cursor_pos>
					 write_to_screen("Setting Displays");
 8001406:	485c      	ldr	r0, [pc, #368]	@ (8001578 <ui+0x340>)
 8001408:	f7ff fd5b 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 800140c:	2101      	movs	r1, #1
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff fdda 	bl	8000fc8 <cursor_pos>
					 write_to_screen("    Tutorial    ");
 8001414:	4859      	ldr	r0, [pc, #356]	@ (800157c <ui+0x344>)
 8001416:	f7ff fd54 	bl	8000ec2 <write_to_screen>
					 switch(select){
 800141a:	4b49      	ldr	r3, [pc, #292]	@ (8001540 <ui+0x308>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d03d      	beq.n	80014a0 <ui+0x268>
 8001424:	2b03      	cmp	r3, #3
 8001426:	dc54      	bgt.n	80014d2 <ui+0x29a>
 8001428:	2b01      	cmp	r3, #1
 800142a:	d002      	beq.n	8001432 <ui+0x1fa>
 800142c:	2b02      	cmp	r3, #2
 800142e:	d019      	beq.n	8001464 <ui+0x22c>
 8001430:	e04f      	b.n	80014d2 <ui+0x29a>
						case 1:
							 cursor_pos(1, 1);
 8001432:	2101      	movs	r1, #1
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fdc7 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 800143a:	4b40      	ldr	r3, [pc, #256]	@ (800153c <ui+0x304>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d14d      	bne.n	80014e0 <ui+0x2a8>
								 menu = 3;
 8001444:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <ui+0x2ec>)
 8001446:	2203      	movs	r2, #3
 8001448:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 800144a:	4b3c      	ldr	r3, [pc, #240]	@ (800153c <ui+0x304>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8001450:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <ui+0x308>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
								 page = 2;
 8001456:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <ui+0x2f0>)
 8001458:	2202      	movs	r2, #2
 800145a:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800145c:	4b39      	ldr	r3, [pc, #228]	@ (8001544 <ui+0x30c>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
							 }
						break;
 8001462:	e03d      	b.n	80014e0 <ui+0x2a8>

						case 2:
							 cursor_pos(1, 9);
 8001464:	2109      	movs	r1, #9
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fdae 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 800146c:	4b33      	ldr	r3, [pc, #204]	@ (800153c <ui+0x304>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d136      	bne.n	80014e4 <ui+0x2ac>
								 menu = 4;
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <ui+0x2ec>)
 8001478:	2204      	movs	r2, #4
 800147a:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <ui+0x304>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8001482:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <ui+0x308>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
								 page = 2;
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <ui+0x2f0>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800148e:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <ui+0x30c>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
								 send_to_screen(0b00001100, 'b', 'c');
 8001494:	2263      	movs	r2, #99	@ 0x63
 8001496:	2162      	movs	r1, #98	@ 0x62
 8001498:	200c      	movs	r0, #12
 800149a:	f7ff fc33 	bl	8000d04 <send_to_screen>
							 }
						break;
 800149e:	e021      	b.n	80014e4 <ui+0x2ac>

						case 3:
							 cursor_pos(2, 5);
 80014a0:	2105      	movs	r1, #5
 80014a2:	2002      	movs	r0, #2
 80014a4:	f7ff fd90 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <ui+0x304>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d11a      	bne.n	80014e8 <ui+0x2b0>
								 menu = 1;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <ui+0x2ec>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80014b8:	4b20      	ldr	r3, [pc, #128]	@ (800153c <ui+0x304>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <ui+0x308>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
								 page = 1;
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <ui+0x2f0>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <ui+0x30c>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
							 }
						break;
 80014d0:	e00a      	b.n	80014e8 <ui+0x2b0>

						default:
							select = 1;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <ui+0x308>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
							update = 1;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <ui+0x30c>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
						break;
 80014de:	e004      	b.n	80014ea <ui+0x2b2>
						break;
 80014e0:	bf00      	nop
 80014e2:	e00a      	b.n	80014fa <ui+0x2c2>
						break;
 80014e4:	bf00      	nop
 80014e6:	e008      	b.n	80014fa <ui+0x2c2>
						break;
 80014e8:	bf00      	nop
					}
				break;
 80014ea:	e006      	b.n	80014fa <ui+0x2c2>

				default:
					page = 1;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <ui+0x2f0>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
					update = 1;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <ui+0x30c>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
				break;
 80014f8:	bf00      	nop
			}
		break;
 80014fa:	f000 bffd 	b.w	80024f8 <ui+0x12c0>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 3: //settings selector
			switch(page){
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <ui+0x2f0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	2b03      	cmp	r3, #3
 8001508:	f200 8131 	bhi.w	800176e <ui+0x536>
 800150c:	a201      	add	r2, pc, #4	@ (adr r2, 8001514 <ui+0x2dc>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001581 	.word	0x08001581
 8001518:	080015c9 	.word	0x080015c9
 800151c:	08001683 	.word	0x08001683
 8001520:	08001729 	.word	0x08001729
 8001524:	20000001 	.word	0x20000001
 8001528:	20000000 	.word	0x20000000
 800152c:	08009fe0 	.word	0x08009fe0
 8001530:	08009ff4 	.word	0x08009ff4
 8001534:	0800a008 	.word	0x0800a008
 8001538:	0800a01c 	.word	0x0800a01c
 800153c:	20000298 	.word	0x20000298
 8001540:	20000002 	.word	0x20000002
 8001544:	20000299 	.word	0x20000299
 8001548:	0800a030 	.word	0x0800a030
 800154c:	0800a044 	.word	0x0800a044
 8001550:	0800a058 	.word	0x0800a058
 8001554:	0800a06c 	.word	0x0800a06c
 8001558:	0800a080 	.word	0x0800a080
 800155c:	0800a094 	.word	0x0800a094
 8001560:	0800a0a8 	.word	0x0800a0a8
 8001564:	0800a0bc 	.word	0x0800a0bc
 8001568:	0800a0d0 	.word	0x0800a0d0
 800156c:	0800a0d4 	.word	0x0800a0d4
 8001570:	0800a0e4 	.word	0x0800a0e4
 8001574:	0800a0f8 	.word	0x0800a0f8
 8001578:	0800a10c 	.word	0x0800a10c
 800157c:	0800a120 	.word	0x0800a120

				case 1:
					cursor_pos(1, 1);
 8001580:	2101      	movs	r1, #1
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fd20 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001588:	48ab      	ldr	r0, [pc, #684]	@ (8001838 <ui+0x600>)
 800158a:	f7ff fc9a 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 800158e:	2101      	movs	r1, #1
 8001590:	2002      	movs	r0, #2
 8001592:	f7ff fd19 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" menu selector  ");
 8001596:	48a9      	ldr	r0, [pc, #676]	@ (800183c <ui+0x604>)
 8001598:	f7ff fc93 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 800159c:	4ba8      	ldr	r3, [pc, #672]	@ (8001840 <ui+0x608>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f040 80ea 	bne.w	800177c <ui+0x544>
						 menu = 2;
 80015a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001844 <ui+0x60c>)
 80015aa:	2202      	movs	r2, #2
 80015ac:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80015ae:	4ba4      	ldr	r3, [pc, #656]	@ (8001840 <ui+0x608>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80015b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001848 <ui+0x610>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
						 page = 1;
 80015ba:	4ba4      	ldr	r3, [pc, #656]	@ (800184c <ui+0x614>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80015c0:	4ba3      	ldr	r3, [pc, #652]	@ (8001850 <ui+0x618>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
					 }
				break;
 80015c6:	e0d9      	b.n	800177c <ui+0x544>

				case 2:
					cursor_pos(1, 1);
 80015c8:	2101      	movs	r1, #1
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff fcfc 	bl	8000fc8 <cursor_pos>
					write_to_screen("  Min/Max Well  ");
 80015d0:	48a0      	ldr	r0, [pc, #640]	@ (8001854 <ui+0x61c>)
 80015d2:	f7ff fc76 	bl	8000ec2 <write_to_screen>
					cursor_pos(2, 1);
 80015d6:	2101      	movs	r1, #1
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff fcf5 	bl	8000fc8 <cursor_pos>
					write_to_screen("  Min/Max Limit ");
 80015de:	489e      	ldr	r0, [pc, #632]	@ (8001858 <ui+0x620>)
 80015e0:	f7ff fc6f 	bl	8000ec2 <write_to_screen>
					switch(select){
 80015e4:	4b98      	ldr	r3, [pc, #608]	@ (8001848 <ui+0x610>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d002      	beq.n	80015f4 <ui+0x3bc>
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d01e      	beq.n	8001630 <ui+0x3f8>
 80015f2:	e03b      	b.n	800166c <ui+0x434>
						case 1:
							 cursor_pos(1, 3);
 80015f4:	2103      	movs	r1, #3
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fce6 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 80015fc:	4b90      	ldr	r3, [pc, #576]	@ (8001840 <ui+0x608>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d139      	bne.n	800167a <ui+0x442>
								 menu = 5;
 8001606:	4b8f      	ldr	r3, [pc, #572]	@ (8001844 <ui+0x60c>)
 8001608:	2205      	movs	r2, #5
 800160a:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 800160c:	4b8c      	ldr	r3, [pc, #560]	@ (8001840 <ui+0x608>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8001612:	4b8d      	ldr	r3, [pc, #564]	@ (8001848 <ui+0x610>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
								 page = 2;
 8001618:	4b8c      	ldr	r3, [pc, #560]	@ (800184c <ui+0x614>)
 800161a:	2202      	movs	r2, #2
 800161c:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800161e:	4b8c      	ldr	r3, [pc, #560]	@ (8001850 <ui+0x618>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
								 send_to_screen(0b00001100, 'b', 'c');
 8001624:	2263      	movs	r2, #99	@ 0x63
 8001626:	2162      	movs	r1, #98	@ 0x62
 8001628:	200c      	movs	r0, #12
 800162a:	f7ff fb6b 	bl	8000d04 <send_to_screen>
							 }
						break;
 800162e:	e024      	b.n	800167a <ui+0x442>

						case 2:
							 cursor_pos(2, 3);
 8001630:	2103      	movs	r1, #3
 8001632:	2002      	movs	r0, #2
 8001634:	f7ff fcc8 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 8001638:	4b81      	ldr	r3, [pc, #516]	@ (8001840 <ui+0x608>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d11d      	bne.n	800167e <ui+0x446>
								 menu = 6;
 8001642:	4b80      	ldr	r3, [pc, #512]	@ (8001844 <ui+0x60c>)
 8001644:	2206      	movs	r2, #6
 8001646:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8001648:	4b7d      	ldr	r3, [pc, #500]	@ (8001840 <ui+0x608>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
								 select = 1;
 800164e:	4b7e      	ldr	r3, [pc, #504]	@ (8001848 <ui+0x610>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
								 page = 2;
 8001654:	4b7d      	ldr	r3, [pc, #500]	@ (800184c <ui+0x614>)
 8001656:	2202      	movs	r2, #2
 8001658:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800165a:	4b7d      	ldr	r3, [pc, #500]	@ (8001850 <ui+0x618>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
								 send_to_screen(0b00001100, 'b', 'c');
 8001660:	2263      	movs	r2, #99	@ 0x63
 8001662:	2162      	movs	r1, #98	@ 0x62
 8001664:	200c      	movs	r0, #12
 8001666:	f7ff fb4d 	bl	8000d04 <send_to_screen>
						 }
							 break;
 800166a:	e008      	b.n	800167e <ui+0x446>

						default:
							select = 1;
 800166c:	4b76      	ldr	r3, [pc, #472]	@ (8001848 <ui+0x610>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
							update = 1;
 8001672:	4b77      	ldr	r3, [pc, #476]	@ (8001850 <ui+0x618>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
						break;
 8001678:	e002      	b.n	8001680 <ui+0x448>
						break;
 800167a:	bf00      	nop
 800167c:	e082      	b.n	8001784 <ui+0x54c>
							 break;
 800167e:	bf00      	nop
				}
				break;
 8001680:	e080      	b.n	8001784 <ui+0x54c>

				case 3:
					cursor_pos(1, 1);
 8001682:	2101      	movs	r1, #1
 8001684:	2001      	movs	r0, #1
 8001686:	f7ff fc9f 	bl	8000fc8 <cursor_pos>
					write_to_screen(" Well form      ");
 800168a:	4874      	ldr	r0, [pc, #464]	@ (800185c <ui+0x624>)
 800168c:	f7ff fc19 	bl	8000ec2 <write_to_screen>
					cursor_pos(2, 1);
 8001690:	2101      	movs	r1, #1
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff fc98 	bl	8000fc8 <cursor_pos>
					write_to_screen(" Well dimensions");
 8001698:	4871      	ldr	r0, [pc, #452]	@ (8001860 <ui+0x628>)
 800169a:	f7ff fc12 	bl	8000ec2 <write_to_screen>
					switch(select){
 800169e:	4b6a      	ldr	r3, [pc, #424]	@ (8001848 <ui+0x610>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d002      	beq.n	80016ae <ui+0x476>
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d019      	beq.n	80016e0 <ui+0x4a8>
 80016ac:	e031      	b.n	8001712 <ui+0x4da>
						case 1:
							 cursor_pos(1, 2);
 80016ae:	2102      	movs	r1, #2
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fc89 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 80016b6:	4b62      	ldr	r3, [pc, #392]	@ (8001840 <ui+0x608>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d12f      	bne.n	8001720 <ui+0x4e8>
								 menu = 7;
 80016c0:	4b60      	ldr	r3, [pc, #384]	@ (8001844 <ui+0x60c>)
 80016c2:	2207      	movs	r2, #7
 80016c4:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80016c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001840 <ui+0x608>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80016cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001848 <ui+0x610>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
								 page = 2;
 80016d2:	4b5e      	ldr	r3, [pc, #376]	@ (800184c <ui+0x614>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80016d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001850 <ui+0x618>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
							 }
						break;
 80016de:	e01f      	b.n	8001720 <ui+0x4e8>

						case 2:
							 cursor_pos(2, 2);
 80016e0:	2102      	movs	r1, #2
 80016e2:	2002      	movs	r0, #2
 80016e4:	f7ff fc70 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 80016e8:	4b55      	ldr	r3, [pc, #340]	@ (8001840 <ui+0x608>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d118      	bne.n	8001724 <ui+0x4ec>
								 menu = 8;
 80016f2:	4b54      	ldr	r3, [pc, #336]	@ (8001844 <ui+0x60c>)
 80016f4:	2208      	movs	r2, #8
 80016f6:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80016f8:	4b51      	ldr	r3, [pc, #324]	@ (8001840 <ui+0x608>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80016fe:	4b52      	ldr	r3, [pc, #328]	@ (8001848 <ui+0x610>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
								 page = 2;
 8001704:	4b51      	ldr	r3, [pc, #324]	@ (800184c <ui+0x614>)
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800170a:	4b51      	ldr	r3, [pc, #324]	@ (8001850 <ui+0x618>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
						 }
							 break;
 8001710:	e008      	b.n	8001724 <ui+0x4ec>

						default:
							select = 1;
 8001712:	4b4d      	ldr	r3, [pc, #308]	@ (8001848 <ui+0x610>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
							update = 1;
 8001718:	4b4d      	ldr	r3, [pc, #308]	@ (8001850 <ui+0x618>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
						break;
 800171e:	e002      	b.n	8001726 <ui+0x4ee>
						break;
 8001720:	bf00      	nop
 8001722:	e02f      	b.n	8001784 <ui+0x54c>
							 break;
 8001724:	bf00      	nop
				}
				break;
 8001726:	e02d      	b.n	8001784 <ui+0x54c>

				case 4:
					cursor_pos(1, 1);
 8001728:	2101      	movs	r1, #1
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fc4c 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001730:	4841      	ldr	r0, [pc, #260]	@ (8001838 <ui+0x600>)
 8001732:	f7ff fbc6 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001736:	2101      	movs	r1, #1
 8001738:	2002      	movs	r0, #2
 800173a:	f7ff fc45 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" menu selector  ");
 800173e:	483f      	ldr	r0, [pc, #252]	@ (800183c <ui+0x604>)
 8001740:	f7ff fbbf 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001744:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <ui+0x608>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d119      	bne.n	8001782 <ui+0x54a>
						 menu = 2;
 800174e:	4b3d      	ldr	r3, [pc, #244]	@ (8001844 <ui+0x60c>)
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001754:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <ui+0x608>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
						 select = 1;
 800175a:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <ui+0x610>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
						 page = 1;
 8001760:	4b3a      	ldr	r3, [pc, #232]	@ (800184c <ui+0x614>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001766:	4b3a      	ldr	r3, [pc, #232]	@ (8001850 <ui+0x618>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
					 }
				break;
 800176c:	e009      	b.n	8001782 <ui+0x54a>

				default:
					page = 2;
 800176e:	4b37      	ldr	r3, [pc, #220]	@ (800184c <ui+0x614>)
 8001770:	2202      	movs	r2, #2
 8001772:	701a      	strb	r2, [r3, #0]
					update = 1;
 8001774:	4b36      	ldr	r3, [pc, #216]	@ (8001850 <ui+0x618>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
				break;
 800177a:	e003      	b.n	8001784 <ui+0x54c>
				break;
 800177c:	bf00      	nop
 800177e:	f000 bebb 	b.w	80024f8 <ui+0x12c0>
				break;
 8001782:	bf00      	nop
			}
		break;
 8001784:	f000 beb8 	b.w	80024f8 <ui+0x12c0>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 4: //displays
			switch(page){
 8001788:	4b30      	ldr	r3, [pc, #192]	@ (800184c <ui+0x614>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3b01      	subs	r3, #1
 8001790:	2b03      	cmp	r3, #3
 8001792:	f200 810e 	bhi.w	80019b2 <ui+0x77a>
 8001796:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <ui+0x564>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	080017ff 	.word	0x080017ff
 80017a4:	08001875 	.word	0x08001875
 80017a8:	08001963 	.word	0x08001963

				case 1:
					cursor_pos(1, 1);
 80017ac:	2101      	movs	r1, #1
 80017ae:	2001      	movs	r0, #1
 80017b0:	f7ff fc0a 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 80017b4:	4820      	ldr	r0, [pc, #128]	@ (8001838 <ui+0x600>)
 80017b6:	f7ff fb84 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80017ba:	2101      	movs	r1, #1
 80017bc:	2002      	movs	r0, #2
 80017be:	f7ff fc03 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" menu selector  ");
 80017c2:	481e      	ldr	r0, [pc, #120]	@ (800183c <ui+0x604>)
 80017c4:	f7ff fb7d 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 80017c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <ui+0x608>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	f040 80f6 	bne.w	80019c0 <ui+0x788>
						 menu = 2;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <ui+0x60c>)
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <ui+0x608>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <ui+0x610>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
						 page = 1;
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <ui+0x614>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <ui+0x618>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c');
 80017f2:	2263      	movs	r2, #99	@ 0x63
 80017f4:	2162      	movs	r1, #98	@ 0x62
 80017f6:	200f      	movs	r0, #15
 80017f8:	f7ff fa84 	bl	8000d04 <send_to_screen>
					 }
				break;
 80017fc:	e0e0      	b.n	80019c0 <ui+0x788>

				case 2:

					 cursor_pos(1, 1);
 80017fe:	2101      	movs	r1, #1
 8001800:	2001      	movs	r0, #1
 8001802:	f7ff fbe1 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  water level   ");
 8001806:	4817      	ldr	r0, [pc, #92]	@ (8001864 <ui+0x62c>)
 8001808:	f7ff fb5b 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 800180c:	2101      	movs	r1, #1
 800180e:	2002      	movs	r0, #2
 8001810:	f7ff fbda 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  ");
 8001814:	4814      	ldr	r0, [pc, #80]	@ (8001868 <ui+0x630>)
 8001816:	f7ff fb54 	bl	8000ec2 <write_to_screen>
					 float_to_screen(rs485);
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <ui+0x634>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	eeb0 0a67 	vmov.f32	s0, s15
 8001824:	f7ff fb9c 	bl	8000f60 <float_to_screen>
					 write_to_screen(" cm             ");
 8001828:	4811      	ldr	r0, [pc, #68]	@ (8001870 <ui+0x638>)
 800182a:	f7ff fb4a 	bl	8000ec2 <write_to_screen>
					 update = 1;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <ui+0x618>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
				break;
 8001834:	e0c8      	b.n	80019c8 <ui+0x790>
 8001836:	bf00      	nop
 8001838:	0800a134 	.word	0x0800a134
 800183c:	0800a148 	.word	0x0800a148
 8001840:	20000298 	.word	0x20000298
 8001844:	20000001 	.word	0x20000001
 8001848:	20000002 	.word	0x20000002
 800184c:	20000000 	.word	0x20000000
 8001850:	20000299 	.word	0x20000299
 8001854:	0800a15c 	.word	0x0800a15c
 8001858:	0800a170 	.word	0x0800a170
 800185c:	0800a184 	.word	0x0800a184
 8001860:	0800a198 	.word	0x0800a198
 8001864:	0800a1ac 	.word	0x0800a1ac
 8001868:	0800a1c0 	.word	0x0800a1c0
 800186c:	20000294 	.word	0x20000294
 8001870:	0800a1c4 	.word	0x0800a1c4

				case 3:

					float volume = 0;
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	607b      	str	r3, [r7, #4]

					if(strcmp(form, "cy") == 0){
 800187a:	4ba5      	ldr	r3, [pc, #660]	@ (8001b10 <ui+0x8d8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	49a5      	ldr	r1, [pc, #660]	@ (8001b14 <ui+0x8dc>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fca5 	bl	80001d0 <strcmp>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d139      	bne.n	8001900 <ui+0x6c8>
						volume = ((diameter/2) * (diameter/2) * 3.14159 * rs485) / 1000.0f;
 800188c:	4ba2      	ldr	r3, [pc, #648]	@ (8001b18 <ui+0x8e0>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001896:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800189a:	4b9f      	ldr	r3, [pc, #636]	@ (8001b18 <ui+0x8e0>)
 800189c:	edd3 6a00 	vldr	s13, [r3]
 80018a0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80018a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	ee17 0a90 	vmov	r0, s15
 80018b0:	f7fe fe5a 	bl	8000568 <__aeabi_f2d>
 80018b4:	a394      	add	r3, pc, #592	@ (adr r3, 8001b08 <ui+0x8d0>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fead 	bl	8000618 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4614      	mov	r4, r2
 80018c4:	461d      	mov	r5, r3
 80018c6:	4b95      	ldr	r3, [pc, #596]	@ (8001b1c <ui+0x8e4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe4c 	bl	8000568 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fe9e 	bl	8000618 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001b20 <ui+0x8e8>)
 80018ea:	f7fe ffbf 	bl	800086c <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f967 	bl	8000bc8 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e017      	b.n	8001930 <ui+0x6f8>
					}
					else{
						volume = (X * Y * rs485) / 1000.0f;
 8001900:	4b88      	ldr	r3, [pc, #544]	@ (8001b24 <ui+0x8ec>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	4b87      	ldr	r3, [pc, #540]	@ (8001b28 <ui+0x8f0>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	4b80      	ldr	r3, [pc, #512]	@ (8001b1c <ui+0x8e4>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001924:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8001b2c <ui+0x8f4>
 8001928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192c:	edc7 7a01 	vstr	s15, [r7, #4]
					}

					 cursor_pos(1, 1);
 8001930:	2101      	movs	r1, #1
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff fb48 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  water volume  ");
 8001938:	487d      	ldr	r0, [pc, #500]	@ (8001b30 <ui+0x8f8>)
 800193a:	f7ff fac2 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 800193e:	2101      	movs	r1, #1
 8001940:	2002      	movs	r0, #2
 8001942:	f7ff fb41 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  ");
 8001946:	487b      	ldr	r0, [pc, #492]	@ (8001b34 <ui+0x8fc>)
 8001948:	f7ff fabb 	bl	8000ec2 <write_to_screen>
					 float_to_screen(volume);
 800194c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001950:	f7ff fb06 	bl	8000f60 <float_to_screen>
					 write_to_screen(" L              ");
 8001954:	4878      	ldr	r0, [pc, #480]	@ (8001b38 <ui+0x900>)
 8001956:	f7ff fab4 	bl	8000ec2 <write_to_screen>
					 update = 1;
 800195a:	4b78      	ldr	r3, [pc, #480]	@ (8001b3c <ui+0x904>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
				break;
 8001960:	e032      	b.n	80019c8 <ui+0x790>

				case 4:
					cursor_pos(1, 1);
 8001962:	2101      	movs	r1, #1
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff fb2f 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 800196a:	4875      	ldr	r0, [pc, #468]	@ (8001b40 <ui+0x908>)
 800196c:	f7ff faa9 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001970:	2101      	movs	r1, #1
 8001972:	2002      	movs	r0, #2
 8001974:	f7ff fb28 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" menu selector  ");
 8001978:	4872      	ldr	r0, [pc, #456]	@ (8001b44 <ui+0x90c>)
 800197a:	f7ff faa2 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 800197e:	4b72      	ldr	r3, [pc, #456]	@ (8001b48 <ui+0x910>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d11e      	bne.n	80019c6 <ui+0x78e>
						 menu = 2;
 8001988:	4b70      	ldr	r3, [pc, #448]	@ (8001b4c <ui+0x914>)
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 800198e:	4b6e      	ldr	r3, [pc, #440]	@ (8001b48 <ui+0x910>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001994:	4b6e      	ldr	r3, [pc, #440]	@ (8001b50 <ui+0x918>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
						 page = 1;
 800199a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b54 <ui+0x91c>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80019a0:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <ui+0x904>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c');
 80019a6:	2263      	movs	r2, #99	@ 0x63
 80019a8:	2162      	movs	r1, #98	@ 0x62
 80019aa:	200f      	movs	r0, #15
 80019ac:	f7ff f9aa 	bl	8000d04 <send_to_screen>
					 }
				break;
 80019b0:	e009      	b.n	80019c6 <ui+0x78e>

				default:
					page = 2;
 80019b2:	4b68      	ldr	r3, [pc, #416]	@ (8001b54 <ui+0x91c>)
 80019b4:	2202      	movs	r2, #2
 80019b6:	701a      	strb	r2, [r3, #0]
					update = 1;
 80019b8:	4b60      	ldr	r3, [pc, #384]	@ (8001b3c <ui+0x904>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
				break;
 80019be:	e003      	b.n	80019c8 <ui+0x790>
				break;
 80019c0:	bf00      	nop
 80019c2:	f000 bd99 	b.w	80024f8 <ui+0x12c0>
				break;
 80019c6:	bf00      	nop
			}
		break;
 80019c8:	f000 bd96 	b.w	80024f8 <ui+0x12c0>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 5: //well level
			switch(page){
 80019cc:	4b61      	ldr	r3, [pc, #388]	@ (8001b54 <ui+0x91c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	f200 8134 	bhi.w	8001c42 <ui+0xa0a>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <ui+0x7a8>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019f9 	.word	0x080019f9
 80019e4:	08001a4b 	.word	0x08001a4b
 80019e8:	08001a69 	.word	0x08001a69
 80019ec:	08001a87 	.word	0x08001a87
 80019f0:	08001b79 	.word	0x08001b79
 80019f4:	08001bf3 	.word	0x08001bf3

				case 1:
					cursor_pos(1, 1);
 80019f8:	2101      	movs	r1, #1
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff fae4 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001a00:	484f      	ldr	r0, [pc, #316]	@ (8001b40 <ui+0x908>)
 8001a02:	f7ff fa5e 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001a06:	2101      	movs	r1, #1
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f7ff fadd 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001a0e:	4852      	ldr	r0, [pc, #328]	@ (8001b58 <ui+0x920>)
 8001a10:	f7ff fa57 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001a14:	4b4c      	ldr	r3, [pc, #304]	@ (8001b48 <ui+0x910>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	f040 8118 	bne.w	8001c50 <ui+0xa18>
						 menu = 3;
 8001a20:	4b4a      	ldr	r3, [pc, #296]	@ (8001b4c <ui+0x914>)
 8001a22:	2203      	movs	r2, #3
 8001a24:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001a26:	4b48      	ldr	r3, [pc, #288]	@ (8001b48 <ui+0x910>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001a2c:	4b48      	ldr	r3, [pc, #288]	@ (8001b50 <ui+0x918>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
						 page = 2;
 8001a32:	4b48      	ldr	r3, [pc, #288]	@ (8001b54 <ui+0x91c>)
 8001a34:	2202      	movs	r2, #2
 8001a36:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001a38:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <ui+0x904>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c');
 8001a3e:	2263      	movs	r2, #99	@ 0x63
 8001a40:	2162      	movs	r1, #98	@ 0x62
 8001a42:	200f      	movs	r0, #15
 8001a44:	f7ff f95e 	bl	8000d04 <send_to_screen>
					 }
				break;
 8001a48:	e102      	b.n	8001c50 <ui+0xa18>

				case 2:
					cursor_pos(1, 1);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff fabb 	bl	8000fc8 <cursor_pos>
					 write_to_screen("Here you set the");
 8001a52:	4842      	ldr	r0, [pc, #264]	@ (8001b5c <ui+0x924>)
 8001a54:	f7ff fa35 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f7ff fab4 	bl	8000fc8 <cursor_pos>
					 write_to_screen("max and min    >");
 8001a60:	483f      	ldr	r0, [pc, #252]	@ (8001b60 <ui+0x928>)
 8001a62:	f7ff fa2e 	bl	8000ec2 <write_to_screen>
				break;
 8001a66:	e0fd      	b.n	8001c64 <ui+0xa2c>

				case 3:
					cursor_pos(1, 1);
 8001a68:	2101      	movs	r1, #1
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff faac 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  of the well.  ");
 8001a70:	483c      	ldr	r0, [pc, #240]	@ (8001b64 <ui+0x92c>)
 8001a72:	f7ff fa26 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001a76:	2101      	movs	r1, #1
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f7ff faa5 	bl	8000fc8 <cursor_pos>
					 write_to_screen("                ");
 8001a7e:	483a      	ldr	r0, [pc, #232]	@ (8001b68 <ui+0x930>)
 8001a80:	f7ff fa1f 	bl	8000ec2 <write_to_screen>
				break;
 8001a84:	e0ee      	b.n	8001c64 <ui+0xa2c>

				case 4:
					cursor_pos(1, 1);
 8001a86:	2101      	movs	r1, #1
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff fa9d 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Max level well ");
 8001a8e:	4837      	ldr	r0, [pc, #220]	@ (8001b6c <ui+0x934>)
 8001a90:	f7ff fa17 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001a94:	2101      	movs	r1, #1
 8001a96:	2002      	movs	r0, #2
 8001a98:	f7ff fa96 	bl	8000fc8 <cursor_pos>
					 digit_to_screen(max_well_level);
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <ui+0x938>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fa2e 	bl	8000f04 <digit_to_screen>
					 write_to_screen(" cm             ");
 8001aa8:	4832      	ldr	r0, [pc, #200]	@ (8001b74 <ui+0x93c>)
 8001aaa:	f7ff fa0a 	bl	8000ec2 <write_to_screen>
					 if(select >= 2){
 8001aae:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <ui+0x918>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d90e      	bls.n	8001ad6 <ui+0x89e>
						 max_well_level++;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <ui+0x938>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <ui+0x938>)
 8001ac8:	801a      	strh	r2, [r3, #0]
						 select = 1;
 8001aca:	4b21      	ldr	r3, [pc, #132]	@ (8001b50 <ui+0x918>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <ui+0x904>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <ui+0x910>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	f040 80ba 	bne.w	8001c56 <ui+0xa1e>
						 max_well_level--;
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <ui+0x938>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <ui+0x938>)
 8001af2:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <ui+0x910>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <ui+0x904>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001b00:	e0a9      	b.n	8001c56 <ui+0xa1e>
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	f01b866e 	.word	0xf01b866e
 8001b0c:	400921f9 	.word	0x400921f9
 8001b10:	20000018 	.word	0x20000018
 8001b14:	08009fdc 	.word	0x08009fdc
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	20000294 	.word	0x20000294
 8001b20:	408f4000 	.word	0x408f4000
 8001b24:	20000010 	.word	0x20000010
 8001b28:	20000012 	.word	0x20000012
 8001b2c:	447a0000 	.word	0x447a0000
 8001b30:	0800a1d8 	.word	0x0800a1d8
 8001b34:	0800a1c0 	.word	0x0800a1c0
 8001b38:	0800a1ec 	.word	0x0800a1ec
 8001b3c:	20000299 	.word	0x20000299
 8001b40:	0800a134 	.word	0x0800a134
 8001b44:	0800a148 	.word	0x0800a148
 8001b48:	20000298 	.word	0x20000298
 8001b4c:	20000001 	.word	0x20000001
 8001b50:	20000002 	.word	0x20000002
 8001b54:	20000000 	.word	0x20000000
 8001b58:	0800a200 	.word	0x0800a200
 8001b5c:	0800a214 	.word	0x0800a214
 8001b60:	0800a228 	.word	0x0800a228
 8001b64:	0800a23c 	.word	0x0800a23c
 8001b68:	0800a250 	.word	0x0800a250
 8001b6c:	0800a264 	.word	0x0800a264
 8001b70:	20000004 	.word	0x20000004
 8001b74:	0800a1c4 	.word	0x0800a1c4

				case 5:
					cursor_pos(1, 1);
 8001b78:	2101      	movs	r1, #1
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff fa24 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Min level well ");
 8001b80:	489a      	ldr	r0, [pc, #616]	@ (8001dec <ui+0xbb4>)
 8001b82:	f7ff f99e 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff fa1d 	bl	8000fc8 <cursor_pos>
					 digit_to_screen(min_well_level);
 8001b8e:	4b98      	ldr	r3, [pc, #608]	@ (8001df0 <ui+0xbb8>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f9b5 	bl	8000f04 <digit_to_screen>
					 write_to_screen(" cm             ");
 8001b9a:	4896      	ldr	r0, [pc, #600]	@ (8001df4 <ui+0xbbc>)
 8001b9c:	f7ff f991 	bl	8000ec2 <write_to_screen>
					 if(select >= 2){
 8001ba0:	4b95      	ldr	r3, [pc, #596]	@ (8001df8 <ui+0xbc0>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d90e      	bls.n	8001bc8 <ui+0x990>
						 min_well_level++;
 8001baa:	4b91      	ldr	r3, [pc, #580]	@ (8001df0 <ui+0xbb8>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	4b8d      	ldr	r3, [pc, #564]	@ (8001df0 <ui+0xbb8>)
 8001bba:	801a      	strh	r2, [r3, #0]
						 select = 1;
 8001bbc:	4b8e      	ldr	r3, [pc, #568]	@ (8001df8 <ui+0xbc0>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001bc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001dfc <ui+0xbc4>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8001bc8:	4b8d      	ldr	r3, [pc, #564]	@ (8001e00 <ui+0xbc8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d144      	bne.n	8001c5c <ui+0xa24>
						 min_well_level--;
 8001bd2:	4b87      	ldr	r3, [pc, #540]	@ (8001df0 <ui+0xbb8>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	4b83      	ldr	r3, [pc, #524]	@ (8001df0 <ui+0xbb8>)
 8001be2:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8001be4:	4b86      	ldr	r3, [pc, #536]	@ (8001e00 <ui+0xbc8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001bea:	4b84      	ldr	r3, [pc, #528]	@ (8001dfc <ui+0xbc4>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001bf0:	e034      	b.n	8001c5c <ui+0xa24>

				case 6:
					cursor_pos(1, 1);
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7ff f9e7 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001bfa:	4882      	ldr	r0, [pc, #520]	@ (8001e04 <ui+0xbcc>)
 8001bfc:	f7ff f961 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001c00:	2101      	movs	r1, #1
 8001c02:	2002      	movs	r0, #2
 8001c04:	f7ff f9e0 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001c08:	487f      	ldr	r0, [pc, #508]	@ (8001e08 <ui+0xbd0>)
 8001c0a:	f7ff f95a 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e00 <ui+0xbc8>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d124      	bne.n	8001c62 <ui+0xa2a>
						 menu = 3;
 8001c18:	4b7c      	ldr	r3, [pc, #496]	@ (8001e0c <ui+0xbd4>)
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001c1e:	4b78      	ldr	r3, [pc, #480]	@ (8001e00 <ui+0xbc8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001c24:	4b74      	ldr	r3, [pc, #464]	@ (8001df8 <ui+0xbc0>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
						 page = 2;
 8001c2a:	4b79      	ldr	r3, [pc, #484]	@ (8001e10 <ui+0xbd8>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001c30:	4b72      	ldr	r3, [pc, #456]	@ (8001dfc <ui+0xbc4>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c');
 8001c36:	2263      	movs	r2, #99	@ 0x63
 8001c38:	2162      	movs	r1, #98	@ 0x62
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f7ff f862 	bl	8000d04 <send_to_screen>
					 }
				break;
 8001c40:	e00f      	b.n	8001c62 <ui+0xa2a>

				default:
					page = 2;
 8001c42:	4b73      	ldr	r3, [pc, #460]	@ (8001e10 <ui+0xbd8>)
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
					update = 1;
 8001c48:	4b6c      	ldr	r3, [pc, #432]	@ (8001dfc <ui+0xbc4>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
				break;
 8001c4e:	e009      	b.n	8001c64 <ui+0xa2c>
				break;
 8001c50:	bf00      	nop
 8001c52:	f000 bc51 	b.w	80024f8 <ui+0x12c0>
				break;
 8001c56:	bf00      	nop
 8001c58:	f000 bc4e 	b.w	80024f8 <ui+0x12c0>
				break;
 8001c5c:	bf00      	nop
 8001c5e:	f000 bc4b 	b.w	80024f8 <ui+0x12c0>
				break;
 8001c62:	bf00      	nop
		}
		break;
 8001c64:	f000 bc48 	b.w	80024f8 <ui+0x12c0>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 6: //limit level
			switch(page){
 8001c68:	4b69      	ldr	r3, [pc, #420]	@ (8001e10 <ui+0xbd8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	f200 815f 	bhi.w	8001f34 <ui+0xcfc>
 8001c76:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <ui+0xa44>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001c95 	.word	0x08001c95
 8001c80:	08001ce7 	.word	0x08001ce7
 8001c84:	08001d05 	.word	0x08001d05
 8001c88:	08001d23 	.word	0x08001d23
 8001c8c:	08001e35 	.word	0x08001e35
 8001c90:	08001ee5 	.word	0x08001ee5

				case 1:
					cursor_pos(1, 1);
 8001c94:	2101      	movs	r1, #1
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff f996 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001c9c:	4859      	ldr	r0, [pc, #356]	@ (8001e04 <ui+0xbcc>)
 8001c9e:	f7ff f910 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f7ff f98f 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001caa:	4857      	ldr	r0, [pc, #348]	@ (8001e08 <ui+0xbd0>)
 8001cac:	f7ff f909 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <ui+0xbc8>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	f040 8143 	bne.w	8001f42 <ui+0xd0a>
						 menu = 3;
 8001cbc:	4b53      	ldr	r3, [pc, #332]	@ (8001e0c <ui+0xbd4>)
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e00 <ui+0xbc8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <ui+0xbc0>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
						 page = 2;
 8001cce:	4b50      	ldr	r3, [pc, #320]	@ (8001e10 <ui+0xbd8>)
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001cd4:	4b49      	ldr	r3, [pc, #292]	@ (8001dfc <ui+0xbc4>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c');
 8001cda:	2263      	movs	r2, #99	@ 0x63
 8001cdc:	2162      	movs	r1, #98	@ 0x62
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f7ff f810 	bl	8000d04 <send_to_screen>
					 }
				break;
 8001ce4:	e12d      	b.n	8001f42 <ui+0xd0a>

				case 2:
					cursor_pos(1, 1);
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff f96d 	bl	8000fc8 <cursor_pos>
					 write_to_screen("Here you set the");
 8001cee:	4849      	ldr	r0, [pc, #292]	@ (8001e14 <ui+0xbdc>)
 8001cf0:	f7ff f8e7 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f7ff f966 	bl	8000fc8 <cursor_pos>
					 write_to_screen("max and min    >");
 8001cfc:	4846      	ldr	r0, [pc, #280]	@ (8001e18 <ui+0xbe0>)
 8001cfe:	f7ff f8e0 	bl	8000ec2 <write_to_screen>
				break;
 8001d02:	e125      	b.n	8001f50 <ui+0xd18>

				case 3:
					cursor_pos(1, 1);
 8001d04:	2101      	movs	r1, #1
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff f95e 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" for the water  ");
 8001d0c:	4843      	ldr	r0, [pc, #268]	@ (8001e1c <ui+0xbe4>)
 8001d0e:	f7ff f8d8 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7ff f957 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" level you want.");
 8001d1a:	4841      	ldr	r0, [pc, #260]	@ (8001e20 <ui+0xbe8>)
 8001d1c:	f7ff f8d1 	bl	8000ec2 <write_to_screen>
				break;
 8001d20:	e116      	b.n	8001f50 <ui+0xd18>

				case 4:
					cursor_pos(1, 1);
 8001d22:	2101      	movs	r1, #1
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff f94f 	bl	8000fc8 <cursor_pos>
					 write_to_screen("   Max limit    ");
 8001d2a:	483e      	ldr	r0, [pc, #248]	@ (8001e24 <ui+0xbec>)
 8001d2c:	f7ff f8c9 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001d30:	2101      	movs	r1, #1
 8001d32:	2002      	movs	r0, #2
 8001d34:	f7ff f948 	bl	8000fc8 <cursor_pos>
					 digit_to_screen(max_level);
 8001d38:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <ui+0xbf0>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f8e0 	bl	8000f04 <digit_to_screen>
					 write_to_screen(" cm             ");
 8001d44:	482b      	ldr	r0, [pc, #172]	@ (8001df4 <ui+0xbbc>)
 8001d46:	f7ff f8bc 	bl	8000ec2 <write_to_screen>
					 if(select >= 2){
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <ui+0xbc0>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d921      	bls.n	8001d98 <ui+0xb60>
						 max_level++;
 8001d54:	4b34      	ldr	r3, [pc, #208]	@ (8001e28 <ui+0xbf0>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <ui+0xbf0>)
 8001d64:	801a      	strh	r2, [r3, #0]

						 if(max_level >= max_well_level - 5){
 8001d66:	4b30      	ldr	r3, [pc, #192]	@ (8001e28 <ui+0xbf0>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <ui+0xbf4>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	3b05      	subs	r3, #5
 8001d76:	429a      	cmp	r2, r3
 8001d78:	db08      	blt.n	8001d8c <ui+0xb54>
							 max_level = max_well_level - 5;
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e2c <ui+0xbf4>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b05      	subs	r3, #5
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <ui+0xbf0>)
 8001d8a:	801a      	strh	r2, [r3, #0]
						 }

						 select = 1;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <ui+0xbc0>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <ui+0xbc4>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <ui+0xbc8>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	f040 80d1 	bne.w	8001f46 <ui+0xd0e>
						 max_level--;
 8001da4:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <ui+0xbf0>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <ui+0xbf0>)
 8001db4:	801a      	strh	r2, [r3, #0]

						 if(max_level <= min_level + 10){
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <ui+0xbf0>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <ui+0xbf8>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	330a      	adds	r3, #10
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dc08      	bgt.n	8001ddc <ui+0xba4>
							 max_level = min_level + 10;
 8001dca:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <ui+0xbf8>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	330a      	adds	r3, #10
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <ui+0xbf0>)
 8001dda:	801a      	strh	r2, [r3, #0]
						 }

						 conf = 0;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <ui+0xbc8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <ui+0xbc4>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001de8:	e0ad      	b.n	8001f46 <ui+0xd0e>
 8001dea:	bf00      	nop
 8001dec:	0800a278 	.word	0x0800a278
 8001df0:	2000029a 	.word	0x2000029a
 8001df4:	0800a1c4 	.word	0x0800a1c4
 8001df8:	20000002 	.word	0x20000002
 8001dfc:	20000299 	.word	0x20000299
 8001e00:	20000298 	.word	0x20000298
 8001e04:	0800a134 	.word	0x0800a134
 8001e08:	0800a200 	.word	0x0800a200
 8001e0c:	20000001 	.word	0x20000001
 8001e10:	20000000 	.word	0x20000000
 8001e14:	0800a214 	.word	0x0800a214
 8001e18:	0800a228 	.word	0x0800a228
 8001e1c:	0800a28c 	.word	0x0800a28c
 8001e20:	0800a2a0 	.word	0x0800a2a0
 8001e24:	0800a2b4 	.word	0x0800a2b4
 8001e28:	20000006 	.word	0x20000006
 8001e2c:	20000004 	.word	0x20000004
 8001e30:	20000008 	.word	0x20000008

				case 5:
					cursor_pos(1, 1);
 8001e34:	2101      	movs	r1, #1
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff f8c6 	bl	8000fc8 <cursor_pos>
					 write_to_screen("   Min limit    ");
 8001e3c:	48a9      	ldr	r0, [pc, #676]	@ (80020e4 <ui+0xeac>)
 8001e3e:	f7ff f840 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001e42:	2101      	movs	r1, #1
 8001e44:	2002      	movs	r0, #2
 8001e46:	f7ff f8bf 	bl	8000fc8 <cursor_pos>
					 digit_to_screen(min_level);
 8001e4a:	4ba7      	ldr	r3, [pc, #668]	@ (80020e8 <ui+0xeb0>)
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f857 	bl	8000f04 <digit_to_screen>
					 write_to_screen(" cm             ");
 8001e56:	48a5      	ldr	r0, [pc, #660]	@ (80020ec <ui+0xeb4>)
 8001e58:	f7ff f833 	bl	8000ec2 <write_to_screen>
					 if(select >= 2){
 8001e5c:	4ba4      	ldr	r3, [pc, #656]	@ (80020f0 <ui+0xeb8>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d921      	bls.n	8001eaa <ui+0xc72>
						 min_level++;
 8001e66:	4ba0      	ldr	r3, [pc, #640]	@ (80020e8 <ui+0xeb0>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	4b9c      	ldr	r3, [pc, #624]	@ (80020e8 <ui+0xeb0>)
 8001e76:	801a      	strh	r2, [r3, #0]

						 if(min_level >= max_level - 10){
 8001e78:	4b9b      	ldr	r3, [pc, #620]	@ (80020e8 <ui+0xeb0>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b9c      	ldr	r3, [pc, #624]	@ (80020f4 <ui+0xebc>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	3b0a      	subs	r3, #10
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	db08      	blt.n	8001e9e <ui+0xc66>
							 min_level = max_level - 10;
 8001e8c:	4b99      	ldr	r3, [pc, #612]	@ (80020f4 <ui+0xebc>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b0a      	subs	r3, #10
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	4b93      	ldr	r3, [pc, #588]	@ (80020e8 <ui+0xeb0>)
 8001e9c:	801a      	strh	r2, [r3, #0]
						 }

						 select = 1;
 8001e9e:	4b94      	ldr	r3, [pc, #592]	@ (80020f0 <ui+0xeb8>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001ea4:	4b94      	ldr	r3, [pc, #592]	@ (80020f8 <ui+0xec0>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8001eaa:	4b94      	ldr	r3, [pc, #592]	@ (80020fc <ui+0xec4>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d14a      	bne.n	8001f4a <ui+0xd12>
						 min_level--;
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80020e8 <ui+0xeb0>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	4b89      	ldr	r3, [pc, #548]	@ (80020e8 <ui+0xeb0>)
 8001ec4:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8001ec6:	4b8d      	ldr	r3, [pc, #564]	@ (80020fc <ui+0xec4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001ecc:	4b8a      	ldr	r3, [pc, #552]	@ (80020f8 <ui+0xec0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]

						 if(min_level <= 5){
 8001ed2:	4b85      	ldr	r3, [pc, #532]	@ (80020e8 <ui+0xeb0>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	dc36      	bgt.n	8001f4a <ui+0xd12>
							 min_level = 5;
 8001edc:	4b82      	ldr	r3, [pc, #520]	@ (80020e8 <ui+0xeb0>)
 8001ede:	2205      	movs	r2, #5
 8001ee0:	801a      	strh	r2, [r3, #0]
						 }
					 }
				break;
 8001ee2:	e032      	b.n	8001f4a <ui+0xd12>

				case 6:
					cursor_pos(1, 1);
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff f86e 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001eec:	4884      	ldr	r0, [pc, #528]	@ (8002100 <ui+0xec8>)
 8001eee:	f7fe ffe8 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff f867 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001efa:	4882      	ldr	r0, [pc, #520]	@ (8002104 <ui+0xecc>)
 8001efc:	f7fe ffe1 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001f00:	4b7e      	ldr	r3, [pc, #504]	@ (80020fc <ui+0xec4>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d121      	bne.n	8001f4e <ui+0xd16>
						 menu = 3;
 8001f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002108 <ui+0xed0>)
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001f10:	4b7a      	ldr	r3, [pc, #488]	@ (80020fc <ui+0xec4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001f16:	4b76      	ldr	r3, [pc, #472]	@ (80020f0 <ui+0xeb8>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
						 page = 2;
 8001f1c:	4b7b      	ldr	r3, [pc, #492]	@ (800210c <ui+0xed4>)
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001f22:	4b75      	ldr	r3, [pc, #468]	@ (80020f8 <ui+0xec0>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
						 send_to_screen(0b00001111, 'b', 'c');
 8001f28:	2263      	movs	r2, #99	@ 0x63
 8001f2a:	2162      	movs	r1, #98	@ 0x62
 8001f2c:	200f      	movs	r0, #15
 8001f2e:	f7fe fee9 	bl	8000d04 <send_to_screen>
					 }
				break;
 8001f32:	e00c      	b.n	8001f4e <ui+0xd16>

				default:
					page = 2;
 8001f34:	4b75      	ldr	r3, [pc, #468]	@ (800210c <ui+0xed4>)
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
					update = 1;
 8001f3a:	4b6f      	ldr	r3, [pc, #444]	@ (80020f8 <ui+0xec0>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
				break;
 8001f40:	e006      	b.n	8001f50 <ui+0xd18>
				break;
 8001f42:	bf00      	nop
 8001f44:	e2d8      	b.n	80024f8 <ui+0x12c0>
				break;
 8001f46:	bf00      	nop
 8001f48:	e2d6      	b.n	80024f8 <ui+0x12c0>
				break;
 8001f4a:	bf00      	nop
 8001f4c:	e2d4      	b.n	80024f8 <ui+0x12c0>
				break;
 8001f4e:	bf00      	nop
		}
		break;
 8001f50:	e2d2      	b.n	80024f8 <ui+0x12c0>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
		case 7: //form selector
			switch(page){
 8001f52:	4b6e      	ldr	r3, [pc, #440]	@ (800210c <ui+0xed4>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	f200 8111 	bhi.w	8002182 <ui+0xf4a>
 8001f60:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <ui+0xd30>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f7d 	.word	0x08001f7d
 8001f6c:	08001fc5 	.word	0x08001fc5
 8001f70:	08001fe3 	.word	0x08001fe3
 8001f74:	08002001 	.word	0x08002001
 8001f78:	0800213d 	.word	0x0800213d

				case 1:
					cursor_pos(1, 1);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7ff f822 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001f84:	485e      	ldr	r0, [pc, #376]	@ (8002100 <ui+0xec8>)
 8001f86:	f7fe ff9c 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	f7ff f81b 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001f92:	485c      	ldr	r0, [pc, #368]	@ (8002104 <ui+0xecc>)
 8001f94:	f7fe ff95 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001f98:	4b58      	ldr	r3, [pc, #352]	@ (80020fc <ui+0xec4>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	f040 80f6 	bne.w	8002190 <ui+0xf58>
						 menu = 3;
 8001fa4:	4b58      	ldr	r3, [pc, #352]	@ (8002108 <ui+0xed0>)
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001faa:	4b54      	ldr	r3, [pc, #336]	@ (80020fc <ui+0xec4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80020f0 <ui+0xeb8>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
						 page = 3;
 8001fb6:	4b55      	ldr	r3, [pc, #340]	@ (800210c <ui+0xed4>)
 8001fb8:	2203      	movs	r2, #3
 8001fba:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001fbc:	4b4e      	ldr	r3, [pc, #312]	@ (80020f8 <ui+0xec0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001fc2:	e0e5      	b.n	8002190 <ui+0xf58>

				case 2:
					 cursor_pos(1, 1);
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7fe fffe 	bl	8000fc8 <cursor_pos>
					 write_to_screen("Here you select ");
 8001fcc:	4850      	ldr	r0, [pc, #320]	@ (8002110 <ui+0xed8>)
 8001fce:	f7fe ff78 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	f7fe fff7 	bl	8000fc8 <cursor_pos>
					 write_to_screen("the form off   >");
 8001fda:	484e      	ldr	r0, [pc, #312]	@ (8002114 <ui+0xedc>)
 8001fdc:	f7fe ff71 	bl	8000ec2 <write_to_screen>
				break;
 8001fe0:	e0d9      	b.n	8002196 <ui+0xf5e>

				case 3:
					 cursor_pos(1, 1);
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7fe ffef 	bl	8000fc8 <cursor_pos>
					 write_to_screen("   the well.    ");
 8001fea:	484b      	ldr	r0, [pc, #300]	@ (8002118 <ui+0xee0>)
 8001fec:	f7fe ff69 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f7fe ffe8 	bl	8000fc8 <cursor_pos>
					 write_to_screen("                ");
 8001ff8:	4848      	ldr	r0, [pc, #288]	@ (800211c <ui+0xee4>)
 8001ffa:	f7fe ff62 	bl	8000ec2 <write_to_screen>
				break;
 8001ffe:	e0ca      	b.n	8002196 <ui+0xf5e>

				case 4:
					 cursor_pos(1, 1);
 8002000:	2101      	movs	r1, #1
 8002002:	2001      	movs	r0, #1
 8002004:	f7fe ffe0 	bl	8000fc8 <cursor_pos>

					 if(strcmp(form, "cy") == 0){
 8002008:	4b45      	ldr	r3, [pc, #276]	@ (8002120 <ui+0xee8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4945      	ldr	r1, [pc, #276]	@ (8002124 <ui+0xeec>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe f8de 	bl	80001d0 <strcmp>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d108      	bne.n	800202c <ui+0xdf4>
						 write_to_screen("   ");
 800201a:	4843      	ldr	r0, [pc, #268]	@ (8002128 <ui+0xef0>)
 800201c:	f7fe ff51 	bl	8000ec2 <write_to_screen>
						 send_to_screen(0b11111111 ,'b', 'd');
 8002020:	2264      	movs	r2, #100	@ 0x64
 8002022:	2162      	movs	r1, #98	@ 0x62
 8002024:	20ff      	movs	r0, #255	@ 0xff
 8002026:	f7fe fe6d 	bl	8000d04 <send_to_screen>
 800202a:	e002      	b.n	8002032 <ui+0xdfa>
					 }
					 else{
						 write_to_screen("   O");
 800202c:	483f      	ldr	r0, [pc, #252]	@ (800212c <ui+0xef4>)
 800202e:	f7fe ff48 	bl	8000ec2 <write_to_screen>
					 }

					 write_to_screen(" cylinder       ");
 8002032:	483f      	ldr	r0, [pc, #252]	@ (8002130 <ui+0xef8>)
 8002034:	f7fe ff45 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8002038:	2101      	movs	r1, #1
 800203a:	2002      	movs	r0, #2
 800203c:	f7fe ffc4 	bl	8000fc8 <cursor_pos>

					 if(strcmp(form, "cu") == 0){
 8002040:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <ui+0xee8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	493b      	ldr	r1, [pc, #236]	@ (8002134 <ui+0xefc>)
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe f8c2 	bl	80001d0 <strcmp>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d108      	bne.n	8002064 <ui+0xe2c>
						 write_to_screen("   ");
 8002052:	4835      	ldr	r0, [pc, #212]	@ (8002128 <ui+0xef0>)
 8002054:	f7fe ff35 	bl	8000ec2 <write_to_screen>
						 send_to_screen(0b11111111 ,'b', 'd');
 8002058:	2264      	movs	r2, #100	@ 0x64
 800205a:	2162      	movs	r1, #98	@ 0x62
 800205c:	20ff      	movs	r0, #255	@ 0xff
 800205e:	f7fe fe51 	bl	8000d04 <send_to_screen>
 8002062:	e002      	b.n	800206a <ui+0xe32>
					 }
					 else{
						 write_to_screen("   O");
 8002064:	4831      	ldr	r0, [pc, #196]	@ (800212c <ui+0xef4>)
 8002066:	f7fe ff2c 	bl	8000ec2 <write_to_screen>
					 }

					 write_to_screen(" cuboid         ");
 800206a:	4833      	ldr	r0, [pc, #204]	@ (8002138 <ui+0xf00>)
 800206c:	f7fe ff29 	bl	8000ec2 <write_to_screen>

					 switch(select){
 8002070:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <ui+0xeb8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d002      	beq.n	8002080 <ui+0xe48>
 800207a:	2b02      	cmp	r3, #2
 800207c:	d013      	beq.n	80020a6 <ui+0xe6e>
 800207e:	e025      	b.n	80020cc <ui+0xe94>
						case 1:
							 cursor_pos(1, 3);
 8002080:	2103      	movs	r1, #3
 8002082:	2001      	movs	r0, #1
 8002084:	f7fe ffa0 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 8002088:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <ui+0xec4>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d123      	bne.n	80020da <ui+0xea2>
								 conf = 0;
 8002092:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <ui+0xec4>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
								 form = "cy";
 8002098:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <ui+0xee8>)
 800209a:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <ui+0xeec>)
 800209c:	601a      	str	r2, [r3, #0]
								 update = 1;
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <ui+0xec0>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
							 }
						break;
 80020a4:	e019      	b.n	80020da <ui+0xea2>

						case 2:
							 cursor_pos(2, 3);
 80020a6:	2103      	movs	r1, #3
 80020a8:	2002      	movs	r0, #2
 80020aa:	f7fe ff8d 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <ui+0xec4>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d112      	bne.n	80020de <ui+0xea6>
								 conf = 0;
 80020b8:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <ui+0xec4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
								 form = "cu";
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <ui+0xee8>)
 80020c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002134 <ui+0xefc>)
 80020c2:	601a      	str	r2, [r3, #0]
								 update = 1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <ui+0xec0>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
						 }
						 break;
 80020ca:	e008      	b.n	80020de <ui+0xea6>

						default:
							select = 1;
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <ui+0xeb8>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
							update = 1;
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <ui+0xec0>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
						break;
 80020d8:	e002      	b.n	80020e0 <ui+0xea8>
						break;
 80020da:	bf00      	nop
 80020dc:	e05b      	b.n	8002196 <ui+0xf5e>
						 break;
 80020de:	bf00      	nop
					 }
				break;
 80020e0:	e059      	b.n	8002196 <ui+0xf5e>
 80020e2:	bf00      	nop
 80020e4:	0800a2c8 	.word	0x0800a2c8
 80020e8:	20000008 	.word	0x20000008
 80020ec:	0800a1c4 	.word	0x0800a1c4
 80020f0:	20000002 	.word	0x20000002
 80020f4:	20000006 	.word	0x20000006
 80020f8:	20000299 	.word	0x20000299
 80020fc:	20000298 	.word	0x20000298
 8002100:	0800a134 	.word	0x0800a134
 8002104:	0800a200 	.word	0x0800a200
 8002108:	20000001 	.word	0x20000001
 800210c:	20000000 	.word	0x20000000
 8002110:	0800a2dc 	.word	0x0800a2dc
 8002114:	0800a2f0 	.word	0x0800a2f0
 8002118:	0800a304 	.word	0x0800a304
 800211c:	0800a250 	.word	0x0800a250
 8002120:	20000018 	.word	0x20000018
 8002124:	08009fdc 	.word	0x08009fdc
 8002128:	0800a318 	.word	0x0800a318
 800212c:	0800a31c 	.word	0x0800a31c
 8002130:	0800a324 	.word	0x0800a324
 8002134:	0800a338 	.word	0x0800a338
 8002138:	0800a33c 	.word	0x0800a33c

				case 5:
					cursor_pos(1, 1);
 800213c:	2101      	movs	r1, #1
 800213e:	2001      	movs	r0, #1
 8002140:	f7fe ff42 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8002144:	489b      	ldr	r0, [pc, #620]	@ (80023b4 <ui+0x117c>)
 8002146:	f7fe febc 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 800214a:	2101      	movs	r1, #1
 800214c:	2002      	movs	r0, #2
 800214e:	f7fe ff3b 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8002152:	4899      	ldr	r0, [pc, #612]	@ (80023b8 <ui+0x1180>)
 8002154:	f7fe feb5 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8002158:	4b98      	ldr	r3, [pc, #608]	@ (80023bc <ui+0x1184>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d118      	bne.n	8002194 <ui+0xf5c>
						 menu = 3;
 8002162:	4b97      	ldr	r3, [pc, #604]	@ (80023c0 <ui+0x1188>)
 8002164:	2203      	movs	r2, #3
 8002166:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8002168:	4b94      	ldr	r3, [pc, #592]	@ (80023bc <ui+0x1184>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
						 select = 1;
 800216e:	4b95      	ldr	r3, [pc, #596]	@ (80023c4 <ui+0x118c>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
						 page = 3;
 8002174:	4b94      	ldr	r3, [pc, #592]	@ (80023c8 <ui+0x1190>)
 8002176:	2203      	movs	r2, #3
 8002178:	701a      	strb	r2, [r3, #0]
						 update = 1;
 800217a:	4b94      	ldr	r3, [pc, #592]	@ (80023cc <ui+0x1194>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8002180:	e008      	b.n	8002194 <ui+0xf5c>

				default:
					page = 2;
 8002182:	4b91      	ldr	r3, [pc, #580]	@ (80023c8 <ui+0x1190>)
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
					update = 1;
 8002188:	4b90      	ldr	r3, [pc, #576]	@ (80023cc <ui+0x1194>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
				break;
 800218e:	e002      	b.n	8002196 <ui+0xf5e>
				break;
 8002190:	bf00      	nop
 8002192:	e1b1      	b.n	80024f8 <ui+0x12c0>
				break;
 8002194:	bf00      	nop
			}
			break;
 8002196:	e1af      	b.n	80024f8 <ui+0x12c0>
//---------------------------------------------------------------------------------------------------------------------------------------------------------
			case 8: //dimensions selector
				switch(page){
 8002198:	4b8b      	ldr	r3, [pc, #556]	@ (80023c8 <ui+0x1190>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	f200 8196 	bhi.w	80024d2 <ui+0x129a>
 80021a6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ac <ui+0xf74>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	080021c5 	.word	0x080021c5
 80021b0:	0800220d 	.word	0x0800220d
 80021b4:	0800222b 	.word	0x0800222b
 80021b8:	08002249 	.word	0x08002249
 80021bc:	0800235b 	.word	0x0800235b
 80021c0:	08002473 	.word	0x08002473

					case 1:
						cursor_pos(1, 1);
 80021c4:	2101      	movs	r1, #1
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7fe fefe 	bl	8000fc8 <cursor_pos>
						 write_to_screen(" Go back to the ");
 80021cc:	4879      	ldr	r0, [pc, #484]	@ (80023b4 <ui+0x117c>)
 80021ce:	f7fe fe78 	bl	8000ec2 <write_to_screen>
						 cursor_pos(2, 1);
 80021d2:	2101      	movs	r1, #1
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7fe fef7 	bl	8000fc8 <cursor_pos>
						 write_to_screen("setting selector");
 80021da:	4877      	ldr	r0, [pc, #476]	@ (80023b8 <ui+0x1180>)
 80021dc:	f7fe fe71 	bl	8000ec2 <write_to_screen>
						 if(conf == 1){
 80021e0:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <ui+0x1184>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	f040 817a 	bne.w	80024e0 <ui+0x12a8>
							 menu = 3;
 80021ec:	4b74      	ldr	r3, [pc, #464]	@ (80023c0 <ui+0x1188>)
 80021ee:	2203      	movs	r2, #3
 80021f0:	701a      	strb	r2, [r3, #0]
							 conf = 0;
 80021f2:	4b72      	ldr	r3, [pc, #456]	@ (80023bc <ui+0x1184>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
							 select = 1;
 80021f8:	4b72      	ldr	r3, [pc, #456]	@ (80023c4 <ui+0x118c>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
							 page = 3;
 80021fe:	4b72      	ldr	r3, [pc, #456]	@ (80023c8 <ui+0x1190>)
 8002200:	2203      	movs	r2, #3
 8002202:	701a      	strb	r2, [r3, #0]
							 update = 1;
 8002204:	4b71      	ldr	r3, [pc, #452]	@ (80023cc <ui+0x1194>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
						 }
					break;
 800220a:	e169      	b.n	80024e0 <ui+0x12a8>

					case 2:
						 cursor_pos(1, 1);
 800220c:	2101      	movs	r1, #1
 800220e:	2001      	movs	r0, #1
 8002210:	f7fe feda 	bl	8000fc8 <cursor_pos>
						 write_to_screen("Here you give   ");
 8002214:	486e      	ldr	r0, [pc, #440]	@ (80023d0 <ui+0x1198>)
 8002216:	f7fe fe54 	bl	8000ec2 <write_to_screen>
						 cursor_pos(2, 1);
 800221a:	2101      	movs	r1, #1
 800221c:	2002      	movs	r0, #2
 800221e:	f7fe fed3 	bl	8000fc8 <cursor_pos>
						 write_to_screen("the dimensions >");
 8002222:	486c      	ldr	r0, [pc, #432]	@ (80023d4 <ui+0x119c>)
 8002224:	f7fe fe4d 	bl	8000ec2 <write_to_screen>
					break;
 8002228:	e161      	b.n	80024ee <ui+0x12b6>

					case 3:
						 cursor_pos(1, 1);
 800222a:	2101      	movs	r1, #1
 800222c:	2001      	movs	r0, #1
 800222e:	f7fe fecb 	bl	8000fc8 <cursor_pos>
						 write_to_screen(" off the well.  ");
 8002232:	4869      	ldr	r0, [pc, #420]	@ (80023d8 <ui+0x11a0>)
 8002234:	f7fe fe45 	bl	8000ec2 <write_to_screen>
						 cursor_pos(2, 1);
 8002238:	2101      	movs	r1, #1
 800223a:	2002      	movs	r0, #2
 800223c:	f7fe fec4 	bl	8000fc8 <cursor_pos>
						 write_to_screen("                ");
 8002240:	4866      	ldr	r0, [pc, #408]	@ (80023dc <ui+0x11a4>)
 8002242:	f7fe fe3e 	bl	8000ec2 <write_to_screen>
					break;
 8002246:	e152      	b.n	80024ee <ui+0x12b6>

					case 4:
						if (strcmp(form, "cy") == 0) {
 8002248:	4b65      	ldr	r3, [pc, #404]	@ (80023e0 <ui+0x11a8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4965      	ldr	r1, [pc, #404]	@ (80023e4 <ui+0x11ac>)
 800224e:	4618      	mov	r0, r3
 8002250:	f7fd ffbe 	bl	80001d0 <strcmp>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d145      	bne.n	80022e6 <ui+0x10ae>
							cursor_pos(1, 1);
 800225a:	2101      	movs	r1, #1
 800225c:	2001      	movs	r0, #1
 800225e:	f7fe feb3 	bl	8000fc8 <cursor_pos>
							write_to_screen("   diameter:    ");
 8002262:	4861      	ldr	r0, [pc, #388]	@ (80023e8 <ui+0x11b0>)
 8002264:	f7fe fe2d 	bl	8000ec2 <write_to_screen>
							cursor_pos(2, 1);
 8002268:	2101      	movs	r1, #1
 800226a:	2002      	movs	r0, #2
 800226c:	f7fe feac 	bl	8000fc8 <cursor_pos>
							write_to_screen("   ");
 8002270:	485e      	ldr	r0, [pc, #376]	@ (80023ec <ui+0x11b4>)
 8002272:	f7fe fe26 	bl	8000ec2 <write_to_screen>
							digit_to_screen(diameter);
 8002276:	4b5e      	ldr	r3, [pc, #376]	@ (80023f0 <ui+0x11b8>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002280:	ee17 0a90 	vmov	r0, s15
 8002284:	f7fe fe3e 	bl	8000f04 <digit_to_screen>
							write_to_screen(" cm             ");
 8002288:	485a      	ldr	r0, [pc, #360]	@ (80023f4 <ui+0x11bc>)
 800228a:	f7fe fe1a 	bl	8000ec2 <write_to_screen>
							 if(select >= 2){
 800228e:	4b4d      	ldr	r3, [pc, #308]	@ (80023c4 <ui+0x118c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d90f      	bls.n	80022b8 <ui+0x1080>
								 diameter++;
 8002298:	4b55      	ldr	r3, [pc, #340]	@ (80023f0 <ui+0x11b8>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022a6:	4b52      	ldr	r3, [pc, #328]	@ (80023f0 <ui+0x11b8>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]
								 select = 1;
 80022ac:	4b45      	ldr	r3, [pc, #276]	@ (80023c4 <ui+0x118c>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80022b2:	4b46      	ldr	r3, [pc, #280]	@ (80023cc <ui+0x1194>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
							 }
							 if(conf == 1){
 80022b8:	4b40      	ldr	r3, [pc, #256]	@ (80023bc <ui+0x1184>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f040 8110 	bne.w	80024e4 <ui+0x12ac>
								 diameter--;
 80022c4:	4b4a      	ldr	r3, [pc, #296]	@ (80023f0 <ui+0x11b8>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022d2:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <ui+0x11b8>)
 80022d4:	edc3 7a00 	vstr	s15, [r3]
								 conf = 0;
 80022d8:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <ui+0x1184>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <ui+0x1194>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
								 X--;
								 conf = 0;
								 update = 1;
							 }
						}
					break;
 80022e4:	e0fe      	b.n	80024e4 <ui+0x12ac>
							cursor_pos(1, 1);
 80022e6:	2101      	movs	r1, #1
 80022e8:	2001      	movs	r0, #1
 80022ea:	f7fe fe6d 	bl	8000fc8 <cursor_pos>
							write_to_screen("X:              ");
 80022ee:	4842      	ldr	r0, [pc, #264]	@ (80023f8 <ui+0x11c0>)
 80022f0:	f7fe fde7 	bl	8000ec2 <write_to_screen>
							cursor_pos(2, 1);
 80022f4:	2101      	movs	r1, #1
 80022f6:	2002      	movs	r0, #2
 80022f8:	f7fe fe66 	bl	8000fc8 <cursor_pos>
							digit_to_screen(X);
 80022fc:	4b3f      	ldr	r3, [pc, #252]	@ (80023fc <ui+0x11c4>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fdfe 	bl	8000f04 <digit_to_screen>
							write_to_screen(" cm             ");
 8002308:	483a      	ldr	r0, [pc, #232]	@ (80023f4 <ui+0x11bc>)
 800230a:	f7fe fdda 	bl	8000ec2 <write_to_screen>
							 if(select >= 2){
 800230e:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <ui+0x118c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d90c      	bls.n	8002332 <ui+0x10fa>
								 X++;
 8002318:	4b38      	ldr	r3, [pc, #224]	@ (80023fc <ui+0x11c4>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b36      	ldr	r3, [pc, #216]	@ (80023fc <ui+0x11c4>)
 8002324:	801a      	strh	r2, [r3, #0]
								 select = 1;
 8002326:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <ui+0x118c>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <ui+0x1194>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
							 if(conf == 1){
 8002332:	4b22      	ldr	r3, [pc, #136]	@ (80023bc <ui+0x1184>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	f040 80d3 	bne.w	80024e4 <ui+0x12ac>
								 X--;
 800233e:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <ui+0x11c4>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b2c      	ldr	r3, [pc, #176]	@ (80023fc <ui+0x11c4>)
 800234a:	801a      	strh	r2, [r3, #0]
								 conf = 0;
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <ui+0x1184>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002352:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <ui+0x1194>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
					break;
 8002358:	e0c4      	b.n	80024e4 <ui+0x12ac>

					case 5:
						if (strcmp(form, "cy") == 0) {
 800235a:	4b21      	ldr	r3, [pc, #132]	@ (80023e0 <ui+0x11a8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4921      	ldr	r1, [pc, #132]	@ (80023e4 <ui+0x11ac>)
 8002360:	4618      	mov	r0, r3
 8002362:	f7fd ff35 	bl	80001d0 <strcmp>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d149      	bne.n	8002400 <ui+0x11c8>
							 cursor_pos(1, 1);
 800236c:	2101      	movs	r1, #1
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe fe2a 	bl	8000fc8 <cursor_pos>
							 write_to_screen(" Go back to the ");
 8002374:	480f      	ldr	r0, [pc, #60]	@ (80023b4 <ui+0x117c>)
 8002376:	f7fe fda4 	bl	8000ec2 <write_to_screen>
							 cursor_pos(2, 1);
 800237a:	2101      	movs	r1, #1
 800237c:	2002      	movs	r0, #2
 800237e:	f7fe fe23 	bl	8000fc8 <cursor_pos>
							 write_to_screen("setting selector");
 8002382:	480d      	ldr	r0, [pc, #52]	@ (80023b8 <ui+0x1180>)
 8002384:	f7fe fd9d 	bl	8000ec2 <write_to_screen>
							 if(conf == 1){
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <ui+0x1184>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 80aa 	bne.w	80024e8 <ui+0x12b0>
								 menu = 3;
 8002394:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <ui+0x1188>)
 8002396:	2203      	movs	r2, #3
 8002398:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 800239a:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <ui+0x1184>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <ui+0x118c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
								 page = 3;
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <ui+0x1190>)
 80023a8:	2203      	movs	r2, #3
 80023aa:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80023ac:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <ui+0x1194>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
								 Y--;
								 conf = 0;
								 update = 1;
							 }
						}
					break;
 80023b2:	e099      	b.n	80024e8 <ui+0x12b0>
 80023b4:	0800a134 	.word	0x0800a134
 80023b8:	0800a200 	.word	0x0800a200
 80023bc:	20000298 	.word	0x20000298
 80023c0:	20000001 	.word	0x20000001
 80023c4:	20000002 	.word	0x20000002
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000299 	.word	0x20000299
 80023d0:	0800a350 	.word	0x0800a350
 80023d4:	0800a364 	.word	0x0800a364
 80023d8:	0800a378 	.word	0x0800a378
 80023dc:	0800a250 	.word	0x0800a250
 80023e0:	20000018 	.word	0x20000018
 80023e4:	08009fdc 	.word	0x08009fdc
 80023e8:	0800a38c 	.word	0x0800a38c
 80023ec:	0800a318 	.word	0x0800a318
 80023f0:	2000000c 	.word	0x2000000c
 80023f4:	0800a1c4 	.word	0x0800a1c4
 80023f8:	0800a3a0 	.word	0x0800a3a0
 80023fc:	20000010 	.word	0x20000010
							cursor_pos(1, 1);
 8002400:	2101      	movs	r1, #1
 8002402:	2001      	movs	r0, #1
 8002404:	f7fe fde0 	bl	8000fc8 <cursor_pos>
							write_to_screen("Y:              ");
 8002408:	483d      	ldr	r0, [pc, #244]	@ (8002500 <ui+0x12c8>)
 800240a:	f7fe fd5a 	bl	8000ec2 <write_to_screen>
							cursor_pos(2, 1);
 800240e:	2101      	movs	r1, #1
 8002410:	2002      	movs	r0, #2
 8002412:	f7fe fdd9 	bl	8000fc8 <cursor_pos>
							digit_to_screen(Y);
 8002416:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <ui+0x12cc>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fd71 	bl	8000f04 <digit_to_screen>
							write_to_screen(" cm             ");
 8002422:	4839      	ldr	r0, [pc, #228]	@ (8002508 <ui+0x12d0>)
 8002424:	f7fe fd4d 	bl	8000ec2 <write_to_screen>
							 if(select >= 2){
 8002428:	4b38      	ldr	r3, [pc, #224]	@ (800250c <ui+0x12d4>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d90c      	bls.n	800244c <ui+0x1214>
								 Y++;
 8002432:	4b34      	ldr	r3, [pc, #208]	@ (8002504 <ui+0x12cc>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <ui+0x12cc>)
 800243e:	801a      	strh	r2, [r3, #0]
								 select = 1;
 8002440:	4b32      	ldr	r3, [pc, #200]	@ (800250c <ui+0x12d4>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002446:	4b32      	ldr	r3, [pc, #200]	@ (8002510 <ui+0x12d8>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
							 if(conf == 1){
 800244c:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <ui+0x12dc>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d148      	bne.n	80024e8 <ui+0x12b0>
								 Y--;
 8002456:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <ui+0x12cc>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <ui+0x12cc>)
 8002462:	801a      	strh	r2, [r3, #0]
								 conf = 0;
 8002464:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <ui+0x12dc>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800246a:	4b29      	ldr	r3, [pc, #164]	@ (8002510 <ui+0x12d8>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
					break;
 8002470:	e03a      	b.n	80024e8 <ui+0x12b0>

					case 6:
						if (strcmp(form, "cy") == 0) {
 8002472:	4b29      	ldr	r3, [pc, #164]	@ (8002518 <ui+0x12e0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4929      	ldr	r1, [pc, #164]	@ (800251c <ui+0x12e4>)
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd fea9 	bl	80001d0 <strcmp>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <ui+0x1254>
							page = 5;
 8002484:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <ui+0x12e8>)
 8002486:	2205      	movs	r2, #5
 8002488:	701a      	strb	r2, [r3, #0]
								 select = 1;
								 page = 3;
								 update = 1;
							 }
						}
					break;
 800248a:	e02f      	b.n	80024ec <ui+0x12b4>
							 cursor_pos(1, 1);
 800248c:	2101      	movs	r1, #1
 800248e:	2001      	movs	r0, #1
 8002490:	f7fe fd9a 	bl	8000fc8 <cursor_pos>
							 write_to_screen(" Go back to the ");
 8002494:	4823      	ldr	r0, [pc, #140]	@ (8002524 <ui+0x12ec>)
 8002496:	f7fe fd14 	bl	8000ec2 <write_to_screen>
							 cursor_pos(2, 1);
 800249a:	2101      	movs	r1, #1
 800249c:	2002      	movs	r0, #2
 800249e:	f7fe fd93 	bl	8000fc8 <cursor_pos>
							 write_to_screen("setting selector");
 80024a2:	4821      	ldr	r0, [pc, #132]	@ (8002528 <ui+0x12f0>)
 80024a4:	f7fe fd0d 	bl	8000ec2 <write_to_screen>
							 if(conf == 1){
 80024a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <ui+0x12dc>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d11c      	bne.n	80024ec <ui+0x12b4>
								 menu = 3;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <ui+0x12f4>)
 80024b4:	2203      	movs	r2, #3
 80024b6:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80024b8:	4b16      	ldr	r3, [pc, #88]	@ (8002514 <ui+0x12dc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <ui+0x12d4>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
								 page = 3;
 80024c4:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <ui+0x12e8>)
 80024c6:	2203      	movs	r2, #3
 80024c8:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <ui+0x12d8>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
					break;
 80024d0:	e00c      	b.n	80024ec <ui+0x12b4>

					default:
						page = 2;
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <ui+0x12e8>)
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
						update = 1;
 80024d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <ui+0x12d8>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
					break;
 80024de:	e006      	b.n	80024ee <ui+0x12b6>
					break;
 80024e0:	bf00      	nop
 80024e2:	e009      	b.n	80024f8 <ui+0x12c0>
					break;
 80024e4:	bf00      	nop
 80024e6:	e007      	b.n	80024f8 <ui+0x12c0>
					break;
 80024e8:	bf00      	nop
 80024ea:	e005      	b.n	80024f8 <ui+0x12c0>
					break;
 80024ec:	bf00      	nop
				}
				break;
 80024ee:	e003      	b.n	80024f8 <ui+0x12c0>

		default:
			menu = 2;
 80024f0:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <ui+0x12f4>)
 80024f2:	2202      	movs	r2, #2
 80024f4:	701a      	strb	r2, [r3, #0]
		break;
 80024f6:	bf00      	nop
	}

}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002500:	0800a3b4 	.word	0x0800a3b4
 8002504:	20000012 	.word	0x20000012
 8002508:	0800a1c4 	.word	0x0800a1c4
 800250c:	20000002 	.word	0x20000002
 8002510:	20000299 	.word	0x20000299
 8002514:	20000298 	.word	0x20000298
 8002518:	20000018 	.word	0x20000018
 800251c:	08009fdc 	.word	0x08009fdc
 8002520:	20000000 	.word	0x20000000
 8002524:	0800a134 	.word	0x0800a134
 8002528:	0800a200 	.word	0x0800a200
 800252c:	20000001 	.word	0x20000001

08002530 <relay>:
 */

#ifndef INC_SSR_H_
#define INC_SSR_H_

void relay(const char *kraan){
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

    if (strcmp(kraan, "ON") == 0) {
 8002538:	4912      	ldr	r1, [pc, #72]	@ (8002584 <relay+0x54>)
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fd fe48 	bl	80001d0 <strcmp>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <relay+0x24>
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	2104      	movs	r1, #4
 800254a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800254e:	f001 fb61 	bl	8003c14 <HAL_GPIO_WritePin>
    }

    else{
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
    }
}
 8002552:	e013      	b.n	800257c <relay+0x4c>
    else if(strcmp(kraan, "OFF") == 0){
 8002554:	490c      	ldr	r1, [pc, #48]	@ (8002588 <relay+0x58>)
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fd fe3a 	bl	80001d0 <strcmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <relay+0x40>
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	2104      	movs	r1, #4
 8002566:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800256a:	f001 fb53 	bl	8003c14 <HAL_GPIO_WritePin>
}
 800256e:	e005      	b.n	800257c <relay+0x4c>
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	2104      	movs	r1, #4
 8002574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002578:	f001 fb4c 	bl	8003c14 <HAL_GPIO_WritePin>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	0800a3c8 	.word	0x0800a3c8
 8002588:	0800a3cc 	.word	0x0800a3cc

0800258c <Set_LED>:
uint8_t datasentflag = 0;

TIM_HandleTypeDef htim2;

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	b2d9      	uxtb	r1, r3
 800259e:	4a11      	ldr	r2, [pc, #68]	@ (80025e4 <Set_LED+0x58>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	b2d9      	uxtb	r1, r3
 80025aa:	4a0e      	ldr	r2, [pc, #56]	@ (80025e4 <Set_LED+0x58>)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	460a      	mov	r2, r1
 80025b4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	b2d9      	uxtb	r1, r3
 80025ba:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <Set_LED+0x58>)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	460a      	mov	r2, r1
 80025c4:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2d9      	uxtb	r1, r3
 80025ca:	4a06      	ldr	r2, [pc, #24]	@ (80025e4 <Set_LED+0x58>)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	460a      	mov	r2, r1
 80025d4:	70da      	strb	r2, [r3, #3]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	2000029c 	.word	0x2000029c

080025e8 <WS2812_Send>:

uint32_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e039      	b.n	800266c <WS2812_Send+0x84>
	{

		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80025f8:	4a30      	ldr	r2, [pc, #192]	@ (80026bc <WS2812_Send+0xd4>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	041a      	lsls	r2, r3, #16
 8002604:	492d      	ldr	r1, [pc, #180]	@ (80026bc <WS2812_Send+0xd4>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	789b      	ldrb	r3, [r3, #2]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	431a      	orrs	r2, r3
 8002612:	492a      	ldr	r1, [pc, #168]	@ (80026bc <WS2812_Send+0xd4>)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	78db      	ldrb	r3, [r3, #3]
 800261c:	4313      	orrs	r3, r2
 800261e:	607b      	str	r3, [r7, #4]

		for (int i=23; i>=0; i--)
 8002620:	2317      	movs	r3, #23
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e01c      	b.n	8002660 <WS2812_Send+0x78>
		{
			if (color&(1<<i))
 8002626:	2201      	movs	r2, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <WS2812_Send+0x62>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8002638:	4a21      	ldr	r2, [pc, #132]	@ (80026c0 <WS2812_Send+0xd8>)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	213c      	movs	r1, #60	@ 0x3c
 800263e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				indx++;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e007      	b.n	800265a <WS2812_Send+0x72>
			}
			else  // 1/3 of 90
			{
				pwmData[indx] = 30;
 800264a:	4a1d      	ldr	r2, [pc, #116]	@ (80026c0 <WS2812_Send+0xd8>)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	211e      	movs	r1, #30
 8002650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				indx++;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b01      	subs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	dadf      	bge.n	8002626 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	3301      	adds	r3, #1
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b85      	cmp	r3, #133	@ 0x85
 8002670:	ddc2      	ble.n	80025f8 <WS2812_Send+0x10>
			}
		}

	}

	for (int i=0; i<50; i++)
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	e00a      	b.n	800268e <WS2812_Send+0xa6>
	{
		pwmData[indx] = 0;
 8002678:	4a11      	ldr	r2, [pc, #68]	@ (80026c0 <WS2812_Send+0xd8>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2100      	movs	r1, #0
 800267e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3301      	adds	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b31      	cmp	r3, #49	@ 0x31
 8002692:	ddf1      	ble.n	8002678 <WS2812_Send+0x90>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2 , (uint32_t *)pwmData, indx);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	b29b      	uxth	r3, r3
 8002698:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <WS2812_Send+0xd8>)
 800269a:	2104      	movs	r1, #4
 800269c:	4809      	ldr	r0, [pc, #36]	@ (80026c4 <WS2812_Send+0xdc>)
 800269e:	f002 ff45 	bl	800552c <HAL_TIM_PWM_Start_DMA>

	while (!datasentflag){};
 80026a2:	bf00      	nop
 80026a4:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <WS2812_Send+0xe0>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0fb      	beq.n	80026a4 <WS2812_Send+0xbc>
		datasentflag = 0;
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <WS2812_Send+0xe0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000029c 	.word	0x2000029c
 80026c0:	20000504 	.word	0x20000504
 80026c4:	200004b8 	.word	0x200004b8
 80026c8:	200004b4 	.word	0x200004b4

080026cc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_2);
 80026d4:	2104      	movs	r1, #4
 80026d6:	4805      	ldr	r0, [pc, #20]	@ (80026ec <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80026d8:	f003 f926 	bl	8005928 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200004b8 	.word	0x200004b8
 80026f0:	200004b4 	.word	0x200004b4

080026f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026fa:	f000 fd91 	bl	8003220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fe:	f000 f93f 	bl	8002980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002702:	f000 fa5d 	bl	8002bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002706:	f000 fa3d 	bl	8002b84 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800270a:	f000 fa0b 	bl	8002b24 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800270e:	f000 f993 	bl	8002a38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  init_screen();
 8002712:	f7fe fbb4 	bl	8000e7e <init_screen>

  ui();
 8002716:	f7fe fd8f 	bl	8001238 <ui>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(update == 1){
 800271a:	4b8f      	ldr	r3, [pc, #572]	@ (8002958 <main+0x264>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d104      	bne.n	800272e <main+0x3a>
		update = 0;
 8002724:	4b8c      	ldr	r3, [pc, #560]	@ (8002958 <main+0x264>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
		ui();
 800272a:	f7fe fd85 	bl	8001238 <ui>
	}

	sendCommand(0x01, 0x03, 0x0004, 0x01);
 800272e:	2301      	movs	r3, #1
 8002730:	2204      	movs	r2, #4
 8002732:	2103      	movs	r1, #3
 8002734:	2001      	movs	r0, #1
 8002736:	f7fe fca5 	bl	8001084 <sendCommand>
	HAL_Delay(2);
 800273a:	2002      	movs	r0, #2
 800273c:	f000 fdd6 	bl	80032ec <HAL_Delay>
	readResponse(7);
 8002740:	2007      	movs	r0, #7
 8002742:	f7fe fcf3 	bl	800112c <readResponse>

	if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 0 && rs485 <= min_level){
 8002746:	2104      	movs	r1, #4
 8002748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800274c:	f001 fa4a 	bl	8003be4 <HAL_GPIO_ReadPin>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d112      	bne.n	800277c <main+0x88>
 8002756:	4b81      	ldr	r3, [pc, #516]	@ (800295c <main+0x268>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b21b      	sxth	r3, r3
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002764:	4b7e      	ldr	r3, [pc, #504]	@ (8002960 <main+0x26c>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	db03      	blt.n	800277c <main+0x88>
		relay("ON");
 8002774:	487b      	ldr	r0, [pc, #492]	@ (8002964 <main+0x270>)
 8002776:	f7ff fedb 	bl	8002530 <relay>
 800277a:	e034      	b.n	80027e6 <main+0xf2>
	}
	else if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 1 && rs485 <= max_level){
 800277c:	2104      	movs	r1, #4
 800277e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002782:	f001 fa2f 	bl	8003be4 <HAL_GPIO_ReadPin>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d10e      	bne.n	80027aa <main+0xb6>
 800278c:	4b76      	ldr	r3, [pc, #472]	@ (8002968 <main+0x274>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b21b      	sxth	r3, r3
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800279a:	4b71      	ldr	r3, [pc, #452]	@ (8002960 <main+0x26c>)
 800279c:	edd3 7a00 	vldr	s15, [r3]
 80027a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	da1d      	bge.n	80027e6 <main+0xf2>

	}
	else if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 1 && rs485 >= max_level){
 80027aa:	2104      	movs	r1, #4
 80027ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b0:	f001 fa18 	bl	8003be4 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d112      	bne.n	80027e0 <main+0xec>
 80027ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002968 <main+0x274>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b21b      	sxth	r3, r3
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c8:	4b65      	ldr	r3, [pc, #404]	@ (8002960 <main+0x26c>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	d803      	bhi.n	80027e0 <main+0xec>
		relay("OFF");
 80027d8:	4864      	ldr	r0, [pc, #400]	@ (800296c <main+0x278>)
 80027da:	f7ff fea9 	bl	8002530 <relay>
 80027de:	e002      	b.n	80027e6 <main+0xf2>
	}
	else{
		relay("OFF");
 80027e0:	4862      	ldr	r0, [pc, #392]	@ (800296c <main+0x278>)
 80027e2:	f7ff fea5 	bl	8002530 <relay>
	}

	float level_size = 133.0f  / (max_well_level - min_well_level);
 80027e6:	4b62      	ldr	r3, [pc, #392]	@ (8002970 <main+0x27c>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b61      	ldr	r3, [pc, #388]	@ (8002974 <main+0x280>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fe:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8002978 <main+0x284>
 8002802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002806:	edc7 7a04 	vstr	s15, [r7, #16]
	uint8_t min = (min_level * level_size);
 800280a:	4b54      	ldr	r3, [pc, #336]	@ (800295c <main+0x268>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b21b      	sxth	r3, r3
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002818:	edd7 7a04 	vldr	s15, [r7, #16]
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002824:	edc7 7a01 	vstr	s15, [r7, #4]
 8002828:	793b      	ldrb	r3, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
	uint8_t max = (max_level * level_size);
 800282c:	4b4e      	ldr	r3, [pc, #312]	@ (8002968 <main+0x274>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b21b      	sxth	r3, r3
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800283a:	edd7 7a04 	vldr	s15, [r7, #16]
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002846:	edc7 7a01 	vstr	s15, [r7, #4]
 800284a:	793b      	ldrb	r3, [r7, #4]
 800284c:	73bb      	strb	r3, [r7, #14]
	uint8_t min_well = (min_well_level * level_size);
 800284e:	4b49      	ldr	r3, [pc, #292]	@ (8002974 <main+0x280>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b21b      	sxth	r3, r3
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800285c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002868:	edc7 7a01 	vstr	s15, [r7, #4]
 800286c:	793b      	ldrb	r3, [r7, #4]
 800286e:	737b      	strb	r3, [r7, #13]
	uint8_t max_well = ((max_well_level - min_well_level) * level_size);
 8002870:	4b3f      	ldr	r3, [pc, #252]	@ (8002970 <main+0x27c>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b21b      	sxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <main+0x280>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b21b      	sxth	r3, r3
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002888:	edd7 7a04 	vldr	s15, [r7, #16]
 800288c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002894:	edc7 7a01 	vstr	s15, [r7, #4]
 8002898:	793b      	ldrb	r3, [r7, #4]
 800289a:	733b      	strb	r3, [r7, #12]
	uint8_t level = (rs485 * level_size);
 800289c:	4b30      	ldr	r3, [pc, #192]	@ (8002960 <main+0x26c>)
 800289e:	ed93 7a00 	vldr	s14, [r3]
 80028a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80028b2:	793b      	ldrb	r3, [r7, #4]
 80028b4:	72fb      	strb	r3, [r7, #11]

	for(uint8_t l = 0; l<=133; l++){
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
 80028ba:	e015      	b.n	80028e8 <main+0x1f4>
		if(l <= level){
 80028bc:	7dfa      	ldrb	r2, [r7, #23]
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d808      	bhi.n	80028d6 <main+0x1e2>
			Set_LED(l, 0, 0, brightness);
 80028c4:	7df8      	ldrb	r0, [r7, #23]
 80028c6:	4b2d      	ldr	r3, [pc, #180]	@ (800297c <main+0x288>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	f7ff fe5c 	bl	800258c <Set_LED>
 80028d4:	e005      	b.n	80028e2 <main+0x1ee>
		}
		else{
			Set_LED(l, 0, 0, 0);
 80028d6:	7df8      	ldrb	r0, [r7, #23]
 80028d8:	2300      	movs	r3, #0
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	f7ff fe55 	bl	800258c <Set_LED>
	for(uint8_t l = 0; l<=133; l++){
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	3301      	adds	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2b85      	cmp	r3, #133	@ 0x85
 80028ec:	d9e6      	bls.n	80028bc <main+0x1c8>
		}
	}

	Set_LED(min, (brightness + 100), 0, 0);
 80028ee:	7bf8      	ldrb	r0, [r7, #15]
 80028f0:	4b22      	ldr	r3, [pc, #136]	@ (800297c <main+0x288>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 80028fa:	2300      	movs	r3, #0
 80028fc:	2200      	movs	r2, #0
 80028fe:	f7ff fe45 	bl	800258c <Set_LED>
	Set_LED(max, 0, (brightness + 100), 0);
 8002902:	7bb8      	ldrb	r0, [r7, #14]
 8002904:	4b1d      	ldr	r3, [pc, #116]	@ (800297c <main+0x288>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800290e:	2300      	movs	r3, #0
 8002910:	2100      	movs	r1, #0
 8002912:	f7ff fe3b 	bl	800258c <Set_LED>
	Set_LED(min_well, (brightness - 5), (brightness - 5), (brightness - 5));
 8002916:	7b78      	ldrb	r0, [r7, #13]
 8002918:	4b18      	ldr	r3, [pc, #96]	@ (800297c <main+0x288>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	1f59      	subs	r1, r3, #5
 8002920:	4b16      	ldr	r3, [pc, #88]	@ (800297c <main+0x288>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	1f5a      	subs	r2, r3, #5
 8002928:	4b14      	ldr	r3, [pc, #80]	@ (800297c <main+0x288>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	3b05      	subs	r3, #5
 8002930:	f7ff fe2c 	bl	800258c <Set_LED>
	Set_LED(max_well, (brightness - 5), (brightness - 5), (brightness - 5));
 8002934:	7b38      	ldrb	r0, [r7, #12]
 8002936:	4b11      	ldr	r3, [pc, #68]	@ (800297c <main+0x288>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	1f59      	subs	r1, r3, #5
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <main+0x288>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	1f5a      	subs	r2, r3, #5
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <main+0x288>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3b05      	subs	r3, #5
 800294e:	f7ff fe1d 	bl	800258c <Set_LED>

	WS2812_Send();
 8002952:	f7ff fe49 	bl	80025e8 <WS2812_Send>
  {
 8002956:	e6e0      	b.n	800271a <main+0x26>
 8002958:	20000299 	.word	0x20000299
 800295c:	20000008 	.word	0x20000008
 8002960:	20000294 	.word	0x20000294
 8002964:	0800a3c8 	.word	0x0800a3c8
 8002968:	20000006 	.word	0x20000006
 800296c:	0800a3cc 	.word	0x0800a3cc
 8002970:	20000004 	.word	0x20000004
 8002974:	2000029a 	.word	0x2000029a
 8002978:	43050000 	.word	0x43050000
 800297c:	20000014 	.word	0x20000014

08002980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b09c      	sub	sp, #112	@ 0x70
 8002984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002986:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800298a:	2228      	movs	r2, #40	@ 0x28
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f005 fa43 	bl	8007e1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002994:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	2230      	movs	r2, #48	@ 0x30
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f005 fa35 	bl	8007e1a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 80029ba:	2303      	movs	r3, #3
 80029bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029be:	2301      	movs	r3, #1
 80029c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c2:	2302      	movs	r3, #2
 80029c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029cc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80029d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 f94c 	bl	8003c74 <HAL_RCC_OscConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029e2:	f000 f9d7 	bl	8002d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e6:	230f      	movs	r3, #15
 80029e8:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ea:	2302      	movs	r3, #2
 80029ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029fc:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a02:	2102      	movs	r1, #2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 f943 	bl	8004c90 <HAL_RCC_ClockConfig>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a10:	f000 f9c0 	bl	8002d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a14:	2301      	movs	r3, #1
 8002a16:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 fb4a 	bl	80050b8 <HAL_RCCEx_PeriphCLKConfig>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002a2a:	f000 f9b3 	bl	8002d94 <Error_Handler>
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3770      	adds	r7, #112	@ 0x70
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08e      	sub	sp, #56	@ 0x38
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a58:	463b      	mov	r3, r7
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	611a      	str	r2, [r3, #16]
 8002a66:	615a      	str	r2, [r3, #20]
 8002a68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002a6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a72:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a78:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8002a7e:	4b28      	ldr	r3, [pc, #160]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002a80:	2259      	movs	r2, #89	@ 0x59
 8002a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a84:	4b26      	ldr	r3, [pc, #152]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8a:	4b25      	ldr	r3, [pc, #148]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a90:	4823      	ldr	r0, [pc, #140]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002a92:	f002 fc93 	bl	80053bc <HAL_TIM_Base_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a9c:	f000 f97a 	bl	8002d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002aa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aaa:	4619      	mov	r1, r3
 8002aac:	481c      	ldr	r0, [pc, #112]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002aae:	f003 f93f 	bl	8005d30 <HAL_TIM_ConfigClockSource>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002ab8:	f000 f96c 	bl	8002d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002abc:	4818      	ldr	r0, [pc, #96]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002abe:	f002 fcd4 	bl	800546a <HAL_TIM_PWM_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ac8:	f000 f964 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ad4:	f107 031c 	add.w	r3, r7, #28
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4811      	ldr	r0, [pc, #68]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002adc:	f003 feb6 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002ae6:	f000 f955 	bl	8002d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aea:	2360      	movs	r3, #96	@ 0x60
 8002aec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002afa:	463b      	mov	r3, r7
 8002afc:	2204      	movs	r2, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4807      	ldr	r0, [pc, #28]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002b02:	f003 f801 	bl	8005b08 <HAL_TIM_PWM_ConfigChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002b0c:	f000 f942 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b10:	4803      	ldr	r0, [pc, #12]	@ (8002b20 <MX_TIM2_Init+0xe8>)
 8002b12:	f000 f9b7 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 8002b16:	bf00      	nop
 8002b18:	3738      	adds	r7, #56	@ 0x38
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200004b8 	.word	0x200004b8

08002b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b2a:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <MX_USART1_UART_Init+0x5c>)
 8002b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b54:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <MX_USART1_UART_Init+0x58>)
 8002b68:	f003 fed6 	bl	8006918 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b72:	f000 f90f 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000020c 	.word	0x2000020c
 8002b80:	40013800 	.word	0x40013800

08002b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <MX_DMA_Init+0x38>)
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8002bbc <MX_DMA_Init+0x38>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6153      	str	r3, [r2, #20]
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <MX_DMA_Init+0x38>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2011      	movs	r0, #17
 8002ba8:	f000 fc9f 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002bac:	2011      	movs	r0, #17
 8002bae:	f000 fcb8 	bl	8003522 <HAL_NVIC_EnableIRQ>

}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002bdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002be0:	6153      	str	r3, [r2, #20]
 8002be2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4a36      	ldr	r2, [pc, #216]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf8:	6153      	str	r3, [r2, #20]
 8002bfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4a30      	ldr	r2, [pc, #192]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c10:	6153      	str	r3, [r2, #20]
 8002c12:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <MX_GPIO_Init+0x10c>)
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSR_Pin|MAX3485_EN_Pin, GPIO_PIN_RESET);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f640 0104 	movw	r1, #2052	@ 0x804
 8002c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c28:	f000 fff4 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TXB_16x2_D7_Pin|TXB_16x2_D6_Pin|TXB_16x2_D5_Pin|TXB_16x2_D4_Pin
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002c32:	4827      	ldr	r0, [pc, #156]	@ (8002cd0 <MX_GPIO_Init+0x110>)
 8002c34:	f000 ffee 	bl	8003c14 <HAL_GPIO_WritePin>
                          |TXB_16x2_E_Pin|TXB_16x2_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SSR_Pin MAX3485_EN_Pin */
  GPIO_InitStruct.Pin = SSR_Pin|MAX3485_EN_Pin;
 8002c38:	f640 0304 	movw	r3, #2052	@ 0x804
 8002c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c54:	f000 fe54 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin;
 8002c58:	2378      	movs	r3, #120	@ 0x78
 8002c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c70:	f000 fe46 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : TXB_16x2_D7_Pin TXB_16x2_D6_Pin TXB_16x2_D5_Pin TXB_16x2_D4_Pin
                           TXB_16x2_E_Pin TXB_16x2_RS_Pin */
  GPIO_InitStruct.Pin = TXB_16x2_D7_Pin|TXB_16x2_D6_Pin|TXB_16x2_D5_Pin|TXB_16x2_D4_Pin
 8002c74:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8002c78:	60fb      	str	r3, [r7, #12]
                          |TXB_16x2_E_Pin|TXB_16x2_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4810      	ldr	r0, [pc, #64]	@ (8002cd0 <MX_GPIO_Init+0x110>)
 8002c8e:	f000 fe37 	bl	8003900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	2009      	movs	r0, #9
 8002c98:	f000 fc27 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c9c:	2009      	movs	r0, #9
 8002c9e:	f000 fc40 	bl	8003522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	200a      	movs	r0, #10
 8002ca8:	f000 fc1f 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002cac:	200a      	movs	r0, #10
 8002cae:	f000 fc38 	bl	8003522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	2017      	movs	r0, #23
 8002cb8:	f000 fc17 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cbc:	2017      	movs	r0, #23
 8002cbe:	f000 fc30 	bl	8003522 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002cc2:	bf00      	nop
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	48000400 	.word	0x48000400

08002cd4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
	  cm = HAL_GetTick();
 8002cde:	f000 faf9 	bl	80032d4 <HAL_GetTick>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a25      	ldr	r2, [pc, #148]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002ce6:	6013      	str	r3, [r2, #0]
	  if (cm - pm > 110)
 8002ce8:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <HAL_GPIO_EXTI_Callback+0xac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b6e      	cmp	r3, #110	@ 0x6e
 8002cf4:	d93e      	bls.n	8002d74 <HAL_GPIO_EXTI_Callback+0xa0>
	  {
	    pm = cm;
 8002cf6:	4b21      	ldr	r3, [pc, #132]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0xa8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	@ (8002d80 <HAL_GPIO_EXTI_Callback+0xac>)
 8002cfc:	6013      	str	r3, [r2, #0]

		UNUSED(GPIO_Pin);

		if (GPIO_Pin == S1_Pin) {
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d112      	bne.n	8002d2a <HAL_GPIO_EXTI_Callback+0x56>
			if(page > 1){
 8002d04:	4b1f      	ldr	r3, [pc, #124]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d92f      	bls.n	8002d6e <HAL_GPIO_EXTI_Callback+0x9a>
				page--;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d1a:	701a      	strb	r2, [r3, #0]
				conf = 0;
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
				select = 1;
 8002d22:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e021      	b.n	8002d6e <HAL_GPIO_EXTI_Callback+0x9a>
			}
		}
		else if (GPIO_Pin == S2_Pin) {
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d103      	bne.n	8002d38 <HAL_GPIO_EXTI_Callback+0x64>
			conf = 1;
 8002d30:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e01a      	b.n	8002d6e <HAL_GPIO_EXTI_Callback+0x9a>
		}
		else if (GPIO_Pin == S3_Pin) {
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d107      	bne.n	8002d4e <HAL_GPIO_EXTI_Callback+0x7a>
				select++;
 8002d3e:	4b13      	ldr	r3, [pc, #76]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e00f      	b.n	8002d6e <HAL_GPIO_EXTI_Callback+0x9a>
		}
		else if (GPIO_Pin == S4_Pin) {
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b40      	cmp	r3, #64	@ 0x40
 8002d52:	d10c      	bne.n	8002d6e <HAL_GPIO_EXTI_Callback+0x9a>
				page++;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d60:	701a      	strb	r2, [r3, #0]
				conf = 0;
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
				select = 1;
 8002d68:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
		}

		update = 1;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
	  }
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20003854 	.word	0x20003854
 8002d80:	20003850 	.word	0x20003850
 8002d84:	20000000 	.word	0x20000000
 8002d88:	20000298 	.word	0x20000298
 8002d8c:	20000002 	.word	0x20000002
 8002d90:	20000299 	.word	0x20000299

08002d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <Error_Handler+0x8>

08002da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	4b0f      	ldr	r3, [pc, #60]	@ (8002de4 <HAL_MspInit+0x44>)
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	4a0e      	ldr	r2, [pc, #56]	@ (8002de4 <HAL_MspInit+0x44>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6193      	str	r3, [r2, #24]
 8002db2:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <HAL_MspInit+0x44>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_MspInit+0x44>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a08      	ldr	r2, [pc, #32]	@ (8002de4 <HAL_MspInit+0x44>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_MspInit+0x44>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df8:	d139      	bne.n	8002e6e <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8002e78 <HAL_TIM_Base_MspInit+0x90>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002e78 <HAL_TIM_Base_MspInit+0x90>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	61d3      	str	r3, [r2, #28]
 8002e06:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <HAL_TIM_Base_MspInit+0x90>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e14:	4a1a      	ldr	r2, [pc, #104]	@ (8002e80 <HAL_TIM_Base_MspInit+0x98>)
 8002e16:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e18:	4b18      	ldr	r3, [pc, #96]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002e24:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e26:	2280      	movs	r2, #128	@ 0x80
 8002e28:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e30:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e32:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e38:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002e40:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002e46:	480d      	ldr	r0, [pc, #52]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e48:	f000 fb85 	bl	8003556 <HAL_DMA_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8002e52:	f7ff ff9f 	bl	8002d94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a08      	ldr	r2, [pc, #32]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e5c:	4a07      	ldr	r2, [pc, #28]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e68:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <HAL_TIM_Base_MspInit+0x94>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	2000380c 	.word	0x2000380c
 8002e80:	40020080 	.word	0x40020080

08002e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea4:	d11b      	bne.n	8002ede <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <HAL_TIM_MspPostInit+0x64>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee8 <HAL_TIM_MspPostInit+0x64>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb0:	6153      	str	r3, [r2, #20]
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <HAL_TIM_MspPostInit+0x64>)
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8002ed2:	f107 030c 	add.w	r3, r7, #12
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4804      	ldr	r0, [pc, #16]	@ (8002eec <HAL_TIM_MspPostInit+0x68>)
 8002eda:	f000 fd11 	bl	8003900 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ede:	bf00      	nop
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	48000400 	.word	0x48000400

08002ef0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	@ (8002f70 <HAL_UART_MspInit+0x80>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d129      	bne.n	8002f66 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f12:	4b18      	ldr	r3, [pc, #96]	@ (8002f74 <HAL_UART_MspInit+0x84>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4a17      	ldr	r2, [pc, #92]	@ (8002f74 <HAL_UART_MspInit+0x84>)
 8002f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f1c:	6193      	str	r3, [r2, #24]
 8002f1e:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <HAL_UART_MspInit+0x84>)
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_UART_MspInit+0x84>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4a11      	ldr	r2, [pc, #68]	@ (8002f74 <HAL_UART_MspInit+0x84>)
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f34:	6153      	str	r3, [r2, #20]
 8002f36:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_UART_MspInit+0x84>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MAX3485_OUT_Pin|MAX3485_IN_Pin;
 8002f42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f50:	2303      	movs	r3, #3
 8002f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f54:	2307      	movs	r3, #7
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f62:	f000 fccd 	bl	8003900 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002f66:	bf00      	nop
 8002f68:	3728      	adds	r7, #40	@ 0x28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40021000 	.word	0x40021000

08002f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <NMI_Handler+0x4>

08002f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <HardFault_Handler+0x4>

08002f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <MemManage_Handler+0x4>

08002f90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <BusFault_Handler+0x4>

08002f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <UsageFault_Handler+0x4>

08002fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fce:	f000 f96d 	bl	80032ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8002fda:	2008      	movs	r0, #8
 8002fdc:	f000 fe32 	bl	8003c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8002fe8:	2010      	movs	r0, #16
 8002fea:	f000 fe2b 	bl	8003c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002ff8:	4802      	ldr	r0, [pc, #8]	@ (8003004 <DMA1_Channel7_IRQHandler+0x10>)
 8002ffa:	f000 fb90 	bl	800371e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000380c 	.word	0x2000380c

08003008 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 800300c:	2020      	movs	r0, #32
 800300e:	f000 fe19 	bl	8003c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S4_Pin);
 8003012:	2040      	movs	r0, #64	@ 0x40
 8003014:	f000 fe16 	bl	8003c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return 1;
 8003020:	2301      	movs	r3, #1
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_kill>:

int _kill(int pid, int sig)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003036:	f004 ff43 	bl	8007ec0 <__errno>
 800303a:	4603      	mov	r3, r0
 800303c:	2216      	movs	r2, #22
 800303e:	601a      	str	r2, [r3, #0]
  return -1;
 8003040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <_exit>:

void _exit (int status)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ffe7 	bl	800302c <_kill>
  while (1) {}    /* Make sure we hang here */
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <_exit+0x12>

08003062 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e00a      	b.n	800308a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003074:	f3af 8000 	nop.w
 8003078:	4601      	mov	r1, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	60ba      	str	r2, [r7, #8]
 8003080:	b2ca      	uxtb	r2, r1
 8003082:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	dbf0      	blt.n	8003074 <_read+0x12>
  }

  return len;
 8003092:	687b      	ldr	r3, [r7, #4]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e009      	b.n	80030c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	60ba      	str	r2, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3301      	adds	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbf1      	blt.n	80030ae <_write+0x12>
  }
  return len;
 80030ca:	687b      	ldr	r3, [r7, #4]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_close>:

int _close(int file)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030fc:	605a      	str	r2, [r3, #4]
  return 0;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_isatty>:

int _isatty(int file)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	@ (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f004 fea8 	bl	8007ec0 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	@ (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20004000 	.word	0x20004000
 800319c:	00000400 	.word	0x00000400
 80031a0:	20003858 	.word	0x20003858
 80031a4:	200039b0 	.word	0x200039b0

080031a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ac:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <SystemInit+0x20>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	4a05      	ldr	r2, [pc, #20]	@ (80031c8 <SystemInit+0x20>)
 80031b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003204 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031d0:	f7ff ffea 	bl	80031a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d4:	480c      	ldr	r0, [pc, #48]	@ (8003208 <LoopForever+0x6>)
  ldr r1, =_edata
 80031d6:	490d      	ldr	r1, [pc, #52]	@ (800320c <LoopForever+0xa>)
  ldr r2, =_sidata
 80031d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <LoopForever+0xe>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031dc:	e002      	b.n	80031e4 <LoopCopyDataInit>

080031de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e2:	3304      	adds	r3, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e8:	d3f9      	bcc.n	80031de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003218 <LoopForever+0x16>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f0:	e001      	b.n	80031f6 <LoopFillZerobss>

080031f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f4:	3204      	adds	r2, #4

080031f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f8:	d3fb      	bcc.n	80031f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031fa:	f004 fe67 	bl	8007ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031fe:	f7ff fa79 	bl	80026f4 <main>

08003202 <LoopForever>:

LoopForever:
    b LoopForever
 8003202:	e7fe      	b.n	8003202 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003204:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800320c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003210:	0800a78c 	.word	0x0800a78c
  ldr r2, =_sbss
 8003214:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003218:	200039ac 	.word	0x200039ac

0800321c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800321c:	e7fe      	b.n	800321c <ADC1_IRQHandler>
	...

08003220 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003224:	4b08      	ldr	r3, [pc, #32]	@ (8003248 <HAL_Init+0x28>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a07      	ldr	r2, [pc, #28]	@ (8003248 <HAL_Init+0x28>)
 800322a:	f043 0310 	orr.w	r3, r3, #16
 800322e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003230:	2003      	movs	r0, #3
 8003232:	f000 f94f 	bl	80034d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003236:	200f      	movs	r0, #15
 8003238:	f000 f808 	bl	800324c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800323c:	f7ff fdb0 	bl	8002da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40022000 	.word	0x40022000

0800324c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003254:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <HAL_InitTick+0x54>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_InitTick+0x58>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003262:	fbb3 f3f1 	udiv	r3, r3, r1
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f967 	bl	800353e <HAL_SYSTICK_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e00e      	b.n	8003298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d80a      	bhi.n	8003296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003280:	2200      	movs	r2, #0
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f000 f92f 	bl	80034ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800328c:	4a06      	ldr	r2, [pc, #24]	@ (80032a8 <HAL_InitTick+0x5c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e000      	b.n	8003298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000001c 	.word	0x2000001c
 80032a4:	20000024 	.word	0x20000024
 80032a8:	20000020 	.word	0x20000020

080032ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b0:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <HAL_IncTick+0x20>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_IncTick+0x24>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <HAL_IncTick+0x24>)
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000024 	.word	0x20000024
 80032d0:	2000385c 	.word	0x2000385c

080032d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <HAL_GetTick+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	2000385c 	.word	0x2000385c

080032ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff ffee 	bl	80032d4 <HAL_GetTick>
 80032f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d005      	beq.n	8003312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003306:	4b0a      	ldr	r3, [pc, #40]	@ (8003330 <HAL_Delay+0x44>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003312:	bf00      	nop
 8003314:	f7ff ffde 	bl	80032d4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	429a      	cmp	r2, r3
 8003322:	d8f7      	bhi.n	8003314 <HAL_Delay+0x28>
  {
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000024 	.word	0x20000024

08003334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003350:	4013      	ands	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800335c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003366:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	60d3      	str	r3, [r2, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <__NVIC_GetPriorityGrouping+0x18>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f003 0307 	and.w	r3, r3, #7
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	db0b      	blt.n	80033c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	f003 021f 	and.w	r2, r3, #31
 80033b0:	4907      	ldr	r1, [pc, #28]	@ (80033d0 <__NVIC_EnableIRQ+0x38>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2001      	movs	r0, #1
 80033ba:	fa00 f202 	lsl.w	r2, r0, r2
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e100 	.word	0xe000e100

080033d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0a      	blt.n	80033fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	490c      	ldr	r1, [pc, #48]	@ (8003420 <__NVIC_SetPriority+0x4c>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	440b      	add	r3, r1
 80033f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033fc:	e00a      	b.n	8003414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4908      	ldr	r1, [pc, #32]	@ (8003424 <__NVIC_SetPriority+0x50>)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3b04      	subs	r3, #4
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	440b      	add	r3, r1
 8003412:	761a      	strb	r2, [r3, #24]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	@ 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f1c3 0307 	rsb	r3, r3, #7
 8003442:	2b04      	cmp	r3, #4
 8003444:	bf28      	it	cs
 8003446:	2304      	movcs	r3, #4
 8003448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3304      	adds	r3, #4
 800344e:	2b06      	cmp	r3, #6
 8003450:	d902      	bls.n	8003458 <NVIC_EncodePriority+0x30>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b03      	subs	r3, #3
 8003456:	e000      	b.n	800345a <NVIC_EncodePriority+0x32>
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	43d9      	mvns	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	4313      	orrs	r3, r2
         );
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	@ 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a0:	d301      	bcc.n	80034a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00f      	b.n	80034c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <SysTick_Config+0x40>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ae:	210f      	movs	r1, #15
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	f7ff ff8e 	bl	80033d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <SysTick_Config+0x40>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034be:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <SysTick_Config+0x40>)
 80034c0:	2207      	movs	r2, #7
 80034c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff29 	bl	8003334 <__NVIC_SetPriorityGrouping>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034fc:	f7ff ff3e 	bl	800337c <__NVIC_GetPriorityGrouping>
 8003500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f7ff ff8e 	bl	8003428 <NVIC_EncodePriority>
 800350c:	4602      	mov	r2, r0
 800350e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff5d 	bl	80033d4 <__NVIC_SetPriority>
}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff31 	bl	8003398 <__NVIC_EnableIRQ>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ffa2 	bl	8003490 <SysTick_Config>
 800354c:	4603      	mov	r3, r0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e037      	b.n	80035dc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003582:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f97e 	bl	80038c0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_DMA_Start_IT+0x20>
 8003600:	2302      	movs	r3, #2
 8003602:	e04a      	b.n	800369a <HAL_DMA_Start_IT+0xb6>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003612:	2b01      	cmp	r3, #1
 8003614:	d13a      	bne.n	800368c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f912 	bl	8003864 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 020e 	orr.w	r2, r2, #14
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e00f      	b.n	800367a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 020a 	orr.w	r2, r2, #10
 8003668:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0204 	bic.w	r2, r2, #4
 8003678:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e005      	b.n	8003698 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003694:	2302      	movs	r3, #2
 8003696:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d005      	beq.n	80036c4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2204      	movs	r2, #4
 80036bc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	e027      	b.n	8003714 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 020e 	bic.w	r2, r2, #14
 80036d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
    }
  }
  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2204      	movs	r2, #4
 800373c:	409a      	lsls	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d024      	beq.n	8003790 <HAL_DMA_IRQHandler+0x72>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01f      	beq.n	8003790 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0204 	bic.w	r2, r2, #4
 800376c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	2104      	movs	r1, #4
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06a      	beq.n	800385c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800378e:	e065      	b.n	800385c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	2202      	movs	r2, #2
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02c      	beq.n	80037fa <HAL_DMA_IRQHandler+0xdc>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d027      	beq.n	80037fa <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 020a 	bic.w	r2, r2, #10
 80037c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d8:	2102      	movs	r1, #2
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d035      	beq.n	800385c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037f8:	e030      	b.n	800385c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	2208      	movs	r2, #8
 8003800:	409a      	lsls	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d028      	beq.n	800385c <HAL_DMA_IRQHandler+0x13e>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d023      	beq.n	800385c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 020e 	bic.w	r2, r2, #14
 8003822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
    }
  }
}
 800385a:	e7ff      	b.n	800385c <HAL_DMA_IRQHandler+0x13e>
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b10      	cmp	r3, #16
 8003890:	d108      	bne.n	80038a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038a2:	e007      	b.n	80038b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	60da      	str	r2, [r3, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <DMA_CalcBaseAndBitshift+0x34>)
 80038d0:	4413      	add	r3, r2
 80038d2:	4a09      	ldr	r2, [pc, #36]	@ (80038f8 <DMA_CalcBaseAndBitshift+0x38>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	009a      	lsls	r2, r3, #2
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a06      	ldr	r2, [pc, #24]	@ (80038fc <DMA_CalcBaseAndBitshift+0x3c>)
 80038e4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	bffdfff8 	.word	0xbffdfff8
 80038f8:	cccccccd 	.word	0xcccccccd
 80038fc:	40020000 	.word	0x40020000

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390e:	e14e      	b.n	8003bae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8140 	beq.w	8003ba8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d005      	beq.n	8003940 <HAL_GPIO_Init+0x40>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d130      	bne.n	80039a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003976:	2201      	movs	r2, #1
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 0201 	and.w	r2, r3, #1
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d017      	beq.n	80039de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d123      	bne.n	8003a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	08da      	lsrs	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3208      	adds	r2, #8
 80039f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	08da      	lsrs	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3208      	adds	r2, #8
 8003a2c:	6939      	ldr	r1, [r7, #16]
 8003a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0203 	and.w	r2, r3, #3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 809a 	beq.w	8003ba8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a74:	4b55      	ldr	r3, [pc, #340]	@ (8003bcc <HAL_GPIO_Init+0x2cc>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	4a54      	ldr	r2, [pc, #336]	@ (8003bcc <HAL_GPIO_Init+0x2cc>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6193      	str	r3, [r2, #24]
 8003a80:	4b52      	ldr	r3, [pc, #328]	@ (8003bcc <HAL_GPIO_Init+0x2cc>)
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a8c:	4a50      	ldr	r2, [pc, #320]	@ (8003bd0 <HAL_GPIO_Init+0x2d0>)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	3302      	adds	r3, #2
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	220f      	movs	r2, #15
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ab6:	d013      	beq.n	8003ae0 <HAL_GPIO_Init+0x1e0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a46      	ldr	r2, [pc, #280]	@ (8003bd4 <HAL_GPIO_Init+0x2d4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00d      	beq.n	8003adc <HAL_GPIO_Init+0x1dc>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a45      	ldr	r2, [pc, #276]	@ (8003bd8 <HAL_GPIO_Init+0x2d8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <HAL_GPIO_Init+0x1d8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a44      	ldr	r2, [pc, #272]	@ (8003bdc <HAL_GPIO_Init+0x2dc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <HAL_GPIO_Init+0x1d4>
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e006      	b.n	8003ae2 <HAL_GPIO_Init+0x1e2>
 8003ad4:	2305      	movs	r3, #5
 8003ad6:	e004      	b.n	8003ae2 <HAL_GPIO_Init+0x1e2>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e002      	b.n	8003ae2 <HAL_GPIO_Init+0x1e2>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_GPIO_Init+0x1e2>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	f002 0203 	and.w	r2, r2, #3
 8003ae8:	0092      	lsls	r2, r2, #2
 8003aea:	4093      	lsls	r3, r2
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003af2:	4937      	ldr	r1, [pc, #220]	@ (8003bd0 <HAL_GPIO_Init+0x2d0>)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	3302      	adds	r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b00:	4b37      	ldr	r3, [pc, #220]	@ (8003be0 <HAL_GPIO_Init+0x2e0>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b24:	4a2e      	ldr	r2, [pc, #184]	@ (8003be0 <HAL_GPIO_Init+0x2e0>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003be0 <HAL_GPIO_Init+0x2e0>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b4e:	4a24      	ldr	r2, [pc, #144]	@ (8003be0 <HAL_GPIO_Init+0x2e0>)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b54:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <HAL_GPIO_Init+0x2e0>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b78:	4a19      	ldr	r2, [pc, #100]	@ (8003be0 <HAL_GPIO_Init+0x2e0>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b7e:	4b18      	ldr	r3, [pc, #96]	@ (8003be0 <HAL_GPIO_Init+0x2e0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8003be0 <HAL_GPIO_Init+0x2e0>)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3301      	adds	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f aea9 	bne.w	8003910 <HAL_GPIO_Init+0x10>
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	48000400 	.word	0x48000400
 8003bd8:	48000800 	.word	0x48000800
 8003bdc:	48000c00 	.word	0x48000c00
 8003be0:	40010400 	.word	0x40010400

08003be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
 8003c00:	e001      	b.n	8003c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c24:	787b      	ldrb	r3, [r7, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c30:	e002      	b.n	8003c38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c4e:	4b08      	ldr	r3, [pc, #32]	@ (8003c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c5a:	4a05      	ldr	r2, [pc, #20]	@ (8003c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff f836 	bl	8002cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40010400 	.word	0x40010400

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f000 bff4 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 816d 	beq.w	8003f8a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cb0:	4bb4      	ldr	r3, [pc, #720]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d00c      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cbc:	4bb1      	ldr	r3, [pc, #708]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d157      	bne.n	8003d78 <HAL_RCC_OscConfig+0x104>
 8003cc8:	4bae      	ldr	r3, [pc, #696]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd4:	d150      	bne.n	8003d78 <HAL_RCC_OscConfig+0x104>
 8003cd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cda:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cf6:	d802      	bhi.n	8003cfe <HAL_RCC_OscConfig+0x8a>
 8003cf8:	4ba2      	ldr	r3, [pc, #648]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	e015      	b.n	8003d2a <HAL_RCC_OscConfig+0xb6>
 8003cfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d02:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003d12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d16:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003d1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003d26:	4b97      	ldr	r3, [pc, #604]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d2e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003d32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003d36:	fa92 f2a2 	rbit	r2, r2
 8003d3a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003d3e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003d42:	fab2 f282 	clz	r2, r2
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f042 0220 	orr.w	r2, r2, #32
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	f002 021f 	and.w	r2, r2, #31
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f202 	lsl.w	r2, r1, r2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8114 	beq.w	8003f88 <HAL_RCC_OscConfig+0x314>
 8003d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 810b 	bne.w	8003f88 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f000 bf85 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x124>
 8003d8a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e036      	b.n	8003e06 <HAL_RCC_OscConfig+0x192>
 8003d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x14e>
 8003da8:	4b76      	ldr	r3, [pc, #472]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a75      	ldr	r2, [pc, #468]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b73      	ldr	r3, [pc, #460]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a72      	ldr	r2, [pc, #456]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e021      	b.n	8003e06 <HAL_RCC_OscConfig+0x192>
 8003dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCC_OscConfig+0x17a>
 8003dd4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6a      	ldr	r2, [pc, #424]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003dda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b68      	ldr	r3, [pc, #416]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a67      	ldr	r2, [pc, #412]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e00b      	b.n	8003e06 <HAL_RCC_OscConfig+0x192>
 8003dee:	4b65      	ldr	r3, [pc, #404]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a64      	ldr	r2, [pc, #400]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b62      	ldr	r3, [pc, #392]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a61      	ldr	r2, [pc, #388]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003e00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e06:	4b5f      	ldr	r3, [pc, #380]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	f023 020f 	bic.w	r2, r3, #15
 8003e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	495a      	ldr	r1, [pc, #360]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d054      	beq.n	8003eda <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7ff fa50 	bl	80032d4 <HAL_GetTick>
 8003e34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3a:	f7ff fa4b 	bl	80032d4 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	@ 0x64
 8003e48:	d902      	bls.n	8003e50 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	f000 bf19 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>
 8003e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e54:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003e5c:	fa93 f3a3 	rbit	r3, r3
 8003e60:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003e64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e68:	fab3 f383 	clz	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e70:	d802      	bhi.n	8003e78 <HAL_RCC_OscConfig+0x204>
 8003e72:	4b44      	ldr	r3, [pc, #272]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	e015      	b.n	8003ea4 <HAL_RCC_OscConfig+0x230>
 8003e78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e7c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003e8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e90:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003e94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003ea0:	4b38      	ldr	r3, [pc, #224]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ea8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003eac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003eb0:	fa92 f2a2 	rbit	r2, r2
 8003eb4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003eb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003ebc:	fab2 f282 	clz	r2, r2
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f042 0220 	orr.w	r2, r2, #32
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f002 021f 	and.w	r2, r2, #31
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0b0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1c6>
 8003ed8:	e057      	b.n	8003f8a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7ff f9fb 	bl	80032d4 <HAL_GetTick>
 8003ede:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7ff f9f6 	bl	80032d4 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b64      	cmp	r3, #100	@ 0x64
 8003ef2:	d902      	bls.n	8003efa <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	f000 bec4 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>
 8003efa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003efe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003f0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f1a:	d802      	bhi.n	8003f22 <HAL_RCC_OscConfig+0x2ae>
 8003f1c:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x2da>
 8003f22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f26:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003f36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f3a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <HAL_RCC_OscConfig+0x310>)
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f52:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003f56:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f5a:	fa92 f2a2 	rbit	r2, r2
 8003f5e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003f62:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f66:	fab2 f282 	clz	r2, r2
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	f042 0220 	orr.w	r2, r2, #32
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	f002 021f 	and.w	r2, r2, #31
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1b0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x270>
 8003f82:	e002      	b.n	8003f8a <HAL_RCC_OscConfig+0x316>
 8003f84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 816c 	beq.w	8004278 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fa0:	4bcc      	ldr	r3, [pc, #816]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fac:	4bc9      	ldr	r3, [pc, #804]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d16d      	bne.n	8004094 <HAL_RCC_OscConfig+0x420>
 8003fb8:	4bc6      	ldr	r3, [pc, #792]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d167      	bne.n	8004094 <HAL_RCC_OscConfig+0x420>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fce:	fa93 f3a3 	rbit	r3, r3
 8003fd2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003fd6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003fe2:	d802      	bhi.n	8003fea <HAL_RCC_OscConfig+0x376>
 8003fe4:	4bbb      	ldr	r3, [pc, #748]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	e013      	b.n	8004012 <HAL_RCC_OscConfig+0x39e>
 8003fea:	2302      	movs	r3, #2
 8003fec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004002:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800400e:	4bb1      	ldr	r3, [pc, #708]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	2202      	movs	r2, #2
 8004014:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004018:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800401c:	fa92 f2a2 	rbit	r2, r2
 8004020:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004024:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004028:	fab2 f282 	clz	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f042 0220 	orr.w	r2, r2, #32
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	f002 021f 	and.w	r2, r2, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCC_OscConfig+0x3e6>
 8004044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004048:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d002      	beq.n	800405a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f000 be14 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b9e      	ldr	r3, [pc, #632]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	21f8      	movs	r1, #248	@ 0xf8
 8004070:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004078:	fa91 f1a1 	rbit	r1, r1
 800407c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004080:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004084:	fab1 f181 	clz	r1, r1
 8004088:	b2c9      	uxtb	r1, r1
 800408a:	408b      	lsls	r3, r1
 800408c:	4991      	ldr	r1, [pc, #580]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	e0f1      	b.n	8004278 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004098:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8083 	beq.w	80041ac <HAL_RCC_OscConfig+0x538>
 80040a6:	2301      	movs	r3, #1
 80040a8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80040b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	461a      	mov	r2, r3
 80040ce:	2301      	movs	r3, #1
 80040d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7ff f8ff 	bl	80032d4 <HAL_GetTick>
 80040d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040dc:	f7ff f8fa 	bl	80032d4 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d902      	bls.n	80040f2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	f000 bdc8 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004104:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004110:	d802      	bhi.n	8004118 <HAL_RCC_OscConfig+0x4a4>
 8004112:	4b70      	ldr	r3, [pc, #448]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	e013      	b.n	8004140 <HAL_RCC_OscConfig+0x4cc>
 8004118:	2302      	movs	r3, #2
 800411a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004122:	fa93 f3a3 	rbit	r3, r3
 8004126:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800412a:	2302      	movs	r3, #2
 800412c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004130:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800413c:	4b65      	ldr	r3, [pc, #404]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	2202      	movs	r2, #2
 8004142:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004146:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800414a:	fa92 f2a2 	rbit	r2, r2
 800414e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004152:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004156:	fab2 f282 	clz	r2, r2
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	f042 0220 	orr.w	r2, r2, #32
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f002 021f 	and.w	r2, r2, #31
 8004166:	2101      	movs	r1, #1
 8004168:	fa01 f202 	lsl.w	r2, r1, r2
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0b4      	beq.n	80040dc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4b58      	ldr	r3, [pc, #352]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800417a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	21f8      	movs	r1, #248	@ 0xf8
 8004188:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004190:	fa91 f1a1 	rbit	r1, r1
 8004194:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004198:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800419c:	fab1 f181 	clz	r1, r1
 80041a0:	b2c9      	uxtb	r1, r1
 80041a2:	408b      	lsls	r3, r1
 80041a4:	494b      	ldr	r1, [pc, #300]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
 80041aa:	e065      	b.n	8004278 <HAL_RCC_OscConfig+0x604>
 80041ac:	2301      	movs	r3, #1
 80041ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80041be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	461a      	mov	r2, r3
 80041d4:	2300      	movs	r3, #0
 80041d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7ff f87c 	bl	80032d4 <HAL_GetTick>
 80041dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e0:	e00a      	b.n	80041f8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e2:	f7ff f877 	bl	80032d4 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d902      	bls.n	80041f8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	f000 bd45 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>
 80041f8:	2302      	movs	r3, #2
 80041fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800420a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b3f      	cmp	r3, #63	@ 0x3f
 8004216:	d802      	bhi.n	800421e <HAL_RCC_OscConfig+0x5aa>
 8004218:	4b2e      	ldr	r3, [pc, #184]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	e013      	b.n	8004246 <HAL_RCC_OscConfig+0x5d2>
 800421e:	2302      	movs	r3, #2
 8004220:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004230:	2302      	movs	r3, #2
 8004232:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004236:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004242:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <HAL_RCC_OscConfig+0x660>)
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	2202      	movs	r2, #2
 8004248:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800424c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004250:	fa92 f2a2 	rbit	r2, r2
 8004254:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004258:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800425c:	fab2 f282 	clz	r2, r2
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	f042 0220 	orr.w	r2, r2, #32
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f002 021f 	and.w	r2, r2, #31
 800426c:	2101      	movs	r1, #1
 800426e:	fa01 f202 	lsl.w	r2, r1, r2
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1b4      	bne.n	80041e2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8115 	beq.w	80044b8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800428e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004292:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d07e      	beq.n	800439c <HAL_RCC_OscConfig+0x728>
 800429e:	2301      	movs	r3, #1
 80042a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80042b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b4:	fab3 f383 	clz	r3, r3
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <HAL_RCC_OscConfig+0x664>)
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	2301      	movs	r3, #1
 80042c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c8:	f7ff f804 	bl	80032d4 <HAL_GetTick>
 80042cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d0:	e00f      	b.n	80042f2 <HAL_RCC_OscConfig+0x67e>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fe fffa 	bl	80032d4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d902      	bls.n	80042f2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	f000 bcc8 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004308:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800430c:	2202      	movs	r2, #2
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004314:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004330:	2202      	movs	r2, #2
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	fa93 f2a3 	rbit	r2, r3
 8004342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004346:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800434a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434c:	4bb0      	ldr	r3, [pc, #704]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 800434e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004354:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004358:	2102      	movs	r1, #2
 800435a:	6019      	str	r1, [r3, #0]
 800435c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004360:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	fa93 f1a3 	rbit	r1, r3
 800436a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004372:	6019      	str	r1, [r3, #0]
  return result;
 8004374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004378:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0a0      	beq.n	80042dc <HAL_RCC_OscConfig+0x668>
 800439a:	e08d      	b.n	80044b8 <HAL_RCC_OscConfig+0x844>
 800439c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	fa93 f2a3 	rbit	r2, r3
 80043b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043be:	601a      	str	r2, [r3, #0]
  return result;
 80043c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b90      	ldr	r3, [pc, #576]	@ (8004614 <HAL_RCC_OscConfig+0x9a0>)
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	461a      	mov	r2, r3
 80043da:	2300      	movs	r3, #0
 80043dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fe ff79 	bl	80032d4 <HAL_GetTick>
 80043e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fe ff74 	bl	80032d4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d902      	bls.n	80043fe <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	f000 bc42 	b.w	8004c82 <HAL_RCC_OscConfig+0x100e>
 80043fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004402:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004406:	2202      	movs	r2, #2
 8004408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	fa93 f2a3 	rbit	r2, r3
 8004418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004426:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800442a:	2202      	movs	r2, #2
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004432:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	fa93 f2a3 	rbit	r2, r3
 800443c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004440:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800444e:	2202      	movs	r2, #2
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004456:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	fa93 f2a3 	rbit	r2, r3
 8004460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004464:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004468:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446a:	4b69      	ldr	r3, [pc, #420]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 800446c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800446e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004472:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004476:	2102      	movs	r1, #2
 8004478:	6019      	str	r1, [r3, #0]
 800447a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	fa93 f1a3 	rbit	r1, r3
 8004488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004490:	6019      	str	r1, [r3, #0]
  return result;
 8004492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004496:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d197      	bne.n	80043e8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 819e 	beq.w	800480a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d116      	bne.n	800450e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80044e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ea:	61d3      	str	r3, [r2, #28]
 80044ec:	4b48      	ldr	r3, [pc, #288]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80044f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004502:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004506:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <HAL_RCC_OscConfig+0x9a4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11a      	bne.n	8004550 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451a:	4b3f      	ldr	r3, [pc, #252]	@ (8004618 <HAL_RCC_OscConfig+0x9a4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a3e      	ldr	r2, [pc, #248]	@ (8004618 <HAL_RCC_OscConfig+0x9a4>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004524:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004526:	f7fe fed5 	bl	80032d4 <HAL_GetTick>
 800452a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452e:	e009      	b.n	8004544 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004530:	f7fe fed0 	bl	80032d4 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b64      	cmp	r3, #100	@ 0x64
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e39e      	b.n	8004c82 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	4b34      	ldr	r3, [pc, #208]	@ (8004618 <HAL_RCC_OscConfig+0x9a4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ef      	beq.n	8004530 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004554:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <HAL_RCC_OscConfig+0x8fa>
 8004560:	4b2b      	ldr	r3, [pc, #172]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6213      	str	r3, [r2, #32]
 800456c:	e035      	b.n	80045da <HAL_RCC_OscConfig+0x966>
 800456e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004572:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x924>
 800457e:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a23      	ldr	r2, [pc, #140]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	6213      	str	r3, [r2, #32]
 800458a:	4b21      	ldr	r3, [pc, #132]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4a20      	ldr	r2, [pc, #128]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	6213      	str	r3, [r2, #32]
 8004596:	e020      	b.n	80045da <HAL_RCC_OscConfig+0x966>
 8004598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCC_OscConfig+0x94e>
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4a18      	ldr	r2, [pc, #96]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80045ae:	f043 0304 	orr.w	r3, r3, #4
 80045b2:	6213      	str	r3, [r2, #32]
 80045b4:	4b16      	ldr	r3, [pc, #88]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6213      	str	r3, [r2, #32]
 80045c0:	e00b      	b.n	80045da <HAL_RCC_OscConfig+0x966>
 80045c2:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	4a12      	ldr	r2, [pc, #72]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	6213      	str	r3, [r2, #32]
 80045ce:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004610 <HAL_RCC_OscConfig+0x99c>)
 80045d4:	f023 0304 	bic.w	r3, r3, #4
 80045d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8087 	beq.w	80046fa <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ec:	f7fe fe72 	bl	80032d4 <HAL_GetTick>
 80045f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f4:	e012      	b.n	800461c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fe fe6d 	bl	80032d4 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d908      	bls.n	800461c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e339      	b.n	8004c82 <HAL_RCC_OscConfig+0x100e>
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	10908120 	.word	0x10908120
 8004618:	40007000 	.word	0x40007000
 800461c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004620:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004624:	2202      	movs	r2, #2
 8004626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800462c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	fa93 f2a3 	rbit	r2, r3
 8004636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800463a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004644:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004648:	2202      	movs	r2, #2
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004650:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	fa93 f2a3 	rbit	r2, r3
 800465a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004662:	601a      	str	r2, [r3, #0]
  return result;
 8004664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004668:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800466c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <HAL_RCC_OscConfig+0xa10>
 800467e:	4b98      	ldr	r3, [pc, #608]	@ (80048e0 <HAL_RCC_OscConfig+0xc6c>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	e013      	b.n	80046ac <HAL_RCC_OscConfig+0xa38>
 8004684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004688:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800468c:	2202      	movs	r2, #2
 800468e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004694:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	fa93 f2a3 	rbit	r2, r3
 800469e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	4b8d      	ldr	r3, [pc, #564]	@ (80048e0 <HAL_RCC_OscConfig+0xc6c>)
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046b4:	2102      	movs	r1, #2
 80046b6:	6011      	str	r1, [r2, #0]
 80046b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	fa92 f1a2 	rbit	r1, r2
 80046c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046ce:	6011      	str	r1, [r2, #0]
  return result;
 80046d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	fab2 f282 	clz	r2, r2
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	f002 021f 	and.w	r2, r2, #31
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f43f af7f 	beq.w	80045f6 <HAL_RCC_OscConfig+0x982>
 80046f8:	e07d      	b.n	80047f6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fe fdeb 	bl	80032d4 <HAL_GetTick>
 80046fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fe fde6 	bl	80032d4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e2b2      	b.n	8004c82 <HAL_RCC_OscConfig+0x100e>
 800471c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004720:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004724:	2202      	movs	r2, #2
 8004726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	fa93 f2a3 	rbit	r2, r3
 8004736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004744:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004748:	2202      	movs	r2, #2
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004750:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	fa93 f2a3 	rbit	r2, r3
 800475a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004762:	601a      	str	r2, [r3, #0]
  return result;
 8004764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004768:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800476c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <HAL_RCC_OscConfig+0xb10>
 800477e:	4b58      	ldr	r3, [pc, #352]	@ (80048e0 <HAL_RCC_OscConfig+0xc6c>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	e013      	b.n	80047ac <HAL_RCC_OscConfig+0xb38>
 8004784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004788:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800478c:	2202      	movs	r2, #2
 800478e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004794:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	fa93 f2a3 	rbit	r2, r3
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	4b4d      	ldr	r3, [pc, #308]	@ (80048e0 <HAL_RCC_OscConfig+0xc6c>)
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047b0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047b4:	2102      	movs	r1, #2
 80047b6:	6011      	str	r1, [r2, #0]
 80047b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047bc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	fa92 f1a2 	rbit	r1, r2
 80047c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047ca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047ce:	6011      	str	r1, [r2, #0]
  return result;
 80047d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	fab2 f282 	clz	r2, r2
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	f002 021f 	and.w	r2, r2, #31
 80047ea:	2101      	movs	r1, #1
 80047ec:	fa01 f202 	lsl.w	r2, r1, r2
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d186      	bne.n	8004704 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047f6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d105      	bne.n	800480a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fe:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_RCC_OscConfig+0xc6c>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4a37      	ldr	r2, [pc, #220]	@ (80048e0 <HAL_RCC_OscConfig+0xc6c>)
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004808:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8232 	beq.w	8004c80 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800481c:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <HAL_RCC_OscConfig+0xc6c>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b08      	cmp	r3, #8
 8004826:	f000 8201 	beq.w	8004c2c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800482a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	2b02      	cmp	r3, #2
 8004838:	f040 8157 	bne.w	8004aea <HAL_RCC_OscConfig+0xe76>
 800483c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004840:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004844:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	fa93 f2a3 	rbit	r2, r3
 8004858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004860:	601a      	str	r2, [r3, #0]
  return result;
 8004862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004866:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800486a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486c:	fab3 f383 	clz	r3, r3
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004876:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	461a      	mov	r2, r3
 800487e:	2300      	movs	r3, #0
 8004880:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004882:	f7fe fd27 	bl	80032d4 <HAL_GetTick>
 8004886:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800488a:	e009      	b.n	80048a0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488c:	f7fe fd22 	bl	80032d4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e1f0      	b.n	8004c82 <HAL_RCC_OscConfig+0x100e>
 80048a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	fa93 f2a3 	rbit	r2, r3
 80048bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048c4:	601a      	str	r2, [r3, #0]
  return result;
 80048c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d0:	fab3 f383 	clz	r3, r3
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80048d8:	d804      	bhi.n	80048e4 <HAL_RCC_OscConfig+0xc70>
 80048da:	4b01      	ldr	r3, [pc, #4]	@ (80048e0 <HAL_RCC_OscConfig+0xc6c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	e029      	b.n	8004934 <HAL_RCC_OscConfig+0xcc0>
 80048e0:	40021000 	.word	0x40021000
 80048e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80048ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	fa93 f2a3 	rbit	r2, r3
 8004900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004904:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004912:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	fa93 f2a3 	rbit	r2, r3
 8004926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	4bc3      	ldr	r3, [pc, #780]	@ (8004c40 <HAL_RCC_OscConfig+0xfcc>)
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004938:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800493c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004946:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	fa92 f1a2 	rbit	r1, r2
 8004950:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004954:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004958:	6011      	str	r1, [r2, #0]
  return result;
 800495a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800495e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	fab2 f282 	clz	r2, r2
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	f042 0220 	orr.w	r2, r2, #32
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	f002 021f 	and.w	r2, r2, #31
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f202 	lsl.w	r2, r1, r2
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d185      	bne.n	800488c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004980:	4baf      	ldr	r3, [pc, #700]	@ (8004c40 <HAL_RCC_OscConfig+0xfcc>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800498c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004998:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	430b      	orrs	r3, r1
 80049a2:	49a7      	ldr	r1, [pc, #668]	@ (8004c40 <HAL_RCC_OscConfig+0xfcc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	604b      	str	r3, [r1, #4]
 80049a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	fa93 f2a3 	rbit	r2, r3
 80049c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049cc:	601a      	str	r2, [r3, #0]
  return result;
 80049ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d8:	fab3 f383 	clz	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80049e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	461a      	mov	r2, r3
 80049ea:	2301      	movs	r3, #1
 80049ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fe fc71 	bl	80032d4 <HAL_GetTick>
 80049f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f6:	e009      	b.n	8004a0c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fe fc6c 	bl	80032d4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e13a      	b.n	8004c82 <HAL_RCC_OscConfig+0x100e>
 8004a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a10:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a1e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	fa93 f2a3 	rbit	r2, r3
 8004a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a2c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a30:	601a      	str	r2, [r3, #0]
  return result;
 8004a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a36:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a44:	d802      	bhi.n	8004a4c <HAL_RCC_OscConfig+0xdd8>
 8004a46:	4b7e      	ldr	r3, [pc, #504]	@ (8004c40 <HAL_RCC_OscConfig+0xfcc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	e027      	b.n	8004a9c <HAL_RCC_OscConfig+0xe28>
 8004a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a50:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	fa93 f2a3 	rbit	r2, r3
 8004a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a76:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a84:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	fa93 f2a3 	rbit	r2, r3
 8004a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a92:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	4b69      	ldr	r3, [pc, #420]	@ (8004c40 <HAL_RCC_OscConfig+0xfcc>)
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aa0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004aa4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004aa8:	6011      	str	r1, [r2, #0]
 8004aaa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	fa92 f1a2 	rbit	r1, r2
 8004ab8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004abc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ac0:	6011      	str	r1, [r2, #0]
  return result;
 8004ac2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	fab2 f282 	clz	r2, r2
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	f042 0220 	orr.w	r2, r2, #32
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	f002 021f 	and.w	r2, r2, #31
 8004adc:	2101      	movs	r1, #1
 8004ade:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d087      	beq.n	80049f8 <HAL_RCC_OscConfig+0xd84>
 8004ae8:	e0ca      	b.n	8004c80 <HAL_RCC_OscConfig+0x100c>
 8004aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004af2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004afc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	fa93 f2a3 	rbit	r2, r3
 8004b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b0e:	601a      	str	r2, [r3, #0]
  return result;
 8004b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe fbd0 	bl	80032d4 <HAL_GetTick>
 8004b34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b38:	e009      	b.n	8004b4e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fe fbcb 	bl	80032d4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e099      	b.n	8004c82 <HAL_RCC_OscConfig+0x100e>
 8004b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b52:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	fa93 f2a3 	rbit	r2, r3
 8004b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b72:	601a      	str	r2, [r3, #0]
  return result;
 8004b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b86:	d802      	bhi.n	8004b8e <HAL_RCC_OscConfig+0xf1a>
 8004b88:	4b2d      	ldr	r3, [pc, #180]	@ (8004c40 <HAL_RCC_OscConfig+0xfcc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	e027      	b.n	8004bde <HAL_RCC_OscConfig+0xf6a>
 8004b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b92:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004b96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	fa93 f2a3 	rbit	r2, r3
 8004baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fa93 f2a3 	rbit	r2, r3
 8004bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	4b19      	ldr	r3, [pc, #100]	@ (8004c40 <HAL_RCC_OscConfig+0xfcc>)
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004be2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004be6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004bea:	6011      	str	r1, [r2, #0]
 8004bec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bf0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	fa92 f1a2 	rbit	r1, r2
 8004bfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bfe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c02:	6011      	str	r1, [r2, #0]
  return result;
 8004c04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	fab2 f282 	clz	r2, r2
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	f042 0220 	orr.w	r2, r2, #32
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	f002 021f 	and.w	r2, r2, #31
 8004c1e:	2101      	movs	r1, #1
 8004c20:	fa01 f202 	lsl.w	r2, r1, r2
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d187      	bne.n	8004b3a <HAL_RCC_OscConfig+0xec6>
 8004c2a:	e029      	b.n	8004c80 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d103      	bne.n	8004c44 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e020      	b.n	8004c82 <HAL_RCC_OscConfig+0x100e>
 8004c40:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c44:	4b11      	ldr	r3, [pc, #68]	@ (8004c8c <HAL_RCC_OscConfig+0x1018>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c4c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d10b      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c68:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40021000 	.word	0x40021000

08004c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b09e      	sub	sp, #120	@ 0x78
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e154      	b.n	8004f52 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca8:	4b89      	ldr	r3, [pc, #548]	@ (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d910      	bls.n	8004cd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb6:	4b86      	ldr	r3, [pc, #536]	@ (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 0207 	bic.w	r2, r3, #7
 8004cbe:	4984      	ldr	r1, [pc, #528]	@ (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b82      	ldr	r3, [pc, #520]	@ (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e13c      	b.n	8004f52 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4978      	ldr	r1, [pc, #480]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80cd 	beq.w	8004e9e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d137      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xec>
 8004d0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d10:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004d1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d24:	d802      	bhi.n	8004d2c <HAL_RCC_ClockConfig+0x9c>
 8004d26:	4b6b      	ldr	r3, [pc, #428]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	e00f      	b.n	8004d4c <HAL_RCC_ClockConfig+0xbc>
 8004d2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d34:	fa93 f3a3 	rbit	r3, r3
 8004d38:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d42:	fa93 f3a3 	rbit	r3, r3
 8004d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d48:	4b62      	ldr	r3, [pc, #392]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d54:	fa92 f2a2 	rbit	r2, r2
 8004d58:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004d5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d5c:	fab2 f282 	clz	r2, r2
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	f042 0220 	orr.w	r2, r2, #32
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	f002 021f 	and.w	r2, r2, #31
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d171      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0ea      	b.n	8004f52 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d137      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x164>
 8004d84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8c:	fa93 f3a3 	rbit	r3, r3
 8004d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d9c:	d802      	bhi.n	8004da4 <HAL_RCC_ClockConfig+0x114>
 8004d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	e00f      	b.n	8004dc4 <HAL_RCC_ClockConfig+0x134>
 8004da4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dc0:	4b44      	ldr	r3, [pc, #272]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dc8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dcc:	fa92 f2a2 	rbit	r2, r2
 8004dd0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004dd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dd4:	fab2 f282 	clz	r2, r2
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	f042 0220 	orr.w	r2, r2, #32
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	f002 021f 	and.w	r2, r2, #31
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d135      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0ae      	b.n	8004f52 <HAL_RCC_ClockConfig+0x2c2>
 8004df4:	2302      	movs	r3, #2
 8004df6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	fab3 f383 	clz	r3, r3
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e0a:	d802      	bhi.n	8004e12 <HAL_RCC_ClockConfig+0x182>
 8004e0c:	4b31      	ldr	r3, [pc, #196]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	e00d      	b.n	8004e2e <HAL_RCC_ClockConfig+0x19e>
 8004e12:	2302      	movs	r3, #2
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	fa93 f3a3 	rbit	r3, r3
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1e:	2302      	movs	r3, #2
 8004e20:	623b      	str	r3, [r7, #32]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	fa93 f3a3 	rbit	r3, r3
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	2202      	movs	r2, #2
 8004e30:	61ba      	str	r2, [r7, #24]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	fa92 f2a2 	rbit	r2, r2
 8004e38:	617a      	str	r2, [r7, #20]
  return result;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	fab2 f282 	clz	r2, r2
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	f042 0220 	orr.w	r2, r2, #32
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	f002 021f 	and.w	r2, r2, #31
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e07a      	b.n	8004f52 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f023 0203 	bic.w	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	491a      	ldr	r1, [pc, #104]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e6e:	f7fe fa31 	bl	80032d4 <HAL_GetTick>
 8004e72:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e74:	e00a      	b.n	8004e8c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e76:	f7fe fa2d 	bl	80032d4 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e062      	b.n	8004f52 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <HAL_RCC_ClockConfig+0x244>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 020c 	and.w	r2, r3, #12
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d1eb      	bne.n	8004e76 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d215      	bcs.n	8004ed8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 0207 	bic.w	r2, r3, #7
 8004eb4:	4906      	ldr	r1, [pc, #24]	@ (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebc:	4b04      	ldr	r3, [pc, #16]	@ (8004ed0 <HAL_RCC_ClockConfig+0x240>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d006      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e041      	b.n	8004f52 <HAL_RCC_ClockConfig+0x2c2>
 8004ece:	bf00      	nop
 8004ed0:	40022000 	.word	0x40022000
 8004ed4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f5c <HAL_RCC_ClockConfig+0x2cc>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	491a      	ldr	r1, [pc, #104]	@ (8004f5c <HAL_RCC_ClockConfig+0x2cc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f02:	4b16      	ldr	r3, [pc, #88]	@ (8004f5c <HAL_RCC_ClockConfig+0x2cc>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4912      	ldr	r1, [pc, #72]	@ (8004f5c <HAL_RCC_ClockConfig+0x2cc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f16:	f000 f829 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <HAL_RCC_ClockConfig+0x2cc>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f24:	22f0      	movs	r2, #240	@ 0xf0
 8004f26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	fa92 f2a2 	rbit	r2, r2
 8004f2e:	60fa      	str	r2, [r7, #12]
  return result;
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	fab2 f282 	clz	r2, r2
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	40d3      	lsrs	r3, r2
 8004f3a:	4a09      	ldr	r2, [pc, #36]	@ (8004f60 <HAL_RCC_ClockConfig+0x2d0>)
 8004f3c:	5cd3      	ldrb	r3, [r2, r3]
 8004f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004f42:	4a08      	ldr	r2, [pc, #32]	@ (8004f64 <HAL_RCC_ClockConfig+0x2d4>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f46:	4b08      	ldr	r3, [pc, #32]	@ (8004f68 <HAL_RCC_ClockConfig+0x2d8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe f97e 	bl	800324c <HAL_InitTick>
  
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3778      	adds	r7, #120	@ 0x78
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	0800a3d0 	.word	0x0800a3d0
 8004f64:	2000001c 	.word	0x2000001c
 8004f68:	20000020 	.word	0x20000020

08004f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004f86:	4b1e      	ldr	r3, [pc, #120]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d002      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0x30>
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d003      	beq.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x36>
 8004f9a:	e026      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f9c:	4b19      	ldr	r3, [pc, #100]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f9e:	613b      	str	r3, [r7, #16]
      break;
 8004fa0:	e026      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	0c9b      	lsrs	r3, r3, #18
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	4a17      	ldr	r2, [pc, #92]	@ (8005008 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fac:	5cd3      	ldrb	r3, [r2, r3]
 8004fae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004fb0:	4b13      	ldr	r3, [pc, #76]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	4a14      	ldr	r2, [pc, #80]	@ (800500c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fba:	5cd3      	ldrb	r3, [r2, r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	fb02 f303 	mul.w	r3, r2, r3
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e004      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8005010 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	613b      	str	r3, [r7, #16]
      break;
 8004fe8:	e002      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fea:	4b0a      	ldr	r3, [pc, #40]	@ (8005014 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004fec:	613b      	str	r3, [r7, #16]
      break;
 8004fee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff0:	693b      	ldr	r3, [r7, #16]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000
 8005004:	01e84800 	.word	0x01e84800
 8005008:	0800a3e8 	.word	0x0800a3e8
 800500c:	0800a3f8 	.word	0x0800a3f8
 8005010:	003d0900 	.word	0x003d0900
 8005014:	007a1200 	.word	0x007a1200

08005018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800501c:	4b03      	ldr	r3, [pc, #12]	@ (800502c <HAL_RCC_GetHCLKFreq+0x14>)
 800501e:	681b      	ldr	r3, [r3, #0]
}
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	2000001c 	.word	0x2000001c

08005030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005036:	f7ff ffef 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 800503a:	4601      	mov	r1, r0
 800503c:	4b0b      	ldr	r3, [pc, #44]	@ (800506c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005044:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005048:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	fa92 f2a2 	rbit	r2, r2
 8005050:	603a      	str	r2, [r7, #0]
  return result;
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	fab2 f282 	clz	r2, r2
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	40d3      	lsrs	r3, r2
 800505c:	4a04      	ldr	r2, [pc, #16]	@ (8005070 <HAL_RCC_GetPCLK1Freq+0x40>)
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40021000 	.word	0x40021000
 8005070:	0800a3e0 	.word	0x0800a3e0

08005074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800507a:	f7ff ffcd 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 800507e:	4601      	mov	r1, r0
 8005080:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005088:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800508c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	fa92 f2a2 	rbit	r2, r2
 8005094:	603a      	str	r2, [r7, #0]
  return result;
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	fab2 f282 	clz	r2, r2
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	40d3      	lsrs	r3, r2
 80050a0:	4a04      	ldr	r2, [pc, #16]	@ (80050b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050a2:	5cd3      	ldrb	r3, [r2, r3]
 80050a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	0800a3e0 	.word	0x0800a3e0

080050b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b092      	sub	sp, #72	@ 0x48
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80d2 	beq.w	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10e      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e8:	4b4a      	ldr	r3, [pc, #296]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	4a49      	ldr	r2, [pc, #292]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	61d3      	str	r3, [r2, #28]
 80050f4:	4b47      	ldr	r3, [pc, #284]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b44      	ldr	r3, [pc, #272]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d118      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005112:	4b41      	ldr	r3, [pc, #260]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a40      	ldr	r2, [pc, #256]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511e:	f7fe f8d9 	bl	80032d4 <HAL_GetTick>
 8005122:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	e008      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005126:	f7fe f8d5 	bl	80032d4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b64      	cmp	r3, #100	@ 0x64
 8005132:	d901      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e13a      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	4b37      	ldr	r3, [pc, #220]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005144:	4b33      	ldr	r3, [pc, #204]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800514e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8082 	beq.w	800525a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005160:	429a      	cmp	r2, r3
 8005162:	d07a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005164:	4b2b      	ldr	r3, [pc, #172]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800516e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005172:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005176:	fa93 f3a3 	rbit	r3, r3
 800517a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800517c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800517e:	fab3 f383 	clz	r3, r3
 8005182:	b2db      	uxtb	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	4b25      	ldr	r3, [pc, #148]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	461a      	mov	r2, r3
 800518e:	2301      	movs	r3, #1
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005196:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519a:	fa93 f3a3 	rbit	r3, r3
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051a2:	fab3 f383 	clz	r3, r3
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b1c      	ldr	r3, [pc, #112]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	461a      	mov	r2, r3
 80051b2:	2300      	movs	r3, #0
 80051b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051b6:	4a17      	ldr	r2, [pc, #92]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80051b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d049      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c6:	f7fe f885 	bl	80032d4 <HAL_GetTick>
 80051ca:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051cc:	e00a      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fe f881 	bl	80032d4 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051dc:	4293      	cmp	r3, r2
 80051de:	d901      	bls.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e0e4      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80051e4:	2302      	movs	r3, #2
 80051e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	fa93 f3a3 	rbit	r3, r3
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f0:	2302      	movs	r3, #2
 80051f2:	623b      	str	r3, [r7, #32]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	fa93 f3a3 	rbit	r3, r3
 80051fa:	61fb      	str	r3, [r7, #28]
  return result;
 80051fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d108      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800520e:	4b01      	ldr	r3, [pc, #4]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	e00d      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005214:	40021000 	.word	0x40021000
 8005218:	40007000 	.word	0x40007000
 800521c:	10908100 	.word	0x10908100
 8005220:	2302      	movs	r3, #2
 8005222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	fa93 f3a3 	rbit	r3, r3
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	4b62      	ldr	r3, [pc, #392]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	2202      	movs	r2, #2
 8005232:	613a      	str	r2, [r7, #16]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	fa92 f2a2 	rbit	r2, r2
 800523a:	60fa      	str	r2, [r7, #12]
  return result;
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	fab2 f282 	clz	r2, r2
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	f002 021f 	and.w	r2, r2, #31
 800524e:	2101      	movs	r1, #1
 8005250:	fa01 f202 	lsl.w	r2, r1, r2
 8005254:	4013      	ands	r3, r2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0b9      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800525a:	4b57      	ldr	r3, [pc, #348]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4954      	ldr	r1, [pc, #336]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005268:	4313      	orrs	r3, r2
 800526a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800526c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005270:	2b01      	cmp	r3, #1
 8005272:	d105      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005274:	4b50      	ldr	r3, [pc, #320]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4a4f      	ldr	r2, [pc, #316]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800527a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800527e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800528c:	4b4a      	ldr	r3, [pc, #296]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	f023 0203 	bic.w	r2, r3, #3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4947      	ldr	r1, [pc, #284]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800529a:	4313      	orrs	r3, r2
 800529c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052aa:	4b43      	ldr	r3, [pc, #268]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	f023 0210 	bic.w	r2, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	4940      	ldr	r1, [pc, #256]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	630b      	str	r3, [r1, #48]	@ 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052c8:	4b3b      	ldr	r3, [pc, #236]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	f023 0220 	bic.w	r2, r3, #32
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	4938      	ldr	r1, [pc, #224]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052e6:	4b34      	ldr	r3, [pc, #208]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ea:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	4931      	ldr	r1, [pc, #196]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005304:	4b2c      	ldr	r3, [pc, #176]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	4929      	ldr	r1, [pc, #164]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005312:	4313      	orrs	r3, r2
 8005314:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005322:	4b25      	ldr	r3, [pc, #148]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	4922      	ldr	r1, [pc, #136]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005330:	4313      	orrs	r3, r2
 8005332:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005340:	4b1d      	ldr	r3, [pc, #116]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	491a      	ldr	r1, [pc, #104]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800534e:	4313      	orrs	r3, r2
 8005350:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800535e:	4b16      	ldr	r3, [pc, #88]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005362:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	4913      	ldr	r1, [pc, #76]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800536c:	4313      	orrs	r3, r2
 800536e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800537c:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	490b      	ldr	r1, [pc, #44]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800538a:	4313      	orrs	r3, r2
 800538c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800539a:	4b07      	ldr	r3, [pc, #28]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	4904      	ldr	r1, [pc, #16]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3748      	adds	r7, #72	@ 0x48
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000

080053bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e049      	b.n	8005462 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fd fd00 	bl	8002de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f000 fe46 	bl	800608c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e049      	b.n	8005510 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f841 	bl	8005518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f000 fdef 	bl	800608c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e03c      	b.n	80055d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b04      	cmp	r3, #4
 800555c:	d109      	bne.n	8005572 <HAL_TIM_PWM_Start_DMA+0x46>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	e02f      	b.n	80055d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d109      	bne.n	800558c <HAL_TIM_PWM_Start_DMA+0x60>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	e022      	b.n	80055d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b0c      	cmp	r3, #12
 8005590:	d109      	bne.n	80055a6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	bf0c      	ite	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	2300      	movne	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	e015      	b.n	80055d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d109      	bne.n	80055c0 <HAL_TIM_PWM_Start_DMA+0x94>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	e008      	b.n	80055d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
 80055d8:	e192      	b.n	8005900 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e03c      	b.n	800566e <HAL_TIM_PWM_Start_DMA+0x142>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d109      	bne.n	800560e <HAL_TIM_PWM_Start_DMA+0xe2>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e02f      	b.n	800566e <HAL_TIM_PWM_Start_DMA+0x142>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d109      	bne.n	8005628 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e022      	b.n	800566e <HAL_TIM_PWM_Start_DMA+0x142>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b0c      	cmp	r3, #12
 800562c:	d109      	bne.n	8005642 <HAL_TIM_PWM_Start_DMA+0x116>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	e015      	b.n	800566e <HAL_TIM_PWM_Start_DMA+0x142>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b10      	cmp	r3, #16
 8005646:	d109      	bne.n	800565c <HAL_TIM_PWM_Start_DMA+0x130>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e008      	b.n	800566e <HAL_TIM_PWM_Start_DMA+0x142>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d034      	beq.n	80056dc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_TIM_PWM_Start_DMA+0x152>
 8005678:	887b      	ldrh	r3, [r7, #2]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e13e      	b.n	8005900 <HAL_TIM_PWM_Start_DMA+0x3d4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <HAL_TIM_PWM_Start_DMA+0x166>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005690:	e026      	b.n	80056e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_PWM_Start_DMA+0x176>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056a0:	e01e      	b.n	80056e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d104      	bne.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x186>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056b0:	e016      	b.n	80056e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	d104      	bne.n	80056c2 <HAL_TIM_PWM_Start_DMA+0x196>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056c0:	e00e      	b.n	80056e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056d0:	e006      	b.n	80056e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056da:	e001      	b.n	80056e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e10f      	b.n	8005900 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }

  switch (Channel)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b0c      	cmp	r3, #12
 80056e4:	f200 80ae 	bhi.w	8005844 <HAL_TIM_PWM_Start_DMA+0x318>
 80056e8:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005725 	.word	0x08005725
 80056f4:	08005845 	.word	0x08005845
 80056f8:	08005845 	.word	0x08005845
 80056fc:	08005845 	.word	0x08005845
 8005700:	0800576d 	.word	0x0800576d
 8005704:	08005845 	.word	0x08005845
 8005708:	08005845 	.word	0x08005845
 800570c:	08005845 	.word	0x08005845
 8005710:	080057b5 	.word	0x080057b5
 8005714:	08005845 	.word	0x08005845
 8005718:	08005845 	.word	0x08005845
 800571c:	08005845 	.word	0x08005845
 8005720:	080057fd 	.word	0x080057fd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	4a77      	ldr	r2, [pc, #476]	@ (8005908 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800572a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005730:	4a76      	ldr	r2, [pc, #472]	@ (800590c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005732:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005738:	4a75      	ldr	r2, [pc, #468]	@ (8005910 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800573a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3334      	adds	r3, #52	@ 0x34
 8005748:	461a      	mov	r2, r3
 800574a:	887b      	ldrh	r3, [r7, #2]
 800574c:	f7fd ff4a 	bl	80035e4 <HAL_DMA_Start_IT>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e0d2      	b.n	8005900 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005768:	60da      	str	r2, [r3, #12]
      break;
 800576a:	e06e      	b.n	800584a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	4a65      	ldr	r2, [pc, #404]	@ (8005908 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005778:	4a64      	ldr	r2, [pc, #400]	@ (800590c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800577a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	4a63      	ldr	r2, [pc, #396]	@ (8005910 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005782:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3338      	adds	r3, #56	@ 0x38
 8005790:	461a      	mov	r2, r3
 8005792:	887b      	ldrh	r3, [r7, #2]
 8005794:	f7fd ff26 	bl	80035e4 <HAL_DMA_Start_IT>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e0ae      	b.n	8005900 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057b0:	60da      	str	r2, [r3, #12]
      break;
 80057b2:	e04a      	b.n	800584a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b8:	4a53      	ldr	r2, [pc, #332]	@ (8005908 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80057ba:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	4a52      	ldr	r2, [pc, #328]	@ (800590c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80057c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	4a51      	ldr	r2, [pc, #324]	@ (8005910 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80057ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	333c      	adds	r3, #60	@ 0x3c
 80057d8:	461a      	mov	r2, r3
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	f7fd ff02 	bl	80035e4 <HAL_DMA_Start_IT>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e08a      	b.n	8005900 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057f8:	60da      	str	r2, [r3, #12]
      break;
 80057fa:	e026      	b.n	800584a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	4a41      	ldr	r2, [pc, #260]	@ (8005908 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005802:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005808:	4a40      	ldr	r2, [pc, #256]	@ (800590c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800580a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005810:	4a3f      	ldr	r2, [pc, #252]	@ (8005910 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3340      	adds	r3, #64	@ 0x40
 8005820:	461a      	mov	r2, r3
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	f7fd fede 	bl	80035e4 <HAL_DMA_Start_IT>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e066      	b.n	8005900 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005840:	60da      	str	r2, [r3, #12]
      break;
 8005842:	e002      	b.n	800584a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
      break;
 8005848:	bf00      	nop
  }

  if (status == HAL_OK)
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d156      	bne.n	80058fe <HAL_TIM_PWM_Start_DMA+0x3d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2201      	movs	r2, #1
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 ffd1 	bl	8006800 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a2c      	ldr	r2, [pc, #176]	@ (8005914 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_TIM_PWM_Start_DMA+0x35a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2a      	ldr	r2, [pc, #168]	@ (8005918 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_TIM_PWM_Start_DMA+0x35a>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a29      	ldr	r2, [pc, #164]	@ (800591c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_TIM_PWM_Start_DMA+0x35a>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a27      	ldr	r2, [pc, #156]	@ (8005920 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_TIM_PWM_Start_DMA+0x35e>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_TIM_PWM_Start_DMA+0x360>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800589e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005914 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_TIM_PWM_Start_DMA+0x392>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b2:	d004      	beq.n	80058be <HAL_TIM_PWM_Start_DMA+0x392>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a17      	ldr	r2, [pc, #92]	@ (8005918 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d115      	bne.n	80058ea <HAL_TIM_PWM_Start_DMA+0x3be>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	4b17      	ldr	r3, [pc, #92]	@ (8005924 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d015      	beq.n	80058fc <HAL_TIM_PWM_Start_DMA+0x3d0>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d6:	d011      	beq.n	80058fc <HAL_TIM_PWM_Start_DMA+0x3d0>
      {
        __HAL_TIM_ENABLE(htim);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e8:	e008      	b.n	80058fc <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e000      	b.n	80058fe <HAL_TIM_PWM_Start_DMA+0x3d2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	08005f7d 	.word	0x08005f7d
 800590c:	08006025 	.word	0x08006025
 8005910:	08005eeb 	.word	0x08005eeb
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40014000 	.word	0x40014000
 800591c:	40014400 	.word	0x40014400
 8005920:	40014800 	.word	0x40014800
 8005924:	00010007 	.word	0x00010007

08005928 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d855      	bhi.n	80059e8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800593c:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005979 	.word	0x08005979
 8005948:	080059e9 	.word	0x080059e9
 800594c:	080059e9 	.word	0x080059e9
 8005950:	080059e9 	.word	0x080059e9
 8005954:	08005995 	.word	0x08005995
 8005958:	080059e9 	.word	0x080059e9
 800595c:	080059e9 	.word	0x080059e9
 8005960:	080059e9 	.word	0x080059e9
 8005964:	080059b1 	.word	0x080059b1
 8005968:	080059e9 	.word	0x080059e9
 800596c:	080059e9 	.word	0x080059e9
 8005970:	080059e9 	.word	0x080059e9
 8005974:	080059cd 	.word	0x080059cd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005986:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	4618      	mov	r0, r3
 800598e:	f7fd fe88 	bl	80036a2 <HAL_DMA_Abort_IT>
      break;
 8005992:	e02c      	b.n	80059ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fd fe7a 	bl	80036a2 <HAL_DMA_Abort_IT>
      break;
 80059ae:	e01e      	b.n	80059ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fd fe6c 	bl	80036a2 <HAL_DMA_Abort_IT>
      break;
 80059ca:	e010      	b.n	80059ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fd fe5e 	bl	80036a2 <HAL_DMA_Abort_IT>
      break;
 80059e6:	e002      	b.n	80059ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
      break;
 80059ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d17b      	bne.n	8005aec <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2200      	movs	r2, #0
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 feff 	bl	8006800 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a3c      	ldr	r2, [pc, #240]	@ (8005af8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_TIM_PWM_Stop_DMA+0x102>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a3a      	ldr	r2, [pc, #232]	@ (8005afc <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_TIM_PWM_Stop_DMA+0x102>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a39      	ldr	r2, [pc, #228]	@ (8005b00 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_TIM_PWM_Stop_DMA+0x102>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a37      	ldr	r2, [pc, #220]	@ (8005b04 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_PWM_Stop_DMA+0x106>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_TIM_PWM_Stop_DMA+0x108>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d017      	beq.n	8005a64 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10f      	bne.n	8005a64 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a1a      	ldr	r2, [r3, #32]
 8005a4a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d107      	bne.n	8005a64 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a62:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a1a      	ldr	r2, [r3, #32]
 8005a6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10f      	bne.n	8005a94 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0201 	bic.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aa2:	e023      	b.n	8005aec <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d104      	bne.n	8005ab4 <HAL_TIM_PWM_Stop_DMA+0x18c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ab2:	e01b      	b.n	8005aec <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d104      	bne.n	8005ac4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac2:	e013      	b.n	8005aec <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b0c      	cmp	r3, #12
 8005ac8:	d104      	bne.n	8005ad4 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ad2:	e00b      	b.n	8005aec <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	d104      	bne.n	8005ae4 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae2:	e003      	b.n	8005aec <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0ff      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b14      	cmp	r3, #20
 8005b32:	f200 80f0 	bhi.w	8005d16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b36:	a201      	add	r2, pc, #4	@ (adr r2, 8005b3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b91 	.word	0x08005b91
 8005b40:	08005d17 	.word	0x08005d17
 8005b44:	08005d17 	.word	0x08005d17
 8005b48:	08005d17 	.word	0x08005d17
 8005b4c:	08005bd1 	.word	0x08005bd1
 8005b50:	08005d17 	.word	0x08005d17
 8005b54:	08005d17 	.word	0x08005d17
 8005b58:	08005d17 	.word	0x08005d17
 8005b5c:	08005c13 	.word	0x08005c13
 8005b60:	08005d17 	.word	0x08005d17
 8005b64:	08005d17 	.word	0x08005d17
 8005b68:	08005d17 	.word	0x08005d17
 8005b6c:	08005c53 	.word	0x08005c53
 8005b70:	08005d17 	.word	0x08005d17
 8005b74:	08005d17 	.word	0x08005d17
 8005b78:	08005d17 	.word	0x08005d17
 8005b7c:	08005c95 	.word	0x08005c95
 8005b80:	08005d17 	.word	0x08005d17
 8005b84:	08005d17 	.word	0x08005d17
 8005b88:	08005d17 	.word	0x08005d17
 8005b8c:	08005cd5 	.word	0x08005cd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 faf2 	bl	8006180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0208 	orr.w	r2, r2, #8
 8005baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0204 	bic.w	r2, r2, #4
 8005bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6999      	ldr	r1, [r3, #24]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	619a      	str	r2, [r3, #24]
      break;
 8005bce:	e0a5      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fb58 	bl	800628c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6999      	ldr	r1, [r3, #24]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	021a      	lsls	r2, r3, #8
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	619a      	str	r2, [r3, #24]
      break;
 8005c10:	e084      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fbb7 	bl	800638c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0208 	orr.w	r2, r2, #8
 8005c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0204 	bic.w	r2, r2, #4
 8005c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69d9      	ldr	r1, [r3, #28]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	61da      	str	r2, [r3, #28]
      break;
 8005c50:	e064      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fc15 	bl	8006488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69d9      	ldr	r1, [r3, #28]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	021a      	lsls	r2, r3, #8
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	61da      	str	r2, [r3, #28]
      break;
 8005c92:	e043      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fc58 	bl	8006550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0208 	orr.w	r2, r2, #8
 8005cae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cd2:	e023      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fc96 	bl	800660c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	021a      	lsls	r2, r3, #8
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d14:	e002      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	75fb      	strb	r3, [r7, #23]
      break;
 8005d1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop

08005d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIM_ConfigClockSource+0x1c>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e0b6      	b.n	8005eba <HAL_TIM_ConfigClockSource+0x18a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d88:	d03e      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0xd8>
 8005d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d8e:	f200 8087 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d96:	f000 8086 	beq.w	8005ea6 <HAL_TIM_ConfigClockSource+0x176>
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d9e:	d87f      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
 8005da0:	2b70      	cmp	r3, #112	@ 0x70
 8005da2:	d01a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0xaa>
 8005da4:	2b70      	cmp	r3, #112	@ 0x70
 8005da6:	d87b      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
 8005da8:	2b60      	cmp	r3, #96	@ 0x60
 8005daa:	d050      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x11e>
 8005dac:	2b60      	cmp	r3, #96	@ 0x60
 8005dae:	d877      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
 8005db0:	2b50      	cmp	r3, #80	@ 0x50
 8005db2:	d03c      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0xfe>
 8005db4:	2b50      	cmp	r3, #80	@ 0x50
 8005db6:	d873      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
 8005db8:	2b40      	cmp	r3, #64	@ 0x40
 8005dba:	d058      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x13e>
 8005dbc:	2b40      	cmp	r3, #64	@ 0x40
 8005dbe:	d86f      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
 8005dc0:	2b30      	cmp	r3, #48	@ 0x30
 8005dc2:	d064      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x15e>
 8005dc4:	2b30      	cmp	r3, #48	@ 0x30
 8005dc6:	d86b      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d060      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x15e>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d867      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d05c      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x15e>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d05a      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x15e>
 8005dd8:	e062      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dea:	f000 fce9 	bl	80067c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	609a      	str	r2, [r3, #8]
      break;
 8005e06:	e04f      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e18:	f000 fcd2 	bl	80067c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e2a:	609a      	str	r2, [r3, #8]
      break;
 8005e2c:	e03c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f000 fc46 	bl	80066cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2150      	movs	r1, #80	@ 0x50
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fc9f 	bl	800678a <TIM_ITRx_SetConfig>
      break;
 8005e4c:	e02c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 fc65 	bl	800672a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2160      	movs	r1, #96	@ 0x60
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fc8f 	bl	800678a <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e01c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f000 fc26 	bl	80066cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2140      	movs	r1, #64	@ 0x40
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fc7f 	bl	800678a <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e00c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4619      	mov	r1, r3
 8005e98:	4610      	mov	r0, r2
 8005e9a:	f000 fc76 	bl	800678a <TIM_ITRx_SetConfig>
      break;
 8005e9e:	e003      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea4:	e000      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d107      	bne.n	8005f12 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f10:	e02a      	b.n	8005f68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d107      	bne.n	8005f2c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f2a:	e01d      	b.n	8005f68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d107      	bne.n	8005f46 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f44:	e010      	b.n	8005f68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d107      	bne.n	8005f60 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2208      	movs	r2, #8
 8005f54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f5e:	e003      	b.n	8005f68 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7ff ffb4 	bl	8005ed6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d10b      	bne.n	8005fac <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d136      	bne.n	8006010 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005faa:	e031      	b.n	8006010 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d10b      	bne.n	8005fce <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d125      	bne.n	8006010 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fcc:	e020      	b.n	8006010 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d10b      	bne.n	8005ff0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2204      	movs	r2, #4
 8005fdc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d114      	bne.n	8006010 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fee:	e00f      	b.n	8006010 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d10a      	bne.n	8006010 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d103      	bne.n	8006010 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7fc fb5b 	bl	80026cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	d103      	bne.n	8006044 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	771a      	strb	r2, [r3, #28]
 8006042:	e019      	b.n	8006078 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d103      	bne.n	8006056 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2202      	movs	r2, #2
 8006052:	771a      	strb	r2, [r3, #28]
 8006054:	e010      	b.n	8006078 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	429a      	cmp	r2, r3
 800605e:	d103      	bne.n	8006068 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2204      	movs	r2, #4
 8006064:	771a      	strb	r2, [r3, #28]
 8006066:	e007      	b.n	8006078 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d102      	bne.n	8006078 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2208      	movs	r2, #8
 8006076:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff ff22 	bl	8005ec2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	771a      	strb	r2, [r3, #28]
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a34      	ldr	r2, [pc, #208]	@ (8006170 <TIM_Base_SetConfig+0xe4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_Base_SetConfig+0x20>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060aa:	d108      	bne.n	80060be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006170 <TIM_Base_SetConfig+0xe4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00f      	beq.n	80060e6 <TIM_Base_SetConfig+0x5a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060cc:	d00b      	beq.n	80060e6 <TIM_Base_SetConfig+0x5a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a28      	ldr	r2, [pc, #160]	@ (8006174 <TIM_Base_SetConfig+0xe8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_Base_SetConfig+0x5a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a27      	ldr	r2, [pc, #156]	@ (8006178 <TIM_Base_SetConfig+0xec>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_Base_SetConfig+0x5a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a26      	ldr	r2, [pc, #152]	@ (800617c <TIM_Base_SetConfig+0xf0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d108      	bne.n	80060f8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a14      	ldr	r2, [pc, #80]	@ (8006170 <TIM_Base_SetConfig+0xe4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00b      	beq.n	800613c <TIM_Base_SetConfig+0xb0>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a13      	ldr	r2, [pc, #76]	@ (8006174 <TIM_Base_SetConfig+0xe8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d007      	beq.n	800613c <TIM_Base_SetConfig+0xb0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a12      	ldr	r2, [pc, #72]	@ (8006178 <TIM_Base_SetConfig+0xec>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_Base_SetConfig+0xb0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a11      	ldr	r2, [pc, #68]	@ (800617c <TIM_Base_SetConfig+0xf0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d103      	bne.n	8006144 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b01      	cmp	r3, #1
 8006154:	d105      	bne.n	8006162 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f023 0201 	bic.w	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	611a      	str	r2, [r3, #16]
  }
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800

08006180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f023 0201 	bic.w	r2, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 0302 	bic.w	r3, r3, #2
 80061cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a28      	ldr	r2, [pc, #160]	@ (800627c <TIM_OC1_SetConfig+0xfc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00b      	beq.n	80061f8 <TIM_OC1_SetConfig+0x78>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a27      	ldr	r2, [pc, #156]	@ (8006280 <TIM_OC1_SetConfig+0x100>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d007      	beq.n	80061f8 <TIM_OC1_SetConfig+0x78>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a26      	ldr	r2, [pc, #152]	@ (8006284 <TIM_OC1_SetConfig+0x104>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d003      	beq.n	80061f8 <TIM_OC1_SetConfig+0x78>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a25      	ldr	r2, [pc, #148]	@ (8006288 <TIM_OC1_SetConfig+0x108>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d10c      	bne.n	8006212 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f023 0308 	bic.w	r3, r3, #8
 80061fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f023 0304 	bic.w	r3, r3, #4
 8006210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a19      	ldr	r2, [pc, #100]	@ (800627c <TIM_OC1_SetConfig+0xfc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00b      	beq.n	8006232 <TIM_OC1_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a18      	ldr	r2, [pc, #96]	@ (8006280 <TIM_OC1_SetConfig+0x100>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <TIM_OC1_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a17      	ldr	r2, [pc, #92]	@ (8006284 <TIM_OC1_SetConfig+0x104>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_OC1_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a16      	ldr	r2, [pc, #88]	@ (8006288 <TIM_OC1_SetConfig+0x108>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d111      	bne.n	8006256 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40014000 	.word	0x40014000
 8006284:	40014400 	.word	0x40014400
 8006288:	40014800 	.word	0x40014800

0800628c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f023 0210 	bic.w	r2, r3, #16
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f023 0320 	bic.w	r3, r3, #32
 80062da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a24      	ldr	r2, [pc, #144]	@ (800637c <TIM_OC2_SetConfig+0xf0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10d      	bne.n	800630c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a1b      	ldr	r2, [pc, #108]	@ (800637c <TIM_OC2_SetConfig+0xf0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00b      	beq.n	800632c <TIM_OC2_SetConfig+0xa0>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a1a      	ldr	r2, [pc, #104]	@ (8006380 <TIM_OC2_SetConfig+0xf4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <TIM_OC2_SetConfig+0xa0>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a19      	ldr	r2, [pc, #100]	@ (8006384 <TIM_OC2_SetConfig+0xf8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC2_SetConfig+0xa0>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a18      	ldr	r2, [pc, #96]	@ (8006388 <TIM_OC2_SetConfig+0xfc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d113      	bne.n	8006354 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006332:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800633a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800

0800638c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a23      	ldr	r2, [pc, #140]	@ (8006478 <TIM_OC3_SetConfig+0xec>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d10d      	bne.n	800640a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006408:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a1a      	ldr	r2, [pc, #104]	@ (8006478 <TIM_OC3_SetConfig+0xec>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_OC3_SetConfig+0x9e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a19      	ldr	r2, [pc, #100]	@ (800647c <TIM_OC3_SetConfig+0xf0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_OC3_SetConfig+0x9e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <TIM_OC3_SetConfig+0xf4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_OC3_SetConfig+0x9e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <TIM_OC3_SetConfig+0xf8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d113      	bne.n	8006452 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	621a      	str	r2, [r3, #32]
}
 800646c:	bf00      	nop
 800646e:	371c      	adds	r7, #28
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40014000 	.word	0x40014000
 8006480:	40014400 	.word	0x40014400
 8006484:	40014800 	.word	0x40014800

08006488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	021b      	lsls	r3, r3, #8
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	031b      	lsls	r3, r3, #12
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a16      	ldr	r2, [pc, #88]	@ (8006540 <TIM_OC4_SetConfig+0xb8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00b      	beq.n	8006504 <TIM_OC4_SetConfig+0x7c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a15      	ldr	r2, [pc, #84]	@ (8006544 <TIM_OC4_SetConfig+0xbc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_OC4_SetConfig+0x7c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a14      	ldr	r2, [pc, #80]	@ (8006548 <TIM_OC4_SetConfig+0xc0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC4_SetConfig+0x7c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a13      	ldr	r2, [pc, #76]	@ (800654c <TIM_OC4_SetConfig+0xc4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d109      	bne.n	8006518 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800650a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	019b      	lsls	r3, r3, #6
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800

08006550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800657e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	041b      	lsls	r3, r3, #16
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a15      	ldr	r2, [pc, #84]	@ (80065fc <TIM_OC5_SetConfig+0xac>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_OC5_SetConfig+0x72>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a14      	ldr	r2, [pc, #80]	@ (8006600 <TIM_OC5_SetConfig+0xb0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_OC5_SetConfig+0x72>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a13      	ldr	r2, [pc, #76]	@ (8006604 <TIM_OC5_SetConfig+0xb4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_OC5_SetConfig+0x72>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a12      	ldr	r2, [pc, #72]	@ (8006608 <TIM_OC5_SetConfig+0xb8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d109      	bne.n	80065d6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	621a      	str	r2, [r3, #32]
}
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800

0800660c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	051b      	lsls	r3, r3, #20
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a16      	ldr	r2, [pc, #88]	@ (80066bc <TIM_OC6_SetConfig+0xb0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00b      	beq.n	8006680 <TIM_OC6_SetConfig+0x74>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a15      	ldr	r2, [pc, #84]	@ (80066c0 <TIM_OC6_SetConfig+0xb4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_OC6_SetConfig+0x74>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <TIM_OC6_SetConfig+0xb8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_OC6_SetConfig+0x74>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a13      	ldr	r2, [pc, #76]	@ (80066c8 <TIM_OC6_SetConfig+0xbc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d109      	bne.n	8006694 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006686:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	029b      	lsls	r3, r3, #10
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400
 80066c8:	40014800 	.word	0x40014800

080066cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f023 0201 	bic.w	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f023 030a 	bic.w	r3, r3, #10
 8006708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800672a:	b480      	push	{r7}
 800672c:	b087      	sub	sp, #28
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f023 0210 	bic.w	r2, r3, #16
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	031b      	lsls	r3, r3, #12
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006766:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	621a      	str	r2, [r3, #32]
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f043 0307 	orr.w	r3, r3, #7
 80067ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	609a      	str	r2, [r3, #8]
}
 80067b4:	bf00      	nop
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	021a      	lsls	r2, r3, #8
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	609a      	str	r2, [r3, #8]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2201      	movs	r2, #1
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1a      	ldr	r2, [r3, #32]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	43db      	mvns	r3, r3
 8006822:	401a      	ands	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1a      	ldr	r2, [r3, #32]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	fa01 f303 	lsl.w	r3, r1, r3
 8006838:	431a      	orrs	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006860:	2302      	movs	r3, #2
 8006862:	e04f      	b.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a21      	ldr	r2, [pc, #132]	@ (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d108      	bne.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a14      	ldr	r2, [pc, #80]	@ (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d009      	beq.n	80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068cc:	d004      	beq.n	80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a10      	ldr	r2, [pc, #64]	@ (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d10c      	bne.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40014000 	.word	0x40014000

08006918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e040      	b.n	80069ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fc fad8 	bl	8002ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2224      	movs	r2, #36	@ 0x24
 8006944:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fab0 	bl	8006ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f977 	bl	8006c58 <UART_SetConfig>
 800696a:	4603      	mov	r3, r0
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e01b      	b.n	80069ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb2f 	bl	8007008 <UART_CheckIdleState>
 80069aa:	4603      	mov	r3, r0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	@ 0x28
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d177      	bne.n	8006abc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_UART_Transmit+0x24>
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e070      	b.n	8006abe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2221      	movs	r2, #33	@ 0x21
 80069e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ea:	f7fc fc73 	bl	80032d4 <HAL_GetTick>
 80069ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	88fa      	ldrh	r2, [r7, #6]
 80069fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a08:	d108      	bne.n	8006a1c <HAL_UART_Transmit+0x68>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d104      	bne.n	8006a1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	e003      	b.n	8006a24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a24:	e02f      	b.n	8006a86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2180      	movs	r1, #128	@ 0x80
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fb91 	bl	8007158 <UART_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e03b      	b.n	8006abe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10b      	bne.n	8006a64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	881a      	ldrh	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	3302      	adds	r3, #2
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e007      	b.n	8006a74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	3301      	adds	r3, #1
 8006a72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1c9      	bne.n	8006a26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2140      	movs	r1, #64	@ 0x40
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fb5b 	bl	8007158 <UART_WaitOnFlagUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e005      	b.n	8006abe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e000      	b.n	8006abe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006abc:	2302      	movs	r3, #2
  }
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08a      	sub	sp, #40	@ 0x28
 8006aca:	af02      	add	r7, sp, #8
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	f040 80b6 	bne.w	8006c4e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_UART_Receive+0x28>
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e0ae      	b.n	8006c50 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2222      	movs	r2, #34	@ 0x22
 8006afe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b08:	f7fc fbe4 	bl	80032d4 <HAL_GetTick>
 8006b0c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	88fa      	ldrh	r2, [r7, #6]
 8006b12:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	88fa      	ldrh	r2, [r7, #6]
 8006b1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b26:	d10e      	bne.n	8006b46 <HAL_UART_Receive+0x80>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <HAL_UART_Receive+0x76>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b3a:	e02d      	b.n	8006b98 <HAL_UART_Receive+0xd2>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	22ff      	movs	r2, #255	@ 0xff
 8006b40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b44:	e028      	b.n	8006b98 <HAL_UART_Receive+0xd2>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10d      	bne.n	8006b6a <HAL_UART_Receive+0xa4>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <HAL_UART_Receive+0x9a>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	22ff      	movs	r2, #255	@ 0xff
 8006b5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b5e:	e01b      	b.n	8006b98 <HAL_UART_Receive+0xd2>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	227f      	movs	r2, #127	@ 0x7f
 8006b64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b68:	e016      	b.n	8006b98 <HAL_UART_Receive+0xd2>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b72:	d10d      	bne.n	8006b90 <HAL_UART_Receive+0xca>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <HAL_UART_Receive+0xc0>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	227f      	movs	r2, #127	@ 0x7f
 8006b80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b84:	e008      	b.n	8006b98 <HAL_UART_Receive+0xd2>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	223f      	movs	r2, #63	@ 0x3f
 8006b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b8e:	e003      	b.n	8006b98 <HAL_UART_Receive+0xd2>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b9e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba8:	d108      	bne.n	8006bbc <HAL_UART_Receive+0xf6>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e003      	b.n	8006bc4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006bc4:	e037      	b.n	8006c36 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2120      	movs	r1, #32
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fac1 	bl	8007158 <UART_WaitOnFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e033      	b.n	8006c50 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10c      	bne.n	8006c08 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	8a7b      	ldrh	r3, [r7, #18]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	3302      	adds	r3, #2
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	e00d      	b.n	8006c24 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	8a7b      	ldrh	r3, [r7, #18]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	4013      	ands	r3, r2
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1c1      	bne.n	8006bc6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e000      	b.n	8006c50 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006c4e:	2302      	movs	r3, #2
  }
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3720      	adds	r7, #32
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b8a      	ldr	r3, [pc, #552]	@ (8006eac <UART_SetConfig+0x254>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a78      	ldr	r2, [pc, #480]	@ (8006eb0 <UART_SetConfig+0x258>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d120      	bne.n	8006d16 <UART_SetConfig+0xbe>
 8006cd4:	4b77      	ldr	r3, [pc, #476]	@ (8006eb4 <UART_SetConfig+0x25c>)
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d817      	bhi.n	8006d10 <UART_SetConfig+0xb8>
 8006ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <UART_SetConfig+0x90>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006cf9 	.word	0x08006cf9
 8006cec:	08006d05 	.word	0x08006d05
 8006cf0:	08006d0b 	.word	0x08006d0b
 8006cf4:	08006cff 	.word	0x08006cff
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e01d      	b.n	8006d3a <UART_SetConfig+0xe2>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	77fb      	strb	r3, [r7, #31]
 8006d02:	e01a      	b.n	8006d3a <UART_SetConfig+0xe2>
 8006d04:	2304      	movs	r3, #4
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e017      	b.n	8006d3a <UART_SetConfig+0xe2>
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	77fb      	strb	r3, [r7, #31]
 8006d0e:	e014      	b.n	8006d3a <UART_SetConfig+0xe2>
 8006d10:	2310      	movs	r3, #16
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e011      	b.n	8006d3a <UART_SetConfig+0xe2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a67      	ldr	r2, [pc, #412]	@ (8006eb8 <UART_SetConfig+0x260>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d102      	bne.n	8006d26 <UART_SetConfig+0xce>
 8006d20:	2300      	movs	r3, #0
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e009      	b.n	8006d3a <UART_SetConfig+0xe2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a64      	ldr	r2, [pc, #400]	@ (8006ebc <UART_SetConfig+0x264>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d102      	bne.n	8006d36 <UART_SetConfig+0xde>
 8006d30:	2300      	movs	r3, #0
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e001      	b.n	8006d3a <UART_SetConfig+0xe2>
 8006d36:	2310      	movs	r3, #16
 8006d38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d42:	d15a      	bne.n	8006dfa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006d44:	7ffb      	ldrb	r3, [r7, #31]
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d827      	bhi.n	8006d9a <UART_SetConfig+0x142>
 8006d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <UART_SetConfig+0xf8>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	08006d9b 	.word	0x08006d9b
 8006d60:	08006d8b 	.word	0x08006d8b
 8006d64:	08006d9b 	.word	0x08006d9b
 8006d68:	08006d9b 	.word	0x08006d9b
 8006d6c:	08006d9b 	.word	0x08006d9b
 8006d70:	08006d93 	.word	0x08006d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d74:	f7fe f95c 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 8006d78:	61b8      	str	r0, [r7, #24]
        break;
 8006d7a:	e013      	b.n	8006da4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d7c:	f7fe f97a 	bl	8005074 <HAL_RCC_GetPCLK2Freq>
 8006d80:	61b8      	str	r0, [r7, #24]
        break;
 8006d82:	e00f      	b.n	8006da4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d84:	4b4e      	ldr	r3, [pc, #312]	@ (8006ec0 <UART_SetConfig+0x268>)
 8006d86:	61bb      	str	r3, [r7, #24]
        break;
 8006d88:	e00c      	b.n	8006da4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8a:	f7fe f8ef 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8006d8e:	61b8      	str	r0, [r7, #24]
        break;
 8006d90:	e008      	b.n	8006da4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d96:	61bb      	str	r3, [r7, #24]
        break;
 8006d98:	e004      	b.n	8006da4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	77bb      	strb	r3, [r7, #30]
        break;
 8006da2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d074      	beq.n	8006e94 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	005a      	lsls	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	441a      	add	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	d916      	bls.n	8006df4 <UART_SetConfig+0x19c>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dcc:	d212      	bcs.n	8006df4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f023 030f 	bic.w	r3, r3, #15
 8006dd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	89fa      	ldrh	r2, [r7, #14]
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	e04f      	b.n	8006e94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	77bb      	strb	r3, [r7, #30]
 8006df8:	e04c      	b.n	8006e94 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dfa:	7ffb      	ldrb	r3, [r7, #31]
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d828      	bhi.n	8006e52 <UART_SetConfig+0x1fa>
 8006e00:	a201      	add	r2, pc, #4	@ (adr r2, 8006e08 <UART_SetConfig+0x1b0>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006e2d 	.word	0x08006e2d
 8006e0c:	08006e35 	.word	0x08006e35
 8006e10:	08006e3d 	.word	0x08006e3d
 8006e14:	08006e53 	.word	0x08006e53
 8006e18:	08006e43 	.word	0x08006e43
 8006e1c:	08006e53 	.word	0x08006e53
 8006e20:	08006e53 	.word	0x08006e53
 8006e24:	08006e53 	.word	0x08006e53
 8006e28:	08006e4b 	.word	0x08006e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e2c:	f7fe f900 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 8006e30:	61b8      	str	r0, [r7, #24]
        break;
 8006e32:	e013      	b.n	8006e5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e34:	f7fe f91e 	bl	8005074 <HAL_RCC_GetPCLK2Freq>
 8006e38:	61b8      	str	r0, [r7, #24]
        break;
 8006e3a:	e00f      	b.n	8006e5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e3c:	4b20      	ldr	r3, [pc, #128]	@ (8006ec0 <UART_SetConfig+0x268>)
 8006e3e:	61bb      	str	r3, [r7, #24]
        break;
 8006e40:	e00c      	b.n	8006e5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e42:	f7fe f893 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8006e46:	61b8      	str	r0, [r7, #24]
        break;
 8006e48:	e008      	b.n	8006e5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e4e:	61bb      	str	r3, [r7, #24]
        break;
 8006e50:	e004      	b.n	8006e5c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	77bb      	strb	r3, [r7, #30]
        break;
 8006e5a:	bf00      	nop
    }

    if (pclk != 0U)
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d018      	beq.n	8006e94 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	085a      	lsrs	r2, r3, #1
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	441a      	add	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b0f      	cmp	r3, #15
 8006e7a:	d909      	bls.n	8006e90 <UART_SetConfig+0x238>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e82:	d205      	bcs.n	8006e90 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60da      	str	r2, [r3, #12]
 8006e8e:	e001      	b.n	8006e94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ea0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3720      	adds	r7, #32
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	efff69f3 	.word	0xefff69f3
 8006eb0:	40013800 	.word	0x40013800
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	40004400 	.word	0x40004400
 8006ebc:	40004800 	.word	0x40004800
 8006ec0:	007a1200 	.word	0x007a1200

08006ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f58:	f003 0310 	and.w	r3, r3, #16
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01a      	beq.n	8006fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fc2:	d10a      	bne.n	8006fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b098      	sub	sp, #96	@ 0x60
 800700c:	af02      	add	r7, sp, #8
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007018:	f7fc f95c 	bl	80032d4 <HAL_GetTick>
 800701c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d12e      	bne.n	800708a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800702c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007034:	2200      	movs	r2, #0
 8007036:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f88c 	bl	8007158 <UART_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d021      	beq.n	800708a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800705a:	653b      	str	r3, [r7, #80]	@ 0x50
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007064:	647b      	str	r3, [r7, #68]	@ 0x44
 8007066:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800706a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e6      	bne.n	8007046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e062      	b.n	8007150 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b04      	cmp	r3, #4
 8007096:	d149      	bne.n	800712c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007098:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a0:	2200      	movs	r2, #0
 80070a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f856 	bl	8007158 <UART_WaitOnFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d03c      	beq.n	800712c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	623b      	str	r3, [r7, #32]
   return(result);
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e6      	bne.n	80070b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007104:	61fa      	str	r2, [r7, #28]
 8007106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	617b      	str	r3, [r7, #20]
   return(result);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e011      	b.n	8007150 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3758      	adds	r7, #88	@ 0x58
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007168:	e04f      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d04b      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007172:	f7fc f8af 	bl	80032d4 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	429a      	cmp	r2, r3
 8007180:	d302      	bcc.n	8007188 <UART_WaitOnFlagUntilTimeout+0x30>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e04e      	b.n	800722a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d037      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0xb2>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b80      	cmp	r3, #128	@ 0x80
 800719e:	d034      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b40      	cmp	r3, #64	@ 0x40
 80071a4:	d031      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d110      	bne.n	80071d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2208      	movs	r2, #8
 80071ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f838 	bl	8007232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2208      	movs	r2, #8
 80071c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e029      	b.n	800722a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e4:	d111      	bne.n	800720a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f81e 	bl	8007232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e00f      	b.n	800722a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4013      	ands	r3, r2
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	bf0c      	ite	eq
 800721a:	2301      	moveq	r3, #1
 800721c:	2300      	movne	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	429a      	cmp	r2, r3
 8007226:	d0a0      	beq.n	800716a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007232:	b480      	push	{r7}
 8007234:	b095      	sub	sp, #84	@ 0x54
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800724e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007258:	643b      	str	r3, [r7, #64]	@ 0x40
 800725a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800725e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e6      	bne.n	800723a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3308      	adds	r3, #8
 8007272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	61fb      	str	r3, [r7, #28]
   return(result);
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	f023 0301 	bic.w	r3, r3, #1
 8007282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800728c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800728e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e5      	bne.n	800726c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d118      	bne.n	80072da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f023 0310 	bic.w	r3, r3, #16
 80072bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6979      	ldr	r1, [r7, #20]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	613b      	str	r3, [r7, #16]
   return(result);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e6      	bne.n	80072a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80072ee:	bf00      	nop
 80072f0:	3754      	adds	r7, #84	@ 0x54
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <__cvt>:
 80072fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072fe:	ec57 6b10 	vmov	r6, r7, d0
 8007302:	2f00      	cmp	r7, #0
 8007304:	460c      	mov	r4, r1
 8007306:	4619      	mov	r1, r3
 8007308:	463b      	mov	r3, r7
 800730a:	bfbb      	ittet	lt
 800730c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007310:	461f      	movlt	r7, r3
 8007312:	2300      	movge	r3, #0
 8007314:	232d      	movlt	r3, #45	@ 0x2d
 8007316:	700b      	strb	r3, [r1, #0]
 8007318:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800731a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800731e:	4691      	mov	r9, r2
 8007320:	f023 0820 	bic.w	r8, r3, #32
 8007324:	bfbc      	itt	lt
 8007326:	4632      	movlt	r2, r6
 8007328:	4616      	movlt	r6, r2
 800732a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800732e:	d005      	beq.n	800733c <__cvt+0x42>
 8007330:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007334:	d100      	bne.n	8007338 <__cvt+0x3e>
 8007336:	3401      	adds	r4, #1
 8007338:	2102      	movs	r1, #2
 800733a:	e000      	b.n	800733e <__cvt+0x44>
 800733c:	2103      	movs	r1, #3
 800733e:	ab03      	add	r3, sp, #12
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	ab02      	add	r3, sp, #8
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	ec47 6b10 	vmov	d0, r6, r7
 800734a:	4653      	mov	r3, sl
 800734c:	4622      	mov	r2, r4
 800734e:	f000 fe6f 	bl	8008030 <_dtoa_r>
 8007352:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007356:	4605      	mov	r5, r0
 8007358:	d119      	bne.n	800738e <__cvt+0x94>
 800735a:	f019 0f01 	tst.w	r9, #1
 800735e:	d00e      	beq.n	800737e <__cvt+0x84>
 8007360:	eb00 0904 	add.w	r9, r0, r4
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	4630      	mov	r0, r6
 800736a:	4639      	mov	r1, r7
 800736c:	f7f9 fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8007370:	b108      	cbz	r0, 8007376 <__cvt+0x7c>
 8007372:	f8cd 900c 	str.w	r9, [sp, #12]
 8007376:	2230      	movs	r2, #48	@ 0x30
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	454b      	cmp	r3, r9
 800737c:	d31e      	bcc.n	80073bc <__cvt+0xc2>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007382:	1b5b      	subs	r3, r3, r5
 8007384:	4628      	mov	r0, r5
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	b004      	add	sp, #16
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007392:	eb00 0904 	add.w	r9, r0, r4
 8007396:	d1e5      	bne.n	8007364 <__cvt+0x6a>
 8007398:	7803      	ldrb	r3, [r0, #0]
 800739a:	2b30      	cmp	r3, #48	@ 0x30
 800739c:	d10a      	bne.n	80073b4 <__cvt+0xba>
 800739e:	2200      	movs	r2, #0
 80073a0:	2300      	movs	r3, #0
 80073a2:	4630      	mov	r0, r6
 80073a4:	4639      	mov	r1, r7
 80073a6:	f7f9 fb9f 	bl	8000ae8 <__aeabi_dcmpeq>
 80073aa:	b918      	cbnz	r0, 80073b4 <__cvt+0xba>
 80073ac:	f1c4 0401 	rsb	r4, r4, #1
 80073b0:	f8ca 4000 	str.w	r4, [sl]
 80073b4:	f8da 3000 	ldr.w	r3, [sl]
 80073b8:	4499      	add	r9, r3
 80073ba:	e7d3      	b.n	8007364 <__cvt+0x6a>
 80073bc:	1c59      	adds	r1, r3, #1
 80073be:	9103      	str	r1, [sp, #12]
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	e7d9      	b.n	8007378 <__cvt+0x7e>

080073c4 <__exponent>:
 80073c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073c6:	2900      	cmp	r1, #0
 80073c8:	bfba      	itte	lt
 80073ca:	4249      	neglt	r1, r1
 80073cc:	232d      	movlt	r3, #45	@ 0x2d
 80073ce:	232b      	movge	r3, #43	@ 0x2b
 80073d0:	2909      	cmp	r1, #9
 80073d2:	7002      	strb	r2, [r0, #0]
 80073d4:	7043      	strb	r3, [r0, #1]
 80073d6:	dd29      	ble.n	800742c <__exponent+0x68>
 80073d8:	f10d 0307 	add.w	r3, sp, #7
 80073dc:	461d      	mov	r5, r3
 80073de:	270a      	movs	r7, #10
 80073e0:	461a      	mov	r2, r3
 80073e2:	fbb1 f6f7 	udiv	r6, r1, r7
 80073e6:	fb07 1416 	mls	r4, r7, r6, r1
 80073ea:	3430      	adds	r4, #48	@ 0x30
 80073ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073f0:	460c      	mov	r4, r1
 80073f2:	2c63      	cmp	r4, #99	@ 0x63
 80073f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80073f8:	4631      	mov	r1, r6
 80073fa:	dcf1      	bgt.n	80073e0 <__exponent+0x1c>
 80073fc:	3130      	adds	r1, #48	@ 0x30
 80073fe:	1e94      	subs	r4, r2, #2
 8007400:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007404:	1c41      	adds	r1, r0, #1
 8007406:	4623      	mov	r3, r4
 8007408:	42ab      	cmp	r3, r5
 800740a:	d30a      	bcc.n	8007422 <__exponent+0x5e>
 800740c:	f10d 0309 	add.w	r3, sp, #9
 8007410:	1a9b      	subs	r3, r3, r2
 8007412:	42ac      	cmp	r4, r5
 8007414:	bf88      	it	hi
 8007416:	2300      	movhi	r3, #0
 8007418:	3302      	adds	r3, #2
 800741a:	4403      	add	r3, r0
 800741c:	1a18      	subs	r0, r3, r0
 800741e:	b003      	add	sp, #12
 8007420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007422:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007426:	f801 6f01 	strb.w	r6, [r1, #1]!
 800742a:	e7ed      	b.n	8007408 <__exponent+0x44>
 800742c:	2330      	movs	r3, #48	@ 0x30
 800742e:	3130      	adds	r1, #48	@ 0x30
 8007430:	7083      	strb	r3, [r0, #2]
 8007432:	70c1      	strb	r1, [r0, #3]
 8007434:	1d03      	adds	r3, r0, #4
 8007436:	e7f1      	b.n	800741c <__exponent+0x58>

08007438 <_printf_float>:
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	b08d      	sub	sp, #52	@ 0x34
 800743e:	460c      	mov	r4, r1
 8007440:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007444:	4616      	mov	r6, r2
 8007446:	461f      	mov	r7, r3
 8007448:	4605      	mov	r5, r0
 800744a:	f000 fcef 	bl	8007e2c <_localeconv_r>
 800744e:	6803      	ldr	r3, [r0, #0]
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	4618      	mov	r0, r3
 8007454:	f7f8 ff1c 	bl	8000290 <strlen>
 8007458:	2300      	movs	r3, #0
 800745a:	930a      	str	r3, [sp, #40]	@ 0x28
 800745c:	f8d8 3000 	ldr.w	r3, [r8]
 8007460:	9005      	str	r0, [sp, #20]
 8007462:	3307      	adds	r3, #7
 8007464:	f023 0307 	bic.w	r3, r3, #7
 8007468:	f103 0208 	add.w	r2, r3, #8
 800746c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007470:	f8d4 b000 	ldr.w	fp, [r4]
 8007474:	f8c8 2000 	str.w	r2, [r8]
 8007478:	e9d3 8900 	ldrd	r8, r9, [r3]
 800747c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007480:	9307      	str	r3, [sp, #28]
 8007482:	f8cd 8018 	str.w	r8, [sp, #24]
 8007486:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800748a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800748e:	4b9c      	ldr	r3, [pc, #624]	@ (8007700 <_printf_float+0x2c8>)
 8007490:	f04f 32ff 	mov.w	r2, #4294967295
 8007494:	f7f9 fb5a 	bl	8000b4c <__aeabi_dcmpun>
 8007498:	bb70      	cbnz	r0, 80074f8 <_printf_float+0xc0>
 800749a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800749e:	4b98      	ldr	r3, [pc, #608]	@ (8007700 <_printf_float+0x2c8>)
 80074a0:	f04f 32ff 	mov.w	r2, #4294967295
 80074a4:	f7f9 fb34 	bl	8000b10 <__aeabi_dcmple>
 80074a8:	bb30      	cbnz	r0, 80074f8 <_printf_float+0xc0>
 80074aa:	2200      	movs	r2, #0
 80074ac:	2300      	movs	r3, #0
 80074ae:	4640      	mov	r0, r8
 80074b0:	4649      	mov	r1, r9
 80074b2:	f7f9 fb23 	bl	8000afc <__aeabi_dcmplt>
 80074b6:	b110      	cbz	r0, 80074be <_printf_float+0x86>
 80074b8:	232d      	movs	r3, #45	@ 0x2d
 80074ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074be:	4a91      	ldr	r2, [pc, #580]	@ (8007704 <_printf_float+0x2cc>)
 80074c0:	4b91      	ldr	r3, [pc, #580]	@ (8007708 <_printf_float+0x2d0>)
 80074c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074c6:	bf8c      	ite	hi
 80074c8:	4690      	movhi	r8, r2
 80074ca:	4698      	movls	r8, r3
 80074cc:	2303      	movs	r3, #3
 80074ce:	6123      	str	r3, [r4, #16]
 80074d0:	f02b 0304 	bic.w	r3, fp, #4
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	f04f 0900 	mov.w	r9, #0
 80074da:	9700      	str	r7, [sp, #0]
 80074dc:	4633      	mov	r3, r6
 80074de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074e0:	4621      	mov	r1, r4
 80074e2:	4628      	mov	r0, r5
 80074e4:	f000 f9d2 	bl	800788c <_printf_common>
 80074e8:	3001      	adds	r0, #1
 80074ea:	f040 808d 	bne.w	8007608 <_printf_float+0x1d0>
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	b00d      	add	sp, #52	@ 0x34
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f9 fb24 	bl	8000b4c <__aeabi_dcmpun>
 8007504:	b140      	cbz	r0, 8007518 <_printf_float+0xe0>
 8007506:	464b      	mov	r3, r9
 8007508:	2b00      	cmp	r3, #0
 800750a:	bfbc      	itt	lt
 800750c:	232d      	movlt	r3, #45	@ 0x2d
 800750e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007512:	4a7e      	ldr	r2, [pc, #504]	@ (800770c <_printf_float+0x2d4>)
 8007514:	4b7e      	ldr	r3, [pc, #504]	@ (8007710 <_printf_float+0x2d8>)
 8007516:	e7d4      	b.n	80074c2 <_printf_float+0x8a>
 8007518:	6863      	ldr	r3, [r4, #4]
 800751a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800751e:	9206      	str	r2, [sp, #24]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	d13b      	bne.n	800759c <_printf_float+0x164>
 8007524:	2306      	movs	r3, #6
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800752c:	2300      	movs	r3, #0
 800752e:	6022      	str	r2, [r4, #0]
 8007530:	9303      	str	r3, [sp, #12]
 8007532:	ab0a      	add	r3, sp, #40	@ 0x28
 8007534:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007538:	ab09      	add	r3, sp, #36	@ 0x24
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	6861      	ldr	r1, [r4, #4]
 800753e:	ec49 8b10 	vmov	d0, r8, r9
 8007542:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007546:	4628      	mov	r0, r5
 8007548:	f7ff fed7 	bl	80072fa <__cvt>
 800754c:	9b06      	ldr	r3, [sp, #24]
 800754e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007550:	2b47      	cmp	r3, #71	@ 0x47
 8007552:	4680      	mov	r8, r0
 8007554:	d129      	bne.n	80075aa <_printf_float+0x172>
 8007556:	1cc8      	adds	r0, r1, #3
 8007558:	db02      	blt.n	8007560 <_printf_float+0x128>
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	4299      	cmp	r1, r3
 800755e:	dd41      	ble.n	80075e4 <_printf_float+0x1ac>
 8007560:	f1aa 0a02 	sub.w	sl, sl, #2
 8007564:	fa5f fa8a 	uxtb.w	sl, sl
 8007568:	3901      	subs	r1, #1
 800756a:	4652      	mov	r2, sl
 800756c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007570:	9109      	str	r1, [sp, #36]	@ 0x24
 8007572:	f7ff ff27 	bl	80073c4 <__exponent>
 8007576:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007578:	1813      	adds	r3, r2, r0
 800757a:	2a01      	cmp	r2, #1
 800757c:	4681      	mov	r9, r0
 800757e:	6123      	str	r3, [r4, #16]
 8007580:	dc02      	bgt.n	8007588 <_printf_float+0x150>
 8007582:	6822      	ldr	r2, [r4, #0]
 8007584:	07d2      	lsls	r2, r2, #31
 8007586:	d501      	bpl.n	800758c <_printf_float+0x154>
 8007588:	3301      	adds	r3, #1
 800758a:	6123      	str	r3, [r4, #16]
 800758c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0a2      	beq.n	80074da <_printf_float+0xa2>
 8007594:	232d      	movs	r3, #45	@ 0x2d
 8007596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800759a:	e79e      	b.n	80074da <_printf_float+0xa2>
 800759c:	9a06      	ldr	r2, [sp, #24]
 800759e:	2a47      	cmp	r2, #71	@ 0x47
 80075a0:	d1c2      	bne.n	8007528 <_printf_float+0xf0>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1c0      	bne.n	8007528 <_printf_float+0xf0>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e7bd      	b.n	8007526 <_printf_float+0xee>
 80075aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075ae:	d9db      	bls.n	8007568 <_printf_float+0x130>
 80075b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075b4:	d118      	bne.n	80075e8 <_printf_float+0x1b0>
 80075b6:	2900      	cmp	r1, #0
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	dd0b      	ble.n	80075d4 <_printf_float+0x19c>
 80075bc:	6121      	str	r1, [r4, #16]
 80075be:	b913      	cbnz	r3, 80075c6 <_printf_float+0x18e>
 80075c0:	6822      	ldr	r2, [r4, #0]
 80075c2:	07d0      	lsls	r0, r2, #31
 80075c4:	d502      	bpl.n	80075cc <_printf_float+0x194>
 80075c6:	3301      	adds	r3, #1
 80075c8:	440b      	add	r3, r1
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075ce:	f04f 0900 	mov.w	r9, #0
 80075d2:	e7db      	b.n	800758c <_printf_float+0x154>
 80075d4:	b913      	cbnz	r3, 80075dc <_printf_float+0x1a4>
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	07d2      	lsls	r2, r2, #31
 80075da:	d501      	bpl.n	80075e0 <_printf_float+0x1a8>
 80075dc:	3302      	adds	r3, #2
 80075de:	e7f4      	b.n	80075ca <_printf_float+0x192>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e7f2      	b.n	80075ca <_printf_float+0x192>
 80075e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ea:	4299      	cmp	r1, r3
 80075ec:	db05      	blt.n	80075fa <_printf_float+0x1c2>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	6121      	str	r1, [r4, #16]
 80075f2:	07d8      	lsls	r0, r3, #31
 80075f4:	d5ea      	bpl.n	80075cc <_printf_float+0x194>
 80075f6:	1c4b      	adds	r3, r1, #1
 80075f8:	e7e7      	b.n	80075ca <_printf_float+0x192>
 80075fa:	2900      	cmp	r1, #0
 80075fc:	bfd4      	ite	le
 80075fe:	f1c1 0202 	rsble	r2, r1, #2
 8007602:	2201      	movgt	r2, #1
 8007604:	4413      	add	r3, r2
 8007606:	e7e0      	b.n	80075ca <_printf_float+0x192>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	055a      	lsls	r2, r3, #21
 800760c:	d407      	bmi.n	800761e <_printf_float+0x1e6>
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	4642      	mov	r2, r8
 8007612:	4631      	mov	r1, r6
 8007614:	4628      	mov	r0, r5
 8007616:	47b8      	blx	r7
 8007618:	3001      	adds	r0, #1
 800761a:	d12b      	bne.n	8007674 <_printf_float+0x23c>
 800761c:	e767      	b.n	80074ee <_printf_float+0xb6>
 800761e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007622:	f240 80dd 	bls.w	80077e0 <_printf_float+0x3a8>
 8007626:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800762a:	2200      	movs	r2, #0
 800762c:	2300      	movs	r3, #0
 800762e:	f7f9 fa5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007632:	2800      	cmp	r0, #0
 8007634:	d033      	beq.n	800769e <_printf_float+0x266>
 8007636:	4a37      	ldr	r2, [pc, #220]	@ (8007714 <_printf_float+0x2dc>)
 8007638:	2301      	movs	r3, #1
 800763a:	4631      	mov	r1, r6
 800763c:	4628      	mov	r0, r5
 800763e:	47b8      	blx	r7
 8007640:	3001      	adds	r0, #1
 8007642:	f43f af54 	beq.w	80074ee <_printf_float+0xb6>
 8007646:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800764a:	4543      	cmp	r3, r8
 800764c:	db02      	blt.n	8007654 <_printf_float+0x21c>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	07d8      	lsls	r0, r3, #31
 8007652:	d50f      	bpl.n	8007674 <_printf_float+0x23c>
 8007654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	f43f af45 	beq.w	80074ee <_printf_float+0xb6>
 8007664:	f04f 0900 	mov.w	r9, #0
 8007668:	f108 38ff 	add.w	r8, r8, #4294967295
 800766c:	f104 0a1a 	add.w	sl, r4, #26
 8007670:	45c8      	cmp	r8, r9
 8007672:	dc09      	bgt.n	8007688 <_printf_float+0x250>
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	079b      	lsls	r3, r3, #30
 8007678:	f100 8103 	bmi.w	8007882 <_printf_float+0x44a>
 800767c:	68e0      	ldr	r0, [r4, #12]
 800767e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007680:	4298      	cmp	r0, r3
 8007682:	bfb8      	it	lt
 8007684:	4618      	movlt	r0, r3
 8007686:	e734      	b.n	80074f2 <_printf_float+0xba>
 8007688:	2301      	movs	r3, #1
 800768a:	4652      	mov	r2, sl
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	f43f af2b 	beq.w	80074ee <_printf_float+0xb6>
 8007698:	f109 0901 	add.w	r9, r9, #1
 800769c:	e7e8      	b.n	8007670 <_printf_float+0x238>
 800769e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	dc39      	bgt.n	8007718 <_printf_float+0x2e0>
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <_printf_float+0x2dc>)
 80076a6:	2301      	movs	r3, #1
 80076a8:	4631      	mov	r1, r6
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b8      	blx	r7
 80076ae:	3001      	adds	r0, #1
 80076b0:	f43f af1d 	beq.w	80074ee <_printf_float+0xb6>
 80076b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80076b8:	ea59 0303 	orrs.w	r3, r9, r3
 80076bc:	d102      	bne.n	80076c4 <_printf_float+0x28c>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	07d9      	lsls	r1, r3, #31
 80076c2:	d5d7      	bpl.n	8007674 <_printf_float+0x23c>
 80076c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c8:	4631      	mov	r1, r6
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	f43f af0d 	beq.w	80074ee <_printf_float+0xb6>
 80076d4:	f04f 0a00 	mov.w	sl, #0
 80076d8:	f104 0b1a 	add.w	fp, r4, #26
 80076dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076de:	425b      	negs	r3, r3
 80076e0:	4553      	cmp	r3, sl
 80076e2:	dc01      	bgt.n	80076e8 <_printf_float+0x2b0>
 80076e4:	464b      	mov	r3, r9
 80076e6:	e793      	b.n	8007610 <_printf_float+0x1d8>
 80076e8:	2301      	movs	r3, #1
 80076ea:	465a      	mov	r2, fp
 80076ec:	4631      	mov	r1, r6
 80076ee:	4628      	mov	r0, r5
 80076f0:	47b8      	blx	r7
 80076f2:	3001      	adds	r0, #1
 80076f4:	f43f aefb 	beq.w	80074ee <_printf_float+0xb6>
 80076f8:	f10a 0a01 	add.w	sl, sl, #1
 80076fc:	e7ee      	b.n	80076dc <_printf_float+0x2a4>
 80076fe:	bf00      	nop
 8007700:	7fefffff 	.word	0x7fefffff
 8007704:	0800a40c 	.word	0x0800a40c
 8007708:	0800a408 	.word	0x0800a408
 800770c:	0800a414 	.word	0x0800a414
 8007710:	0800a410 	.word	0x0800a410
 8007714:	0800a418 	.word	0x0800a418
 8007718:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800771a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800771e:	4553      	cmp	r3, sl
 8007720:	bfa8      	it	ge
 8007722:	4653      	movge	r3, sl
 8007724:	2b00      	cmp	r3, #0
 8007726:	4699      	mov	r9, r3
 8007728:	dc36      	bgt.n	8007798 <_printf_float+0x360>
 800772a:	f04f 0b00 	mov.w	fp, #0
 800772e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007732:	f104 021a 	add.w	r2, r4, #26
 8007736:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007738:	9306      	str	r3, [sp, #24]
 800773a:	eba3 0309 	sub.w	r3, r3, r9
 800773e:	455b      	cmp	r3, fp
 8007740:	dc31      	bgt.n	80077a6 <_printf_float+0x36e>
 8007742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007744:	459a      	cmp	sl, r3
 8007746:	dc3a      	bgt.n	80077be <_printf_float+0x386>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	07da      	lsls	r2, r3, #31
 800774c:	d437      	bmi.n	80077be <_printf_float+0x386>
 800774e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007750:	ebaa 0903 	sub.w	r9, sl, r3
 8007754:	9b06      	ldr	r3, [sp, #24]
 8007756:	ebaa 0303 	sub.w	r3, sl, r3
 800775a:	4599      	cmp	r9, r3
 800775c:	bfa8      	it	ge
 800775e:	4699      	movge	r9, r3
 8007760:	f1b9 0f00 	cmp.w	r9, #0
 8007764:	dc33      	bgt.n	80077ce <_printf_float+0x396>
 8007766:	f04f 0800 	mov.w	r8, #0
 800776a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800776e:	f104 0b1a 	add.w	fp, r4, #26
 8007772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007774:	ebaa 0303 	sub.w	r3, sl, r3
 8007778:	eba3 0309 	sub.w	r3, r3, r9
 800777c:	4543      	cmp	r3, r8
 800777e:	f77f af79 	ble.w	8007674 <_printf_float+0x23c>
 8007782:	2301      	movs	r3, #1
 8007784:	465a      	mov	r2, fp
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f aeae 	beq.w	80074ee <_printf_float+0xb6>
 8007792:	f108 0801 	add.w	r8, r8, #1
 8007796:	e7ec      	b.n	8007772 <_printf_float+0x33a>
 8007798:	4642      	mov	r2, r8
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	d1c2      	bne.n	800772a <_printf_float+0x2f2>
 80077a4:	e6a3      	b.n	80074ee <_printf_float+0xb6>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	9206      	str	r2, [sp, #24]
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	f43f ae9c 	beq.w	80074ee <_printf_float+0xb6>
 80077b6:	9a06      	ldr	r2, [sp, #24]
 80077b8:	f10b 0b01 	add.w	fp, fp, #1
 80077bc:	e7bb      	b.n	8007736 <_printf_float+0x2fe>
 80077be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	d1c0      	bne.n	800774e <_printf_float+0x316>
 80077cc:	e68f      	b.n	80074ee <_printf_float+0xb6>
 80077ce:	9a06      	ldr	r2, [sp, #24]
 80077d0:	464b      	mov	r3, r9
 80077d2:	4442      	add	r2, r8
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	d1c3      	bne.n	8007766 <_printf_float+0x32e>
 80077de:	e686      	b.n	80074ee <_printf_float+0xb6>
 80077e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077e4:	f1ba 0f01 	cmp.w	sl, #1
 80077e8:	dc01      	bgt.n	80077ee <_printf_float+0x3b6>
 80077ea:	07db      	lsls	r3, r3, #31
 80077ec:	d536      	bpl.n	800785c <_printf_float+0x424>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4642      	mov	r2, r8
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	f43f ae78 	beq.w	80074ee <_printf_float+0xb6>
 80077fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	f43f ae70 	beq.w	80074ee <_printf_float+0xb6>
 800780e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007812:	2200      	movs	r2, #0
 8007814:	2300      	movs	r3, #0
 8007816:	f10a 3aff 	add.w	sl, sl, #4294967295
 800781a:	f7f9 f965 	bl	8000ae8 <__aeabi_dcmpeq>
 800781e:	b9c0      	cbnz	r0, 8007852 <_printf_float+0x41a>
 8007820:	4653      	mov	r3, sl
 8007822:	f108 0201 	add.w	r2, r8, #1
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	d10c      	bne.n	800784a <_printf_float+0x412>
 8007830:	e65d      	b.n	80074ee <_printf_float+0xb6>
 8007832:	2301      	movs	r3, #1
 8007834:	465a      	mov	r2, fp
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	f43f ae56 	beq.w	80074ee <_printf_float+0xb6>
 8007842:	f108 0801 	add.w	r8, r8, #1
 8007846:	45d0      	cmp	r8, sl
 8007848:	dbf3      	blt.n	8007832 <_printf_float+0x3fa>
 800784a:	464b      	mov	r3, r9
 800784c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007850:	e6df      	b.n	8007612 <_printf_float+0x1da>
 8007852:	f04f 0800 	mov.w	r8, #0
 8007856:	f104 0b1a 	add.w	fp, r4, #26
 800785a:	e7f4      	b.n	8007846 <_printf_float+0x40e>
 800785c:	2301      	movs	r3, #1
 800785e:	4642      	mov	r2, r8
 8007860:	e7e1      	b.n	8007826 <_printf_float+0x3ee>
 8007862:	2301      	movs	r3, #1
 8007864:	464a      	mov	r2, r9
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f ae3e 	beq.w	80074ee <_printf_float+0xb6>
 8007872:	f108 0801 	add.w	r8, r8, #1
 8007876:	68e3      	ldr	r3, [r4, #12]
 8007878:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800787a:	1a5b      	subs	r3, r3, r1
 800787c:	4543      	cmp	r3, r8
 800787e:	dcf0      	bgt.n	8007862 <_printf_float+0x42a>
 8007880:	e6fc      	b.n	800767c <_printf_float+0x244>
 8007882:	f04f 0800 	mov.w	r8, #0
 8007886:	f104 0919 	add.w	r9, r4, #25
 800788a:	e7f4      	b.n	8007876 <_printf_float+0x43e>

0800788c <_printf_common>:
 800788c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007890:	4616      	mov	r6, r2
 8007892:	4698      	mov	r8, r3
 8007894:	688a      	ldr	r2, [r1, #8]
 8007896:	690b      	ldr	r3, [r1, #16]
 8007898:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800789c:	4293      	cmp	r3, r2
 800789e:	bfb8      	it	lt
 80078a0:	4613      	movlt	r3, r2
 80078a2:	6033      	str	r3, [r6, #0]
 80078a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078a8:	4607      	mov	r7, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	b10a      	cbz	r2, 80078b2 <_printf_common+0x26>
 80078ae:	3301      	adds	r3, #1
 80078b0:	6033      	str	r3, [r6, #0]
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	0699      	lsls	r1, r3, #26
 80078b6:	bf42      	ittt	mi
 80078b8:	6833      	ldrmi	r3, [r6, #0]
 80078ba:	3302      	addmi	r3, #2
 80078bc:	6033      	strmi	r3, [r6, #0]
 80078be:	6825      	ldr	r5, [r4, #0]
 80078c0:	f015 0506 	ands.w	r5, r5, #6
 80078c4:	d106      	bne.n	80078d4 <_printf_common+0x48>
 80078c6:	f104 0a19 	add.w	sl, r4, #25
 80078ca:	68e3      	ldr	r3, [r4, #12]
 80078cc:	6832      	ldr	r2, [r6, #0]
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	42ab      	cmp	r3, r5
 80078d2:	dc26      	bgt.n	8007922 <_printf_common+0x96>
 80078d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078d8:	6822      	ldr	r2, [r4, #0]
 80078da:	3b00      	subs	r3, #0
 80078dc:	bf18      	it	ne
 80078de:	2301      	movne	r3, #1
 80078e0:	0692      	lsls	r2, r2, #26
 80078e2:	d42b      	bmi.n	800793c <_printf_common+0xb0>
 80078e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078e8:	4641      	mov	r1, r8
 80078ea:	4638      	mov	r0, r7
 80078ec:	47c8      	blx	r9
 80078ee:	3001      	adds	r0, #1
 80078f0:	d01e      	beq.n	8007930 <_printf_common+0xa4>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	6922      	ldr	r2, [r4, #16]
 80078f6:	f003 0306 	and.w	r3, r3, #6
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	bf02      	ittt	eq
 80078fe:	68e5      	ldreq	r5, [r4, #12]
 8007900:	6833      	ldreq	r3, [r6, #0]
 8007902:	1aed      	subeq	r5, r5, r3
 8007904:	68a3      	ldr	r3, [r4, #8]
 8007906:	bf0c      	ite	eq
 8007908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800790c:	2500      	movne	r5, #0
 800790e:	4293      	cmp	r3, r2
 8007910:	bfc4      	itt	gt
 8007912:	1a9b      	subgt	r3, r3, r2
 8007914:	18ed      	addgt	r5, r5, r3
 8007916:	2600      	movs	r6, #0
 8007918:	341a      	adds	r4, #26
 800791a:	42b5      	cmp	r5, r6
 800791c:	d11a      	bne.n	8007954 <_printf_common+0xc8>
 800791e:	2000      	movs	r0, #0
 8007920:	e008      	b.n	8007934 <_printf_common+0xa8>
 8007922:	2301      	movs	r3, #1
 8007924:	4652      	mov	r2, sl
 8007926:	4641      	mov	r1, r8
 8007928:	4638      	mov	r0, r7
 800792a:	47c8      	blx	r9
 800792c:	3001      	adds	r0, #1
 800792e:	d103      	bne.n	8007938 <_printf_common+0xac>
 8007930:	f04f 30ff 	mov.w	r0, #4294967295
 8007934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007938:	3501      	adds	r5, #1
 800793a:	e7c6      	b.n	80078ca <_printf_common+0x3e>
 800793c:	18e1      	adds	r1, r4, r3
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	2030      	movs	r0, #48	@ 0x30
 8007942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007946:	4422      	add	r2, r4
 8007948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800794c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007950:	3302      	adds	r3, #2
 8007952:	e7c7      	b.n	80078e4 <_printf_common+0x58>
 8007954:	2301      	movs	r3, #1
 8007956:	4622      	mov	r2, r4
 8007958:	4641      	mov	r1, r8
 800795a:	4638      	mov	r0, r7
 800795c:	47c8      	blx	r9
 800795e:	3001      	adds	r0, #1
 8007960:	d0e6      	beq.n	8007930 <_printf_common+0xa4>
 8007962:	3601      	adds	r6, #1
 8007964:	e7d9      	b.n	800791a <_printf_common+0x8e>
	...

08007968 <_printf_i>:
 8007968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	7e0f      	ldrb	r7, [r1, #24]
 800796e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007970:	2f78      	cmp	r7, #120	@ 0x78
 8007972:	4691      	mov	r9, r2
 8007974:	4680      	mov	r8, r0
 8007976:	460c      	mov	r4, r1
 8007978:	469a      	mov	sl, r3
 800797a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800797e:	d807      	bhi.n	8007990 <_printf_i+0x28>
 8007980:	2f62      	cmp	r7, #98	@ 0x62
 8007982:	d80a      	bhi.n	800799a <_printf_i+0x32>
 8007984:	2f00      	cmp	r7, #0
 8007986:	f000 80d1 	beq.w	8007b2c <_printf_i+0x1c4>
 800798a:	2f58      	cmp	r7, #88	@ 0x58
 800798c:	f000 80b8 	beq.w	8007b00 <_printf_i+0x198>
 8007990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007998:	e03a      	b.n	8007a10 <_printf_i+0xa8>
 800799a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800799e:	2b15      	cmp	r3, #21
 80079a0:	d8f6      	bhi.n	8007990 <_printf_i+0x28>
 80079a2:	a101      	add	r1, pc, #4	@ (adr r1, 80079a8 <_printf_i+0x40>)
 80079a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a8:	08007a01 	.word	0x08007a01
 80079ac:	08007a15 	.word	0x08007a15
 80079b0:	08007991 	.word	0x08007991
 80079b4:	08007991 	.word	0x08007991
 80079b8:	08007991 	.word	0x08007991
 80079bc:	08007991 	.word	0x08007991
 80079c0:	08007a15 	.word	0x08007a15
 80079c4:	08007991 	.word	0x08007991
 80079c8:	08007991 	.word	0x08007991
 80079cc:	08007991 	.word	0x08007991
 80079d0:	08007991 	.word	0x08007991
 80079d4:	08007b13 	.word	0x08007b13
 80079d8:	08007a3f 	.word	0x08007a3f
 80079dc:	08007acd 	.word	0x08007acd
 80079e0:	08007991 	.word	0x08007991
 80079e4:	08007991 	.word	0x08007991
 80079e8:	08007b35 	.word	0x08007b35
 80079ec:	08007991 	.word	0x08007991
 80079f0:	08007a3f 	.word	0x08007a3f
 80079f4:	08007991 	.word	0x08007991
 80079f8:	08007991 	.word	0x08007991
 80079fc:	08007ad5 	.word	0x08007ad5
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6032      	str	r2, [r6, #0]
 8007a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a10:	2301      	movs	r3, #1
 8007a12:	e09c      	b.n	8007b4e <_printf_i+0x1e6>
 8007a14:	6833      	ldr	r3, [r6, #0]
 8007a16:	6820      	ldr	r0, [r4, #0]
 8007a18:	1d19      	adds	r1, r3, #4
 8007a1a:	6031      	str	r1, [r6, #0]
 8007a1c:	0606      	lsls	r6, r0, #24
 8007a1e:	d501      	bpl.n	8007a24 <_printf_i+0xbc>
 8007a20:	681d      	ldr	r5, [r3, #0]
 8007a22:	e003      	b.n	8007a2c <_printf_i+0xc4>
 8007a24:	0645      	lsls	r5, r0, #25
 8007a26:	d5fb      	bpl.n	8007a20 <_printf_i+0xb8>
 8007a28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	da03      	bge.n	8007a38 <_printf_i+0xd0>
 8007a30:	232d      	movs	r3, #45	@ 0x2d
 8007a32:	426d      	negs	r5, r5
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a38:	4858      	ldr	r0, [pc, #352]	@ (8007b9c <_printf_i+0x234>)
 8007a3a:	230a      	movs	r3, #10
 8007a3c:	e011      	b.n	8007a62 <_printf_i+0xfa>
 8007a3e:	6821      	ldr	r1, [r4, #0]
 8007a40:	6833      	ldr	r3, [r6, #0]
 8007a42:	0608      	lsls	r0, r1, #24
 8007a44:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a48:	d402      	bmi.n	8007a50 <_printf_i+0xe8>
 8007a4a:	0649      	lsls	r1, r1, #25
 8007a4c:	bf48      	it	mi
 8007a4e:	b2ad      	uxthmi	r5, r5
 8007a50:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a52:	4852      	ldr	r0, [pc, #328]	@ (8007b9c <_printf_i+0x234>)
 8007a54:	6033      	str	r3, [r6, #0]
 8007a56:	bf14      	ite	ne
 8007a58:	230a      	movne	r3, #10
 8007a5a:	2308      	moveq	r3, #8
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a62:	6866      	ldr	r6, [r4, #4]
 8007a64:	60a6      	str	r6, [r4, #8]
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	db05      	blt.n	8007a76 <_printf_i+0x10e>
 8007a6a:	6821      	ldr	r1, [r4, #0]
 8007a6c:	432e      	orrs	r6, r5
 8007a6e:	f021 0104 	bic.w	r1, r1, #4
 8007a72:	6021      	str	r1, [r4, #0]
 8007a74:	d04b      	beq.n	8007b0e <_printf_i+0x1a6>
 8007a76:	4616      	mov	r6, r2
 8007a78:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a7c:	fb03 5711 	mls	r7, r3, r1, r5
 8007a80:	5dc7      	ldrb	r7, [r0, r7]
 8007a82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a86:	462f      	mov	r7, r5
 8007a88:	42bb      	cmp	r3, r7
 8007a8a:	460d      	mov	r5, r1
 8007a8c:	d9f4      	bls.n	8007a78 <_printf_i+0x110>
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d10b      	bne.n	8007aaa <_printf_i+0x142>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	07df      	lsls	r7, r3, #31
 8007a96:	d508      	bpl.n	8007aaa <_printf_i+0x142>
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	6861      	ldr	r1, [r4, #4]
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	bfde      	ittt	le
 8007aa0:	2330      	movle	r3, #48	@ 0x30
 8007aa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aa6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007aaa:	1b92      	subs	r2, r2, r6
 8007aac:	6122      	str	r2, [r4, #16]
 8007aae:	f8cd a000 	str.w	sl, [sp]
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	aa03      	add	r2, sp, #12
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4640      	mov	r0, r8
 8007aba:	f7ff fee7 	bl	800788c <_printf_common>
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d14a      	bne.n	8007b58 <_printf_i+0x1f0>
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac6:	b004      	add	sp, #16
 8007ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	f043 0320 	orr.w	r3, r3, #32
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	4832      	ldr	r0, [pc, #200]	@ (8007ba0 <_printf_i+0x238>)
 8007ad6:	2778      	movs	r7, #120	@ 0x78
 8007ad8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	6831      	ldr	r1, [r6, #0]
 8007ae0:	061f      	lsls	r7, r3, #24
 8007ae2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ae6:	d402      	bmi.n	8007aee <_printf_i+0x186>
 8007ae8:	065f      	lsls	r7, r3, #25
 8007aea:	bf48      	it	mi
 8007aec:	b2ad      	uxthmi	r5, r5
 8007aee:	6031      	str	r1, [r6, #0]
 8007af0:	07d9      	lsls	r1, r3, #31
 8007af2:	bf44      	itt	mi
 8007af4:	f043 0320 	orrmi.w	r3, r3, #32
 8007af8:	6023      	strmi	r3, [r4, #0]
 8007afa:	b11d      	cbz	r5, 8007b04 <_printf_i+0x19c>
 8007afc:	2310      	movs	r3, #16
 8007afe:	e7ad      	b.n	8007a5c <_printf_i+0xf4>
 8007b00:	4826      	ldr	r0, [pc, #152]	@ (8007b9c <_printf_i+0x234>)
 8007b02:	e7e9      	b.n	8007ad8 <_printf_i+0x170>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	f023 0320 	bic.w	r3, r3, #32
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	e7f6      	b.n	8007afc <_printf_i+0x194>
 8007b0e:	4616      	mov	r6, r2
 8007b10:	e7bd      	b.n	8007a8e <_printf_i+0x126>
 8007b12:	6833      	ldr	r3, [r6, #0]
 8007b14:	6825      	ldr	r5, [r4, #0]
 8007b16:	6961      	ldr	r1, [r4, #20]
 8007b18:	1d18      	adds	r0, r3, #4
 8007b1a:	6030      	str	r0, [r6, #0]
 8007b1c:	062e      	lsls	r6, r5, #24
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	d501      	bpl.n	8007b26 <_printf_i+0x1be>
 8007b22:	6019      	str	r1, [r3, #0]
 8007b24:	e002      	b.n	8007b2c <_printf_i+0x1c4>
 8007b26:	0668      	lsls	r0, r5, #25
 8007b28:	d5fb      	bpl.n	8007b22 <_printf_i+0x1ba>
 8007b2a:	8019      	strh	r1, [r3, #0]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6123      	str	r3, [r4, #16]
 8007b30:	4616      	mov	r6, r2
 8007b32:	e7bc      	b.n	8007aae <_printf_i+0x146>
 8007b34:	6833      	ldr	r3, [r6, #0]
 8007b36:	1d1a      	adds	r2, r3, #4
 8007b38:	6032      	str	r2, [r6, #0]
 8007b3a:	681e      	ldr	r6, [r3, #0]
 8007b3c:	6862      	ldr	r2, [r4, #4]
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7f8 fb55 	bl	80001f0 <memchr>
 8007b46:	b108      	cbz	r0, 8007b4c <_printf_i+0x1e4>
 8007b48:	1b80      	subs	r0, r0, r6
 8007b4a:	6060      	str	r0, [r4, #4]
 8007b4c:	6863      	ldr	r3, [r4, #4]
 8007b4e:	6123      	str	r3, [r4, #16]
 8007b50:	2300      	movs	r3, #0
 8007b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b56:	e7aa      	b.n	8007aae <_printf_i+0x146>
 8007b58:	6923      	ldr	r3, [r4, #16]
 8007b5a:	4632      	mov	r2, r6
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	4640      	mov	r0, r8
 8007b60:	47d0      	blx	sl
 8007b62:	3001      	adds	r0, #1
 8007b64:	d0ad      	beq.n	8007ac2 <_printf_i+0x15a>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	079b      	lsls	r3, r3, #30
 8007b6a:	d413      	bmi.n	8007b94 <_printf_i+0x22c>
 8007b6c:	68e0      	ldr	r0, [r4, #12]
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	4298      	cmp	r0, r3
 8007b72:	bfb8      	it	lt
 8007b74:	4618      	movlt	r0, r3
 8007b76:	e7a6      	b.n	8007ac6 <_printf_i+0x15e>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	4632      	mov	r2, r6
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	4640      	mov	r0, r8
 8007b80:	47d0      	blx	sl
 8007b82:	3001      	adds	r0, #1
 8007b84:	d09d      	beq.n	8007ac2 <_printf_i+0x15a>
 8007b86:	3501      	adds	r5, #1
 8007b88:	68e3      	ldr	r3, [r4, #12]
 8007b8a:	9903      	ldr	r1, [sp, #12]
 8007b8c:	1a5b      	subs	r3, r3, r1
 8007b8e:	42ab      	cmp	r3, r5
 8007b90:	dcf2      	bgt.n	8007b78 <_printf_i+0x210>
 8007b92:	e7eb      	b.n	8007b6c <_printf_i+0x204>
 8007b94:	2500      	movs	r5, #0
 8007b96:	f104 0619 	add.w	r6, r4, #25
 8007b9a:	e7f5      	b.n	8007b88 <_printf_i+0x220>
 8007b9c:	0800a41a 	.word	0x0800a41a
 8007ba0:	0800a42b 	.word	0x0800a42b

08007ba4 <std>:
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	b510      	push	{r4, lr}
 8007ba8:	4604      	mov	r4, r0
 8007baa:	e9c0 3300 	strd	r3, r3, [r0]
 8007bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bb2:	6083      	str	r3, [r0, #8]
 8007bb4:	8181      	strh	r1, [r0, #12]
 8007bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bb8:	81c2      	strh	r2, [r0, #14]
 8007bba:	6183      	str	r3, [r0, #24]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	305c      	adds	r0, #92	@ 0x5c
 8007bc2:	f000 f92a 	bl	8007e1a <memset>
 8007bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bfc <std+0x58>)
 8007bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bca:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <std+0x5c>)
 8007bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <std+0x60>)
 8007bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c08 <std+0x64>)
 8007bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c0c <std+0x68>)
 8007bd8:	6224      	str	r4, [r4, #32]
 8007bda:	429c      	cmp	r4, r3
 8007bdc:	d006      	beq.n	8007bec <std+0x48>
 8007bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007be2:	4294      	cmp	r4, r2
 8007be4:	d002      	beq.n	8007bec <std+0x48>
 8007be6:	33d0      	adds	r3, #208	@ 0xd0
 8007be8:	429c      	cmp	r4, r3
 8007bea:	d105      	bne.n	8007bf8 <std+0x54>
 8007bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf4:	f000 b98e 	b.w	8007f14 <__retarget_lock_init_recursive>
 8007bf8:	bd10      	pop	{r4, pc}
 8007bfa:	bf00      	nop
 8007bfc:	08007d95 	.word	0x08007d95
 8007c00:	08007db7 	.word	0x08007db7
 8007c04:	08007def 	.word	0x08007def
 8007c08:	08007e13 	.word	0x08007e13
 8007c0c:	20003860 	.word	0x20003860

08007c10 <stdio_exit_handler>:
 8007c10:	4a02      	ldr	r2, [pc, #8]	@ (8007c1c <stdio_exit_handler+0xc>)
 8007c12:	4903      	ldr	r1, [pc, #12]	@ (8007c20 <stdio_exit_handler+0x10>)
 8007c14:	4803      	ldr	r0, [pc, #12]	@ (8007c24 <stdio_exit_handler+0x14>)
 8007c16:	f000 b869 	b.w	8007cec <_fwalk_sglue>
 8007c1a:	bf00      	nop
 8007c1c:	20000028 	.word	0x20000028
 8007c20:	0800987d 	.word	0x0800987d
 8007c24:	20000038 	.word	0x20000038

08007c28 <cleanup_stdio>:
 8007c28:	6841      	ldr	r1, [r0, #4]
 8007c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c5c <cleanup_stdio+0x34>)
 8007c2c:	4299      	cmp	r1, r3
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	4604      	mov	r4, r0
 8007c32:	d001      	beq.n	8007c38 <cleanup_stdio+0x10>
 8007c34:	f001 fe22 	bl	800987c <_fflush_r>
 8007c38:	68a1      	ldr	r1, [r4, #8]
 8007c3a:	4b09      	ldr	r3, [pc, #36]	@ (8007c60 <cleanup_stdio+0x38>)
 8007c3c:	4299      	cmp	r1, r3
 8007c3e:	d002      	beq.n	8007c46 <cleanup_stdio+0x1e>
 8007c40:	4620      	mov	r0, r4
 8007c42:	f001 fe1b 	bl	800987c <_fflush_r>
 8007c46:	68e1      	ldr	r1, [r4, #12]
 8007c48:	4b06      	ldr	r3, [pc, #24]	@ (8007c64 <cleanup_stdio+0x3c>)
 8007c4a:	4299      	cmp	r1, r3
 8007c4c:	d004      	beq.n	8007c58 <cleanup_stdio+0x30>
 8007c4e:	4620      	mov	r0, r4
 8007c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c54:	f001 be12 	b.w	800987c <_fflush_r>
 8007c58:	bd10      	pop	{r4, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20003860 	.word	0x20003860
 8007c60:	200038c8 	.word	0x200038c8
 8007c64:	20003930 	.word	0x20003930

08007c68 <global_stdio_init.part.0>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c98 <global_stdio_init.part.0+0x30>)
 8007c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8007c9c <global_stdio_init.part.0+0x34>)
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca0 <global_stdio_init.part.0+0x38>)
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	4620      	mov	r0, r4
 8007c74:	2200      	movs	r2, #0
 8007c76:	2104      	movs	r1, #4
 8007c78:	f7ff ff94 	bl	8007ba4 <std>
 8007c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c80:	2201      	movs	r2, #1
 8007c82:	2109      	movs	r1, #9
 8007c84:	f7ff ff8e 	bl	8007ba4 <std>
 8007c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c92:	2112      	movs	r1, #18
 8007c94:	f7ff bf86 	b.w	8007ba4 <std>
 8007c98:	20003998 	.word	0x20003998
 8007c9c:	20003860 	.word	0x20003860
 8007ca0:	08007c11 	.word	0x08007c11

08007ca4 <__sfp_lock_acquire>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	@ (8007cac <__sfp_lock_acquire+0x8>)
 8007ca6:	f000 b936 	b.w	8007f16 <__retarget_lock_acquire_recursive>
 8007caa:	bf00      	nop
 8007cac:	200039a1 	.word	0x200039a1

08007cb0 <__sfp_lock_release>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	@ (8007cb8 <__sfp_lock_release+0x8>)
 8007cb2:	f000 b931 	b.w	8007f18 <__retarget_lock_release_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	200039a1 	.word	0x200039a1

08007cbc <__sinit>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	f7ff fff0 	bl	8007ca4 <__sfp_lock_acquire>
 8007cc4:	6a23      	ldr	r3, [r4, #32]
 8007cc6:	b11b      	cbz	r3, 8007cd0 <__sinit+0x14>
 8007cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ccc:	f7ff bff0 	b.w	8007cb0 <__sfp_lock_release>
 8007cd0:	4b04      	ldr	r3, [pc, #16]	@ (8007ce4 <__sinit+0x28>)
 8007cd2:	6223      	str	r3, [r4, #32]
 8007cd4:	4b04      	ldr	r3, [pc, #16]	@ (8007ce8 <__sinit+0x2c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f5      	bne.n	8007cc8 <__sinit+0xc>
 8007cdc:	f7ff ffc4 	bl	8007c68 <global_stdio_init.part.0>
 8007ce0:	e7f2      	b.n	8007cc8 <__sinit+0xc>
 8007ce2:	bf00      	nop
 8007ce4:	08007c29 	.word	0x08007c29
 8007ce8:	20003998 	.word	0x20003998

08007cec <_fwalk_sglue>:
 8007cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	4688      	mov	r8, r1
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8007d00:	d505      	bpl.n	8007d0e <_fwalk_sglue+0x22>
 8007d02:	6824      	ldr	r4, [r4, #0]
 8007d04:	2c00      	cmp	r4, #0
 8007d06:	d1f7      	bne.n	8007cf8 <_fwalk_sglue+0xc>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d0e:	89ab      	ldrh	r3, [r5, #12]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d907      	bls.n	8007d24 <_fwalk_sglue+0x38>
 8007d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	d003      	beq.n	8007d24 <_fwalk_sglue+0x38>
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4638      	mov	r0, r7
 8007d20:	47c0      	blx	r8
 8007d22:	4306      	orrs	r6, r0
 8007d24:	3568      	adds	r5, #104	@ 0x68
 8007d26:	e7e9      	b.n	8007cfc <_fwalk_sglue+0x10>

08007d28 <sniprintf>:
 8007d28:	b40c      	push	{r2, r3}
 8007d2a:	b530      	push	{r4, r5, lr}
 8007d2c:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <sniprintf+0x68>)
 8007d2e:	1e0c      	subs	r4, r1, #0
 8007d30:	681d      	ldr	r5, [r3, #0]
 8007d32:	b09d      	sub	sp, #116	@ 0x74
 8007d34:	da08      	bge.n	8007d48 <sniprintf+0x20>
 8007d36:	238b      	movs	r3, #139	@ 0x8b
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3e:	b01d      	add	sp, #116	@ 0x74
 8007d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d44:	b002      	add	sp, #8
 8007d46:	4770      	bx	lr
 8007d48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d50:	f04f 0300 	mov.w	r3, #0
 8007d54:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007d56:	bf14      	ite	ne
 8007d58:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d5c:	4623      	moveq	r3, r4
 8007d5e:	9304      	str	r3, [sp, #16]
 8007d60:	9307      	str	r3, [sp, #28]
 8007d62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d66:	9002      	str	r0, [sp, #8]
 8007d68:	9006      	str	r0, [sp, #24]
 8007d6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d6e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d70:	ab21      	add	r3, sp, #132	@ 0x84
 8007d72:	a902      	add	r1, sp, #8
 8007d74:	4628      	mov	r0, r5
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	f001 fc00 	bl	800957c <_svfiprintf_r>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	bfbc      	itt	lt
 8007d80:	238b      	movlt	r3, #139	@ 0x8b
 8007d82:	602b      	strlt	r3, [r5, #0]
 8007d84:	2c00      	cmp	r4, #0
 8007d86:	d0da      	beq.n	8007d3e <sniprintf+0x16>
 8007d88:	9b02      	ldr	r3, [sp, #8]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e7d6      	b.n	8007d3e <sniprintf+0x16>
 8007d90:	20000034 	.word	0x20000034

08007d94 <__sread>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	460c      	mov	r4, r1
 8007d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9c:	f000 f86c 	bl	8007e78 <_read_r>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	bfab      	itete	ge
 8007da4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007da6:	89a3      	ldrhlt	r3, [r4, #12]
 8007da8:	181b      	addge	r3, r3, r0
 8007daa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007dae:	bfac      	ite	ge
 8007db0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007db2:	81a3      	strhlt	r3, [r4, #12]
 8007db4:	bd10      	pop	{r4, pc}

08007db6 <__swrite>:
 8007db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dba:	461f      	mov	r7, r3
 8007dbc:	898b      	ldrh	r3, [r1, #12]
 8007dbe:	05db      	lsls	r3, r3, #23
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	4616      	mov	r6, r2
 8007dc6:	d505      	bpl.n	8007dd4 <__swrite+0x1e>
 8007dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dcc:	2302      	movs	r3, #2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f000 f840 	bl	8007e54 <_lseek_r>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	4632      	mov	r2, r6
 8007de2:	463b      	mov	r3, r7
 8007de4:	4628      	mov	r0, r5
 8007de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	f000 b857 	b.w	8007e9c <_write_r>

08007dee <__sseek>:
 8007dee:	b510      	push	{r4, lr}
 8007df0:	460c      	mov	r4, r1
 8007df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df6:	f000 f82d 	bl	8007e54 <_lseek_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	bf15      	itete	ne
 8007e00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e0a:	81a3      	strheq	r3, [r4, #12]
 8007e0c:	bf18      	it	ne
 8007e0e:	81a3      	strhne	r3, [r4, #12]
 8007e10:	bd10      	pop	{r4, pc}

08007e12 <__sclose>:
 8007e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e16:	f000 b80d 	b.w	8007e34 <_close_r>

08007e1a <memset>:
 8007e1a:	4402      	add	r2, r0
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d100      	bne.n	8007e24 <memset+0xa>
 8007e22:	4770      	bx	lr
 8007e24:	f803 1b01 	strb.w	r1, [r3], #1
 8007e28:	e7f9      	b.n	8007e1e <memset+0x4>
	...

08007e2c <_localeconv_r>:
 8007e2c:	4800      	ldr	r0, [pc, #0]	@ (8007e30 <_localeconv_r+0x4>)
 8007e2e:	4770      	bx	lr
 8007e30:	20000174 	.word	0x20000174

08007e34 <_close_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d06      	ldr	r5, [pc, #24]	@ (8007e50 <_close_r+0x1c>)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	f7fb f948 	bl	80030d4 <_close>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_close_r+0x1a>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_close_r+0x1a>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	2000399c 	.word	0x2000399c

08007e54 <_lseek_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4d07      	ldr	r5, [pc, #28]	@ (8007e74 <_lseek_r+0x20>)
 8007e58:	4604      	mov	r4, r0
 8007e5a:	4608      	mov	r0, r1
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7fb f95d 	bl	8003122 <_lseek>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_lseek_r+0x1e>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_lseek_r+0x1e>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	2000399c 	.word	0x2000399c

08007e78 <_read_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d07      	ldr	r5, [pc, #28]	@ (8007e98 <_read_r+0x20>)
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	4608      	mov	r0, r1
 8007e80:	4611      	mov	r1, r2
 8007e82:	2200      	movs	r2, #0
 8007e84:	602a      	str	r2, [r5, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f7fb f8eb 	bl	8003062 <_read>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_read_r+0x1e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_read_r+0x1e>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	2000399c 	.word	0x2000399c

08007e9c <_write_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d07      	ldr	r5, [pc, #28]	@ (8007ebc <_write_r+0x20>)
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	602a      	str	r2, [r5, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f7fb f8f6 	bl	800309c <_write>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_write_r+0x1e>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_write_r+0x1e>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	2000399c 	.word	0x2000399c

08007ec0 <__errno>:
 8007ec0:	4b01      	ldr	r3, [pc, #4]	@ (8007ec8 <__errno+0x8>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000034 	.word	0x20000034

08007ecc <__libc_init_array>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4d0d      	ldr	r5, [pc, #52]	@ (8007f04 <__libc_init_array+0x38>)
 8007ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8007f08 <__libc_init_array+0x3c>)
 8007ed2:	1b64      	subs	r4, r4, r5
 8007ed4:	10a4      	asrs	r4, r4, #2
 8007ed6:	2600      	movs	r6, #0
 8007ed8:	42a6      	cmp	r6, r4
 8007eda:	d109      	bne.n	8007ef0 <__libc_init_array+0x24>
 8007edc:	4d0b      	ldr	r5, [pc, #44]	@ (8007f0c <__libc_init_array+0x40>)
 8007ede:	4c0c      	ldr	r4, [pc, #48]	@ (8007f10 <__libc_init_array+0x44>)
 8007ee0:	f002 f86a 	bl	8009fb8 <_init>
 8007ee4:	1b64      	subs	r4, r4, r5
 8007ee6:	10a4      	asrs	r4, r4, #2
 8007ee8:	2600      	movs	r6, #0
 8007eea:	42a6      	cmp	r6, r4
 8007eec:	d105      	bne.n	8007efa <__libc_init_array+0x2e>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef4:	4798      	blx	r3
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__libc_init_array+0xc>
 8007efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efe:	4798      	blx	r3
 8007f00:	3601      	adds	r6, #1
 8007f02:	e7f2      	b.n	8007eea <__libc_init_array+0x1e>
 8007f04:	0800a784 	.word	0x0800a784
 8007f08:	0800a784 	.word	0x0800a784
 8007f0c:	0800a784 	.word	0x0800a784
 8007f10:	0800a788 	.word	0x0800a788

08007f14 <__retarget_lock_init_recursive>:
 8007f14:	4770      	bx	lr

08007f16 <__retarget_lock_acquire_recursive>:
 8007f16:	4770      	bx	lr

08007f18 <__retarget_lock_release_recursive>:
 8007f18:	4770      	bx	lr

08007f1a <quorem>:
 8007f1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1e:	6903      	ldr	r3, [r0, #16]
 8007f20:	690c      	ldr	r4, [r1, #16]
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	4607      	mov	r7, r0
 8007f26:	db7e      	blt.n	8008026 <quorem+0x10c>
 8007f28:	3c01      	subs	r4, #1
 8007f2a:	f101 0814 	add.w	r8, r1, #20
 8007f2e:	00a3      	lsls	r3, r4, #2
 8007f30:	f100 0514 	add.w	r5, r0, #20
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f44:	3301      	adds	r3, #1
 8007f46:	429a      	cmp	r2, r3
 8007f48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f50:	d32e      	bcc.n	8007fb0 <quorem+0x96>
 8007f52:	f04f 0a00 	mov.w	sl, #0
 8007f56:	46c4      	mov	ip, r8
 8007f58:	46ae      	mov	lr, r5
 8007f5a:	46d3      	mov	fp, sl
 8007f5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f60:	b298      	uxth	r0, r3
 8007f62:	fb06 a000 	mla	r0, r6, r0, sl
 8007f66:	0c02      	lsrs	r2, r0, #16
 8007f68:	0c1b      	lsrs	r3, r3, #16
 8007f6a:	fb06 2303 	mla	r3, r6, r3, r2
 8007f6e:	f8de 2000 	ldr.w	r2, [lr]
 8007f72:	b280      	uxth	r0, r0
 8007f74:	b292      	uxth	r2, r2
 8007f76:	1a12      	subs	r2, r2, r0
 8007f78:	445a      	add	r2, fp
 8007f7a:	f8de 0000 	ldr.w	r0, [lr]
 8007f7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f8c:	b292      	uxth	r2, r2
 8007f8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f92:	45e1      	cmp	r9, ip
 8007f94:	f84e 2b04 	str.w	r2, [lr], #4
 8007f98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f9c:	d2de      	bcs.n	8007f5c <quorem+0x42>
 8007f9e:	9b00      	ldr	r3, [sp, #0]
 8007fa0:	58eb      	ldr	r3, [r5, r3]
 8007fa2:	b92b      	cbnz	r3, 8007fb0 <quorem+0x96>
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	3b04      	subs	r3, #4
 8007fa8:	429d      	cmp	r5, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	d32f      	bcc.n	800800e <quorem+0xf4>
 8007fae:	613c      	str	r4, [r7, #16]
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f001 f97f 	bl	80092b4 <__mcmp>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	db25      	blt.n	8008006 <quorem+0xec>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fc2:	f8d1 c000 	ldr.w	ip, [r1]
 8007fc6:	fa1f fe82 	uxth.w	lr, r2
 8007fca:	fa1f f38c 	uxth.w	r3, ip
 8007fce:	eba3 030e 	sub.w	r3, r3, lr
 8007fd2:	4403      	add	r3, r0
 8007fd4:	0c12      	lsrs	r2, r2, #16
 8007fd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007fda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fe4:	45c1      	cmp	r9, r8
 8007fe6:	f841 3b04 	str.w	r3, [r1], #4
 8007fea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007fee:	d2e6      	bcs.n	8007fbe <quorem+0xa4>
 8007ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ff4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ff8:	b922      	cbnz	r2, 8008004 <quorem+0xea>
 8007ffa:	3b04      	subs	r3, #4
 8007ffc:	429d      	cmp	r5, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	d30b      	bcc.n	800801a <quorem+0x100>
 8008002:	613c      	str	r4, [r7, #16]
 8008004:	3601      	adds	r6, #1
 8008006:	4630      	mov	r0, r6
 8008008:	b003      	add	sp, #12
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	3b04      	subs	r3, #4
 8008012:	2a00      	cmp	r2, #0
 8008014:	d1cb      	bne.n	8007fae <quorem+0x94>
 8008016:	3c01      	subs	r4, #1
 8008018:	e7c6      	b.n	8007fa8 <quorem+0x8e>
 800801a:	6812      	ldr	r2, [r2, #0]
 800801c:	3b04      	subs	r3, #4
 800801e:	2a00      	cmp	r2, #0
 8008020:	d1ef      	bne.n	8008002 <quorem+0xe8>
 8008022:	3c01      	subs	r4, #1
 8008024:	e7ea      	b.n	8007ffc <quorem+0xe2>
 8008026:	2000      	movs	r0, #0
 8008028:	e7ee      	b.n	8008008 <quorem+0xee>
 800802a:	0000      	movs	r0, r0
 800802c:	0000      	movs	r0, r0
	...

08008030 <_dtoa_r>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	69c7      	ldr	r7, [r0, #28]
 8008036:	b097      	sub	sp, #92	@ 0x5c
 8008038:	ed8d 0b04 	vstr	d0, [sp, #16]
 800803c:	ec55 4b10 	vmov	r4, r5, d0
 8008040:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008042:	9107      	str	r1, [sp, #28]
 8008044:	4681      	mov	r9, r0
 8008046:	920c      	str	r2, [sp, #48]	@ 0x30
 8008048:	9311      	str	r3, [sp, #68]	@ 0x44
 800804a:	b97f      	cbnz	r7, 800806c <_dtoa_r+0x3c>
 800804c:	2010      	movs	r0, #16
 800804e:	f000 fe09 	bl	8008c64 <malloc>
 8008052:	4602      	mov	r2, r0
 8008054:	f8c9 001c 	str.w	r0, [r9, #28]
 8008058:	b920      	cbnz	r0, 8008064 <_dtoa_r+0x34>
 800805a:	4ba9      	ldr	r3, [pc, #676]	@ (8008300 <_dtoa_r+0x2d0>)
 800805c:	21ef      	movs	r1, #239	@ 0xef
 800805e:	48a9      	ldr	r0, [pc, #676]	@ (8008304 <_dtoa_r+0x2d4>)
 8008060:	f001 fc6c 	bl	800993c <__assert_func>
 8008064:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008068:	6007      	str	r7, [r0, #0]
 800806a:	60c7      	str	r7, [r0, #12]
 800806c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008070:	6819      	ldr	r1, [r3, #0]
 8008072:	b159      	cbz	r1, 800808c <_dtoa_r+0x5c>
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	604a      	str	r2, [r1, #4]
 8008078:	2301      	movs	r3, #1
 800807a:	4093      	lsls	r3, r2
 800807c:	608b      	str	r3, [r1, #8]
 800807e:	4648      	mov	r0, r9
 8008080:	f000 fee6 	bl	8008e50 <_Bfree>
 8008084:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	1e2b      	subs	r3, r5, #0
 800808e:	bfb9      	ittee	lt
 8008090:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008094:	9305      	strlt	r3, [sp, #20]
 8008096:	2300      	movge	r3, #0
 8008098:	6033      	strge	r3, [r6, #0]
 800809a:	9f05      	ldr	r7, [sp, #20]
 800809c:	4b9a      	ldr	r3, [pc, #616]	@ (8008308 <_dtoa_r+0x2d8>)
 800809e:	bfbc      	itt	lt
 80080a0:	2201      	movlt	r2, #1
 80080a2:	6032      	strlt	r2, [r6, #0]
 80080a4:	43bb      	bics	r3, r7
 80080a6:	d112      	bne.n	80080ce <_dtoa_r+0x9e>
 80080a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080b4:	4323      	orrs	r3, r4
 80080b6:	f000 855a 	beq.w	8008b6e <_dtoa_r+0xb3e>
 80080ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800831c <_dtoa_r+0x2ec>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 855c 	beq.w	8008b7e <_dtoa_r+0xb4e>
 80080c6:	f10a 0303 	add.w	r3, sl, #3
 80080ca:	f000 bd56 	b.w	8008b7a <_dtoa_r+0xb4a>
 80080ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80080d2:	2200      	movs	r2, #0
 80080d4:	ec51 0b17 	vmov	r0, r1, d7
 80080d8:	2300      	movs	r3, #0
 80080da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80080de:	f7f8 fd03 	bl	8000ae8 <__aeabi_dcmpeq>
 80080e2:	4680      	mov	r8, r0
 80080e4:	b158      	cbz	r0, 80080fe <_dtoa_r+0xce>
 80080e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080e8:	2301      	movs	r3, #1
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080ee:	b113      	cbz	r3, 80080f6 <_dtoa_r+0xc6>
 80080f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80080f2:	4b86      	ldr	r3, [pc, #536]	@ (800830c <_dtoa_r+0x2dc>)
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008320 <_dtoa_r+0x2f0>
 80080fa:	f000 bd40 	b.w	8008b7e <_dtoa_r+0xb4e>
 80080fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008102:	aa14      	add	r2, sp, #80	@ 0x50
 8008104:	a915      	add	r1, sp, #84	@ 0x54
 8008106:	4648      	mov	r0, r9
 8008108:	f001 f984 	bl	8009414 <__d2b>
 800810c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008110:	9002      	str	r0, [sp, #8]
 8008112:	2e00      	cmp	r6, #0
 8008114:	d078      	beq.n	8008208 <_dtoa_r+0x1d8>
 8008116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008118:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800811c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008120:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008124:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008128:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800812c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008130:	4619      	mov	r1, r3
 8008132:	2200      	movs	r2, #0
 8008134:	4b76      	ldr	r3, [pc, #472]	@ (8008310 <_dtoa_r+0x2e0>)
 8008136:	f7f8 f8b7 	bl	80002a8 <__aeabi_dsub>
 800813a:	a36b      	add	r3, pc, #428	@ (adr r3, 80082e8 <_dtoa_r+0x2b8>)
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f7f8 fa6a 	bl	8000618 <__aeabi_dmul>
 8008144:	a36a      	add	r3, pc, #424	@ (adr r3, 80082f0 <_dtoa_r+0x2c0>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f7f8 f8af 	bl	80002ac <__adddf3>
 800814e:	4604      	mov	r4, r0
 8008150:	4630      	mov	r0, r6
 8008152:	460d      	mov	r5, r1
 8008154:	f7f8 f9f6 	bl	8000544 <__aeabi_i2d>
 8008158:	a367      	add	r3, pc, #412	@ (adr r3, 80082f8 <_dtoa_r+0x2c8>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f7f8 fa5b 	bl	8000618 <__aeabi_dmul>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 f89f 	bl	80002ac <__adddf3>
 800816e:	4604      	mov	r4, r0
 8008170:	460d      	mov	r5, r1
 8008172:	f7f8 fd01 	bl	8000b78 <__aeabi_d2iz>
 8008176:	2200      	movs	r2, #0
 8008178:	4607      	mov	r7, r0
 800817a:	2300      	movs	r3, #0
 800817c:	4620      	mov	r0, r4
 800817e:	4629      	mov	r1, r5
 8008180:	f7f8 fcbc 	bl	8000afc <__aeabi_dcmplt>
 8008184:	b140      	cbz	r0, 8008198 <_dtoa_r+0x168>
 8008186:	4638      	mov	r0, r7
 8008188:	f7f8 f9dc 	bl	8000544 <__aeabi_i2d>
 800818c:	4622      	mov	r2, r4
 800818e:	462b      	mov	r3, r5
 8008190:	f7f8 fcaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8008194:	b900      	cbnz	r0, 8008198 <_dtoa_r+0x168>
 8008196:	3f01      	subs	r7, #1
 8008198:	2f16      	cmp	r7, #22
 800819a:	d852      	bhi.n	8008242 <_dtoa_r+0x212>
 800819c:	4b5d      	ldr	r3, [pc, #372]	@ (8008314 <_dtoa_r+0x2e4>)
 800819e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081aa:	f7f8 fca7 	bl	8000afc <__aeabi_dcmplt>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d049      	beq.n	8008246 <_dtoa_r+0x216>
 80081b2:	3f01      	subs	r7, #1
 80081b4:	2300      	movs	r3, #0
 80081b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80081b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081ba:	1b9b      	subs	r3, r3, r6
 80081bc:	1e5a      	subs	r2, r3, #1
 80081be:	bf45      	ittet	mi
 80081c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80081c4:	9300      	strmi	r3, [sp, #0]
 80081c6:	2300      	movpl	r3, #0
 80081c8:	2300      	movmi	r3, #0
 80081ca:	9206      	str	r2, [sp, #24]
 80081cc:	bf54      	ite	pl
 80081ce:	9300      	strpl	r3, [sp, #0]
 80081d0:	9306      	strmi	r3, [sp, #24]
 80081d2:	2f00      	cmp	r7, #0
 80081d4:	db39      	blt.n	800824a <_dtoa_r+0x21a>
 80081d6:	9b06      	ldr	r3, [sp, #24]
 80081d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80081da:	443b      	add	r3, r7
 80081dc:	9306      	str	r3, [sp, #24]
 80081de:	2300      	movs	r3, #0
 80081e0:	9308      	str	r3, [sp, #32]
 80081e2:	9b07      	ldr	r3, [sp, #28]
 80081e4:	2b09      	cmp	r3, #9
 80081e6:	d863      	bhi.n	80082b0 <_dtoa_r+0x280>
 80081e8:	2b05      	cmp	r3, #5
 80081ea:	bfc4      	itt	gt
 80081ec:	3b04      	subgt	r3, #4
 80081ee:	9307      	strgt	r3, [sp, #28]
 80081f0:	9b07      	ldr	r3, [sp, #28]
 80081f2:	f1a3 0302 	sub.w	r3, r3, #2
 80081f6:	bfcc      	ite	gt
 80081f8:	2400      	movgt	r4, #0
 80081fa:	2401      	movle	r4, #1
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d863      	bhi.n	80082c8 <_dtoa_r+0x298>
 8008200:	e8df f003 	tbb	[pc, r3]
 8008204:	2b375452 	.word	0x2b375452
 8008208:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800820c:	441e      	add	r6, r3
 800820e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008212:	2b20      	cmp	r3, #32
 8008214:	bfc1      	itttt	gt
 8008216:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800821a:	409f      	lslgt	r7, r3
 800821c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008220:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008224:	bfd6      	itet	le
 8008226:	f1c3 0320 	rsble	r3, r3, #32
 800822a:	ea47 0003 	orrgt.w	r0, r7, r3
 800822e:	fa04 f003 	lslle.w	r0, r4, r3
 8008232:	f7f8 f977 	bl	8000524 <__aeabi_ui2d>
 8008236:	2201      	movs	r2, #1
 8008238:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800823c:	3e01      	subs	r6, #1
 800823e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008240:	e776      	b.n	8008130 <_dtoa_r+0x100>
 8008242:	2301      	movs	r3, #1
 8008244:	e7b7      	b.n	80081b6 <_dtoa_r+0x186>
 8008246:	9010      	str	r0, [sp, #64]	@ 0x40
 8008248:	e7b6      	b.n	80081b8 <_dtoa_r+0x188>
 800824a:	9b00      	ldr	r3, [sp, #0]
 800824c:	1bdb      	subs	r3, r3, r7
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	427b      	negs	r3, r7
 8008252:	9308      	str	r3, [sp, #32]
 8008254:	2300      	movs	r3, #0
 8008256:	930d      	str	r3, [sp, #52]	@ 0x34
 8008258:	e7c3      	b.n	80081e2 <_dtoa_r+0x1b2>
 800825a:	2301      	movs	r3, #1
 800825c:	9309      	str	r3, [sp, #36]	@ 0x24
 800825e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008260:	eb07 0b03 	add.w	fp, r7, r3
 8008264:	f10b 0301 	add.w	r3, fp, #1
 8008268:	2b01      	cmp	r3, #1
 800826a:	9303      	str	r3, [sp, #12]
 800826c:	bfb8      	it	lt
 800826e:	2301      	movlt	r3, #1
 8008270:	e006      	b.n	8008280 <_dtoa_r+0x250>
 8008272:	2301      	movs	r3, #1
 8008274:	9309      	str	r3, [sp, #36]	@ 0x24
 8008276:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008278:	2b00      	cmp	r3, #0
 800827a:	dd28      	ble.n	80082ce <_dtoa_r+0x29e>
 800827c:	469b      	mov	fp, r3
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008284:	2100      	movs	r1, #0
 8008286:	2204      	movs	r2, #4
 8008288:	f102 0514 	add.w	r5, r2, #20
 800828c:	429d      	cmp	r5, r3
 800828e:	d926      	bls.n	80082de <_dtoa_r+0x2ae>
 8008290:	6041      	str	r1, [r0, #4]
 8008292:	4648      	mov	r0, r9
 8008294:	f000 fd9c 	bl	8008dd0 <_Balloc>
 8008298:	4682      	mov	sl, r0
 800829a:	2800      	cmp	r0, #0
 800829c:	d142      	bne.n	8008324 <_dtoa_r+0x2f4>
 800829e:	4b1e      	ldr	r3, [pc, #120]	@ (8008318 <_dtoa_r+0x2e8>)
 80082a0:	4602      	mov	r2, r0
 80082a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80082a6:	e6da      	b.n	800805e <_dtoa_r+0x2e>
 80082a8:	2300      	movs	r3, #0
 80082aa:	e7e3      	b.n	8008274 <_dtoa_r+0x244>
 80082ac:	2300      	movs	r3, #0
 80082ae:	e7d5      	b.n	800825c <_dtoa_r+0x22c>
 80082b0:	2401      	movs	r4, #1
 80082b2:	2300      	movs	r3, #0
 80082b4:	9307      	str	r3, [sp, #28]
 80082b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80082b8:	f04f 3bff 	mov.w	fp, #4294967295
 80082bc:	2200      	movs	r2, #0
 80082be:	f8cd b00c 	str.w	fp, [sp, #12]
 80082c2:	2312      	movs	r3, #18
 80082c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80082c6:	e7db      	b.n	8008280 <_dtoa_r+0x250>
 80082c8:	2301      	movs	r3, #1
 80082ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80082cc:	e7f4      	b.n	80082b8 <_dtoa_r+0x288>
 80082ce:	f04f 0b01 	mov.w	fp, #1
 80082d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80082d6:	465b      	mov	r3, fp
 80082d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80082dc:	e7d0      	b.n	8008280 <_dtoa_r+0x250>
 80082de:	3101      	adds	r1, #1
 80082e0:	0052      	lsls	r2, r2, #1
 80082e2:	e7d1      	b.n	8008288 <_dtoa_r+0x258>
 80082e4:	f3af 8000 	nop.w
 80082e8:	636f4361 	.word	0x636f4361
 80082ec:	3fd287a7 	.word	0x3fd287a7
 80082f0:	8b60c8b3 	.word	0x8b60c8b3
 80082f4:	3fc68a28 	.word	0x3fc68a28
 80082f8:	509f79fb 	.word	0x509f79fb
 80082fc:	3fd34413 	.word	0x3fd34413
 8008300:	0800a449 	.word	0x0800a449
 8008304:	0800a460 	.word	0x0800a460
 8008308:	7ff00000 	.word	0x7ff00000
 800830c:	0800a419 	.word	0x0800a419
 8008310:	3ff80000 	.word	0x3ff80000
 8008314:	0800a5b0 	.word	0x0800a5b0
 8008318:	0800a4b8 	.word	0x0800a4b8
 800831c:	0800a445 	.word	0x0800a445
 8008320:	0800a418 	.word	0x0800a418
 8008324:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008328:	6018      	str	r0, [r3, #0]
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	2b0e      	cmp	r3, #14
 800832e:	f200 80a1 	bhi.w	8008474 <_dtoa_r+0x444>
 8008332:	2c00      	cmp	r4, #0
 8008334:	f000 809e 	beq.w	8008474 <_dtoa_r+0x444>
 8008338:	2f00      	cmp	r7, #0
 800833a:	dd33      	ble.n	80083a4 <_dtoa_r+0x374>
 800833c:	4b9c      	ldr	r3, [pc, #624]	@ (80085b0 <_dtoa_r+0x580>)
 800833e:	f007 020f 	and.w	r2, r7, #15
 8008342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008346:	ed93 7b00 	vldr	d7, [r3]
 800834a:	05f8      	lsls	r0, r7, #23
 800834c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008350:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008354:	d516      	bpl.n	8008384 <_dtoa_r+0x354>
 8008356:	4b97      	ldr	r3, [pc, #604]	@ (80085b4 <_dtoa_r+0x584>)
 8008358:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800835c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008360:	f7f8 fa84 	bl	800086c <__aeabi_ddiv>
 8008364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008368:	f004 040f 	and.w	r4, r4, #15
 800836c:	2603      	movs	r6, #3
 800836e:	4d91      	ldr	r5, [pc, #580]	@ (80085b4 <_dtoa_r+0x584>)
 8008370:	b954      	cbnz	r4, 8008388 <_dtoa_r+0x358>
 8008372:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800837a:	f7f8 fa77 	bl	800086c <__aeabi_ddiv>
 800837e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008382:	e028      	b.n	80083d6 <_dtoa_r+0x3a6>
 8008384:	2602      	movs	r6, #2
 8008386:	e7f2      	b.n	800836e <_dtoa_r+0x33e>
 8008388:	07e1      	lsls	r1, r4, #31
 800838a:	d508      	bpl.n	800839e <_dtoa_r+0x36e>
 800838c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008390:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008394:	f7f8 f940 	bl	8000618 <__aeabi_dmul>
 8008398:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800839c:	3601      	adds	r6, #1
 800839e:	1064      	asrs	r4, r4, #1
 80083a0:	3508      	adds	r5, #8
 80083a2:	e7e5      	b.n	8008370 <_dtoa_r+0x340>
 80083a4:	f000 80af 	beq.w	8008506 <_dtoa_r+0x4d6>
 80083a8:	427c      	negs	r4, r7
 80083aa:	4b81      	ldr	r3, [pc, #516]	@ (80085b0 <_dtoa_r+0x580>)
 80083ac:	4d81      	ldr	r5, [pc, #516]	@ (80085b4 <_dtoa_r+0x584>)
 80083ae:	f004 020f 	and.w	r2, r4, #15
 80083b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083be:	f7f8 f92b 	bl	8000618 <__aeabi_dmul>
 80083c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083c6:	1124      	asrs	r4, r4, #4
 80083c8:	2300      	movs	r3, #0
 80083ca:	2602      	movs	r6, #2
 80083cc:	2c00      	cmp	r4, #0
 80083ce:	f040 808f 	bne.w	80084f0 <_dtoa_r+0x4c0>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1d3      	bne.n	800837e <_dtoa_r+0x34e>
 80083d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8094 	beq.w	800850a <_dtoa_r+0x4da>
 80083e2:	4b75      	ldr	r3, [pc, #468]	@ (80085b8 <_dtoa_r+0x588>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	4620      	mov	r0, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7f8 fb87 	bl	8000afc <__aeabi_dcmplt>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f000 808b 	beq.w	800850a <_dtoa_r+0x4da>
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8087 	beq.w	800850a <_dtoa_r+0x4da>
 80083fc:	f1bb 0f00 	cmp.w	fp, #0
 8008400:	dd34      	ble.n	800846c <_dtoa_r+0x43c>
 8008402:	4620      	mov	r0, r4
 8008404:	4b6d      	ldr	r3, [pc, #436]	@ (80085bc <_dtoa_r+0x58c>)
 8008406:	2200      	movs	r2, #0
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 f905 	bl	8000618 <__aeabi_dmul>
 800840e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008412:	f107 38ff 	add.w	r8, r7, #4294967295
 8008416:	3601      	adds	r6, #1
 8008418:	465c      	mov	r4, fp
 800841a:	4630      	mov	r0, r6
 800841c:	f7f8 f892 	bl	8000544 <__aeabi_i2d>
 8008420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008424:	f7f8 f8f8 	bl	8000618 <__aeabi_dmul>
 8008428:	4b65      	ldr	r3, [pc, #404]	@ (80085c0 <_dtoa_r+0x590>)
 800842a:	2200      	movs	r2, #0
 800842c:	f7f7 ff3e 	bl	80002ac <__adddf3>
 8008430:	4605      	mov	r5, r0
 8008432:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008436:	2c00      	cmp	r4, #0
 8008438:	d16a      	bne.n	8008510 <_dtoa_r+0x4e0>
 800843a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800843e:	4b61      	ldr	r3, [pc, #388]	@ (80085c4 <_dtoa_r+0x594>)
 8008440:	2200      	movs	r2, #0
 8008442:	f7f7 ff31 	bl	80002a8 <__aeabi_dsub>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800844e:	462a      	mov	r2, r5
 8008450:	4633      	mov	r3, r6
 8008452:	f7f8 fb71 	bl	8000b38 <__aeabi_dcmpgt>
 8008456:	2800      	cmp	r0, #0
 8008458:	f040 8298 	bne.w	800898c <_dtoa_r+0x95c>
 800845c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008460:	462a      	mov	r2, r5
 8008462:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008466:	f7f8 fb49 	bl	8000afc <__aeabi_dcmplt>
 800846a:	bb38      	cbnz	r0, 80084bc <_dtoa_r+0x48c>
 800846c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008470:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008474:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008476:	2b00      	cmp	r3, #0
 8008478:	f2c0 8157 	blt.w	800872a <_dtoa_r+0x6fa>
 800847c:	2f0e      	cmp	r7, #14
 800847e:	f300 8154 	bgt.w	800872a <_dtoa_r+0x6fa>
 8008482:	4b4b      	ldr	r3, [pc, #300]	@ (80085b0 <_dtoa_r+0x580>)
 8008484:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008488:	ed93 7b00 	vldr	d7, [r3]
 800848c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800848e:	2b00      	cmp	r3, #0
 8008490:	ed8d 7b00 	vstr	d7, [sp]
 8008494:	f280 80e5 	bge.w	8008662 <_dtoa_r+0x632>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	f300 80e1 	bgt.w	8008662 <_dtoa_r+0x632>
 80084a0:	d10c      	bne.n	80084bc <_dtoa_r+0x48c>
 80084a2:	4b48      	ldr	r3, [pc, #288]	@ (80085c4 <_dtoa_r+0x594>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	ec51 0b17 	vmov	r0, r1, d7
 80084aa:	f7f8 f8b5 	bl	8000618 <__aeabi_dmul>
 80084ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084b2:	f7f8 fb37 	bl	8000b24 <__aeabi_dcmpge>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f000 8266 	beq.w	8008988 <_dtoa_r+0x958>
 80084bc:	2400      	movs	r4, #0
 80084be:	4625      	mov	r5, r4
 80084c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084c2:	4656      	mov	r6, sl
 80084c4:	ea6f 0803 	mvn.w	r8, r3
 80084c8:	2700      	movs	r7, #0
 80084ca:	4621      	mov	r1, r4
 80084cc:	4648      	mov	r0, r9
 80084ce:	f000 fcbf 	bl	8008e50 <_Bfree>
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	f000 80bd 	beq.w	8008652 <_dtoa_r+0x622>
 80084d8:	b12f      	cbz	r7, 80084e6 <_dtoa_r+0x4b6>
 80084da:	42af      	cmp	r7, r5
 80084dc:	d003      	beq.n	80084e6 <_dtoa_r+0x4b6>
 80084de:	4639      	mov	r1, r7
 80084e0:	4648      	mov	r0, r9
 80084e2:	f000 fcb5 	bl	8008e50 <_Bfree>
 80084e6:	4629      	mov	r1, r5
 80084e8:	4648      	mov	r0, r9
 80084ea:	f000 fcb1 	bl	8008e50 <_Bfree>
 80084ee:	e0b0      	b.n	8008652 <_dtoa_r+0x622>
 80084f0:	07e2      	lsls	r2, r4, #31
 80084f2:	d505      	bpl.n	8008500 <_dtoa_r+0x4d0>
 80084f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084f8:	f7f8 f88e 	bl	8000618 <__aeabi_dmul>
 80084fc:	3601      	adds	r6, #1
 80084fe:	2301      	movs	r3, #1
 8008500:	1064      	asrs	r4, r4, #1
 8008502:	3508      	adds	r5, #8
 8008504:	e762      	b.n	80083cc <_dtoa_r+0x39c>
 8008506:	2602      	movs	r6, #2
 8008508:	e765      	b.n	80083d6 <_dtoa_r+0x3a6>
 800850a:	9c03      	ldr	r4, [sp, #12]
 800850c:	46b8      	mov	r8, r7
 800850e:	e784      	b.n	800841a <_dtoa_r+0x3ea>
 8008510:	4b27      	ldr	r3, [pc, #156]	@ (80085b0 <_dtoa_r+0x580>)
 8008512:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008514:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800851c:	4454      	add	r4, sl
 800851e:	2900      	cmp	r1, #0
 8008520:	d054      	beq.n	80085cc <_dtoa_r+0x59c>
 8008522:	4929      	ldr	r1, [pc, #164]	@ (80085c8 <_dtoa_r+0x598>)
 8008524:	2000      	movs	r0, #0
 8008526:	f7f8 f9a1 	bl	800086c <__aeabi_ddiv>
 800852a:	4633      	mov	r3, r6
 800852c:	462a      	mov	r2, r5
 800852e:	f7f7 febb 	bl	80002a8 <__aeabi_dsub>
 8008532:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008536:	4656      	mov	r6, sl
 8008538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800853c:	f7f8 fb1c 	bl	8000b78 <__aeabi_d2iz>
 8008540:	4605      	mov	r5, r0
 8008542:	f7f7 ffff 	bl	8000544 <__aeabi_i2d>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800854e:	f7f7 feab 	bl	80002a8 <__aeabi_dsub>
 8008552:	3530      	adds	r5, #48	@ 0x30
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800855c:	f806 5b01 	strb.w	r5, [r6], #1
 8008560:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008564:	f7f8 faca 	bl	8000afc <__aeabi_dcmplt>
 8008568:	2800      	cmp	r0, #0
 800856a:	d172      	bne.n	8008652 <_dtoa_r+0x622>
 800856c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008570:	4911      	ldr	r1, [pc, #68]	@ (80085b8 <_dtoa_r+0x588>)
 8008572:	2000      	movs	r0, #0
 8008574:	f7f7 fe98 	bl	80002a8 <__aeabi_dsub>
 8008578:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800857c:	f7f8 fabe 	bl	8000afc <__aeabi_dcmplt>
 8008580:	2800      	cmp	r0, #0
 8008582:	f040 80b4 	bne.w	80086ee <_dtoa_r+0x6be>
 8008586:	42a6      	cmp	r6, r4
 8008588:	f43f af70 	beq.w	800846c <_dtoa_r+0x43c>
 800858c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008590:	4b0a      	ldr	r3, [pc, #40]	@ (80085bc <_dtoa_r+0x58c>)
 8008592:	2200      	movs	r2, #0
 8008594:	f7f8 f840 	bl	8000618 <__aeabi_dmul>
 8008598:	4b08      	ldr	r3, [pc, #32]	@ (80085bc <_dtoa_r+0x58c>)
 800859a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800859e:	2200      	movs	r2, #0
 80085a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a4:	f7f8 f838 	bl	8000618 <__aeabi_dmul>
 80085a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085ac:	e7c4      	b.n	8008538 <_dtoa_r+0x508>
 80085ae:	bf00      	nop
 80085b0:	0800a5b0 	.word	0x0800a5b0
 80085b4:	0800a588 	.word	0x0800a588
 80085b8:	3ff00000 	.word	0x3ff00000
 80085bc:	40240000 	.word	0x40240000
 80085c0:	401c0000 	.word	0x401c0000
 80085c4:	40140000 	.word	0x40140000
 80085c8:	3fe00000 	.word	0x3fe00000
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	f7f8 f822 	bl	8000618 <__aeabi_dmul>
 80085d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80085da:	4656      	mov	r6, sl
 80085dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e0:	f7f8 faca 	bl	8000b78 <__aeabi_d2iz>
 80085e4:	4605      	mov	r5, r0
 80085e6:	f7f7 ffad 	bl	8000544 <__aeabi_i2d>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085f2:	f7f7 fe59 	bl	80002a8 <__aeabi_dsub>
 80085f6:	3530      	adds	r5, #48	@ 0x30
 80085f8:	f806 5b01 	strb.w	r5, [r6], #1
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	42a6      	cmp	r6, r4
 8008602:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008606:	f04f 0200 	mov.w	r2, #0
 800860a:	d124      	bne.n	8008656 <_dtoa_r+0x626>
 800860c:	4baf      	ldr	r3, [pc, #700]	@ (80088cc <_dtoa_r+0x89c>)
 800860e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008612:	f7f7 fe4b 	bl	80002ac <__adddf3>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800861e:	f7f8 fa8b 	bl	8000b38 <__aeabi_dcmpgt>
 8008622:	2800      	cmp	r0, #0
 8008624:	d163      	bne.n	80086ee <_dtoa_r+0x6be>
 8008626:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800862a:	49a8      	ldr	r1, [pc, #672]	@ (80088cc <_dtoa_r+0x89c>)
 800862c:	2000      	movs	r0, #0
 800862e:	f7f7 fe3b 	bl	80002a8 <__aeabi_dsub>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800863a:	f7f8 fa5f 	bl	8000afc <__aeabi_dcmplt>
 800863e:	2800      	cmp	r0, #0
 8008640:	f43f af14 	beq.w	800846c <_dtoa_r+0x43c>
 8008644:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008646:	1e73      	subs	r3, r6, #1
 8008648:	9313      	str	r3, [sp, #76]	@ 0x4c
 800864a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800864e:	2b30      	cmp	r3, #48	@ 0x30
 8008650:	d0f8      	beq.n	8008644 <_dtoa_r+0x614>
 8008652:	4647      	mov	r7, r8
 8008654:	e03b      	b.n	80086ce <_dtoa_r+0x69e>
 8008656:	4b9e      	ldr	r3, [pc, #632]	@ (80088d0 <_dtoa_r+0x8a0>)
 8008658:	f7f7 ffde 	bl	8000618 <__aeabi_dmul>
 800865c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008660:	e7bc      	b.n	80085dc <_dtoa_r+0x5ac>
 8008662:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008666:	4656      	mov	r6, sl
 8008668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f8 f8fc 	bl	800086c <__aeabi_ddiv>
 8008674:	f7f8 fa80 	bl	8000b78 <__aeabi_d2iz>
 8008678:	4680      	mov	r8, r0
 800867a:	f7f7 ff63 	bl	8000544 <__aeabi_i2d>
 800867e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008682:	f7f7 ffc9 	bl	8000618 <__aeabi_dmul>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008692:	f7f7 fe09 	bl	80002a8 <__aeabi_dsub>
 8008696:	f806 4b01 	strb.w	r4, [r6], #1
 800869a:	9d03      	ldr	r5, [sp, #12]
 800869c:	eba6 040a 	sub.w	r4, r6, sl
 80086a0:	42a5      	cmp	r5, r4
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	d133      	bne.n	8008710 <_dtoa_r+0x6e0>
 80086a8:	f7f7 fe00 	bl	80002ac <__adddf3>
 80086ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b0:	4604      	mov	r4, r0
 80086b2:	460d      	mov	r5, r1
 80086b4:	f7f8 fa40 	bl	8000b38 <__aeabi_dcmpgt>
 80086b8:	b9c0      	cbnz	r0, 80086ec <_dtoa_r+0x6bc>
 80086ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086be:	4620      	mov	r0, r4
 80086c0:	4629      	mov	r1, r5
 80086c2:	f7f8 fa11 	bl	8000ae8 <__aeabi_dcmpeq>
 80086c6:	b110      	cbz	r0, 80086ce <_dtoa_r+0x69e>
 80086c8:	f018 0f01 	tst.w	r8, #1
 80086cc:	d10e      	bne.n	80086ec <_dtoa_r+0x6bc>
 80086ce:	9902      	ldr	r1, [sp, #8]
 80086d0:	4648      	mov	r0, r9
 80086d2:	f000 fbbd 	bl	8008e50 <_Bfree>
 80086d6:	2300      	movs	r3, #0
 80086d8:	7033      	strb	r3, [r6, #0]
 80086da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80086dc:	3701      	adds	r7, #1
 80086de:	601f      	str	r7, [r3, #0]
 80086e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 824b 	beq.w	8008b7e <_dtoa_r+0xb4e>
 80086e8:	601e      	str	r6, [r3, #0]
 80086ea:	e248      	b.n	8008b7e <_dtoa_r+0xb4e>
 80086ec:	46b8      	mov	r8, r7
 80086ee:	4633      	mov	r3, r6
 80086f0:	461e      	mov	r6, r3
 80086f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086f6:	2a39      	cmp	r2, #57	@ 0x39
 80086f8:	d106      	bne.n	8008708 <_dtoa_r+0x6d8>
 80086fa:	459a      	cmp	sl, r3
 80086fc:	d1f8      	bne.n	80086f0 <_dtoa_r+0x6c0>
 80086fe:	2230      	movs	r2, #48	@ 0x30
 8008700:	f108 0801 	add.w	r8, r8, #1
 8008704:	f88a 2000 	strb.w	r2, [sl]
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	3201      	adds	r2, #1
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	e7a0      	b.n	8008652 <_dtoa_r+0x622>
 8008710:	4b6f      	ldr	r3, [pc, #444]	@ (80088d0 <_dtoa_r+0x8a0>)
 8008712:	2200      	movs	r2, #0
 8008714:	f7f7 ff80 	bl	8000618 <__aeabi_dmul>
 8008718:	2200      	movs	r2, #0
 800871a:	2300      	movs	r3, #0
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
 8008720:	f7f8 f9e2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008724:	2800      	cmp	r0, #0
 8008726:	d09f      	beq.n	8008668 <_dtoa_r+0x638>
 8008728:	e7d1      	b.n	80086ce <_dtoa_r+0x69e>
 800872a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800872c:	2a00      	cmp	r2, #0
 800872e:	f000 80ea 	beq.w	8008906 <_dtoa_r+0x8d6>
 8008732:	9a07      	ldr	r2, [sp, #28]
 8008734:	2a01      	cmp	r2, #1
 8008736:	f300 80cd 	bgt.w	80088d4 <_dtoa_r+0x8a4>
 800873a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800873c:	2a00      	cmp	r2, #0
 800873e:	f000 80c1 	beq.w	80088c4 <_dtoa_r+0x894>
 8008742:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008746:	9c08      	ldr	r4, [sp, #32]
 8008748:	9e00      	ldr	r6, [sp, #0]
 800874a:	9a00      	ldr	r2, [sp, #0]
 800874c:	441a      	add	r2, r3
 800874e:	9200      	str	r2, [sp, #0]
 8008750:	9a06      	ldr	r2, [sp, #24]
 8008752:	2101      	movs	r1, #1
 8008754:	441a      	add	r2, r3
 8008756:	4648      	mov	r0, r9
 8008758:	9206      	str	r2, [sp, #24]
 800875a:	f000 fc2d 	bl	8008fb8 <__i2b>
 800875e:	4605      	mov	r5, r0
 8008760:	b166      	cbz	r6, 800877c <_dtoa_r+0x74c>
 8008762:	9b06      	ldr	r3, [sp, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	dd09      	ble.n	800877c <_dtoa_r+0x74c>
 8008768:	42b3      	cmp	r3, r6
 800876a:	9a00      	ldr	r2, [sp, #0]
 800876c:	bfa8      	it	ge
 800876e:	4633      	movge	r3, r6
 8008770:	1ad2      	subs	r2, r2, r3
 8008772:	9200      	str	r2, [sp, #0]
 8008774:	9a06      	ldr	r2, [sp, #24]
 8008776:	1af6      	subs	r6, r6, r3
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	9306      	str	r3, [sp, #24]
 800877c:	9b08      	ldr	r3, [sp, #32]
 800877e:	b30b      	cbz	r3, 80087c4 <_dtoa_r+0x794>
 8008780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 80c6 	beq.w	8008914 <_dtoa_r+0x8e4>
 8008788:	2c00      	cmp	r4, #0
 800878a:	f000 80c0 	beq.w	800890e <_dtoa_r+0x8de>
 800878e:	4629      	mov	r1, r5
 8008790:	4622      	mov	r2, r4
 8008792:	4648      	mov	r0, r9
 8008794:	f000 fcc8 	bl	8009128 <__pow5mult>
 8008798:	9a02      	ldr	r2, [sp, #8]
 800879a:	4601      	mov	r1, r0
 800879c:	4605      	mov	r5, r0
 800879e:	4648      	mov	r0, r9
 80087a0:	f000 fc20 	bl	8008fe4 <__multiply>
 80087a4:	9902      	ldr	r1, [sp, #8]
 80087a6:	4680      	mov	r8, r0
 80087a8:	4648      	mov	r0, r9
 80087aa:	f000 fb51 	bl	8008e50 <_Bfree>
 80087ae:	9b08      	ldr	r3, [sp, #32]
 80087b0:	1b1b      	subs	r3, r3, r4
 80087b2:	9308      	str	r3, [sp, #32]
 80087b4:	f000 80b1 	beq.w	800891a <_dtoa_r+0x8ea>
 80087b8:	9a08      	ldr	r2, [sp, #32]
 80087ba:	4641      	mov	r1, r8
 80087bc:	4648      	mov	r0, r9
 80087be:	f000 fcb3 	bl	8009128 <__pow5mult>
 80087c2:	9002      	str	r0, [sp, #8]
 80087c4:	2101      	movs	r1, #1
 80087c6:	4648      	mov	r0, r9
 80087c8:	f000 fbf6 	bl	8008fb8 <__i2b>
 80087cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087ce:	4604      	mov	r4, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 81d8 	beq.w	8008b86 <_dtoa_r+0xb56>
 80087d6:	461a      	mov	r2, r3
 80087d8:	4601      	mov	r1, r0
 80087da:	4648      	mov	r0, r9
 80087dc:	f000 fca4 	bl	8009128 <__pow5mult>
 80087e0:	9b07      	ldr	r3, [sp, #28]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	4604      	mov	r4, r0
 80087e6:	f300 809f 	bgt.w	8008928 <_dtoa_r+0x8f8>
 80087ea:	9b04      	ldr	r3, [sp, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 8097 	bne.w	8008920 <_dtoa_r+0x8f0>
 80087f2:	9b05      	ldr	r3, [sp, #20]
 80087f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f040 8093 	bne.w	8008924 <_dtoa_r+0x8f4>
 80087fe:	9b05      	ldr	r3, [sp, #20]
 8008800:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008804:	0d1b      	lsrs	r3, r3, #20
 8008806:	051b      	lsls	r3, r3, #20
 8008808:	b133      	cbz	r3, 8008818 <_dtoa_r+0x7e8>
 800880a:	9b00      	ldr	r3, [sp, #0]
 800880c:	3301      	adds	r3, #1
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	9b06      	ldr	r3, [sp, #24]
 8008812:	3301      	adds	r3, #1
 8008814:	9306      	str	r3, [sp, #24]
 8008816:	2301      	movs	r3, #1
 8008818:	9308      	str	r3, [sp, #32]
 800881a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 81b8 	beq.w	8008b92 <_dtoa_r+0xb62>
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008828:	6918      	ldr	r0, [r3, #16]
 800882a:	f000 fb79 	bl	8008f20 <__hi0bits>
 800882e:	f1c0 0020 	rsb	r0, r0, #32
 8008832:	9b06      	ldr	r3, [sp, #24]
 8008834:	4418      	add	r0, r3
 8008836:	f010 001f 	ands.w	r0, r0, #31
 800883a:	f000 8082 	beq.w	8008942 <_dtoa_r+0x912>
 800883e:	f1c0 0320 	rsb	r3, r0, #32
 8008842:	2b04      	cmp	r3, #4
 8008844:	dd73      	ble.n	800892e <_dtoa_r+0x8fe>
 8008846:	9b00      	ldr	r3, [sp, #0]
 8008848:	f1c0 001c 	rsb	r0, r0, #28
 800884c:	4403      	add	r3, r0
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	9b06      	ldr	r3, [sp, #24]
 8008852:	4403      	add	r3, r0
 8008854:	4406      	add	r6, r0
 8008856:	9306      	str	r3, [sp, #24]
 8008858:	9b00      	ldr	r3, [sp, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	dd05      	ble.n	800886a <_dtoa_r+0x83a>
 800885e:	9902      	ldr	r1, [sp, #8]
 8008860:	461a      	mov	r2, r3
 8008862:	4648      	mov	r0, r9
 8008864:	f000 fcba 	bl	80091dc <__lshift>
 8008868:	9002      	str	r0, [sp, #8]
 800886a:	9b06      	ldr	r3, [sp, #24]
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd05      	ble.n	800887c <_dtoa_r+0x84c>
 8008870:	4621      	mov	r1, r4
 8008872:	461a      	mov	r2, r3
 8008874:	4648      	mov	r0, r9
 8008876:	f000 fcb1 	bl	80091dc <__lshift>
 800887a:	4604      	mov	r4, r0
 800887c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800887e:	2b00      	cmp	r3, #0
 8008880:	d061      	beq.n	8008946 <_dtoa_r+0x916>
 8008882:	9802      	ldr	r0, [sp, #8]
 8008884:	4621      	mov	r1, r4
 8008886:	f000 fd15 	bl	80092b4 <__mcmp>
 800888a:	2800      	cmp	r0, #0
 800888c:	da5b      	bge.n	8008946 <_dtoa_r+0x916>
 800888e:	2300      	movs	r3, #0
 8008890:	9902      	ldr	r1, [sp, #8]
 8008892:	220a      	movs	r2, #10
 8008894:	4648      	mov	r0, r9
 8008896:	f000 fafd 	bl	8008e94 <__multadd>
 800889a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889c:	9002      	str	r0, [sp, #8]
 800889e:	f107 38ff 	add.w	r8, r7, #4294967295
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8177 	beq.w	8008b96 <_dtoa_r+0xb66>
 80088a8:	4629      	mov	r1, r5
 80088aa:	2300      	movs	r3, #0
 80088ac:	220a      	movs	r2, #10
 80088ae:	4648      	mov	r0, r9
 80088b0:	f000 faf0 	bl	8008e94 <__multadd>
 80088b4:	f1bb 0f00 	cmp.w	fp, #0
 80088b8:	4605      	mov	r5, r0
 80088ba:	dc6f      	bgt.n	800899c <_dtoa_r+0x96c>
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	dc49      	bgt.n	8008956 <_dtoa_r+0x926>
 80088c2:	e06b      	b.n	800899c <_dtoa_r+0x96c>
 80088c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088ca:	e73c      	b.n	8008746 <_dtoa_r+0x716>
 80088cc:	3fe00000 	.word	0x3fe00000
 80088d0:	40240000 	.word	0x40240000
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	1e5c      	subs	r4, r3, #1
 80088d8:	9b08      	ldr	r3, [sp, #32]
 80088da:	42a3      	cmp	r3, r4
 80088dc:	db09      	blt.n	80088f2 <_dtoa_r+0x8c2>
 80088de:	1b1c      	subs	r4, r3, r4
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f6bf af30 	bge.w	8008748 <_dtoa_r+0x718>
 80088e8:	9b00      	ldr	r3, [sp, #0]
 80088ea:	9a03      	ldr	r2, [sp, #12]
 80088ec:	1a9e      	subs	r6, r3, r2
 80088ee:	2300      	movs	r3, #0
 80088f0:	e72b      	b.n	800874a <_dtoa_r+0x71a>
 80088f2:	9b08      	ldr	r3, [sp, #32]
 80088f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088f6:	9408      	str	r4, [sp, #32]
 80088f8:	1ae3      	subs	r3, r4, r3
 80088fa:	441a      	add	r2, r3
 80088fc:	9e00      	ldr	r6, [sp, #0]
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	920d      	str	r2, [sp, #52]	@ 0x34
 8008902:	2400      	movs	r4, #0
 8008904:	e721      	b.n	800874a <_dtoa_r+0x71a>
 8008906:	9c08      	ldr	r4, [sp, #32]
 8008908:	9e00      	ldr	r6, [sp, #0]
 800890a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800890c:	e728      	b.n	8008760 <_dtoa_r+0x730>
 800890e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008912:	e751      	b.n	80087b8 <_dtoa_r+0x788>
 8008914:	9a08      	ldr	r2, [sp, #32]
 8008916:	9902      	ldr	r1, [sp, #8]
 8008918:	e750      	b.n	80087bc <_dtoa_r+0x78c>
 800891a:	f8cd 8008 	str.w	r8, [sp, #8]
 800891e:	e751      	b.n	80087c4 <_dtoa_r+0x794>
 8008920:	2300      	movs	r3, #0
 8008922:	e779      	b.n	8008818 <_dtoa_r+0x7e8>
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	e777      	b.n	8008818 <_dtoa_r+0x7e8>
 8008928:	2300      	movs	r3, #0
 800892a:	9308      	str	r3, [sp, #32]
 800892c:	e779      	b.n	8008822 <_dtoa_r+0x7f2>
 800892e:	d093      	beq.n	8008858 <_dtoa_r+0x828>
 8008930:	9a00      	ldr	r2, [sp, #0]
 8008932:	331c      	adds	r3, #28
 8008934:	441a      	add	r2, r3
 8008936:	9200      	str	r2, [sp, #0]
 8008938:	9a06      	ldr	r2, [sp, #24]
 800893a:	441a      	add	r2, r3
 800893c:	441e      	add	r6, r3
 800893e:	9206      	str	r2, [sp, #24]
 8008940:	e78a      	b.n	8008858 <_dtoa_r+0x828>
 8008942:	4603      	mov	r3, r0
 8008944:	e7f4      	b.n	8008930 <_dtoa_r+0x900>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	46b8      	mov	r8, r7
 800894c:	dc20      	bgt.n	8008990 <_dtoa_r+0x960>
 800894e:	469b      	mov	fp, r3
 8008950:	9b07      	ldr	r3, [sp, #28]
 8008952:	2b02      	cmp	r3, #2
 8008954:	dd1e      	ble.n	8008994 <_dtoa_r+0x964>
 8008956:	f1bb 0f00 	cmp.w	fp, #0
 800895a:	f47f adb1 	bne.w	80084c0 <_dtoa_r+0x490>
 800895e:	4621      	mov	r1, r4
 8008960:	465b      	mov	r3, fp
 8008962:	2205      	movs	r2, #5
 8008964:	4648      	mov	r0, r9
 8008966:	f000 fa95 	bl	8008e94 <__multadd>
 800896a:	4601      	mov	r1, r0
 800896c:	4604      	mov	r4, r0
 800896e:	9802      	ldr	r0, [sp, #8]
 8008970:	f000 fca0 	bl	80092b4 <__mcmp>
 8008974:	2800      	cmp	r0, #0
 8008976:	f77f ada3 	ble.w	80084c0 <_dtoa_r+0x490>
 800897a:	4656      	mov	r6, sl
 800897c:	2331      	movs	r3, #49	@ 0x31
 800897e:	f806 3b01 	strb.w	r3, [r6], #1
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	e59f      	b.n	80084c8 <_dtoa_r+0x498>
 8008988:	9c03      	ldr	r4, [sp, #12]
 800898a:	46b8      	mov	r8, r7
 800898c:	4625      	mov	r5, r4
 800898e:	e7f4      	b.n	800897a <_dtoa_r+0x94a>
 8008990:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 8101 	beq.w	8008b9e <_dtoa_r+0xb6e>
 800899c:	2e00      	cmp	r6, #0
 800899e:	dd05      	ble.n	80089ac <_dtoa_r+0x97c>
 80089a0:	4629      	mov	r1, r5
 80089a2:	4632      	mov	r2, r6
 80089a4:	4648      	mov	r0, r9
 80089a6:	f000 fc19 	bl	80091dc <__lshift>
 80089aa:	4605      	mov	r5, r0
 80089ac:	9b08      	ldr	r3, [sp, #32]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d05c      	beq.n	8008a6c <_dtoa_r+0xa3c>
 80089b2:	6869      	ldr	r1, [r5, #4]
 80089b4:	4648      	mov	r0, r9
 80089b6:	f000 fa0b 	bl	8008dd0 <_Balloc>
 80089ba:	4606      	mov	r6, r0
 80089bc:	b928      	cbnz	r0, 80089ca <_dtoa_r+0x99a>
 80089be:	4b82      	ldr	r3, [pc, #520]	@ (8008bc8 <_dtoa_r+0xb98>)
 80089c0:	4602      	mov	r2, r0
 80089c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089c6:	f7ff bb4a 	b.w	800805e <_dtoa_r+0x2e>
 80089ca:	692a      	ldr	r2, [r5, #16]
 80089cc:	3202      	adds	r2, #2
 80089ce:	0092      	lsls	r2, r2, #2
 80089d0:	f105 010c 	add.w	r1, r5, #12
 80089d4:	300c      	adds	r0, #12
 80089d6:	f000 ffa3 	bl	8009920 <memcpy>
 80089da:	2201      	movs	r2, #1
 80089dc:	4631      	mov	r1, r6
 80089de:	4648      	mov	r0, r9
 80089e0:	f000 fbfc 	bl	80091dc <__lshift>
 80089e4:	f10a 0301 	add.w	r3, sl, #1
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	eb0a 030b 	add.w	r3, sl, fp
 80089ee:	9308      	str	r3, [sp, #32]
 80089f0:	9b04      	ldr	r3, [sp, #16]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	462f      	mov	r7, r5
 80089f8:	9306      	str	r3, [sp, #24]
 80089fa:	4605      	mov	r5, r0
 80089fc:	9b00      	ldr	r3, [sp, #0]
 80089fe:	9802      	ldr	r0, [sp, #8]
 8008a00:	4621      	mov	r1, r4
 8008a02:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a06:	f7ff fa88 	bl	8007f1a <quorem>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	3330      	adds	r3, #48	@ 0x30
 8008a0e:	9003      	str	r0, [sp, #12]
 8008a10:	4639      	mov	r1, r7
 8008a12:	9802      	ldr	r0, [sp, #8]
 8008a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a16:	f000 fc4d 	bl	80092b4 <__mcmp>
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	9004      	str	r0, [sp, #16]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4648      	mov	r0, r9
 8008a22:	f000 fc63 	bl	80092ec <__mdiff>
 8008a26:	68c2      	ldr	r2, [r0, #12]
 8008a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	bb02      	cbnz	r2, 8008a70 <_dtoa_r+0xa40>
 8008a2e:	4601      	mov	r1, r0
 8008a30:	9802      	ldr	r0, [sp, #8]
 8008a32:	f000 fc3f 	bl	80092b4 <__mcmp>
 8008a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a38:	4602      	mov	r2, r0
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4648      	mov	r0, r9
 8008a3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a42:	f000 fa05 	bl	8008e50 <_Bfree>
 8008a46:	9b07      	ldr	r3, [sp, #28]
 8008a48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a4a:	9e00      	ldr	r6, [sp, #0]
 8008a4c:	ea42 0103 	orr.w	r1, r2, r3
 8008a50:	9b06      	ldr	r3, [sp, #24]
 8008a52:	4319      	orrs	r1, r3
 8008a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a56:	d10d      	bne.n	8008a74 <_dtoa_r+0xa44>
 8008a58:	2b39      	cmp	r3, #57	@ 0x39
 8008a5a:	d027      	beq.n	8008aac <_dtoa_r+0xa7c>
 8008a5c:	9a04      	ldr	r2, [sp, #16]
 8008a5e:	2a00      	cmp	r2, #0
 8008a60:	dd01      	ble.n	8008a66 <_dtoa_r+0xa36>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	3331      	adds	r3, #49	@ 0x31
 8008a66:	f88b 3000 	strb.w	r3, [fp]
 8008a6a:	e52e      	b.n	80084ca <_dtoa_r+0x49a>
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	e7b9      	b.n	80089e4 <_dtoa_r+0x9b4>
 8008a70:	2201      	movs	r2, #1
 8008a72:	e7e2      	b.n	8008a3a <_dtoa_r+0xa0a>
 8008a74:	9904      	ldr	r1, [sp, #16]
 8008a76:	2900      	cmp	r1, #0
 8008a78:	db04      	blt.n	8008a84 <_dtoa_r+0xa54>
 8008a7a:	9807      	ldr	r0, [sp, #28]
 8008a7c:	4301      	orrs	r1, r0
 8008a7e:	9806      	ldr	r0, [sp, #24]
 8008a80:	4301      	orrs	r1, r0
 8008a82:	d120      	bne.n	8008ac6 <_dtoa_r+0xa96>
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	ddee      	ble.n	8008a66 <_dtoa_r+0xa36>
 8008a88:	9902      	ldr	r1, [sp, #8]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	4648      	mov	r0, r9
 8008a90:	f000 fba4 	bl	80091dc <__lshift>
 8008a94:	4621      	mov	r1, r4
 8008a96:	9002      	str	r0, [sp, #8]
 8008a98:	f000 fc0c 	bl	80092b4 <__mcmp>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	9b00      	ldr	r3, [sp, #0]
 8008aa0:	dc02      	bgt.n	8008aa8 <_dtoa_r+0xa78>
 8008aa2:	d1e0      	bne.n	8008a66 <_dtoa_r+0xa36>
 8008aa4:	07da      	lsls	r2, r3, #31
 8008aa6:	d5de      	bpl.n	8008a66 <_dtoa_r+0xa36>
 8008aa8:	2b39      	cmp	r3, #57	@ 0x39
 8008aaa:	d1da      	bne.n	8008a62 <_dtoa_r+0xa32>
 8008aac:	2339      	movs	r3, #57	@ 0x39
 8008aae:	f88b 3000 	strb.w	r3, [fp]
 8008ab2:	4633      	mov	r3, r6
 8008ab4:	461e      	mov	r6, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008abc:	2a39      	cmp	r2, #57	@ 0x39
 8008abe:	d04e      	beq.n	8008b5e <_dtoa_r+0xb2e>
 8008ac0:	3201      	adds	r2, #1
 8008ac2:	701a      	strb	r2, [r3, #0]
 8008ac4:	e501      	b.n	80084ca <_dtoa_r+0x49a>
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	dd03      	ble.n	8008ad2 <_dtoa_r+0xaa2>
 8008aca:	2b39      	cmp	r3, #57	@ 0x39
 8008acc:	d0ee      	beq.n	8008aac <_dtoa_r+0xa7c>
 8008ace:	3301      	adds	r3, #1
 8008ad0:	e7c9      	b.n	8008a66 <_dtoa_r+0xa36>
 8008ad2:	9a00      	ldr	r2, [sp, #0]
 8008ad4:	9908      	ldr	r1, [sp, #32]
 8008ad6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ada:	428a      	cmp	r2, r1
 8008adc:	d028      	beq.n	8008b30 <_dtoa_r+0xb00>
 8008ade:	9902      	ldr	r1, [sp, #8]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	4648      	mov	r0, r9
 8008ae6:	f000 f9d5 	bl	8008e94 <__multadd>
 8008aea:	42af      	cmp	r7, r5
 8008aec:	9002      	str	r0, [sp, #8]
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	f04f 020a 	mov.w	r2, #10
 8008af6:	4639      	mov	r1, r7
 8008af8:	4648      	mov	r0, r9
 8008afa:	d107      	bne.n	8008b0c <_dtoa_r+0xadc>
 8008afc:	f000 f9ca 	bl	8008e94 <__multadd>
 8008b00:	4607      	mov	r7, r0
 8008b02:	4605      	mov	r5, r0
 8008b04:	9b00      	ldr	r3, [sp, #0]
 8008b06:	3301      	adds	r3, #1
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	e777      	b.n	80089fc <_dtoa_r+0x9cc>
 8008b0c:	f000 f9c2 	bl	8008e94 <__multadd>
 8008b10:	4629      	mov	r1, r5
 8008b12:	4607      	mov	r7, r0
 8008b14:	2300      	movs	r3, #0
 8008b16:	220a      	movs	r2, #10
 8008b18:	4648      	mov	r0, r9
 8008b1a:	f000 f9bb 	bl	8008e94 <__multadd>
 8008b1e:	4605      	mov	r5, r0
 8008b20:	e7f0      	b.n	8008b04 <_dtoa_r+0xad4>
 8008b22:	f1bb 0f00 	cmp.w	fp, #0
 8008b26:	bfcc      	ite	gt
 8008b28:	465e      	movgt	r6, fp
 8008b2a:	2601      	movle	r6, #1
 8008b2c:	4456      	add	r6, sl
 8008b2e:	2700      	movs	r7, #0
 8008b30:	9902      	ldr	r1, [sp, #8]
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	2201      	movs	r2, #1
 8008b36:	4648      	mov	r0, r9
 8008b38:	f000 fb50 	bl	80091dc <__lshift>
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	9002      	str	r0, [sp, #8]
 8008b40:	f000 fbb8 	bl	80092b4 <__mcmp>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	dcb4      	bgt.n	8008ab2 <_dtoa_r+0xa82>
 8008b48:	d102      	bne.n	8008b50 <_dtoa_r+0xb20>
 8008b4a:	9b00      	ldr	r3, [sp, #0]
 8008b4c:	07db      	lsls	r3, r3, #31
 8008b4e:	d4b0      	bmi.n	8008ab2 <_dtoa_r+0xa82>
 8008b50:	4633      	mov	r3, r6
 8008b52:	461e      	mov	r6, r3
 8008b54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b58:	2a30      	cmp	r2, #48	@ 0x30
 8008b5a:	d0fa      	beq.n	8008b52 <_dtoa_r+0xb22>
 8008b5c:	e4b5      	b.n	80084ca <_dtoa_r+0x49a>
 8008b5e:	459a      	cmp	sl, r3
 8008b60:	d1a8      	bne.n	8008ab4 <_dtoa_r+0xa84>
 8008b62:	2331      	movs	r3, #49	@ 0x31
 8008b64:	f108 0801 	add.w	r8, r8, #1
 8008b68:	f88a 3000 	strb.w	r3, [sl]
 8008b6c:	e4ad      	b.n	80084ca <_dtoa_r+0x49a>
 8008b6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008bcc <_dtoa_r+0xb9c>
 8008b74:	b11b      	cbz	r3, 8008b7e <_dtoa_r+0xb4e>
 8008b76:	f10a 0308 	add.w	r3, sl, #8
 8008b7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	4650      	mov	r0, sl
 8008b80:	b017      	add	sp, #92	@ 0x5c
 8008b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b86:	9b07      	ldr	r3, [sp, #28]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	f77f ae2e 	ble.w	80087ea <_dtoa_r+0x7ba>
 8008b8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	2001      	movs	r0, #1
 8008b94:	e64d      	b.n	8008832 <_dtoa_r+0x802>
 8008b96:	f1bb 0f00 	cmp.w	fp, #0
 8008b9a:	f77f aed9 	ble.w	8008950 <_dtoa_r+0x920>
 8008b9e:	4656      	mov	r6, sl
 8008ba0:	9802      	ldr	r0, [sp, #8]
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	f7ff f9b9 	bl	8007f1a <quorem>
 8008ba8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008bac:	f806 3b01 	strb.w	r3, [r6], #1
 8008bb0:	eba6 020a 	sub.w	r2, r6, sl
 8008bb4:	4593      	cmp	fp, r2
 8008bb6:	ddb4      	ble.n	8008b22 <_dtoa_r+0xaf2>
 8008bb8:	9902      	ldr	r1, [sp, #8]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	220a      	movs	r2, #10
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	f000 f968 	bl	8008e94 <__multadd>
 8008bc4:	9002      	str	r0, [sp, #8]
 8008bc6:	e7eb      	b.n	8008ba0 <_dtoa_r+0xb70>
 8008bc8:	0800a4b8 	.word	0x0800a4b8
 8008bcc:	0800a43c 	.word	0x0800a43c

08008bd0 <_free_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d041      	beq.n	8008c5c <_free_r+0x8c>
 8008bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bdc:	1f0c      	subs	r4, r1, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfb8      	it	lt
 8008be2:	18e4      	addlt	r4, r4, r3
 8008be4:	f000 f8e8 	bl	8008db8 <__malloc_lock>
 8008be8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c60 <_free_r+0x90>)
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	b933      	cbnz	r3, 8008bfc <_free_r+0x2c>
 8008bee:	6063      	str	r3, [r4, #4]
 8008bf0:	6014      	str	r4, [r2, #0]
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf8:	f000 b8e4 	b.w	8008dc4 <__malloc_unlock>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d908      	bls.n	8008c12 <_free_r+0x42>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	1821      	adds	r1, r4, r0
 8008c04:	428b      	cmp	r3, r1
 8008c06:	bf01      	itttt	eq
 8008c08:	6819      	ldreq	r1, [r3, #0]
 8008c0a:	685b      	ldreq	r3, [r3, #4]
 8008c0c:	1809      	addeq	r1, r1, r0
 8008c0e:	6021      	streq	r1, [r4, #0]
 8008c10:	e7ed      	b.n	8008bee <_free_r+0x1e>
 8008c12:	461a      	mov	r2, r3
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	b10b      	cbz	r3, 8008c1c <_free_r+0x4c>
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	d9fa      	bls.n	8008c12 <_free_r+0x42>
 8008c1c:	6811      	ldr	r1, [r2, #0]
 8008c1e:	1850      	adds	r0, r2, r1
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d10b      	bne.n	8008c3c <_free_r+0x6c>
 8008c24:	6820      	ldr	r0, [r4, #0]
 8008c26:	4401      	add	r1, r0
 8008c28:	1850      	adds	r0, r2, r1
 8008c2a:	4283      	cmp	r3, r0
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	d1e0      	bne.n	8008bf2 <_free_r+0x22>
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	6053      	str	r3, [r2, #4]
 8008c36:	4408      	add	r0, r1
 8008c38:	6010      	str	r0, [r2, #0]
 8008c3a:	e7da      	b.n	8008bf2 <_free_r+0x22>
 8008c3c:	d902      	bls.n	8008c44 <_free_r+0x74>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	e7d6      	b.n	8008bf2 <_free_r+0x22>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	1821      	adds	r1, r4, r0
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	bf04      	itt	eq
 8008c4c:	6819      	ldreq	r1, [r3, #0]
 8008c4e:	685b      	ldreq	r3, [r3, #4]
 8008c50:	6063      	str	r3, [r4, #4]
 8008c52:	bf04      	itt	eq
 8008c54:	1809      	addeq	r1, r1, r0
 8008c56:	6021      	streq	r1, [r4, #0]
 8008c58:	6054      	str	r4, [r2, #4]
 8008c5a:	e7ca      	b.n	8008bf2 <_free_r+0x22>
 8008c5c:	bd38      	pop	{r3, r4, r5, pc}
 8008c5e:	bf00      	nop
 8008c60:	200039a8 	.word	0x200039a8

08008c64 <malloc>:
 8008c64:	4b02      	ldr	r3, [pc, #8]	@ (8008c70 <malloc+0xc>)
 8008c66:	4601      	mov	r1, r0
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f000 b825 	b.w	8008cb8 <_malloc_r>
 8008c6e:	bf00      	nop
 8008c70:	20000034 	.word	0x20000034

08008c74 <sbrk_aligned>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4e0f      	ldr	r6, [pc, #60]	@ (8008cb4 <sbrk_aligned+0x40>)
 8008c78:	460c      	mov	r4, r1
 8008c7a:	6831      	ldr	r1, [r6, #0]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b911      	cbnz	r1, 8008c86 <sbrk_aligned+0x12>
 8008c80:	f000 fe3e 	bl	8009900 <_sbrk_r>
 8008c84:	6030      	str	r0, [r6, #0]
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f000 fe39 	bl	8009900 <_sbrk_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d103      	bne.n	8008c9a <sbrk_aligned+0x26>
 8008c92:	f04f 34ff 	mov.w	r4, #4294967295
 8008c96:	4620      	mov	r0, r4
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	1cc4      	adds	r4, r0, #3
 8008c9c:	f024 0403 	bic.w	r4, r4, #3
 8008ca0:	42a0      	cmp	r0, r4
 8008ca2:	d0f8      	beq.n	8008c96 <sbrk_aligned+0x22>
 8008ca4:	1a21      	subs	r1, r4, r0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f000 fe2a 	bl	8009900 <_sbrk_r>
 8008cac:	3001      	adds	r0, #1
 8008cae:	d1f2      	bne.n	8008c96 <sbrk_aligned+0x22>
 8008cb0:	e7ef      	b.n	8008c92 <sbrk_aligned+0x1e>
 8008cb2:	bf00      	nop
 8008cb4:	200039a4 	.word	0x200039a4

08008cb8 <_malloc_r>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	1ccd      	adds	r5, r1, #3
 8008cbe:	f025 0503 	bic.w	r5, r5, #3
 8008cc2:	3508      	adds	r5, #8
 8008cc4:	2d0c      	cmp	r5, #12
 8008cc6:	bf38      	it	cc
 8008cc8:	250c      	movcc	r5, #12
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	4606      	mov	r6, r0
 8008cce:	db01      	blt.n	8008cd4 <_malloc_r+0x1c>
 8008cd0:	42a9      	cmp	r1, r5
 8008cd2:	d904      	bls.n	8008cde <_malloc_r+0x26>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	6033      	str	r3, [r6, #0]
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008db4 <_malloc_r+0xfc>
 8008ce2:	f000 f869 	bl	8008db8 <__malloc_lock>
 8008ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cea:	461c      	mov	r4, r3
 8008cec:	bb44      	cbnz	r4, 8008d40 <_malloc_r+0x88>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff ffbf 	bl	8008c74 <sbrk_aligned>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	d158      	bne.n	8008dae <_malloc_r+0xf6>
 8008cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8008d00:	4627      	mov	r7, r4
 8008d02:	2f00      	cmp	r7, #0
 8008d04:	d143      	bne.n	8008d8e <_malloc_r+0xd6>
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d04b      	beq.n	8008da2 <_malloc_r+0xea>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	4630      	mov	r0, r6
 8008d10:	eb04 0903 	add.w	r9, r4, r3
 8008d14:	f000 fdf4 	bl	8009900 <_sbrk_r>
 8008d18:	4581      	cmp	r9, r0
 8008d1a:	d142      	bne.n	8008da2 <_malloc_r+0xea>
 8008d1c:	6821      	ldr	r1, [r4, #0]
 8008d1e:	1a6d      	subs	r5, r5, r1
 8008d20:	4629      	mov	r1, r5
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ffa6 	bl	8008c74 <sbrk_aligned>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d03a      	beq.n	8008da2 <_malloc_r+0xea>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	442b      	add	r3, r5
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	f8d8 3000 	ldr.w	r3, [r8]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	bb62      	cbnz	r2, 8008d94 <_malloc_r+0xdc>
 8008d3a:	f8c8 7000 	str.w	r7, [r8]
 8008d3e:	e00f      	b.n	8008d60 <_malloc_r+0xa8>
 8008d40:	6822      	ldr	r2, [r4, #0]
 8008d42:	1b52      	subs	r2, r2, r5
 8008d44:	d420      	bmi.n	8008d88 <_malloc_r+0xd0>
 8008d46:	2a0b      	cmp	r2, #11
 8008d48:	d917      	bls.n	8008d7a <_malloc_r+0xc2>
 8008d4a:	1961      	adds	r1, r4, r5
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	6025      	str	r5, [r4, #0]
 8008d50:	bf18      	it	ne
 8008d52:	6059      	strne	r1, [r3, #4]
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	bf08      	it	eq
 8008d58:	f8c8 1000 	streq.w	r1, [r8]
 8008d5c:	5162      	str	r2, [r4, r5]
 8008d5e:	604b      	str	r3, [r1, #4]
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f82f 	bl	8008dc4 <__malloc_unlock>
 8008d66:	f104 000b 	add.w	r0, r4, #11
 8008d6a:	1d23      	adds	r3, r4, #4
 8008d6c:	f020 0007 	bic.w	r0, r0, #7
 8008d70:	1ac2      	subs	r2, r0, r3
 8008d72:	bf1c      	itt	ne
 8008d74:	1a1b      	subne	r3, r3, r0
 8008d76:	50a3      	strne	r3, [r4, r2]
 8008d78:	e7af      	b.n	8008cda <_malloc_r+0x22>
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	bf0c      	ite	eq
 8008d80:	f8c8 2000 	streq.w	r2, [r8]
 8008d84:	605a      	strne	r2, [r3, #4]
 8008d86:	e7eb      	b.n	8008d60 <_malloc_r+0xa8>
 8008d88:	4623      	mov	r3, r4
 8008d8a:	6864      	ldr	r4, [r4, #4]
 8008d8c:	e7ae      	b.n	8008cec <_malloc_r+0x34>
 8008d8e:	463c      	mov	r4, r7
 8008d90:	687f      	ldr	r7, [r7, #4]
 8008d92:	e7b6      	b.n	8008d02 <_malloc_r+0x4a>
 8008d94:	461a      	mov	r2, r3
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	d1fb      	bne.n	8008d94 <_malloc_r+0xdc>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6053      	str	r3, [r2, #4]
 8008da0:	e7de      	b.n	8008d60 <_malloc_r+0xa8>
 8008da2:	230c      	movs	r3, #12
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	4630      	mov	r0, r6
 8008da8:	f000 f80c 	bl	8008dc4 <__malloc_unlock>
 8008dac:	e794      	b.n	8008cd8 <_malloc_r+0x20>
 8008dae:	6005      	str	r5, [r0, #0]
 8008db0:	e7d6      	b.n	8008d60 <_malloc_r+0xa8>
 8008db2:	bf00      	nop
 8008db4:	200039a8 	.word	0x200039a8

08008db8 <__malloc_lock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__malloc_lock+0x8>)
 8008dba:	f7ff b8ac 	b.w	8007f16 <__retarget_lock_acquire_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	200039a0 	.word	0x200039a0

08008dc4 <__malloc_unlock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	@ (8008dcc <__malloc_unlock+0x8>)
 8008dc6:	f7ff b8a7 	b.w	8007f18 <__retarget_lock_release_recursive>
 8008dca:	bf00      	nop
 8008dcc:	200039a0 	.word	0x200039a0

08008dd0 <_Balloc>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	69c6      	ldr	r6, [r0, #28]
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	b976      	cbnz	r6, 8008df8 <_Balloc+0x28>
 8008dda:	2010      	movs	r0, #16
 8008ddc:	f7ff ff42 	bl	8008c64 <malloc>
 8008de0:	4602      	mov	r2, r0
 8008de2:	61e0      	str	r0, [r4, #28]
 8008de4:	b920      	cbnz	r0, 8008df0 <_Balloc+0x20>
 8008de6:	4b18      	ldr	r3, [pc, #96]	@ (8008e48 <_Balloc+0x78>)
 8008de8:	4818      	ldr	r0, [pc, #96]	@ (8008e4c <_Balloc+0x7c>)
 8008dea:	216b      	movs	r1, #107	@ 0x6b
 8008dec:	f000 fda6 	bl	800993c <__assert_func>
 8008df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df4:	6006      	str	r6, [r0, #0]
 8008df6:	60c6      	str	r6, [r0, #12]
 8008df8:	69e6      	ldr	r6, [r4, #28]
 8008dfa:	68f3      	ldr	r3, [r6, #12]
 8008dfc:	b183      	cbz	r3, 8008e20 <_Balloc+0x50>
 8008dfe:	69e3      	ldr	r3, [r4, #28]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e06:	b9b8      	cbnz	r0, 8008e38 <_Balloc+0x68>
 8008e08:	2101      	movs	r1, #1
 8008e0a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e0e:	1d72      	adds	r2, r6, #5
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 fdb0 	bl	8009978 <_calloc_r>
 8008e18:	b160      	cbz	r0, 8008e34 <_Balloc+0x64>
 8008e1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e1e:	e00e      	b.n	8008e3e <_Balloc+0x6e>
 8008e20:	2221      	movs	r2, #33	@ 0x21
 8008e22:	2104      	movs	r1, #4
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fda7 	bl	8009978 <_calloc_r>
 8008e2a:	69e3      	ldr	r3, [r4, #28]
 8008e2c:	60f0      	str	r0, [r6, #12]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e4      	bne.n	8008dfe <_Balloc+0x2e>
 8008e34:	2000      	movs	r0, #0
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	6802      	ldr	r2, [r0, #0]
 8008e3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e44:	e7f7      	b.n	8008e36 <_Balloc+0x66>
 8008e46:	bf00      	nop
 8008e48:	0800a449 	.word	0x0800a449
 8008e4c:	0800a4c9 	.word	0x0800a4c9

08008e50 <_Bfree>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	69c6      	ldr	r6, [r0, #28]
 8008e54:	4605      	mov	r5, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	b976      	cbnz	r6, 8008e78 <_Bfree+0x28>
 8008e5a:	2010      	movs	r0, #16
 8008e5c:	f7ff ff02 	bl	8008c64 <malloc>
 8008e60:	4602      	mov	r2, r0
 8008e62:	61e8      	str	r0, [r5, #28]
 8008e64:	b920      	cbnz	r0, 8008e70 <_Bfree+0x20>
 8008e66:	4b09      	ldr	r3, [pc, #36]	@ (8008e8c <_Bfree+0x3c>)
 8008e68:	4809      	ldr	r0, [pc, #36]	@ (8008e90 <_Bfree+0x40>)
 8008e6a:	218f      	movs	r1, #143	@ 0x8f
 8008e6c:	f000 fd66 	bl	800993c <__assert_func>
 8008e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e74:	6006      	str	r6, [r0, #0]
 8008e76:	60c6      	str	r6, [r0, #12]
 8008e78:	b13c      	cbz	r4, 8008e8a <_Bfree+0x3a>
 8008e7a:	69eb      	ldr	r3, [r5, #28]
 8008e7c:	6862      	ldr	r2, [r4, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e84:	6021      	str	r1, [r4, #0]
 8008e86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	0800a449 	.word	0x0800a449
 8008e90:	0800a4c9 	.word	0x0800a4c9

08008e94 <__multadd>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	690d      	ldr	r5, [r1, #16]
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	461e      	mov	r6, r3
 8008ea0:	f101 0c14 	add.w	ip, r1, #20
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eaa:	b299      	uxth	r1, r3
 8008eac:	fb02 6101 	mla	r1, r2, r1, r6
 8008eb0:	0c1e      	lsrs	r6, r3, #16
 8008eb2:	0c0b      	lsrs	r3, r1, #16
 8008eb4:	fb02 3306 	mla	r3, r2, r6, r3
 8008eb8:	b289      	uxth	r1, r1
 8008eba:	3001      	adds	r0, #1
 8008ebc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ec0:	4285      	cmp	r5, r0
 8008ec2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008eca:	dcec      	bgt.n	8008ea6 <__multadd+0x12>
 8008ecc:	b30e      	cbz	r6, 8008f12 <__multadd+0x7e>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	dc19      	bgt.n	8008f08 <__multadd+0x74>
 8008ed4:	6861      	ldr	r1, [r4, #4]
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	3101      	adds	r1, #1
 8008eda:	f7ff ff79 	bl	8008dd0 <_Balloc>
 8008ede:	4680      	mov	r8, r0
 8008ee0:	b928      	cbnz	r0, 8008eee <__multadd+0x5a>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f18 <__multadd+0x84>)
 8008ee6:	480d      	ldr	r0, [pc, #52]	@ (8008f1c <__multadd+0x88>)
 8008ee8:	21ba      	movs	r1, #186	@ 0xba
 8008eea:	f000 fd27 	bl	800993c <__assert_func>
 8008eee:	6922      	ldr	r2, [r4, #16]
 8008ef0:	3202      	adds	r2, #2
 8008ef2:	f104 010c 	add.w	r1, r4, #12
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	300c      	adds	r0, #12
 8008efa:	f000 fd11 	bl	8009920 <memcpy>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff ffa5 	bl	8008e50 <_Bfree>
 8008f06:	4644      	mov	r4, r8
 8008f08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	615e      	str	r6, [r3, #20]
 8008f10:	6125      	str	r5, [r4, #16]
 8008f12:	4620      	mov	r0, r4
 8008f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f18:	0800a4b8 	.word	0x0800a4b8
 8008f1c:	0800a4c9 	.word	0x0800a4c9

08008f20 <__hi0bits>:
 8008f20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f24:	4603      	mov	r3, r0
 8008f26:	bf36      	itet	cc
 8008f28:	0403      	lslcc	r3, r0, #16
 8008f2a:	2000      	movcs	r0, #0
 8008f2c:	2010      	movcc	r0, #16
 8008f2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f32:	bf3c      	itt	cc
 8008f34:	021b      	lslcc	r3, r3, #8
 8008f36:	3008      	addcc	r0, #8
 8008f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f3c:	bf3c      	itt	cc
 8008f3e:	011b      	lslcc	r3, r3, #4
 8008f40:	3004      	addcc	r0, #4
 8008f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f46:	bf3c      	itt	cc
 8008f48:	009b      	lslcc	r3, r3, #2
 8008f4a:	3002      	addcc	r0, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	db05      	blt.n	8008f5c <__hi0bits+0x3c>
 8008f50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f54:	f100 0001 	add.w	r0, r0, #1
 8008f58:	bf08      	it	eq
 8008f5a:	2020      	moveq	r0, #32
 8008f5c:	4770      	bx	lr

08008f5e <__lo0bits>:
 8008f5e:	6803      	ldr	r3, [r0, #0]
 8008f60:	4602      	mov	r2, r0
 8008f62:	f013 0007 	ands.w	r0, r3, #7
 8008f66:	d00b      	beq.n	8008f80 <__lo0bits+0x22>
 8008f68:	07d9      	lsls	r1, r3, #31
 8008f6a:	d421      	bmi.n	8008fb0 <__lo0bits+0x52>
 8008f6c:	0798      	lsls	r0, r3, #30
 8008f6e:	bf49      	itett	mi
 8008f70:	085b      	lsrmi	r3, r3, #1
 8008f72:	089b      	lsrpl	r3, r3, #2
 8008f74:	2001      	movmi	r0, #1
 8008f76:	6013      	strmi	r3, [r2, #0]
 8008f78:	bf5c      	itt	pl
 8008f7a:	6013      	strpl	r3, [r2, #0]
 8008f7c:	2002      	movpl	r0, #2
 8008f7e:	4770      	bx	lr
 8008f80:	b299      	uxth	r1, r3
 8008f82:	b909      	cbnz	r1, 8008f88 <__lo0bits+0x2a>
 8008f84:	0c1b      	lsrs	r3, r3, #16
 8008f86:	2010      	movs	r0, #16
 8008f88:	b2d9      	uxtb	r1, r3
 8008f8a:	b909      	cbnz	r1, 8008f90 <__lo0bits+0x32>
 8008f8c:	3008      	adds	r0, #8
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	0719      	lsls	r1, r3, #28
 8008f92:	bf04      	itt	eq
 8008f94:	091b      	lsreq	r3, r3, #4
 8008f96:	3004      	addeq	r0, #4
 8008f98:	0799      	lsls	r1, r3, #30
 8008f9a:	bf04      	itt	eq
 8008f9c:	089b      	lsreq	r3, r3, #2
 8008f9e:	3002      	addeq	r0, #2
 8008fa0:	07d9      	lsls	r1, r3, #31
 8008fa2:	d403      	bmi.n	8008fac <__lo0bits+0x4e>
 8008fa4:	085b      	lsrs	r3, r3, #1
 8008fa6:	f100 0001 	add.w	r0, r0, #1
 8008faa:	d003      	beq.n	8008fb4 <__lo0bits+0x56>
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	4770      	bx	lr
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	4770      	bx	lr
 8008fb4:	2020      	movs	r0, #32
 8008fb6:	4770      	bx	lr

08008fb8 <__i2b>:
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	460c      	mov	r4, r1
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	f7ff ff07 	bl	8008dd0 <_Balloc>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	b928      	cbnz	r0, 8008fd2 <__i2b+0x1a>
 8008fc6:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <__i2b+0x24>)
 8008fc8:	4805      	ldr	r0, [pc, #20]	@ (8008fe0 <__i2b+0x28>)
 8008fca:	f240 1145 	movw	r1, #325	@ 0x145
 8008fce:	f000 fcb5 	bl	800993c <__assert_func>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	6144      	str	r4, [r0, #20]
 8008fd6:	6103      	str	r3, [r0, #16]
 8008fd8:	bd10      	pop	{r4, pc}
 8008fda:	bf00      	nop
 8008fdc:	0800a4b8 	.word	0x0800a4b8
 8008fe0:	0800a4c9 	.word	0x0800a4c9

08008fe4 <__multiply>:
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	4617      	mov	r7, r2
 8008fea:	690a      	ldr	r2, [r1, #16]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	bfa8      	it	ge
 8008ff2:	463b      	movge	r3, r7
 8008ff4:	4689      	mov	r9, r1
 8008ff6:	bfa4      	itt	ge
 8008ff8:	460f      	movge	r7, r1
 8008ffa:	4699      	movge	r9, r3
 8008ffc:	693d      	ldr	r5, [r7, #16]
 8008ffe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	eb05 060a 	add.w	r6, r5, sl
 800900a:	42b3      	cmp	r3, r6
 800900c:	b085      	sub	sp, #20
 800900e:	bfb8      	it	lt
 8009010:	3101      	addlt	r1, #1
 8009012:	f7ff fedd 	bl	8008dd0 <_Balloc>
 8009016:	b930      	cbnz	r0, 8009026 <__multiply+0x42>
 8009018:	4602      	mov	r2, r0
 800901a:	4b41      	ldr	r3, [pc, #260]	@ (8009120 <__multiply+0x13c>)
 800901c:	4841      	ldr	r0, [pc, #260]	@ (8009124 <__multiply+0x140>)
 800901e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009022:	f000 fc8b 	bl	800993c <__assert_func>
 8009026:	f100 0414 	add.w	r4, r0, #20
 800902a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800902e:	4623      	mov	r3, r4
 8009030:	2200      	movs	r2, #0
 8009032:	4573      	cmp	r3, lr
 8009034:	d320      	bcc.n	8009078 <__multiply+0x94>
 8009036:	f107 0814 	add.w	r8, r7, #20
 800903a:	f109 0114 	add.w	r1, r9, #20
 800903e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009042:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009046:	9302      	str	r3, [sp, #8]
 8009048:	1beb      	subs	r3, r5, r7
 800904a:	3b15      	subs	r3, #21
 800904c:	f023 0303 	bic.w	r3, r3, #3
 8009050:	3304      	adds	r3, #4
 8009052:	3715      	adds	r7, #21
 8009054:	42bd      	cmp	r5, r7
 8009056:	bf38      	it	cc
 8009058:	2304      	movcc	r3, #4
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	9103      	str	r1, [sp, #12]
 8009060:	428b      	cmp	r3, r1
 8009062:	d80c      	bhi.n	800907e <__multiply+0x9a>
 8009064:	2e00      	cmp	r6, #0
 8009066:	dd03      	ble.n	8009070 <__multiply+0x8c>
 8009068:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800906c:	2b00      	cmp	r3, #0
 800906e:	d055      	beq.n	800911c <__multiply+0x138>
 8009070:	6106      	str	r6, [r0, #16]
 8009072:	b005      	add	sp, #20
 8009074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	f843 2b04 	str.w	r2, [r3], #4
 800907c:	e7d9      	b.n	8009032 <__multiply+0x4e>
 800907e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009082:	f1ba 0f00 	cmp.w	sl, #0
 8009086:	d01f      	beq.n	80090c8 <__multiply+0xe4>
 8009088:	46c4      	mov	ip, r8
 800908a:	46a1      	mov	r9, r4
 800908c:	2700      	movs	r7, #0
 800908e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009092:	f8d9 3000 	ldr.w	r3, [r9]
 8009096:	fa1f fb82 	uxth.w	fp, r2
 800909a:	b29b      	uxth	r3, r3
 800909c:	fb0a 330b 	mla	r3, sl, fp, r3
 80090a0:	443b      	add	r3, r7
 80090a2:	f8d9 7000 	ldr.w	r7, [r9]
 80090a6:	0c12      	lsrs	r2, r2, #16
 80090a8:	0c3f      	lsrs	r7, r7, #16
 80090aa:	fb0a 7202 	mla	r2, sl, r2, r7
 80090ae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090b8:	4565      	cmp	r5, ip
 80090ba:	f849 3b04 	str.w	r3, [r9], #4
 80090be:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80090c2:	d8e4      	bhi.n	800908e <__multiply+0xaa>
 80090c4:	9b01      	ldr	r3, [sp, #4]
 80090c6:	50e7      	str	r7, [r4, r3]
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090ce:	3104      	adds	r1, #4
 80090d0:	f1b9 0f00 	cmp.w	r9, #0
 80090d4:	d020      	beq.n	8009118 <__multiply+0x134>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	4647      	mov	r7, r8
 80090da:	46a4      	mov	ip, r4
 80090dc:	f04f 0a00 	mov.w	sl, #0
 80090e0:	f8b7 b000 	ldrh.w	fp, [r7]
 80090e4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80090e8:	fb09 220b 	mla	r2, r9, fp, r2
 80090ec:	4452      	add	r2, sl
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090f4:	f84c 3b04 	str.w	r3, [ip], #4
 80090f8:	f857 3b04 	ldr.w	r3, [r7], #4
 80090fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009100:	f8bc 3000 	ldrh.w	r3, [ip]
 8009104:	fb09 330a 	mla	r3, r9, sl, r3
 8009108:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800910c:	42bd      	cmp	r5, r7
 800910e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009112:	d8e5      	bhi.n	80090e0 <__multiply+0xfc>
 8009114:	9a01      	ldr	r2, [sp, #4]
 8009116:	50a3      	str	r3, [r4, r2]
 8009118:	3404      	adds	r4, #4
 800911a:	e79f      	b.n	800905c <__multiply+0x78>
 800911c:	3e01      	subs	r6, #1
 800911e:	e7a1      	b.n	8009064 <__multiply+0x80>
 8009120:	0800a4b8 	.word	0x0800a4b8
 8009124:	0800a4c9 	.word	0x0800a4c9

08009128 <__pow5mult>:
 8009128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800912c:	4615      	mov	r5, r2
 800912e:	f012 0203 	ands.w	r2, r2, #3
 8009132:	4607      	mov	r7, r0
 8009134:	460e      	mov	r6, r1
 8009136:	d007      	beq.n	8009148 <__pow5mult+0x20>
 8009138:	4c25      	ldr	r4, [pc, #148]	@ (80091d0 <__pow5mult+0xa8>)
 800913a:	3a01      	subs	r2, #1
 800913c:	2300      	movs	r3, #0
 800913e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009142:	f7ff fea7 	bl	8008e94 <__multadd>
 8009146:	4606      	mov	r6, r0
 8009148:	10ad      	asrs	r5, r5, #2
 800914a:	d03d      	beq.n	80091c8 <__pow5mult+0xa0>
 800914c:	69fc      	ldr	r4, [r7, #28]
 800914e:	b97c      	cbnz	r4, 8009170 <__pow5mult+0x48>
 8009150:	2010      	movs	r0, #16
 8009152:	f7ff fd87 	bl	8008c64 <malloc>
 8009156:	4602      	mov	r2, r0
 8009158:	61f8      	str	r0, [r7, #28]
 800915a:	b928      	cbnz	r0, 8009168 <__pow5mult+0x40>
 800915c:	4b1d      	ldr	r3, [pc, #116]	@ (80091d4 <__pow5mult+0xac>)
 800915e:	481e      	ldr	r0, [pc, #120]	@ (80091d8 <__pow5mult+0xb0>)
 8009160:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009164:	f000 fbea 	bl	800993c <__assert_func>
 8009168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800916c:	6004      	str	r4, [r0, #0]
 800916e:	60c4      	str	r4, [r0, #12]
 8009170:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009178:	b94c      	cbnz	r4, 800918e <__pow5mult+0x66>
 800917a:	f240 2171 	movw	r1, #625	@ 0x271
 800917e:	4638      	mov	r0, r7
 8009180:	f7ff ff1a 	bl	8008fb8 <__i2b>
 8009184:	2300      	movs	r3, #0
 8009186:	f8c8 0008 	str.w	r0, [r8, #8]
 800918a:	4604      	mov	r4, r0
 800918c:	6003      	str	r3, [r0, #0]
 800918e:	f04f 0900 	mov.w	r9, #0
 8009192:	07eb      	lsls	r3, r5, #31
 8009194:	d50a      	bpl.n	80091ac <__pow5mult+0x84>
 8009196:	4631      	mov	r1, r6
 8009198:	4622      	mov	r2, r4
 800919a:	4638      	mov	r0, r7
 800919c:	f7ff ff22 	bl	8008fe4 <__multiply>
 80091a0:	4631      	mov	r1, r6
 80091a2:	4680      	mov	r8, r0
 80091a4:	4638      	mov	r0, r7
 80091a6:	f7ff fe53 	bl	8008e50 <_Bfree>
 80091aa:	4646      	mov	r6, r8
 80091ac:	106d      	asrs	r5, r5, #1
 80091ae:	d00b      	beq.n	80091c8 <__pow5mult+0xa0>
 80091b0:	6820      	ldr	r0, [r4, #0]
 80091b2:	b938      	cbnz	r0, 80091c4 <__pow5mult+0x9c>
 80091b4:	4622      	mov	r2, r4
 80091b6:	4621      	mov	r1, r4
 80091b8:	4638      	mov	r0, r7
 80091ba:	f7ff ff13 	bl	8008fe4 <__multiply>
 80091be:	6020      	str	r0, [r4, #0]
 80091c0:	f8c0 9000 	str.w	r9, [r0]
 80091c4:	4604      	mov	r4, r0
 80091c6:	e7e4      	b.n	8009192 <__pow5mult+0x6a>
 80091c8:	4630      	mov	r0, r6
 80091ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ce:	bf00      	nop
 80091d0:	0800a57c 	.word	0x0800a57c
 80091d4:	0800a449 	.word	0x0800a449
 80091d8:	0800a4c9 	.word	0x0800a4c9

080091dc <__lshift>:
 80091dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	460c      	mov	r4, r1
 80091e2:	6849      	ldr	r1, [r1, #4]
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	4607      	mov	r7, r0
 80091ee:	4691      	mov	r9, r2
 80091f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091f4:	f108 0601 	add.w	r6, r8, #1
 80091f8:	42b3      	cmp	r3, r6
 80091fa:	db0b      	blt.n	8009214 <__lshift+0x38>
 80091fc:	4638      	mov	r0, r7
 80091fe:	f7ff fde7 	bl	8008dd0 <_Balloc>
 8009202:	4605      	mov	r5, r0
 8009204:	b948      	cbnz	r0, 800921a <__lshift+0x3e>
 8009206:	4602      	mov	r2, r0
 8009208:	4b28      	ldr	r3, [pc, #160]	@ (80092ac <__lshift+0xd0>)
 800920a:	4829      	ldr	r0, [pc, #164]	@ (80092b0 <__lshift+0xd4>)
 800920c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009210:	f000 fb94 	bl	800993c <__assert_func>
 8009214:	3101      	adds	r1, #1
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	e7ee      	b.n	80091f8 <__lshift+0x1c>
 800921a:	2300      	movs	r3, #0
 800921c:	f100 0114 	add.w	r1, r0, #20
 8009220:	f100 0210 	add.w	r2, r0, #16
 8009224:	4618      	mov	r0, r3
 8009226:	4553      	cmp	r3, sl
 8009228:	db33      	blt.n	8009292 <__lshift+0xb6>
 800922a:	6920      	ldr	r0, [r4, #16]
 800922c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009230:	f104 0314 	add.w	r3, r4, #20
 8009234:	f019 091f 	ands.w	r9, r9, #31
 8009238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800923c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009240:	d02b      	beq.n	800929a <__lshift+0xbe>
 8009242:	f1c9 0e20 	rsb	lr, r9, #32
 8009246:	468a      	mov	sl, r1
 8009248:	2200      	movs	r2, #0
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	fa00 f009 	lsl.w	r0, r0, r9
 8009250:	4310      	orrs	r0, r2
 8009252:	f84a 0b04 	str.w	r0, [sl], #4
 8009256:	f853 2b04 	ldr.w	r2, [r3], #4
 800925a:	459c      	cmp	ip, r3
 800925c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009260:	d8f3      	bhi.n	800924a <__lshift+0x6e>
 8009262:	ebac 0304 	sub.w	r3, ip, r4
 8009266:	3b15      	subs	r3, #21
 8009268:	f023 0303 	bic.w	r3, r3, #3
 800926c:	3304      	adds	r3, #4
 800926e:	f104 0015 	add.w	r0, r4, #21
 8009272:	4560      	cmp	r0, ip
 8009274:	bf88      	it	hi
 8009276:	2304      	movhi	r3, #4
 8009278:	50ca      	str	r2, [r1, r3]
 800927a:	b10a      	cbz	r2, 8009280 <__lshift+0xa4>
 800927c:	f108 0602 	add.w	r6, r8, #2
 8009280:	3e01      	subs	r6, #1
 8009282:	4638      	mov	r0, r7
 8009284:	612e      	str	r6, [r5, #16]
 8009286:	4621      	mov	r1, r4
 8009288:	f7ff fde2 	bl	8008e50 <_Bfree>
 800928c:	4628      	mov	r0, r5
 800928e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009292:	f842 0f04 	str.w	r0, [r2, #4]!
 8009296:	3301      	adds	r3, #1
 8009298:	e7c5      	b.n	8009226 <__lshift+0x4a>
 800929a:	3904      	subs	r1, #4
 800929c:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80092a4:	459c      	cmp	ip, r3
 80092a6:	d8f9      	bhi.n	800929c <__lshift+0xc0>
 80092a8:	e7ea      	b.n	8009280 <__lshift+0xa4>
 80092aa:	bf00      	nop
 80092ac:	0800a4b8 	.word	0x0800a4b8
 80092b0:	0800a4c9 	.word	0x0800a4c9

080092b4 <__mcmp>:
 80092b4:	690a      	ldr	r2, [r1, #16]
 80092b6:	4603      	mov	r3, r0
 80092b8:	6900      	ldr	r0, [r0, #16]
 80092ba:	1a80      	subs	r0, r0, r2
 80092bc:	b530      	push	{r4, r5, lr}
 80092be:	d10e      	bne.n	80092de <__mcmp+0x2a>
 80092c0:	3314      	adds	r3, #20
 80092c2:	3114      	adds	r1, #20
 80092c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092d4:	4295      	cmp	r5, r2
 80092d6:	d003      	beq.n	80092e0 <__mcmp+0x2c>
 80092d8:	d205      	bcs.n	80092e6 <__mcmp+0x32>
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	bd30      	pop	{r4, r5, pc}
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	d3f3      	bcc.n	80092cc <__mcmp+0x18>
 80092e4:	e7fb      	b.n	80092de <__mcmp+0x2a>
 80092e6:	2001      	movs	r0, #1
 80092e8:	e7f9      	b.n	80092de <__mcmp+0x2a>
	...

080092ec <__mdiff>:
 80092ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	4689      	mov	r9, r1
 80092f2:	4606      	mov	r6, r0
 80092f4:	4611      	mov	r1, r2
 80092f6:	4648      	mov	r0, r9
 80092f8:	4614      	mov	r4, r2
 80092fa:	f7ff ffdb 	bl	80092b4 <__mcmp>
 80092fe:	1e05      	subs	r5, r0, #0
 8009300:	d112      	bne.n	8009328 <__mdiff+0x3c>
 8009302:	4629      	mov	r1, r5
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff fd63 	bl	8008dd0 <_Balloc>
 800930a:	4602      	mov	r2, r0
 800930c:	b928      	cbnz	r0, 800931a <__mdiff+0x2e>
 800930e:	4b3f      	ldr	r3, [pc, #252]	@ (800940c <__mdiff+0x120>)
 8009310:	f240 2137 	movw	r1, #567	@ 0x237
 8009314:	483e      	ldr	r0, [pc, #248]	@ (8009410 <__mdiff+0x124>)
 8009316:	f000 fb11 	bl	800993c <__assert_func>
 800931a:	2301      	movs	r3, #1
 800931c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009320:	4610      	mov	r0, r2
 8009322:	b003      	add	sp, #12
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	bfbc      	itt	lt
 800932a:	464b      	movlt	r3, r9
 800932c:	46a1      	movlt	r9, r4
 800932e:	4630      	mov	r0, r6
 8009330:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009334:	bfba      	itte	lt
 8009336:	461c      	movlt	r4, r3
 8009338:	2501      	movlt	r5, #1
 800933a:	2500      	movge	r5, #0
 800933c:	f7ff fd48 	bl	8008dd0 <_Balloc>
 8009340:	4602      	mov	r2, r0
 8009342:	b918      	cbnz	r0, 800934c <__mdiff+0x60>
 8009344:	4b31      	ldr	r3, [pc, #196]	@ (800940c <__mdiff+0x120>)
 8009346:	f240 2145 	movw	r1, #581	@ 0x245
 800934a:	e7e3      	b.n	8009314 <__mdiff+0x28>
 800934c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009350:	6926      	ldr	r6, [r4, #16]
 8009352:	60c5      	str	r5, [r0, #12]
 8009354:	f109 0310 	add.w	r3, r9, #16
 8009358:	f109 0514 	add.w	r5, r9, #20
 800935c:	f104 0e14 	add.w	lr, r4, #20
 8009360:	f100 0b14 	add.w	fp, r0, #20
 8009364:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009368:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	46d9      	mov	r9, fp
 8009370:	f04f 0c00 	mov.w	ip, #0
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	f85e 0b04 	ldr.w	r0, [lr], #4
 800937a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	fa1f f38a 	uxth.w	r3, sl
 8009384:	4619      	mov	r1, r3
 8009386:	b283      	uxth	r3, r0
 8009388:	1acb      	subs	r3, r1, r3
 800938a:	0c00      	lsrs	r0, r0, #16
 800938c:	4463      	add	r3, ip
 800938e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009392:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009396:	b29b      	uxth	r3, r3
 8009398:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800939c:	4576      	cmp	r6, lr
 800939e:	f849 3b04 	str.w	r3, [r9], #4
 80093a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093a6:	d8e5      	bhi.n	8009374 <__mdiff+0x88>
 80093a8:	1b33      	subs	r3, r6, r4
 80093aa:	3b15      	subs	r3, #21
 80093ac:	f023 0303 	bic.w	r3, r3, #3
 80093b0:	3415      	adds	r4, #21
 80093b2:	3304      	adds	r3, #4
 80093b4:	42a6      	cmp	r6, r4
 80093b6:	bf38      	it	cc
 80093b8:	2304      	movcc	r3, #4
 80093ba:	441d      	add	r5, r3
 80093bc:	445b      	add	r3, fp
 80093be:	461e      	mov	r6, r3
 80093c0:	462c      	mov	r4, r5
 80093c2:	4544      	cmp	r4, r8
 80093c4:	d30e      	bcc.n	80093e4 <__mdiff+0xf8>
 80093c6:	f108 0103 	add.w	r1, r8, #3
 80093ca:	1b49      	subs	r1, r1, r5
 80093cc:	f021 0103 	bic.w	r1, r1, #3
 80093d0:	3d03      	subs	r5, #3
 80093d2:	45a8      	cmp	r8, r5
 80093d4:	bf38      	it	cc
 80093d6:	2100      	movcc	r1, #0
 80093d8:	440b      	add	r3, r1
 80093da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093de:	b191      	cbz	r1, 8009406 <__mdiff+0x11a>
 80093e0:	6117      	str	r7, [r2, #16]
 80093e2:	e79d      	b.n	8009320 <__mdiff+0x34>
 80093e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80093e8:	46e6      	mov	lr, ip
 80093ea:	0c08      	lsrs	r0, r1, #16
 80093ec:	fa1c fc81 	uxtah	ip, ip, r1
 80093f0:	4471      	add	r1, lr
 80093f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093f6:	b289      	uxth	r1, r1
 80093f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093fc:	f846 1b04 	str.w	r1, [r6], #4
 8009400:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009404:	e7dd      	b.n	80093c2 <__mdiff+0xd6>
 8009406:	3f01      	subs	r7, #1
 8009408:	e7e7      	b.n	80093da <__mdiff+0xee>
 800940a:	bf00      	nop
 800940c:	0800a4b8 	.word	0x0800a4b8
 8009410:	0800a4c9 	.word	0x0800a4c9

08009414 <__d2b>:
 8009414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009418:	460f      	mov	r7, r1
 800941a:	2101      	movs	r1, #1
 800941c:	ec59 8b10 	vmov	r8, r9, d0
 8009420:	4616      	mov	r6, r2
 8009422:	f7ff fcd5 	bl	8008dd0 <_Balloc>
 8009426:	4604      	mov	r4, r0
 8009428:	b930      	cbnz	r0, 8009438 <__d2b+0x24>
 800942a:	4602      	mov	r2, r0
 800942c:	4b23      	ldr	r3, [pc, #140]	@ (80094bc <__d2b+0xa8>)
 800942e:	4824      	ldr	r0, [pc, #144]	@ (80094c0 <__d2b+0xac>)
 8009430:	f240 310f 	movw	r1, #783	@ 0x30f
 8009434:	f000 fa82 	bl	800993c <__assert_func>
 8009438:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800943c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009440:	b10d      	cbz	r5, 8009446 <__d2b+0x32>
 8009442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009446:	9301      	str	r3, [sp, #4]
 8009448:	f1b8 0300 	subs.w	r3, r8, #0
 800944c:	d023      	beq.n	8009496 <__d2b+0x82>
 800944e:	4668      	mov	r0, sp
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	f7ff fd84 	bl	8008f5e <__lo0bits>
 8009456:	e9dd 1200 	ldrd	r1, r2, [sp]
 800945a:	b1d0      	cbz	r0, 8009492 <__d2b+0x7e>
 800945c:	f1c0 0320 	rsb	r3, r0, #32
 8009460:	fa02 f303 	lsl.w	r3, r2, r3
 8009464:	430b      	orrs	r3, r1
 8009466:	40c2      	lsrs	r2, r0
 8009468:	6163      	str	r3, [r4, #20]
 800946a:	9201      	str	r2, [sp, #4]
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	61a3      	str	r3, [r4, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	bf0c      	ite	eq
 8009474:	2201      	moveq	r2, #1
 8009476:	2202      	movne	r2, #2
 8009478:	6122      	str	r2, [r4, #16]
 800947a:	b1a5      	cbz	r5, 80094a6 <__d2b+0x92>
 800947c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009480:	4405      	add	r5, r0
 8009482:	603d      	str	r5, [r7, #0]
 8009484:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009488:	6030      	str	r0, [r6, #0]
 800948a:	4620      	mov	r0, r4
 800948c:	b003      	add	sp, #12
 800948e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009492:	6161      	str	r1, [r4, #20]
 8009494:	e7ea      	b.n	800946c <__d2b+0x58>
 8009496:	a801      	add	r0, sp, #4
 8009498:	f7ff fd61 	bl	8008f5e <__lo0bits>
 800949c:	9b01      	ldr	r3, [sp, #4]
 800949e:	6163      	str	r3, [r4, #20]
 80094a0:	3020      	adds	r0, #32
 80094a2:	2201      	movs	r2, #1
 80094a4:	e7e8      	b.n	8009478 <__d2b+0x64>
 80094a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094ae:	6038      	str	r0, [r7, #0]
 80094b0:	6918      	ldr	r0, [r3, #16]
 80094b2:	f7ff fd35 	bl	8008f20 <__hi0bits>
 80094b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094ba:	e7e5      	b.n	8009488 <__d2b+0x74>
 80094bc:	0800a4b8 	.word	0x0800a4b8
 80094c0:	0800a4c9 	.word	0x0800a4c9

080094c4 <__ssputs_r>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	688e      	ldr	r6, [r1, #8]
 80094ca:	461f      	mov	r7, r3
 80094cc:	42be      	cmp	r6, r7
 80094ce:	680b      	ldr	r3, [r1, #0]
 80094d0:	4682      	mov	sl, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	4690      	mov	r8, r2
 80094d6:	d82d      	bhi.n	8009534 <__ssputs_r+0x70>
 80094d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094e0:	d026      	beq.n	8009530 <__ssputs_r+0x6c>
 80094e2:	6965      	ldr	r5, [r4, #20]
 80094e4:	6909      	ldr	r1, [r1, #16]
 80094e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094ea:	eba3 0901 	sub.w	r9, r3, r1
 80094ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094f2:	1c7b      	adds	r3, r7, #1
 80094f4:	444b      	add	r3, r9
 80094f6:	106d      	asrs	r5, r5, #1
 80094f8:	429d      	cmp	r5, r3
 80094fa:	bf38      	it	cc
 80094fc:	461d      	movcc	r5, r3
 80094fe:	0553      	lsls	r3, r2, #21
 8009500:	d527      	bpl.n	8009552 <__ssputs_r+0x8e>
 8009502:	4629      	mov	r1, r5
 8009504:	f7ff fbd8 	bl	8008cb8 <_malloc_r>
 8009508:	4606      	mov	r6, r0
 800950a:	b360      	cbz	r0, 8009566 <__ssputs_r+0xa2>
 800950c:	6921      	ldr	r1, [r4, #16]
 800950e:	464a      	mov	r2, r9
 8009510:	f000 fa06 	bl	8009920 <memcpy>
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800951a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	6126      	str	r6, [r4, #16]
 8009522:	6165      	str	r5, [r4, #20]
 8009524:	444e      	add	r6, r9
 8009526:	eba5 0509 	sub.w	r5, r5, r9
 800952a:	6026      	str	r6, [r4, #0]
 800952c:	60a5      	str	r5, [r4, #8]
 800952e:	463e      	mov	r6, r7
 8009530:	42be      	cmp	r6, r7
 8009532:	d900      	bls.n	8009536 <__ssputs_r+0x72>
 8009534:	463e      	mov	r6, r7
 8009536:	6820      	ldr	r0, [r4, #0]
 8009538:	4632      	mov	r2, r6
 800953a:	4641      	mov	r1, r8
 800953c:	f000 f9c6 	bl	80098cc <memmove>
 8009540:	68a3      	ldr	r3, [r4, #8]
 8009542:	1b9b      	subs	r3, r3, r6
 8009544:	60a3      	str	r3, [r4, #8]
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	4433      	add	r3, r6
 800954a:	6023      	str	r3, [r4, #0]
 800954c:	2000      	movs	r0, #0
 800954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009552:	462a      	mov	r2, r5
 8009554:	f000 fa36 	bl	80099c4 <_realloc_r>
 8009558:	4606      	mov	r6, r0
 800955a:	2800      	cmp	r0, #0
 800955c:	d1e0      	bne.n	8009520 <__ssputs_r+0x5c>
 800955e:	6921      	ldr	r1, [r4, #16]
 8009560:	4650      	mov	r0, sl
 8009562:	f7ff fb35 	bl	8008bd0 <_free_r>
 8009566:	230c      	movs	r3, #12
 8009568:	f8ca 3000 	str.w	r3, [sl]
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	e7e9      	b.n	800954e <__ssputs_r+0x8a>
	...

0800957c <_svfiprintf_r>:
 800957c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009580:	4698      	mov	r8, r3
 8009582:	898b      	ldrh	r3, [r1, #12]
 8009584:	061b      	lsls	r3, r3, #24
 8009586:	b09d      	sub	sp, #116	@ 0x74
 8009588:	4607      	mov	r7, r0
 800958a:	460d      	mov	r5, r1
 800958c:	4614      	mov	r4, r2
 800958e:	d510      	bpl.n	80095b2 <_svfiprintf_r+0x36>
 8009590:	690b      	ldr	r3, [r1, #16]
 8009592:	b973      	cbnz	r3, 80095b2 <_svfiprintf_r+0x36>
 8009594:	2140      	movs	r1, #64	@ 0x40
 8009596:	f7ff fb8f 	bl	8008cb8 <_malloc_r>
 800959a:	6028      	str	r0, [r5, #0]
 800959c:	6128      	str	r0, [r5, #16]
 800959e:	b930      	cbnz	r0, 80095ae <_svfiprintf_r+0x32>
 80095a0:	230c      	movs	r3, #12
 80095a2:	603b      	str	r3, [r7, #0]
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b01d      	add	sp, #116	@ 0x74
 80095aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ae:	2340      	movs	r3, #64	@ 0x40
 80095b0:	616b      	str	r3, [r5, #20]
 80095b2:	2300      	movs	r3, #0
 80095b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b6:	2320      	movs	r3, #32
 80095b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c0:	2330      	movs	r3, #48	@ 0x30
 80095c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009760 <_svfiprintf_r+0x1e4>
 80095c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095ca:	f04f 0901 	mov.w	r9, #1
 80095ce:	4623      	mov	r3, r4
 80095d0:	469a      	mov	sl, r3
 80095d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d6:	b10a      	cbz	r2, 80095dc <_svfiprintf_r+0x60>
 80095d8:	2a25      	cmp	r2, #37	@ 0x25
 80095da:	d1f9      	bne.n	80095d0 <_svfiprintf_r+0x54>
 80095dc:	ebba 0b04 	subs.w	fp, sl, r4
 80095e0:	d00b      	beq.n	80095fa <_svfiprintf_r+0x7e>
 80095e2:	465b      	mov	r3, fp
 80095e4:	4622      	mov	r2, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	4638      	mov	r0, r7
 80095ea:	f7ff ff6b 	bl	80094c4 <__ssputs_r>
 80095ee:	3001      	adds	r0, #1
 80095f0:	f000 80a7 	beq.w	8009742 <_svfiprintf_r+0x1c6>
 80095f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f6:	445a      	add	r2, fp
 80095f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80095fa:	f89a 3000 	ldrb.w	r3, [sl]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 809f 	beq.w	8009742 <_svfiprintf_r+0x1c6>
 8009604:	2300      	movs	r3, #0
 8009606:	f04f 32ff 	mov.w	r2, #4294967295
 800960a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800960e:	f10a 0a01 	add.w	sl, sl, #1
 8009612:	9304      	str	r3, [sp, #16]
 8009614:	9307      	str	r3, [sp, #28]
 8009616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800961a:	931a      	str	r3, [sp, #104]	@ 0x68
 800961c:	4654      	mov	r4, sl
 800961e:	2205      	movs	r2, #5
 8009620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009624:	484e      	ldr	r0, [pc, #312]	@ (8009760 <_svfiprintf_r+0x1e4>)
 8009626:	f7f6 fde3 	bl	80001f0 <memchr>
 800962a:	9a04      	ldr	r2, [sp, #16]
 800962c:	b9d8      	cbnz	r0, 8009666 <_svfiprintf_r+0xea>
 800962e:	06d0      	lsls	r0, r2, #27
 8009630:	bf44      	itt	mi
 8009632:	2320      	movmi	r3, #32
 8009634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009638:	0711      	lsls	r1, r2, #28
 800963a:	bf44      	itt	mi
 800963c:	232b      	movmi	r3, #43	@ 0x2b
 800963e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009642:	f89a 3000 	ldrb.w	r3, [sl]
 8009646:	2b2a      	cmp	r3, #42	@ 0x2a
 8009648:	d015      	beq.n	8009676 <_svfiprintf_r+0xfa>
 800964a:	9a07      	ldr	r2, [sp, #28]
 800964c:	4654      	mov	r4, sl
 800964e:	2000      	movs	r0, #0
 8009650:	f04f 0c0a 	mov.w	ip, #10
 8009654:	4621      	mov	r1, r4
 8009656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965a:	3b30      	subs	r3, #48	@ 0x30
 800965c:	2b09      	cmp	r3, #9
 800965e:	d94b      	bls.n	80096f8 <_svfiprintf_r+0x17c>
 8009660:	b1b0      	cbz	r0, 8009690 <_svfiprintf_r+0x114>
 8009662:	9207      	str	r2, [sp, #28]
 8009664:	e014      	b.n	8009690 <_svfiprintf_r+0x114>
 8009666:	eba0 0308 	sub.w	r3, r0, r8
 800966a:	fa09 f303 	lsl.w	r3, r9, r3
 800966e:	4313      	orrs	r3, r2
 8009670:	9304      	str	r3, [sp, #16]
 8009672:	46a2      	mov	sl, r4
 8009674:	e7d2      	b.n	800961c <_svfiprintf_r+0xa0>
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	1d19      	adds	r1, r3, #4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	9103      	str	r1, [sp, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bfbb      	ittet	lt
 8009682:	425b      	neglt	r3, r3
 8009684:	f042 0202 	orrlt.w	r2, r2, #2
 8009688:	9307      	strge	r3, [sp, #28]
 800968a:	9307      	strlt	r3, [sp, #28]
 800968c:	bfb8      	it	lt
 800968e:	9204      	strlt	r2, [sp, #16]
 8009690:	7823      	ldrb	r3, [r4, #0]
 8009692:	2b2e      	cmp	r3, #46	@ 0x2e
 8009694:	d10a      	bne.n	80096ac <_svfiprintf_r+0x130>
 8009696:	7863      	ldrb	r3, [r4, #1]
 8009698:	2b2a      	cmp	r3, #42	@ 0x2a
 800969a:	d132      	bne.n	8009702 <_svfiprintf_r+0x186>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	1d1a      	adds	r2, r3, #4
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	9203      	str	r2, [sp, #12]
 80096a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096a8:	3402      	adds	r4, #2
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009770 <_svfiprintf_r+0x1f4>
 80096b0:	7821      	ldrb	r1, [r4, #0]
 80096b2:	2203      	movs	r2, #3
 80096b4:	4650      	mov	r0, sl
 80096b6:	f7f6 fd9b 	bl	80001f0 <memchr>
 80096ba:	b138      	cbz	r0, 80096cc <_svfiprintf_r+0x150>
 80096bc:	9b04      	ldr	r3, [sp, #16]
 80096be:	eba0 000a 	sub.w	r0, r0, sl
 80096c2:	2240      	movs	r2, #64	@ 0x40
 80096c4:	4082      	lsls	r2, r0
 80096c6:	4313      	orrs	r3, r2
 80096c8:	3401      	adds	r4, #1
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	4824      	ldr	r0, [pc, #144]	@ (8009764 <_svfiprintf_r+0x1e8>)
 80096d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096d6:	2206      	movs	r2, #6
 80096d8:	f7f6 fd8a 	bl	80001f0 <memchr>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d036      	beq.n	800974e <_svfiprintf_r+0x1d2>
 80096e0:	4b21      	ldr	r3, [pc, #132]	@ (8009768 <_svfiprintf_r+0x1ec>)
 80096e2:	bb1b      	cbnz	r3, 800972c <_svfiprintf_r+0x1b0>
 80096e4:	9b03      	ldr	r3, [sp, #12]
 80096e6:	3307      	adds	r3, #7
 80096e8:	f023 0307 	bic.w	r3, r3, #7
 80096ec:	3308      	adds	r3, #8
 80096ee:	9303      	str	r3, [sp, #12]
 80096f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f2:	4433      	add	r3, r6
 80096f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096f6:	e76a      	b.n	80095ce <_svfiprintf_r+0x52>
 80096f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80096fc:	460c      	mov	r4, r1
 80096fe:	2001      	movs	r0, #1
 8009700:	e7a8      	b.n	8009654 <_svfiprintf_r+0xd8>
 8009702:	2300      	movs	r3, #0
 8009704:	3401      	adds	r4, #1
 8009706:	9305      	str	r3, [sp, #20]
 8009708:	4619      	mov	r1, r3
 800970a:	f04f 0c0a 	mov.w	ip, #10
 800970e:	4620      	mov	r0, r4
 8009710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009714:	3a30      	subs	r2, #48	@ 0x30
 8009716:	2a09      	cmp	r2, #9
 8009718:	d903      	bls.n	8009722 <_svfiprintf_r+0x1a6>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0c6      	beq.n	80096ac <_svfiprintf_r+0x130>
 800971e:	9105      	str	r1, [sp, #20]
 8009720:	e7c4      	b.n	80096ac <_svfiprintf_r+0x130>
 8009722:	fb0c 2101 	mla	r1, ip, r1, r2
 8009726:	4604      	mov	r4, r0
 8009728:	2301      	movs	r3, #1
 800972a:	e7f0      	b.n	800970e <_svfiprintf_r+0x192>
 800972c:	ab03      	add	r3, sp, #12
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	462a      	mov	r2, r5
 8009732:	4b0e      	ldr	r3, [pc, #56]	@ (800976c <_svfiprintf_r+0x1f0>)
 8009734:	a904      	add	r1, sp, #16
 8009736:	4638      	mov	r0, r7
 8009738:	f7fd fe7e 	bl	8007438 <_printf_float>
 800973c:	1c42      	adds	r2, r0, #1
 800973e:	4606      	mov	r6, r0
 8009740:	d1d6      	bne.n	80096f0 <_svfiprintf_r+0x174>
 8009742:	89ab      	ldrh	r3, [r5, #12]
 8009744:	065b      	lsls	r3, r3, #25
 8009746:	f53f af2d 	bmi.w	80095a4 <_svfiprintf_r+0x28>
 800974a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800974c:	e72c      	b.n	80095a8 <_svfiprintf_r+0x2c>
 800974e:	ab03      	add	r3, sp, #12
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	462a      	mov	r2, r5
 8009754:	4b05      	ldr	r3, [pc, #20]	@ (800976c <_svfiprintf_r+0x1f0>)
 8009756:	a904      	add	r1, sp, #16
 8009758:	4638      	mov	r0, r7
 800975a:	f7fe f905 	bl	8007968 <_printf_i>
 800975e:	e7ed      	b.n	800973c <_svfiprintf_r+0x1c0>
 8009760:	0800a522 	.word	0x0800a522
 8009764:	0800a52c 	.word	0x0800a52c
 8009768:	08007439 	.word	0x08007439
 800976c:	080094c5 	.word	0x080094c5
 8009770:	0800a528 	.word	0x0800a528

08009774 <__sflush_r>:
 8009774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977c:	0716      	lsls	r6, r2, #28
 800977e:	4605      	mov	r5, r0
 8009780:	460c      	mov	r4, r1
 8009782:	d454      	bmi.n	800982e <__sflush_r+0xba>
 8009784:	684b      	ldr	r3, [r1, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	dc02      	bgt.n	8009790 <__sflush_r+0x1c>
 800978a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800978c:	2b00      	cmp	r3, #0
 800978e:	dd48      	ble.n	8009822 <__sflush_r+0xae>
 8009790:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009792:	2e00      	cmp	r6, #0
 8009794:	d045      	beq.n	8009822 <__sflush_r+0xae>
 8009796:	2300      	movs	r3, #0
 8009798:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800979c:	682f      	ldr	r7, [r5, #0]
 800979e:	6a21      	ldr	r1, [r4, #32]
 80097a0:	602b      	str	r3, [r5, #0]
 80097a2:	d030      	beq.n	8009806 <__sflush_r+0x92>
 80097a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	0759      	lsls	r1, r3, #29
 80097aa:	d505      	bpl.n	80097b8 <__sflush_r+0x44>
 80097ac:	6863      	ldr	r3, [r4, #4]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097b2:	b10b      	cbz	r3, 80097b8 <__sflush_r+0x44>
 80097b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097b6:	1ad2      	subs	r2, r2, r3
 80097b8:	2300      	movs	r3, #0
 80097ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097bc:	6a21      	ldr	r1, [r4, #32]
 80097be:	4628      	mov	r0, r5
 80097c0:	47b0      	blx	r6
 80097c2:	1c43      	adds	r3, r0, #1
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	d106      	bne.n	80097d6 <__sflush_r+0x62>
 80097c8:	6829      	ldr	r1, [r5, #0]
 80097ca:	291d      	cmp	r1, #29
 80097cc:	d82b      	bhi.n	8009826 <__sflush_r+0xb2>
 80097ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009878 <__sflush_r+0x104>)
 80097d0:	40ca      	lsrs	r2, r1
 80097d2:	07d6      	lsls	r6, r2, #31
 80097d4:	d527      	bpl.n	8009826 <__sflush_r+0xb2>
 80097d6:	2200      	movs	r2, #0
 80097d8:	6062      	str	r2, [r4, #4]
 80097da:	04d9      	lsls	r1, r3, #19
 80097dc:	6922      	ldr	r2, [r4, #16]
 80097de:	6022      	str	r2, [r4, #0]
 80097e0:	d504      	bpl.n	80097ec <__sflush_r+0x78>
 80097e2:	1c42      	adds	r2, r0, #1
 80097e4:	d101      	bne.n	80097ea <__sflush_r+0x76>
 80097e6:	682b      	ldr	r3, [r5, #0]
 80097e8:	b903      	cbnz	r3, 80097ec <__sflush_r+0x78>
 80097ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80097ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ee:	602f      	str	r7, [r5, #0]
 80097f0:	b1b9      	cbz	r1, 8009822 <__sflush_r+0xae>
 80097f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097f6:	4299      	cmp	r1, r3
 80097f8:	d002      	beq.n	8009800 <__sflush_r+0x8c>
 80097fa:	4628      	mov	r0, r5
 80097fc:	f7ff f9e8 	bl	8008bd0 <_free_r>
 8009800:	2300      	movs	r3, #0
 8009802:	6363      	str	r3, [r4, #52]	@ 0x34
 8009804:	e00d      	b.n	8009822 <__sflush_r+0xae>
 8009806:	2301      	movs	r3, #1
 8009808:	4628      	mov	r0, r5
 800980a:	47b0      	blx	r6
 800980c:	4602      	mov	r2, r0
 800980e:	1c50      	adds	r0, r2, #1
 8009810:	d1c9      	bne.n	80097a6 <__sflush_r+0x32>
 8009812:	682b      	ldr	r3, [r5, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0c6      	beq.n	80097a6 <__sflush_r+0x32>
 8009818:	2b1d      	cmp	r3, #29
 800981a:	d001      	beq.n	8009820 <__sflush_r+0xac>
 800981c:	2b16      	cmp	r3, #22
 800981e:	d11e      	bne.n	800985e <__sflush_r+0xea>
 8009820:	602f      	str	r7, [r5, #0]
 8009822:	2000      	movs	r0, #0
 8009824:	e022      	b.n	800986c <__sflush_r+0xf8>
 8009826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800982a:	b21b      	sxth	r3, r3
 800982c:	e01b      	b.n	8009866 <__sflush_r+0xf2>
 800982e:	690f      	ldr	r7, [r1, #16]
 8009830:	2f00      	cmp	r7, #0
 8009832:	d0f6      	beq.n	8009822 <__sflush_r+0xae>
 8009834:	0793      	lsls	r3, r2, #30
 8009836:	680e      	ldr	r6, [r1, #0]
 8009838:	bf08      	it	eq
 800983a:	694b      	ldreq	r3, [r1, #20]
 800983c:	600f      	str	r7, [r1, #0]
 800983e:	bf18      	it	ne
 8009840:	2300      	movne	r3, #0
 8009842:	eba6 0807 	sub.w	r8, r6, r7
 8009846:	608b      	str	r3, [r1, #8]
 8009848:	f1b8 0f00 	cmp.w	r8, #0
 800984c:	dde9      	ble.n	8009822 <__sflush_r+0xae>
 800984e:	6a21      	ldr	r1, [r4, #32]
 8009850:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009852:	4643      	mov	r3, r8
 8009854:	463a      	mov	r2, r7
 8009856:	4628      	mov	r0, r5
 8009858:	47b0      	blx	r6
 800985a:	2800      	cmp	r0, #0
 800985c:	dc08      	bgt.n	8009870 <__sflush_r+0xfc>
 800985e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009870:	4407      	add	r7, r0
 8009872:	eba8 0800 	sub.w	r8, r8, r0
 8009876:	e7e7      	b.n	8009848 <__sflush_r+0xd4>
 8009878:	20400001 	.word	0x20400001

0800987c <_fflush_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	690b      	ldr	r3, [r1, #16]
 8009880:	4605      	mov	r5, r0
 8009882:	460c      	mov	r4, r1
 8009884:	b913      	cbnz	r3, 800988c <_fflush_r+0x10>
 8009886:	2500      	movs	r5, #0
 8009888:	4628      	mov	r0, r5
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	b118      	cbz	r0, 8009896 <_fflush_r+0x1a>
 800988e:	6a03      	ldr	r3, [r0, #32]
 8009890:	b90b      	cbnz	r3, 8009896 <_fflush_r+0x1a>
 8009892:	f7fe fa13 	bl	8007cbc <__sinit>
 8009896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0f3      	beq.n	8009886 <_fflush_r+0xa>
 800989e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098a0:	07d0      	lsls	r0, r2, #31
 80098a2:	d404      	bmi.n	80098ae <_fflush_r+0x32>
 80098a4:	0599      	lsls	r1, r3, #22
 80098a6:	d402      	bmi.n	80098ae <_fflush_r+0x32>
 80098a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098aa:	f7fe fb34 	bl	8007f16 <__retarget_lock_acquire_recursive>
 80098ae:	4628      	mov	r0, r5
 80098b0:	4621      	mov	r1, r4
 80098b2:	f7ff ff5f 	bl	8009774 <__sflush_r>
 80098b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098b8:	07da      	lsls	r2, r3, #31
 80098ba:	4605      	mov	r5, r0
 80098bc:	d4e4      	bmi.n	8009888 <_fflush_r+0xc>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	059b      	lsls	r3, r3, #22
 80098c2:	d4e1      	bmi.n	8009888 <_fflush_r+0xc>
 80098c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098c6:	f7fe fb27 	bl	8007f18 <__retarget_lock_release_recursive>
 80098ca:	e7dd      	b.n	8009888 <_fflush_r+0xc>

080098cc <memmove>:
 80098cc:	4288      	cmp	r0, r1
 80098ce:	b510      	push	{r4, lr}
 80098d0:	eb01 0402 	add.w	r4, r1, r2
 80098d4:	d902      	bls.n	80098dc <memmove+0x10>
 80098d6:	4284      	cmp	r4, r0
 80098d8:	4623      	mov	r3, r4
 80098da:	d807      	bhi.n	80098ec <memmove+0x20>
 80098dc:	1e43      	subs	r3, r0, #1
 80098de:	42a1      	cmp	r1, r4
 80098e0:	d008      	beq.n	80098f4 <memmove+0x28>
 80098e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ea:	e7f8      	b.n	80098de <memmove+0x12>
 80098ec:	4402      	add	r2, r0
 80098ee:	4601      	mov	r1, r0
 80098f0:	428a      	cmp	r2, r1
 80098f2:	d100      	bne.n	80098f6 <memmove+0x2a>
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098fe:	e7f7      	b.n	80098f0 <memmove+0x24>

08009900 <_sbrk_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4d06      	ldr	r5, [pc, #24]	@ (800991c <_sbrk_r+0x1c>)
 8009904:	2300      	movs	r3, #0
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	602b      	str	r3, [r5, #0]
 800990c:	f7f9 fc16 	bl	800313c <_sbrk>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d102      	bne.n	800991a <_sbrk_r+0x1a>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	b103      	cbz	r3, 800991a <_sbrk_r+0x1a>
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	2000399c 	.word	0x2000399c

08009920 <memcpy>:
 8009920:	440a      	add	r2, r1
 8009922:	4291      	cmp	r1, r2
 8009924:	f100 33ff 	add.w	r3, r0, #4294967295
 8009928:	d100      	bne.n	800992c <memcpy+0xc>
 800992a:	4770      	bx	lr
 800992c:	b510      	push	{r4, lr}
 800992e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009936:	4291      	cmp	r1, r2
 8009938:	d1f9      	bne.n	800992e <memcpy+0xe>
 800993a:	bd10      	pop	{r4, pc}

0800993c <__assert_func>:
 800993c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800993e:	4614      	mov	r4, r2
 8009940:	461a      	mov	r2, r3
 8009942:	4b09      	ldr	r3, [pc, #36]	@ (8009968 <__assert_func+0x2c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4605      	mov	r5, r0
 8009948:	68d8      	ldr	r0, [r3, #12]
 800994a:	b14c      	cbz	r4, 8009960 <__assert_func+0x24>
 800994c:	4b07      	ldr	r3, [pc, #28]	@ (800996c <__assert_func+0x30>)
 800994e:	9100      	str	r1, [sp, #0]
 8009950:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009954:	4906      	ldr	r1, [pc, #24]	@ (8009970 <__assert_func+0x34>)
 8009956:	462b      	mov	r3, r5
 8009958:	f000 f870 	bl	8009a3c <fiprintf>
 800995c:	f000 f880 	bl	8009a60 <abort>
 8009960:	4b04      	ldr	r3, [pc, #16]	@ (8009974 <__assert_func+0x38>)
 8009962:	461c      	mov	r4, r3
 8009964:	e7f3      	b.n	800994e <__assert_func+0x12>
 8009966:	bf00      	nop
 8009968:	20000034 	.word	0x20000034
 800996c:	0800a53d 	.word	0x0800a53d
 8009970:	0800a54a 	.word	0x0800a54a
 8009974:	0800a578 	.word	0x0800a578

08009978 <_calloc_r>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	fba1 5402 	umull	r5, r4, r1, r2
 800997e:	b934      	cbnz	r4, 800998e <_calloc_r+0x16>
 8009980:	4629      	mov	r1, r5
 8009982:	f7ff f999 	bl	8008cb8 <_malloc_r>
 8009986:	4606      	mov	r6, r0
 8009988:	b928      	cbnz	r0, 8009996 <_calloc_r+0x1e>
 800998a:	4630      	mov	r0, r6
 800998c:	bd70      	pop	{r4, r5, r6, pc}
 800998e:	220c      	movs	r2, #12
 8009990:	6002      	str	r2, [r0, #0]
 8009992:	2600      	movs	r6, #0
 8009994:	e7f9      	b.n	800998a <_calloc_r+0x12>
 8009996:	462a      	mov	r2, r5
 8009998:	4621      	mov	r1, r4
 800999a:	f7fe fa3e 	bl	8007e1a <memset>
 800999e:	e7f4      	b.n	800998a <_calloc_r+0x12>

080099a0 <__ascii_mbtowc>:
 80099a0:	b082      	sub	sp, #8
 80099a2:	b901      	cbnz	r1, 80099a6 <__ascii_mbtowc+0x6>
 80099a4:	a901      	add	r1, sp, #4
 80099a6:	b142      	cbz	r2, 80099ba <__ascii_mbtowc+0x1a>
 80099a8:	b14b      	cbz	r3, 80099be <__ascii_mbtowc+0x1e>
 80099aa:	7813      	ldrb	r3, [r2, #0]
 80099ac:	600b      	str	r3, [r1, #0]
 80099ae:	7812      	ldrb	r2, [r2, #0]
 80099b0:	1e10      	subs	r0, r2, #0
 80099b2:	bf18      	it	ne
 80099b4:	2001      	movne	r0, #1
 80099b6:	b002      	add	sp, #8
 80099b8:	4770      	bx	lr
 80099ba:	4610      	mov	r0, r2
 80099bc:	e7fb      	b.n	80099b6 <__ascii_mbtowc+0x16>
 80099be:	f06f 0001 	mvn.w	r0, #1
 80099c2:	e7f8      	b.n	80099b6 <__ascii_mbtowc+0x16>

080099c4 <_realloc_r>:
 80099c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c8:	4607      	mov	r7, r0
 80099ca:	4614      	mov	r4, r2
 80099cc:	460d      	mov	r5, r1
 80099ce:	b921      	cbnz	r1, 80099da <_realloc_r+0x16>
 80099d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	4611      	mov	r1, r2
 80099d6:	f7ff b96f 	b.w	8008cb8 <_malloc_r>
 80099da:	b92a      	cbnz	r2, 80099e8 <_realloc_r+0x24>
 80099dc:	f7ff f8f8 	bl	8008bd0 <_free_r>
 80099e0:	4625      	mov	r5, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e8:	f000 f841 	bl	8009a6e <_malloc_usable_size_r>
 80099ec:	4284      	cmp	r4, r0
 80099ee:	4606      	mov	r6, r0
 80099f0:	d802      	bhi.n	80099f8 <_realloc_r+0x34>
 80099f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099f6:	d8f4      	bhi.n	80099e2 <_realloc_r+0x1e>
 80099f8:	4621      	mov	r1, r4
 80099fa:	4638      	mov	r0, r7
 80099fc:	f7ff f95c 	bl	8008cb8 <_malloc_r>
 8009a00:	4680      	mov	r8, r0
 8009a02:	b908      	cbnz	r0, 8009a08 <_realloc_r+0x44>
 8009a04:	4645      	mov	r5, r8
 8009a06:	e7ec      	b.n	80099e2 <_realloc_r+0x1e>
 8009a08:	42b4      	cmp	r4, r6
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	bf28      	it	cs
 8009a10:	4632      	movcs	r2, r6
 8009a12:	f7ff ff85 	bl	8009920 <memcpy>
 8009a16:	4629      	mov	r1, r5
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff f8d9 	bl	8008bd0 <_free_r>
 8009a1e:	e7f1      	b.n	8009a04 <_realloc_r+0x40>

08009a20 <__ascii_wctomb>:
 8009a20:	4603      	mov	r3, r0
 8009a22:	4608      	mov	r0, r1
 8009a24:	b141      	cbz	r1, 8009a38 <__ascii_wctomb+0x18>
 8009a26:	2aff      	cmp	r2, #255	@ 0xff
 8009a28:	d904      	bls.n	8009a34 <__ascii_wctomb+0x14>
 8009a2a:	228a      	movs	r2, #138	@ 0x8a
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a32:	4770      	bx	lr
 8009a34:	700a      	strb	r2, [r1, #0]
 8009a36:	2001      	movs	r0, #1
 8009a38:	4770      	bx	lr
	...

08009a3c <fiprintf>:
 8009a3c:	b40e      	push	{r1, r2, r3}
 8009a3e:	b503      	push	{r0, r1, lr}
 8009a40:	4601      	mov	r1, r0
 8009a42:	ab03      	add	r3, sp, #12
 8009a44:	4805      	ldr	r0, [pc, #20]	@ (8009a5c <fiprintf+0x20>)
 8009a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	f000 f83f 	bl	8009ad0 <_vfiprintf_r>
 8009a52:	b002      	add	sp, #8
 8009a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a58:	b003      	add	sp, #12
 8009a5a:	4770      	bx	lr
 8009a5c:	20000034 	.word	0x20000034

08009a60 <abort>:
 8009a60:	b508      	push	{r3, lr}
 8009a62:	2006      	movs	r0, #6
 8009a64:	f000 fa08 	bl	8009e78 <raise>
 8009a68:	2001      	movs	r0, #1
 8009a6a:	f7f9 faef 	bl	800304c <_exit>

08009a6e <_malloc_usable_size_r>:
 8009a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a72:	1f18      	subs	r0, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	bfbc      	itt	lt
 8009a78:	580b      	ldrlt	r3, [r1, r0]
 8009a7a:	18c0      	addlt	r0, r0, r3
 8009a7c:	4770      	bx	lr

08009a7e <__sfputc_r>:
 8009a7e:	6893      	ldr	r3, [r2, #8]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	b410      	push	{r4}
 8009a86:	6093      	str	r3, [r2, #8]
 8009a88:	da08      	bge.n	8009a9c <__sfputc_r+0x1e>
 8009a8a:	6994      	ldr	r4, [r2, #24]
 8009a8c:	42a3      	cmp	r3, r4
 8009a8e:	db01      	blt.n	8009a94 <__sfputc_r+0x16>
 8009a90:	290a      	cmp	r1, #10
 8009a92:	d103      	bne.n	8009a9c <__sfputc_r+0x1e>
 8009a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a98:	f000 b932 	b.w	8009d00 <__swbuf_r>
 8009a9c:	6813      	ldr	r3, [r2, #0]
 8009a9e:	1c58      	adds	r0, r3, #1
 8009aa0:	6010      	str	r0, [r2, #0]
 8009aa2:	7019      	strb	r1, [r3, #0]
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <__sfputs_r>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	4614      	mov	r4, r2
 8009ab4:	18d5      	adds	r5, r2, r3
 8009ab6:	42ac      	cmp	r4, r5
 8009ab8:	d101      	bne.n	8009abe <__sfputs_r+0x12>
 8009aba:	2000      	movs	r0, #0
 8009abc:	e007      	b.n	8009ace <__sfputs_r+0x22>
 8009abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac2:	463a      	mov	r2, r7
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f7ff ffda 	bl	8009a7e <__sfputc_r>
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	d1f3      	bne.n	8009ab6 <__sfputs_r+0xa>
 8009ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ad0 <_vfiprintf_r>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	460d      	mov	r5, r1
 8009ad6:	b09d      	sub	sp, #116	@ 0x74
 8009ad8:	4614      	mov	r4, r2
 8009ada:	4698      	mov	r8, r3
 8009adc:	4606      	mov	r6, r0
 8009ade:	b118      	cbz	r0, 8009ae8 <_vfiprintf_r+0x18>
 8009ae0:	6a03      	ldr	r3, [r0, #32]
 8009ae2:	b90b      	cbnz	r3, 8009ae8 <_vfiprintf_r+0x18>
 8009ae4:	f7fe f8ea 	bl	8007cbc <__sinit>
 8009ae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aea:	07d9      	lsls	r1, r3, #31
 8009aec:	d405      	bmi.n	8009afa <_vfiprintf_r+0x2a>
 8009aee:	89ab      	ldrh	r3, [r5, #12]
 8009af0:	059a      	lsls	r2, r3, #22
 8009af2:	d402      	bmi.n	8009afa <_vfiprintf_r+0x2a>
 8009af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009af6:	f7fe fa0e 	bl	8007f16 <__retarget_lock_acquire_recursive>
 8009afa:	89ab      	ldrh	r3, [r5, #12]
 8009afc:	071b      	lsls	r3, r3, #28
 8009afe:	d501      	bpl.n	8009b04 <_vfiprintf_r+0x34>
 8009b00:	692b      	ldr	r3, [r5, #16]
 8009b02:	b99b      	cbnz	r3, 8009b2c <_vfiprintf_r+0x5c>
 8009b04:	4629      	mov	r1, r5
 8009b06:	4630      	mov	r0, r6
 8009b08:	f000 f938 	bl	8009d7c <__swsetup_r>
 8009b0c:	b170      	cbz	r0, 8009b2c <_vfiprintf_r+0x5c>
 8009b0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b10:	07dc      	lsls	r4, r3, #31
 8009b12:	d504      	bpl.n	8009b1e <_vfiprintf_r+0x4e>
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	b01d      	add	sp, #116	@ 0x74
 8009b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	89ab      	ldrh	r3, [r5, #12]
 8009b20:	0598      	lsls	r0, r3, #22
 8009b22:	d4f7      	bmi.n	8009b14 <_vfiprintf_r+0x44>
 8009b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b26:	f7fe f9f7 	bl	8007f18 <__retarget_lock_release_recursive>
 8009b2a:	e7f3      	b.n	8009b14 <_vfiprintf_r+0x44>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b30:	2320      	movs	r3, #32
 8009b32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b3a:	2330      	movs	r3, #48	@ 0x30
 8009b3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009cec <_vfiprintf_r+0x21c>
 8009b40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b44:	f04f 0901 	mov.w	r9, #1
 8009b48:	4623      	mov	r3, r4
 8009b4a:	469a      	mov	sl, r3
 8009b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b50:	b10a      	cbz	r2, 8009b56 <_vfiprintf_r+0x86>
 8009b52:	2a25      	cmp	r2, #37	@ 0x25
 8009b54:	d1f9      	bne.n	8009b4a <_vfiprintf_r+0x7a>
 8009b56:	ebba 0b04 	subs.w	fp, sl, r4
 8009b5a:	d00b      	beq.n	8009b74 <_vfiprintf_r+0xa4>
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	4630      	mov	r0, r6
 8009b64:	f7ff ffa2 	bl	8009aac <__sfputs_r>
 8009b68:	3001      	adds	r0, #1
 8009b6a:	f000 80a7 	beq.w	8009cbc <_vfiprintf_r+0x1ec>
 8009b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b70:	445a      	add	r2, fp
 8009b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b74:	f89a 3000 	ldrb.w	r3, [sl]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 809f 	beq.w	8009cbc <_vfiprintf_r+0x1ec>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f04f 32ff 	mov.w	r2, #4294967295
 8009b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b88:	f10a 0a01 	add.w	sl, sl, #1
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	9307      	str	r3, [sp, #28]
 8009b90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b94:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b96:	4654      	mov	r4, sl
 8009b98:	2205      	movs	r2, #5
 8009b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9e:	4853      	ldr	r0, [pc, #332]	@ (8009cec <_vfiprintf_r+0x21c>)
 8009ba0:	f7f6 fb26 	bl	80001f0 <memchr>
 8009ba4:	9a04      	ldr	r2, [sp, #16]
 8009ba6:	b9d8      	cbnz	r0, 8009be0 <_vfiprintf_r+0x110>
 8009ba8:	06d1      	lsls	r1, r2, #27
 8009baa:	bf44      	itt	mi
 8009bac:	2320      	movmi	r3, #32
 8009bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bb2:	0713      	lsls	r3, r2, #28
 8009bb4:	bf44      	itt	mi
 8009bb6:	232b      	movmi	r3, #43	@ 0x2b
 8009bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bc2:	d015      	beq.n	8009bf0 <_vfiprintf_r+0x120>
 8009bc4:	9a07      	ldr	r2, [sp, #28]
 8009bc6:	4654      	mov	r4, sl
 8009bc8:	2000      	movs	r0, #0
 8009bca:	f04f 0c0a 	mov.w	ip, #10
 8009bce:	4621      	mov	r1, r4
 8009bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd4:	3b30      	subs	r3, #48	@ 0x30
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d94b      	bls.n	8009c72 <_vfiprintf_r+0x1a2>
 8009bda:	b1b0      	cbz	r0, 8009c0a <_vfiprintf_r+0x13a>
 8009bdc:	9207      	str	r2, [sp, #28]
 8009bde:	e014      	b.n	8009c0a <_vfiprintf_r+0x13a>
 8009be0:	eba0 0308 	sub.w	r3, r0, r8
 8009be4:	fa09 f303 	lsl.w	r3, r9, r3
 8009be8:	4313      	orrs	r3, r2
 8009bea:	9304      	str	r3, [sp, #16]
 8009bec:	46a2      	mov	sl, r4
 8009bee:	e7d2      	b.n	8009b96 <_vfiprintf_r+0xc6>
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	1d19      	adds	r1, r3, #4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	9103      	str	r1, [sp, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	bfbb      	ittet	lt
 8009bfc:	425b      	neglt	r3, r3
 8009bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8009c02:	9307      	strge	r3, [sp, #28]
 8009c04:	9307      	strlt	r3, [sp, #28]
 8009c06:	bfb8      	it	lt
 8009c08:	9204      	strlt	r2, [sp, #16]
 8009c0a:	7823      	ldrb	r3, [r4, #0]
 8009c0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c0e:	d10a      	bne.n	8009c26 <_vfiprintf_r+0x156>
 8009c10:	7863      	ldrb	r3, [r4, #1]
 8009c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c14:	d132      	bne.n	8009c7c <_vfiprintf_r+0x1ac>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	1d1a      	adds	r2, r3, #4
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	9203      	str	r2, [sp, #12]
 8009c1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c22:	3402      	adds	r4, #2
 8009c24:	9305      	str	r3, [sp, #20]
 8009c26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cfc <_vfiprintf_r+0x22c>
 8009c2a:	7821      	ldrb	r1, [r4, #0]
 8009c2c:	2203      	movs	r2, #3
 8009c2e:	4650      	mov	r0, sl
 8009c30:	f7f6 fade 	bl	80001f0 <memchr>
 8009c34:	b138      	cbz	r0, 8009c46 <_vfiprintf_r+0x176>
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	eba0 000a 	sub.w	r0, r0, sl
 8009c3c:	2240      	movs	r2, #64	@ 0x40
 8009c3e:	4082      	lsls	r2, r0
 8009c40:	4313      	orrs	r3, r2
 8009c42:	3401      	adds	r4, #1
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4a:	4829      	ldr	r0, [pc, #164]	@ (8009cf0 <_vfiprintf_r+0x220>)
 8009c4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c50:	2206      	movs	r2, #6
 8009c52:	f7f6 facd 	bl	80001f0 <memchr>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d03f      	beq.n	8009cda <_vfiprintf_r+0x20a>
 8009c5a:	4b26      	ldr	r3, [pc, #152]	@ (8009cf4 <_vfiprintf_r+0x224>)
 8009c5c:	bb1b      	cbnz	r3, 8009ca6 <_vfiprintf_r+0x1d6>
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	3307      	adds	r3, #7
 8009c62:	f023 0307 	bic.w	r3, r3, #7
 8009c66:	3308      	adds	r3, #8
 8009c68:	9303      	str	r3, [sp, #12]
 8009c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6c:	443b      	add	r3, r7
 8009c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c70:	e76a      	b.n	8009b48 <_vfiprintf_r+0x78>
 8009c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c76:	460c      	mov	r4, r1
 8009c78:	2001      	movs	r0, #1
 8009c7a:	e7a8      	b.n	8009bce <_vfiprintf_r+0xfe>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	3401      	adds	r4, #1
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	4619      	mov	r1, r3
 8009c84:	f04f 0c0a 	mov.w	ip, #10
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c8e:	3a30      	subs	r2, #48	@ 0x30
 8009c90:	2a09      	cmp	r2, #9
 8009c92:	d903      	bls.n	8009c9c <_vfiprintf_r+0x1cc>
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0c6      	beq.n	8009c26 <_vfiprintf_r+0x156>
 8009c98:	9105      	str	r1, [sp, #20]
 8009c9a:	e7c4      	b.n	8009c26 <_vfiprintf_r+0x156>
 8009c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e7f0      	b.n	8009c88 <_vfiprintf_r+0x1b8>
 8009ca6:	ab03      	add	r3, sp, #12
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	462a      	mov	r2, r5
 8009cac:	4b12      	ldr	r3, [pc, #72]	@ (8009cf8 <_vfiprintf_r+0x228>)
 8009cae:	a904      	add	r1, sp, #16
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f7fd fbc1 	bl	8007438 <_printf_float>
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	1c78      	adds	r0, r7, #1
 8009cba:	d1d6      	bne.n	8009c6a <_vfiprintf_r+0x19a>
 8009cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cbe:	07d9      	lsls	r1, r3, #31
 8009cc0:	d405      	bmi.n	8009cce <_vfiprintf_r+0x1fe>
 8009cc2:	89ab      	ldrh	r3, [r5, #12]
 8009cc4:	059a      	lsls	r2, r3, #22
 8009cc6:	d402      	bmi.n	8009cce <_vfiprintf_r+0x1fe>
 8009cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cca:	f7fe f925 	bl	8007f18 <__retarget_lock_release_recursive>
 8009cce:	89ab      	ldrh	r3, [r5, #12]
 8009cd0:	065b      	lsls	r3, r3, #25
 8009cd2:	f53f af1f 	bmi.w	8009b14 <_vfiprintf_r+0x44>
 8009cd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cd8:	e71e      	b.n	8009b18 <_vfiprintf_r+0x48>
 8009cda:	ab03      	add	r3, sp, #12
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	462a      	mov	r2, r5
 8009ce0:	4b05      	ldr	r3, [pc, #20]	@ (8009cf8 <_vfiprintf_r+0x228>)
 8009ce2:	a904      	add	r1, sp, #16
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f7fd fe3f 	bl	8007968 <_printf_i>
 8009cea:	e7e4      	b.n	8009cb6 <_vfiprintf_r+0x1e6>
 8009cec:	0800a522 	.word	0x0800a522
 8009cf0:	0800a52c 	.word	0x0800a52c
 8009cf4:	08007439 	.word	0x08007439
 8009cf8:	08009aad 	.word	0x08009aad
 8009cfc:	0800a528 	.word	0x0800a528

08009d00 <__swbuf_r>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	460e      	mov	r6, r1
 8009d04:	4614      	mov	r4, r2
 8009d06:	4605      	mov	r5, r0
 8009d08:	b118      	cbz	r0, 8009d12 <__swbuf_r+0x12>
 8009d0a:	6a03      	ldr	r3, [r0, #32]
 8009d0c:	b90b      	cbnz	r3, 8009d12 <__swbuf_r+0x12>
 8009d0e:	f7fd ffd5 	bl	8007cbc <__sinit>
 8009d12:	69a3      	ldr	r3, [r4, #24]
 8009d14:	60a3      	str	r3, [r4, #8]
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	071a      	lsls	r2, r3, #28
 8009d1a:	d501      	bpl.n	8009d20 <__swbuf_r+0x20>
 8009d1c:	6923      	ldr	r3, [r4, #16]
 8009d1e:	b943      	cbnz	r3, 8009d32 <__swbuf_r+0x32>
 8009d20:	4621      	mov	r1, r4
 8009d22:	4628      	mov	r0, r5
 8009d24:	f000 f82a 	bl	8009d7c <__swsetup_r>
 8009d28:	b118      	cbz	r0, 8009d32 <__swbuf_r+0x32>
 8009d2a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d2e:	4638      	mov	r0, r7
 8009d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	6922      	ldr	r2, [r4, #16]
 8009d36:	1a98      	subs	r0, r3, r2
 8009d38:	6963      	ldr	r3, [r4, #20]
 8009d3a:	b2f6      	uxtb	r6, r6
 8009d3c:	4283      	cmp	r3, r0
 8009d3e:	4637      	mov	r7, r6
 8009d40:	dc05      	bgt.n	8009d4e <__swbuf_r+0x4e>
 8009d42:	4621      	mov	r1, r4
 8009d44:	4628      	mov	r0, r5
 8009d46:	f7ff fd99 	bl	800987c <_fflush_r>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d1ed      	bne.n	8009d2a <__swbuf_r+0x2a>
 8009d4e:	68a3      	ldr	r3, [r4, #8]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	60a3      	str	r3, [r4, #8]
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	6022      	str	r2, [r4, #0]
 8009d5a:	701e      	strb	r6, [r3, #0]
 8009d5c:	6962      	ldr	r2, [r4, #20]
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d004      	beq.n	8009d6e <__swbuf_r+0x6e>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	07db      	lsls	r3, r3, #31
 8009d68:	d5e1      	bpl.n	8009d2e <__swbuf_r+0x2e>
 8009d6a:	2e0a      	cmp	r6, #10
 8009d6c:	d1df      	bne.n	8009d2e <__swbuf_r+0x2e>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4628      	mov	r0, r5
 8009d72:	f7ff fd83 	bl	800987c <_fflush_r>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d0d9      	beq.n	8009d2e <__swbuf_r+0x2e>
 8009d7a:	e7d6      	b.n	8009d2a <__swbuf_r+0x2a>

08009d7c <__swsetup_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4b29      	ldr	r3, [pc, #164]	@ (8009e24 <__swsetup_r+0xa8>)
 8009d80:	4605      	mov	r5, r0
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	460c      	mov	r4, r1
 8009d86:	b118      	cbz	r0, 8009d90 <__swsetup_r+0x14>
 8009d88:	6a03      	ldr	r3, [r0, #32]
 8009d8a:	b90b      	cbnz	r3, 8009d90 <__swsetup_r+0x14>
 8009d8c:	f7fd ff96 	bl	8007cbc <__sinit>
 8009d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d94:	0719      	lsls	r1, r3, #28
 8009d96:	d422      	bmi.n	8009dde <__swsetup_r+0x62>
 8009d98:	06da      	lsls	r2, r3, #27
 8009d9a:	d407      	bmi.n	8009dac <__swsetup_r+0x30>
 8009d9c:	2209      	movs	r2, #9
 8009d9e:	602a      	str	r2, [r5, #0]
 8009da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	f04f 30ff 	mov.w	r0, #4294967295
 8009daa:	e033      	b.n	8009e14 <__swsetup_r+0x98>
 8009dac:	0758      	lsls	r0, r3, #29
 8009dae:	d512      	bpl.n	8009dd6 <__swsetup_r+0x5a>
 8009db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009db2:	b141      	cbz	r1, 8009dc6 <__swsetup_r+0x4a>
 8009db4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009db8:	4299      	cmp	r1, r3
 8009dba:	d002      	beq.n	8009dc2 <__swsetup_r+0x46>
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f7fe ff07 	bl	8008bd0 <_free_r>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f043 0308 	orr.w	r3, r3, #8
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	b94b      	cbnz	r3, 8009df6 <__swsetup_r+0x7a>
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dec:	d003      	beq.n	8009df6 <__swsetup_r+0x7a>
 8009dee:	4621      	mov	r1, r4
 8009df0:	4628      	mov	r0, r5
 8009df2:	f000 f883 	bl	8009efc <__smakebuf_r>
 8009df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dfa:	f013 0201 	ands.w	r2, r3, #1
 8009dfe:	d00a      	beq.n	8009e16 <__swsetup_r+0x9a>
 8009e00:	2200      	movs	r2, #0
 8009e02:	60a2      	str	r2, [r4, #8]
 8009e04:	6962      	ldr	r2, [r4, #20]
 8009e06:	4252      	negs	r2, r2
 8009e08:	61a2      	str	r2, [r4, #24]
 8009e0a:	6922      	ldr	r2, [r4, #16]
 8009e0c:	b942      	cbnz	r2, 8009e20 <__swsetup_r+0xa4>
 8009e0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e12:	d1c5      	bne.n	8009da0 <__swsetup_r+0x24>
 8009e14:	bd38      	pop	{r3, r4, r5, pc}
 8009e16:	0799      	lsls	r1, r3, #30
 8009e18:	bf58      	it	pl
 8009e1a:	6962      	ldrpl	r2, [r4, #20]
 8009e1c:	60a2      	str	r2, [r4, #8]
 8009e1e:	e7f4      	b.n	8009e0a <__swsetup_r+0x8e>
 8009e20:	2000      	movs	r0, #0
 8009e22:	e7f7      	b.n	8009e14 <__swsetup_r+0x98>
 8009e24:	20000034 	.word	0x20000034

08009e28 <_raise_r>:
 8009e28:	291f      	cmp	r1, #31
 8009e2a:	b538      	push	{r3, r4, r5, lr}
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	460c      	mov	r4, r1
 8009e30:	d904      	bls.n	8009e3c <_raise_r+0x14>
 8009e32:	2316      	movs	r3, #22
 8009e34:	6003      	str	r3, [r0, #0]
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e3e:	b112      	cbz	r2, 8009e46 <_raise_r+0x1e>
 8009e40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e44:	b94b      	cbnz	r3, 8009e5a <_raise_r+0x32>
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 f830 	bl	8009eac <_getpid_r>
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	4601      	mov	r1, r0
 8009e50:	4628      	mov	r0, r5
 8009e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e56:	f000 b817 	b.w	8009e88 <_kill_r>
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d00a      	beq.n	8009e74 <_raise_r+0x4c>
 8009e5e:	1c59      	adds	r1, r3, #1
 8009e60:	d103      	bne.n	8009e6a <_raise_r+0x42>
 8009e62:	2316      	movs	r3, #22
 8009e64:	6003      	str	r3, [r0, #0]
 8009e66:	2001      	movs	r0, #1
 8009e68:	e7e7      	b.n	8009e3a <_raise_r+0x12>
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e70:	4620      	mov	r0, r4
 8009e72:	4798      	blx	r3
 8009e74:	2000      	movs	r0, #0
 8009e76:	e7e0      	b.n	8009e3a <_raise_r+0x12>

08009e78 <raise>:
 8009e78:	4b02      	ldr	r3, [pc, #8]	@ (8009e84 <raise+0xc>)
 8009e7a:	4601      	mov	r1, r0
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	f7ff bfd3 	b.w	8009e28 <_raise_r>
 8009e82:	bf00      	nop
 8009e84:	20000034 	.word	0x20000034

08009e88 <_kill_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4d07      	ldr	r5, [pc, #28]	@ (8009ea8 <_kill_r+0x20>)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4608      	mov	r0, r1
 8009e92:	4611      	mov	r1, r2
 8009e94:	602b      	str	r3, [r5, #0]
 8009e96:	f7f9 f8c9 	bl	800302c <_kill>
 8009e9a:	1c43      	adds	r3, r0, #1
 8009e9c:	d102      	bne.n	8009ea4 <_kill_r+0x1c>
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	b103      	cbz	r3, 8009ea4 <_kill_r+0x1c>
 8009ea2:	6023      	str	r3, [r4, #0]
 8009ea4:	bd38      	pop	{r3, r4, r5, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2000399c 	.word	0x2000399c

08009eac <_getpid_r>:
 8009eac:	f7f9 b8b6 	b.w	800301c <_getpid>

08009eb0 <__swhatbuf_r>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	b096      	sub	sp, #88	@ 0x58
 8009ebc:	4615      	mov	r5, r2
 8009ebe:	461e      	mov	r6, r3
 8009ec0:	da0d      	bge.n	8009ede <__swhatbuf_r+0x2e>
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ec8:	f04f 0100 	mov.w	r1, #0
 8009ecc:	bf14      	ite	ne
 8009ece:	2340      	movne	r3, #64	@ 0x40
 8009ed0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	6031      	str	r1, [r6, #0]
 8009ed8:	602b      	str	r3, [r5, #0]
 8009eda:	b016      	add	sp, #88	@ 0x58
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	466a      	mov	r2, sp
 8009ee0:	f000 f848 	bl	8009f74 <_fstat_r>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	dbec      	blt.n	8009ec2 <__swhatbuf_r+0x12>
 8009ee8:	9901      	ldr	r1, [sp, #4]
 8009eea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009eee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ef2:	4259      	negs	r1, r3
 8009ef4:	4159      	adcs	r1, r3
 8009ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009efa:	e7eb      	b.n	8009ed4 <__swhatbuf_r+0x24>

08009efc <__smakebuf_r>:
 8009efc:	898b      	ldrh	r3, [r1, #12]
 8009efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f00:	079d      	lsls	r5, r3, #30
 8009f02:	4606      	mov	r6, r0
 8009f04:	460c      	mov	r4, r1
 8009f06:	d507      	bpl.n	8009f18 <__smakebuf_r+0x1c>
 8009f08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	2301      	movs	r3, #1
 8009f12:	6163      	str	r3, [r4, #20]
 8009f14:	b003      	add	sp, #12
 8009f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f18:	ab01      	add	r3, sp, #4
 8009f1a:	466a      	mov	r2, sp
 8009f1c:	f7ff ffc8 	bl	8009eb0 <__swhatbuf_r>
 8009f20:	9f00      	ldr	r7, [sp, #0]
 8009f22:	4605      	mov	r5, r0
 8009f24:	4639      	mov	r1, r7
 8009f26:	4630      	mov	r0, r6
 8009f28:	f7fe fec6 	bl	8008cb8 <_malloc_r>
 8009f2c:	b948      	cbnz	r0, 8009f42 <__smakebuf_r+0x46>
 8009f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f32:	059a      	lsls	r2, r3, #22
 8009f34:	d4ee      	bmi.n	8009f14 <__smakebuf_r+0x18>
 8009f36:	f023 0303 	bic.w	r3, r3, #3
 8009f3a:	f043 0302 	orr.w	r3, r3, #2
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	e7e2      	b.n	8009f08 <__smakebuf_r+0xc>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	6020      	str	r0, [r4, #0]
 8009f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	9b01      	ldr	r3, [sp, #4]
 8009f4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f52:	b15b      	cbz	r3, 8009f6c <__smakebuf_r+0x70>
 8009f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 f81d 	bl	8009f98 <_isatty_r>
 8009f5e:	b128      	cbz	r0, 8009f6c <__smakebuf_r+0x70>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f023 0303 	bic.w	r3, r3, #3
 8009f66:	f043 0301 	orr.w	r3, r3, #1
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	431d      	orrs	r5, r3
 8009f70:	81a5      	strh	r5, [r4, #12]
 8009f72:	e7cf      	b.n	8009f14 <__smakebuf_r+0x18>

08009f74 <_fstat_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d07      	ldr	r5, [pc, #28]	@ (8009f94 <_fstat_r+0x20>)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	4611      	mov	r1, r2
 8009f80:	602b      	str	r3, [r5, #0]
 8009f82:	f7f9 f8b3 	bl	80030ec <_fstat>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	d102      	bne.n	8009f90 <_fstat_r+0x1c>
 8009f8a:	682b      	ldr	r3, [r5, #0]
 8009f8c:	b103      	cbz	r3, 8009f90 <_fstat_r+0x1c>
 8009f8e:	6023      	str	r3, [r4, #0]
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	bf00      	nop
 8009f94:	2000399c 	.word	0x2000399c

08009f98 <_isatty_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d06      	ldr	r5, [pc, #24]	@ (8009fb4 <_isatty_r+0x1c>)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	f7f9 f8b2 	bl	800310c <_isatty>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_isatty_r+0x1a>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_isatty_r+0x1a>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	2000399c 	.word	0x2000399c

08009fb8 <_init>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	bf00      	nop
 8009fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fbe:	bc08      	pop	{r3}
 8009fc0:	469e      	mov	lr, r3
 8009fc2:	4770      	bx	lr

08009fc4 <_fini>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	bf00      	nop
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr
