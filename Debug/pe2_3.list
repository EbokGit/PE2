
pe2_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08009eb0  08009eb0  0000aeb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a65c  0800a65c  0000c1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a65c  0800a65c  0000b65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a664  0800a664  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a664  0800a664  0000b664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a668  0800a668  0000b668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800a66c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037bc  200001f0  0800a85c  0000c1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039ac  0800a85c  0000c9ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec47  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cc  00000000  00000000  0001ae67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abc  00000000  00000000  0001dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a82  00000000  00000000  0001e7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f06  00000000  00000000  0003522e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3cc  00000000  00000000  00046134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b20  00000000  00000000  000d0544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d5064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e98 	.word	0x08009e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009e98 	.word	0x08009e98

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <screen_render>:
 */

#ifndef INC_16X2_SCREEN_H_
#define INC_16X2_SCREEN_H_

void screen_render(uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7){
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4623      	mov	r3, r4
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	717b      	strb	r3, [r7, #5]
 8000c82:	4613      	mov	r3, r2
 8000c84:	713b      	strb	r3, [r7, #4]

		if (d4 == 1){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d105      	bne.n	8000c98 <screen_render+0x30>
			HAL_GPIO_WritePin(TXB_16x2_D4_GPIO_Port, TXB_16x2_D4_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	481b      	ldr	r0, [pc, #108]	@ (8000d00 <screen_render+0x98>)
 8000c92:	f002 ff31 	bl	8003af8 <HAL_GPIO_WritePin>
 8000c96:	e004      	b.n	8000ca2 <screen_render+0x3a>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D4_GPIO_Port, TXB_16x2_D4_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	4818      	ldr	r0, [pc, #96]	@ (8000d00 <screen_render+0x98>)
 8000c9e:	f002 ff2b 	bl	8003af8 <HAL_GPIO_WritePin>
		}

		if (d5 == 1){
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <screen_render+0x4c>
			HAL_GPIO_WritePin(TXB_16x2_D5_GPIO_Port, TXB_16x2_D5_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2140      	movs	r1, #64	@ 0x40
 8000cac:	4814      	ldr	r0, [pc, #80]	@ (8000d00 <screen_render+0x98>)
 8000cae:	f002 ff23 	bl	8003af8 <HAL_GPIO_WritePin>
 8000cb2:	e004      	b.n	8000cbe <screen_render+0x56>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D5_GPIO_Port, TXB_16x2_D5_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2140      	movs	r1, #64	@ 0x40
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <screen_render+0x98>)
 8000cba:	f002 ff1d 	bl	8003af8 <HAL_GPIO_WritePin>
		}

		if (d6 == 1){
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d105      	bne.n	8000cd0 <screen_render+0x68>
			HAL_GPIO_WritePin(TXB_16x2_D6_GPIO_Port, TXB_16x2_D6_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <screen_render+0x98>)
 8000cca:	f002 ff15 	bl	8003af8 <HAL_GPIO_WritePin>
 8000cce:	e004      	b.n	8000cda <screen_render+0x72>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D6_GPIO_Port, TXB_16x2_D6_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	480a      	ldr	r0, [pc, #40]	@ (8000d00 <screen_render+0x98>)
 8000cd6:	f002 ff0f 	bl	8003af8 <HAL_GPIO_WritePin>
		}

		if (d7 == 1){
 8000cda:	793b      	ldrb	r3, [r7, #4]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <screen_render+0x84>
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	4806      	ldr	r0, [pc, #24]	@ (8000d00 <screen_render+0x98>)
 8000ce6:	f002 ff07 	bl	8003af8 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_RESET);
		}

	}
 8000cea:	e004      	b.n	8000cf6 <screen_render+0x8e>
			HAL_GPIO_WritePin(TXB_16x2_D7_GPIO_Port, TXB_16x2_D7_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <screen_render+0x98>)
 8000cf2:	f002 ff01 	bl	8003af8 <HAL_GPIO_WritePin>
	}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	48000400 	.word	0x48000400

08000d04 <send_to_screen>:

	void send_to_screen(uint8_t data, uint8_t nob, uint8_t cod){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	4613      	mov	r3, r2
 8000d14:	717b      	strb	r3, [r7, #5]

		HAL_Delay(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f002 fa5a 	bl	80031d0 <HAL_Delay>

		if (cod == 'c'){ // c = command 		d = data
 8000d1c:	797b      	ldrb	r3, [r7, #5]
 8000d1e:	2b63      	cmp	r3, #99	@ 0x63
 8000d20:	d106      	bne.n	8000d30 <send_to_screen+0x2c>
			HAL_GPIO_WritePin(TXB_16x2_RS_GPIO_Port, TXB_16x2_RS_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d28:	484a      	ldr	r0, [pc, #296]	@ (8000e54 <send_to_screen+0x150>)
 8000d2a:	f002 fee5 	bl	8003af8 <HAL_GPIO_WritePin>
 8000d2e:	e005      	b.n	8000d3c <send_to_screen+0x38>
		}

		else{
			HAL_GPIO_WritePin(TXB_16x2_RS_GPIO_Port, TXB_16x2_RS_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d36:	4847      	ldr	r0, [pc, #284]	@ (8000e54 <send_to_screen+0x150>)
 8000d38:	f002 fede 	bl	8003af8 <HAL_GPIO_WritePin>
		}

		if (nob == 'b'){ // b = byte		n = nibble
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	2b62      	cmp	r3, #98	@ 0x62
 8000d40:	d141      	bne.n	8000dc6 <send_to_screen+0xc2>
			uint8_t d4 = (data >> 4) & 0x01; // Bit 0
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
			uint8_t d5 = (data >> 5) & 0x01; // Bit 1
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	095b      	lsrs	r3, r3, #5
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	73bb      	strb	r3, [r7, #14]
			uint8_t d6 = (data >> 6) & 0x01; // Bit 2
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	099b      	lsrs	r3, r3, #6
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	737b      	strb	r3, [r7, #13]
			uint8_t d7 = (data >> 7) & 0x01; // Bit 3
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	09db      	lsrs	r3, r3, #7
 8000d6a:	733b      	strb	r3, [r7, #12]

			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d72:	4838      	ldr	r0, [pc, #224]	@ (8000e54 <send_to_screen+0x150>)
 8000d74:	f002 fec0 	bl	8003af8 <HAL_GPIO_WritePin>
			screen_render(d4, d5, d6, d7);
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	7b7a      	ldrb	r2, [r7, #13]
 8000d7c:	7bb9      	ldrb	r1, [r7, #14]
 8000d7e:	7bf8      	ldrb	r0, [r7, #15]
 8000d80:	f7ff ff72 	bl	8000c68 <screen_render>
			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d8a:	4832      	ldr	r0, [pc, #200]	@ (8000e54 <send_to_screen+0x150>)
 8000d8c:	f002 feb4 	bl	8003af8 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f002 fa1d 	bl	80031d0 <HAL_Delay>
			screen_render(d4, d5, d6, d7);
 8000d96:	7b3b      	ldrb	r3, [r7, #12]
 8000d98:	7b7a      	ldrb	r2, [r7, #13]
 8000d9a:	7bb9      	ldrb	r1, [r7, #14]
 8000d9c:	7bf8      	ldrb	r0, [r7, #15]
 8000d9e:	f7ff ff63 	bl	8000c68 <screen_render>
			HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da8:	482a      	ldr	r0, [pc, #168]	@ (8000e54 <send_to_screen+0x150>)
 8000daa:	f002 fea5 	bl	8003af8 <HAL_GPIO_WritePin>
			screen_render(d4, d5, d6, d7);
 8000dae:	7b3b      	ldrb	r3, [r7, #12]
 8000db0:	7b7a      	ldrb	r2, [r7, #13]
 8000db2:	7bb9      	ldrb	r1, [r7, #14]
 8000db4:	7bf8      	ldrb	r0, [r7, #15]
 8000db6:	f7ff ff57 	bl	8000c68 <screen_render>
			screen_render(0, 0, 0, 0); // pins standaart 0
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff51 	bl	8000c68 <screen_render>
		}

		uint8_t d4 = (data >> 0) & 0x01; // Bit 0
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	72fb      	strb	r3, [r7, #11]
		uint8_t d5 = (data >> 1) & 0x01; // Bit 1
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	085b      	lsrs	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	72bb      	strb	r3, [r7, #10]
		uint8_t d6 = (data >> 2) & 0x01; // Bit 2
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	727b      	strb	r3, [r7, #9]
		uint8_t d7 = (data >> 3) & 0x01; // Bit 3
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	723b      	strb	r3, [r7, #8]

		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df8:	4816      	ldr	r0, [pc, #88]	@ (8000e54 <send_to_screen+0x150>)
 8000dfa:	f002 fe7d 	bl	8003af8 <HAL_GPIO_WritePin>
		screen_render(d4, d5, d6, d7);
 8000dfe:	7a3b      	ldrb	r3, [r7, #8]
 8000e00:	7a7a      	ldrb	r2, [r7, #9]
 8000e02:	7ab9      	ldrb	r1, [r7, #10]
 8000e04:	7af8      	ldrb	r0, [r7, #11]
 8000e06:	f7ff ff2f 	bl	8000c68 <screen_render>
		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e10:	4810      	ldr	r0, [pc, #64]	@ (8000e54 <send_to_screen+0x150>)
 8000e12:	f002 fe71 	bl	8003af8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f002 f9da 	bl	80031d0 <HAL_Delay>
		screen_render(d4, d5, d6, d7);
 8000e1c:	7a3b      	ldrb	r3, [r7, #8]
 8000e1e:	7a7a      	ldrb	r2, [r7, #9]
 8000e20:	7ab9      	ldrb	r1, [r7, #10]
 8000e22:	7af8      	ldrb	r0, [r7, #11]
 8000e24:	f7ff ff20 	bl	8000c68 <screen_render>
		HAL_GPIO_WritePin(TXB_16x2_E_GPIO_Port, TXB_16x2_E_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <send_to_screen+0x150>)
 8000e30:	f002 fe62 	bl	8003af8 <HAL_GPIO_WritePin>
		screen_render(d4, d5, d6, d7);
 8000e34:	7a3b      	ldrb	r3, [r7, #8]
 8000e36:	7a7a      	ldrb	r2, [r7, #9]
 8000e38:	7ab9      	ldrb	r1, [r7, #10]
 8000e3a:	7af8      	ldrb	r0, [r7, #11]
 8000e3c:	f7ff ff14 	bl	8000c68 <screen_render>
		screen_render(0, 0, 0, 0); // pins standaart 0
 8000e40:	2300      	movs	r3, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff ff0e 	bl	8000c68 <screen_render>
	}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	48000400 	.word	0x48000400

08000e58 <screen_start>:

	void screen_start(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

		send_to_screen(0b0011, 'n', 'c');
 8000e5c:	2263      	movs	r2, #99	@ 0x63
 8000e5e:	216e      	movs	r1, #110	@ 0x6e
 8000e60:	2003      	movs	r0, #3
 8000e62:	f7ff ff4f 	bl	8000d04 <send_to_screen>
		send_to_screen(0b0011, 'n', 'c');
 8000e66:	2263      	movs	r2, #99	@ 0x63
 8000e68:	216e      	movs	r1, #110	@ 0x6e
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f7ff ff4a 	bl	8000d04 <send_to_screen>
		send_to_screen(0b0011, 'n', 'c');
 8000e70:	2263      	movs	r2, #99	@ 0x63
 8000e72:	216e      	movs	r1, #110	@ 0x6e
 8000e74:	2003      	movs	r0, #3
 8000e76:	f7ff ff45 	bl	8000d04 <send_to_screen>
	}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <init_screen>:

	void init_screen(){
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0

		HAL_Delay(30); //wachten tot het scherm volledig is opgestart
 8000e82:	201e      	movs	r0, #30
 8000e84:	f002 f9a4 	bl	80031d0 <HAL_Delay>
		screen_start();
 8000e88:	f7ff ffe6 	bl	8000e58 <screen_start>
		send_to_screen(0b0010, 'n', 'c');		//4 bit modus
 8000e8c:	2263      	movs	r2, #99	@ 0x63
 8000e8e:	216e      	movs	r1, #110	@ 0x6e
 8000e90:	2002      	movs	r0, #2
 8000e92:	f7ff ff37 	bl	8000d04 <send_to_screen>
		send_to_screen(0b00101000, 'b', 'c');	//4 bit modus
 8000e96:	2263      	movs	r2, #99	@ 0x63
 8000e98:	2162      	movs	r1, #98	@ 0x62
 8000e9a:	2028      	movs	r0, #40	@ 0x28
 8000e9c:	f7ff ff32 	bl	8000d04 <send_to_screen>
		send_to_screen(0b00001111, 'b', 'c');	//display on
 8000ea0:	2263      	movs	r2, #99	@ 0x63
 8000ea2:	2162      	movs	r1, #98	@ 0x62
 8000ea4:	200f      	movs	r0, #15
 8000ea6:	f7ff ff2d 	bl	8000d04 <send_to_screen>
		send_to_screen(0b00000001, 'b', 'c');	//clear display
 8000eaa:	2263      	movs	r2, #99	@ 0x63
 8000eac:	2162      	movs	r1, #98	@ 0x62
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff28 	bl	8000d04 <send_to_screen>
		send_to_screen(0b00000110, 'b', 'c');	//entry mode
 8000eb4:	2263      	movs	r2, #99	@ 0x63
 8000eb6:	2162      	movs	r1, #98	@ 0x62
 8000eb8:	2006      	movs	r0, #6
 8000eba:	f7ff ff23 	bl	8000d04 <send_to_screen>
	}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <write_to_screen>:

	void write_to_screen(char* scherm){
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]

		uint8_t lengte = strlen(scherm);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff f9e0 	bl	8000290 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73bb      	strb	r3, [r7, #14]

		for (uint8_t i = 0; i < lengte; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e00b      	b.n	8000ef2 <write_to_screen+0x30>
				send_to_screen(scherm[i], 'b', 'd');
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2264      	movs	r2, #100	@ 0x64
 8000ee4:	2162      	movs	r1, #98	@ 0x62
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff0c 	bl	8000d04 <send_to_screen>
		for (uint8_t i = 0; i < lengte; i++) {
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3ef      	bcc.n	8000eda <write_to_screen+0x18>
		}
	}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <digit_to_screen>:

	void digit_to_screen(int32_t scherm) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	    char scherm_str[12];
	    int len;

	    len = snprintf(scherm_str, sizeof(scherm_str), "%ld", scherm);
 8000f0c:	f107 000c 	add.w	r0, r7, #12
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <digit_to_screen+0x58>)
 8000f14:	210c      	movs	r1, #12
 8000f16:	f006 fe79 	bl	8007c0c <sniprintf>
 8000f1a:	61b8      	str	r0, [r7, #24]
	    if (len < 0 || len >= sizeof(scherm_str)) {
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db17      	blt.n	8000f52 <digit_to_screen+0x4e>
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2b0b      	cmp	r3, #11
 8000f26:	d814      	bhi.n	8000f52 <digit_to_screen+0x4e>
	        return;
	    }

	    for (int i = 0; i < len; i++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	e00c      	b.n	8000f48 <digit_to_screen+0x44>
	        send_to_screen(scherm_str[i], 'b', 'd');
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2264      	movs	r2, #100	@ 0x64
 8000f3a:	2162      	movs	r1, #98	@ 0x62
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fee1 	bl	8000d04 <send_to_screen>
	    for (int i = 0; i < len; i++) {
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbee      	blt.n	8000f2e <digit_to_screen+0x2a>
 8000f50:	e000      	b.n	8000f54 <digit_to_screen+0x50>
	        return;
 8000f52:	bf00      	nop
	    }
	}
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08009eb0 	.word	0x08009eb0

08000f60 <float_to_screen>:

	void float_to_screen(float scherm) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	ed87 0a01 	vstr	s0, [r7, #4]
		char scherm_str[20];
		int len;

		len = snprintf(scherm_str, sizeof(scherm_str), "%.1f", scherm);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fafc 	bl	8000568 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	f107 000c 	add.w	r0, r7, #12
 8000f78:	e9cd 2300 	strd	r2, r3, [sp]
 8000f7c:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <float_to_screen+0x64>)
 8000f7e:	2114      	movs	r1, #20
 8000f80:	f006 fe44 	bl	8007c0c <sniprintf>
 8000f84:	6238      	str	r0, [r7, #32]
		if (len < 0 || len >= sizeof(scherm_str)) {
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db17      	blt.n	8000fbc <float_to_screen+0x5c>
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	2b13      	cmp	r3, #19
 8000f90:	d814      	bhi.n	8000fbc <float_to_screen+0x5c>
			return;
		}

		for (int i = 0; i < len; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f96:	e00c      	b.n	8000fb2 <float_to_screen+0x52>
			send_to_screen(scherm_str[i], 'b', 'd');
 8000f98:	f107 020c 	add.w	r2, r7, #12
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2264      	movs	r2, #100	@ 0x64
 8000fa4:	2162      	movs	r1, #98	@ 0x62
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff feac 	bl	8000d04 <send_to_screen>
		for (int i = 0; i < len; i++) {
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	3301      	adds	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dbee      	blt.n	8000f98 <float_to_screen+0x38>
 8000fba:	e000      	b.n	8000fbe <float_to_screen+0x5e>
			return;
 8000fbc:	bf00      	nop
		}
	}
 8000fbe:	3728      	adds	r7, #40	@ 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08009eb4 	.word	0x08009eb4

08000fc8 <cursor_pos>:

	void cursor_pos(uint8_t line, uint8_t pos) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
		uint8_t address;

		if (line == 1) {
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <cursor_pos+0x1e>
			address = 0x00 + (pos - 1); // Line 1 starts at 0x00
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e002      	b.n	8000fec <cursor_pos+0x24>
		}
		else{
			address = 0x40 + (pos - 1); // Line 2 starts at 0x40
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	333f      	adds	r3, #63	@ 0x3f
 8000fea:	73fb      	strb	r3, [r7, #15]
		}

		send_to_screen(0b10000000 | address, 'b', 'c');
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2263      	movs	r2, #99	@ 0x63
 8000ff6:	2162      	movs	r1, #98	@ 0x62
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe83 	bl	8000d04 <send_to_screen>

	}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <calculateCRC>:
UART_HandleTypeDef huart1;

volatile float rs485 = 0;

// Function to calculate CRC16 (Modbus RTU)
uint16_t calculateCRC(uint8_t *data, uint8_t length) {
 8001006:	b480      	push	{r7}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	70fb      	strb	r3, [r7, #3]

  uint16_t crc = 0xFFFF;
 8001012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001016:	81fb      	strh	r3, [r7, #14]

  for (uint8_t i = 0; i < length; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	737b      	strb	r3, [r7, #13]
 800101c:	e026      	b.n	800106c <calculateCRC+0x66>

	crc ^= data[i];
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	4053      	eors	r3, r2
 800102c:	81fb      	strh	r3, [r7, #14]

	for (uint8_t j = 0; j < 8; j++) {
 800102e:	2300      	movs	r3, #0
 8001030:	733b      	strb	r3, [r7, #12]
 8001032:	e015      	b.n	8001060 <calculateCRC+0x5a>

	  if (crc & 0x0001) {
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00a      	beq.n	8001054 <calculateCRC+0x4e>
		crc >>= 1;
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	81fb      	strh	r3, [r7, #14]
		crc ^= 0xA001;
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800104a:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 800104e:	43db      	mvns	r3, r3
 8001050:	81fb      	strh	r3, [r7, #14]
 8001052:	e002      	b.n	800105a <calculateCRC+0x54>
	  }
	  else {
		crc >>= 1;
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	81fb      	strh	r3, [r7, #14]
	for (uint8_t j = 0; j < 8; j++) {
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	733b      	strb	r3, [r7, #12]
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	2b07      	cmp	r3, #7
 8001064:	d9e6      	bls.n	8001034 <calculateCRC+0x2e>
  for (uint8_t i = 0; i < length; i++) {
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	3301      	adds	r3, #1
 800106a:	737b      	strb	r3, [r7, #13]
 800106c:	7b7a      	ldrb	r2, [r7, #13]
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3d4      	bcc.n	800101e <calculateCRC+0x18>
	  }

	}
  }
  return crc;
 8001074:	89fb      	ldrh	r3, [r7, #14]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <sendCommand>:


// Function to send Modbus RTU command
void sendCommand(uint8_t address, uint8_t functionCode, uint16_t startAddress, uint16_t numData) {
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	4604      	mov	r4, r0
 800108c:	4608      	mov	r0, r1
 800108e:	4611      	mov	r1, r2
 8001090:	461a      	mov	r2, r3
 8001092:	4623      	mov	r3, r4
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	4603      	mov	r3, r0
 8001098:	71bb      	strb	r3, [r7, #6]
 800109a:	460b      	mov	r3, r1
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	807b      	strh	r3, [r7, #2]

  uint8_t command[8];
  uint16_t crc;

  HAL_GPIO_WritePin(MAX3485_EN_GPIO_Port, MAX3485_EN_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ac:	f002 fd24 	bl	8003af8 <HAL_GPIO_WritePin>

  command[0] = address;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	733b      	strb	r3, [r7, #12]
  command[1] = functionCode;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	737b      	strb	r3, [r7, #13]
  command[2] = (startAddress >> 8) & 0xFF; // High byte of start address
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	73bb      	strb	r3, [r7, #14]
  command[3] = startAddress & 0xFF;        // Low byte of start address
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	73fb      	strb	r3, [r7, #15]
  command[4] = (numData >> 8) & 0xFF;     // High byte of number of data
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	743b      	strb	r3, [r7, #16]
  command[5] = numData & 0xFF;            // Low byte of number of data
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	747b      	strb	r3, [r7, #17]

  crc = calculateCRC(command, 6);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2106      	movs	r1, #6
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff91 	bl	8001006 <calculateCRC>
 80010e4:	4603      	mov	r3, r0
 80010e6:	82fb      	strh	r3, [r7, #22]
  command[6] = crc & 0xFF;        // Low byte of CRC
 80010e8:	8afb      	ldrh	r3, [r7, #22]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	74bb      	strb	r3, [r7, #18]
  command[7] = (crc >> 8) & 0xFF; // High byte of CRC
 80010ee:	8afb      	ldrh	r3, [r7, #22]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	74fb      	strb	r3, [r7, #19]

  HAL_UART_Transmit(&huart1, command, 8, HAL_MAX_DELAY);
 80010f8:	f107 010c 	add.w	r1, r7, #12
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	2208      	movs	r2, #8
 8001102:	4809      	ldr	r0, [pc, #36]	@ (8001128 <sendCommand+0xa4>)
 8001104:	f005 fbc8 	bl	8006898 <HAL_UART_Transmit>
  __HAL_UART_CLEAR_FLAG(&huart1,UART_CLEAR_OREF);
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <sendCommand+0xa4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2208      	movs	r2, #8
 800110e:	621a      	str	r2, [r3, #32]

  HAL_GPIO_WritePin(MAX3485_EN_GPIO_Port, MAX3485_EN_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f002 fced 	bl	8003af8 <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	bf00      	nop
 8001128:	2000020c 	.word	0x2000020c

0800112c <readResponse>:

void readResponse(uint16_t expectedBytes) {
 800112c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001130:	b087      	sub	sp, #28
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	466b      	mov	r3, sp
 800113a:	461e      	mov	r6, r3

	uint8_t data[expectedBytes];
 800113c:	88f9      	ldrh	r1, [r7, #6]
 800113e:	460b      	mov	r3, r1
 8001140:	3b01      	subs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	b28b      	uxth	r3, r1
 8001146:	2200      	movs	r2, #0
 8001148:	4698      	mov	r8, r3
 800114a:	4691      	mov	r9, r2
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001158:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001160:	b28b      	uxth	r3, r1
 8001162:	2200      	movs	r2, #0
 8001164:	461c      	mov	r4, r3
 8001166:	4615      	mov	r5, r2
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	460b      	mov	r3, r1
 800117a:	3307      	adds	r3, #7
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	ebad 0d03 	sub.w	sp, sp, r3
 8001184:	466b      	mov	r3, sp
 8001186:	3300      	adds	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]

	HAL_StatusTypeDef ret;
	ret = HAL_UART_Receive(&huart1, data, expectedBytes, 10);
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	230a      	movs	r3, #10
 800118e:	68f9      	ldr	r1, [r7, #12]
 8001190:	4826      	ldr	r0, [pc, #152]	@ (800122c <readResponse+0x100>)
 8001192:	f005 fc0a 	bl	80069aa <HAL_UART_Receive>
 8001196:	4603      	mov	r3, r0
 8001198:	72fb      	strb	r3, [r7, #11]

	if(ret == HAL_OK){
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d13f      	bne.n	8001220 <readResponse+0xf4>

		int16_t pressureRaw = 32767;
 80011a0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80011a4:	82fb      	strh	r3, [r7, #22]

		for(uint8_t t = 0; t <= expectedBytes; t++){
 80011a6:	2300      	movs	r3, #0
 80011a8:	757b      	strb	r3, [r7, #21]
 80011aa:	e021      	b.n	80011f0 <readResponse+0xc4>
			if(data[t] == 0x01 && data[t+1] == 0x03 && data[t+2] == 0x02){
 80011ac:	7d7b      	ldrb	r3, [r7, #21]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d119      	bne.n	80011ea <readResponse+0xbe>
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	3301      	adds	r3, #1
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d113      	bne.n	80011ea <readResponse+0xbe>
 80011c2:	7d7b      	ldrb	r3, [r7, #21]
 80011c4:	3302      	adds	r3, #2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d10d      	bne.n	80011ea <readResponse+0xbe>
				pressureRaw = (data[t+3] << 8) | data[t+4];
 80011ce:	7d7b      	ldrb	r3, [r7, #21]
 80011d0:	3303      	adds	r3, #3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7d7b      	ldrb	r3, [r7, #21]
 80011de:	3304      	adds	r3, #4
 80011e0:	68f9      	ldr	r1, [r7, #12]
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	82fb      	strh	r3, [r7, #22]
		for(uint8_t t = 0; t <= expectedBytes; t++){
 80011ea:	7d7b      	ldrb	r3, [r7, #21]
 80011ec:	3301      	adds	r3, #1
 80011ee:	757b      	strb	r3, [r7, #21]
 80011f0:	7d7b      	ldrb	r3, [r7, #21]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d2d8      	bcs.n	80011ac <readResponse+0x80>
			}
		}

		if(pressureRaw != 32767){
 80011fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001202:	4293      	cmp	r3, r2
 8001204:	d00c      	beq.n	8001220 <readResponse+0xf4>
			rs485 = (float)pressureRaw / 10.0f;
 8001206:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <readResponse+0x104>)
 800121c:	edc3 7a00 	vstr	s15, [r3]
 8001220:	46b5      	mov	sp, r6

		}

	}

}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800122c:	2000020c 	.word	0x2000020c
 8001230:	20000294 	.word	0x20000294
 8001234:	00000000 	.word	0x00000000

08001238 <ui>:

volatile uint8_t brightness = 10; //0-255

const char *form = "cy";

void ui(void){
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

	 switch(menu){
 800123e:	4bb6      	ldr	r3, [pc, #728]	@ (8001518 <ui+0x2e0>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	3b01      	subs	r3, #1
 8001244:	2b07      	cmp	r3, #7
 8001246:	f201 80b6 	bhi.w	80023b6 <ui+0x117e>
 800124a:	a201      	add	r2, pc, #4	@ (adr r2, 8001250 <ui+0x18>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	08001271 	.word	0x08001271
 8001254:	080013f5 	.word	0x080013f5
 8001258:	080014f5 	.word	0x080014f5
 800125c:	08001769 	.word	0x08001769
 8001260:	08001997 	.word	0x08001997
 8001264:	08001c17 	.word	0x08001c17
 8001268:	08001e6d 	.word	0x08001e6d
 800126c:	08002057 	.word	0x08002057
		case 1: //tutorial
			switch(page){
 8001270:	4baa      	ldr	r3, [pc, #680]	@ (800151c <ui+0x2e4>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3b01      	subs	r3, #1
 8001278:	2b07      	cmp	r3, #7
 800127a:	f200 80a8 	bhi.w	80013ce <ui+0x196>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <ui+0x4c>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012a5 	.word	0x080012a5
 8001288:	080012c3 	.word	0x080012c3
 800128c:	0800130b 	.word	0x0800130b
 8001290:	08001329 	.word	0x08001329
 8001294:	08001347 	.word	0x08001347
 8001298:	08001365 	.word	0x08001365
 800129c:	08001383 	.word	0x08001383
 80012a0:	080013b1 	.word	0x080013b1
				case 1:
					 cursor_pos(1, 1);
 80012a4:	2101      	movs	r1, #1
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fe8e 	bl	8000fc8 <cursor_pos>
					 write_to_screen("     Welkom!    ");
 80012ac:	489c      	ldr	r0, [pc, #624]	@ (8001520 <ui+0x2e8>)
 80012ae:	f7ff fe08 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80012b2:	2101      	movs	r1, #1
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff fe87 	bl	8000fc8 <cursor_pos>
					 write_to_screen("press o for next");
 80012ba:	489a      	ldr	r0, [pc, #616]	@ (8001524 <ui+0x2ec>)
 80012bc:	f7ff fe01 	bl	8000ec2 <write_to_screen>
				break;
 80012c0:	e096      	b.n	80013f0 <ui+0x1b8>
				case 2:
					 cursor_pos(1, 1);
 80012c2:	2101      	movs	r1, #1
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fe7f 	bl	8000fc8 <cursor_pos>
					 write_to_screen("    this is a   ");
 80012ca:	4897      	ldr	r0, [pc, #604]	@ (8001528 <ui+0x2f0>)
 80012cc:	f7ff fdf9 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80012d0:	2101      	movs	r1, #1
 80012d2:	2002      	movs	r0, #2
 80012d4:	f7ff fe78 	bl	8000fc8 <cursor_pos>
					 write_to_screen("    tutorial    ");
 80012d8:	4894      	ldr	r0, [pc, #592]	@ (800152c <ui+0x2f4>)
 80012da:	f7ff fdf2 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 80012de:	4b94      	ldr	r3, [pc, #592]	@ (8001530 <ui+0x2f8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f040 8082 	bne.w	80013ee <ui+0x1b6>
						 menu = 2;
 80012ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001518 <ui+0x2e0>)
 80012ec:	2202      	movs	r2, #2
 80012ee:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80012f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001530 <ui+0x2f8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80012f6:	4b8f      	ldr	r3, [pc, #572]	@ (8001534 <ui+0x2fc>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
						 page = 1;
 80012fc:	4b87      	ldr	r3, [pc, #540]	@ (800151c <ui+0x2e4>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001302:	4b8d      	ldr	r3, [pc, #564]	@ (8001538 <ui+0x300>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001308:	e071      	b.n	80013ee <ui+0x1b6>
				case 3:
					 cursor_pos(1, 1);
 800130a:	2101      	movs	r1, #1
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fe5b 	bl	8000fc8 <cursor_pos>
					 write_to_screen("   o is to go   ");
 8001312:	488a      	ldr	r0, [pc, #552]	@ (800153c <ui+0x304>)
 8001314:	f7ff fdd5 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001318:	2101      	movs	r1, #1
 800131a:	2002      	movs	r0, #2
 800131c:	f7ff fe54 	bl	8000fc8 <cursor_pos>
					 write_to_screen("to the next page");
 8001320:	4887      	ldr	r0, [pc, #540]	@ (8001540 <ui+0x308>)
 8001322:	f7ff fdce 	bl	8000ec2 <write_to_screen>
				break;
 8001326:	e063      	b.n	80013f0 <ui+0x1b8>
				case 4:
					 cursor_pos(1, 1);
 8001328:	2101      	movs	r1, #1
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fe4c 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" and x is to go ");
 8001330:	4884      	ldr	r0, [pc, #528]	@ (8001544 <ui+0x30c>)
 8001332:	f7ff fdc6 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001336:	2101      	movs	r1, #1
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff fe45 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" back a page    ");
 800133e:	4882      	ldr	r0, [pc, #520]	@ (8001548 <ui+0x310>)
 8001340:	f7ff fdbf 	bl	8000ec2 <write_to_screen>
				break;
 8001344:	e054      	b.n	80013f0 <ui+0x1b8>
				case 5:
					 cursor_pos(1, 1);
 8001346:	2101      	movs	r1, #1
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fe3d 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" ^ is to select ");
 800134e:	487f      	ldr	r0, [pc, #508]	@ (800154c <ui+0x314>)
 8001350:	f7ff fdb7 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001354:	2101      	movs	r1, #1
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff fe36 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  your choice   ");
 800135c:	487c      	ldr	r0, [pc, #496]	@ (8001550 <ui+0x318>)
 800135e:	f7ff fdb0 	bl	8000ec2 <write_to_screen>
				break;
 8001362:	e045      	b.n	80013f0 <ui+0x1b8>
				case 6:
					 cursor_pos(1, 1);
 8001364:	2101      	movs	r1, #1
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fe2e 	bl	8000fc8 <cursor_pos>
					 write_to_screen("and also to     ");
 800136c:	4879      	ldr	r0, [pc, #484]	@ (8001554 <ui+0x31c>)
 800136e:	f7ff fda8 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001372:	2101      	movs	r1, #1
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff fe27 	bl	8000fc8 <cursor_pos>
					 write_to_screen("increase a value");
 800137a:	4877      	ldr	r0, [pc, #476]	@ (8001558 <ui+0x320>)
 800137c:	f7ff fda1 	bl	8000ec2 <write_to_screen>
				break;
 8001380:	e036      	b.n	80013f0 <ui+0x1b8>
				case 7:
					 cursor_pos(1, 1);
 8001382:	2101      	movs	r1, #1
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff fe1f 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" ");
 800138a:	4874      	ldr	r0, [pc, #464]	@ (800155c <ui+0x324>)
 800138c:	f7ff fd99 	bl	8000ec2 <write_to_screen>
					 send_to_screen(0b11011011, 'b', 'd');
 8001390:	2264      	movs	r2, #100	@ 0x64
 8001392:	2162      	movs	r1, #98	@ 0x62
 8001394:	20db      	movs	r0, #219	@ 0xdb
 8001396:	f7ff fcb5 	bl	8000d04 <send_to_screen>
					 write_to_screen(" is used to    ");
 800139a:	4871      	ldr	r0, [pc, #452]	@ (8001560 <ui+0x328>)
 800139c:	f7ff fd91 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80013a0:	2101      	movs	r1, #1
 80013a2:	2002      	movs	r0, #2
 80013a4:	f7ff fe10 	bl	8000fc8 <cursor_pos>
					 write_to_screen("confirm a choice");
 80013a8:	486e      	ldr	r0, [pc, #440]	@ (8001564 <ui+0x32c>)
 80013aa:	f7ff fd8a 	bl	8000ec2 <write_to_screen>
				break;
 80013ae:	e01f      	b.n	80013f0 <ui+0x1b8>
				case 8:
					 cursor_pos(1, 1);
 80013b0:	2101      	movs	r1, #1
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fe08 	bl	8000fc8 <cursor_pos>
					 write_to_screen("and also to     ");
 80013b8:	4866      	ldr	r0, [pc, #408]	@ (8001554 <ui+0x31c>)
 80013ba:	f7ff fd82 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80013be:	2101      	movs	r1, #1
 80013c0:	2002      	movs	r0, #2
 80013c2:	f7ff fe01 	bl	8000fc8 <cursor_pos>
					 write_to_screen("decrease a value");
 80013c6:	4868      	ldr	r0, [pc, #416]	@ (8001568 <ui+0x330>)
 80013c8:	f7ff fd7b 	bl	8000ec2 <write_to_screen>
				break;
 80013cc:	e010      	b.n	80013f0 <ui+0x1b8>
				default:
					 menu = 2;
 80013ce:	4b52      	ldr	r3, [pc, #328]	@ (8001518 <ui+0x2e0>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
					 page = 1;
 80013d4:	4b51      	ldr	r3, [pc, #324]	@ (800151c <ui+0x2e4>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
					 conf = 0;
 80013da:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <ui+0x2f8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
					 select = 1;
 80013e0:	4b54      	ldr	r3, [pc, #336]	@ (8001534 <ui+0x2fc>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
					 update = 1;
 80013e6:	4b54      	ldr	r3, [pc, #336]	@ (8001538 <ui+0x300>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
				break;
 80013ec:	e000      	b.n	80013f0 <ui+0x1b8>
				break;
 80013ee:	bf00      	nop
			}
		break;
 80013f0:	f000 bfe5 	b.w	80023be <ui+0x1186>

		case 2: //menu selecter
			switch(page){
 80013f4:	4b49      	ldr	r3, [pc, #292]	@ (800151c <ui+0x2e4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d171      	bne.n	80014e2 <ui+0x2aa>
				case 1:
					 cursor_pos(1, 1);
 80013fe:	2101      	movs	r1, #1
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fde1 	bl	8000fc8 <cursor_pos>
					 write_to_screen("Setting Displays");
 8001406:	4859      	ldr	r0, [pc, #356]	@ (800156c <ui+0x334>)
 8001408:	f7ff fd5b 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 800140c:	2101      	movs	r1, #1
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff fdda 	bl	8000fc8 <cursor_pos>
					 write_to_screen("    Tutorial    ");
 8001414:	4856      	ldr	r0, [pc, #344]	@ (8001570 <ui+0x338>)
 8001416:	f7ff fd54 	bl	8000ec2 <write_to_screen>
					 switch(select){
 800141a:	4b46      	ldr	r3, [pc, #280]	@ (8001534 <ui+0x2fc>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d038      	beq.n	8001496 <ui+0x25e>
 8001424:	2b03      	cmp	r3, #3
 8001426:	dc4f      	bgt.n	80014c8 <ui+0x290>
 8001428:	2b01      	cmp	r3, #1
 800142a:	d002      	beq.n	8001432 <ui+0x1fa>
 800142c:	2b02      	cmp	r3, #2
 800142e:	d019      	beq.n	8001464 <ui+0x22c>
 8001430:	e04a      	b.n	80014c8 <ui+0x290>
						case 1:
							 cursor_pos(1, 1);
 8001432:	2101      	movs	r1, #1
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fdc7 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 800143a:	4b3d      	ldr	r3, [pc, #244]	@ (8001530 <ui+0x2f8>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d148      	bne.n	80014d6 <ui+0x29e>
								 menu = 3;
 8001444:	4b34      	ldr	r3, [pc, #208]	@ (8001518 <ui+0x2e0>)
 8001446:	2203      	movs	r2, #3
 8001448:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 800144a:	4b39      	ldr	r3, [pc, #228]	@ (8001530 <ui+0x2f8>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8001450:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <ui+0x2fc>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
								 page = 2;
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <ui+0x2e4>)
 8001458:	2202      	movs	r2, #2
 800145a:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800145c:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <ui+0x300>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
							 }
						break;
 8001462:	e038      	b.n	80014d6 <ui+0x29e>

						case 2:
							 cursor_pos(1, 9);
 8001464:	2109      	movs	r1, #9
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fdae 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 800146c:	4b30      	ldr	r3, [pc, #192]	@ (8001530 <ui+0x2f8>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d131      	bne.n	80014da <ui+0x2a2>
								 menu = 4;
 8001476:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <ui+0x2e0>)
 8001478:	2204      	movs	r2, #4
 800147a:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 800147c:	4b2c      	ldr	r3, [pc, #176]	@ (8001530 <ui+0x2f8>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <ui+0x2fc>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
								 page = 2;
 8001488:	4b24      	ldr	r3, [pc, #144]	@ (800151c <ui+0x2e4>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <ui+0x300>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
							 }
						break;
 8001494:	e021      	b.n	80014da <ui+0x2a2>

						case 3:
							 cursor_pos(2, 5);
 8001496:	2105      	movs	r1, #5
 8001498:	2002      	movs	r0, #2
 800149a:	f7ff fd95 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 800149e:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <ui+0x2f8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d11a      	bne.n	80014de <ui+0x2a6>
								 menu = 1;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <ui+0x2e0>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80014ae:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <ui+0x2f8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <ui+0x2fc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
								 page = 1;
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <ui+0x2e4>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <ui+0x300>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
							 }
						break;
 80014c6:	e00a      	b.n	80014de <ui+0x2a6>

						default:
							select = 1;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <ui+0x2fc>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
							update = 1;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <ui+0x300>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
						break;
 80014d4:	e004      	b.n	80014e0 <ui+0x2a8>
						break;
 80014d6:	bf00      	nop
 80014d8:	e00a      	b.n	80014f0 <ui+0x2b8>
						break;
 80014da:	bf00      	nop
 80014dc:	e008      	b.n	80014f0 <ui+0x2b8>
						break;
 80014de:	bf00      	nop
					}
				break;
 80014e0:	e006      	b.n	80014f0 <ui+0x2b8>

				default:
					page = 1;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <ui+0x2e4>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
					update = 1;
 80014e8:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <ui+0x300>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
				break;
 80014ee:	bf00      	nop
			}
		break;
 80014f0:	f000 bf65 	b.w	80023be <ui+0x1186>

		case 3: //settings selector
			switch(page){
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <ui+0x2e4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	f200 8126 	bhi.w	800174e <ui+0x516>
 8001502:	a201      	add	r2, pc, #4	@ (adr r2, 8001508 <ui+0x2d0>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001575 	.word	0x08001575
 800150c:	080015bd 	.word	0x080015bd
 8001510:	08001663 	.word	0x08001663
 8001514:	08001709 	.word	0x08001709
 8001518:	20000001 	.word	0x20000001
 800151c:	20000000 	.word	0x20000000
 8001520:	08009ec0 	.word	0x08009ec0
 8001524:	08009ed4 	.word	0x08009ed4
 8001528:	08009ee8 	.word	0x08009ee8
 800152c:	08009efc 	.word	0x08009efc
 8001530:	20000298 	.word	0x20000298
 8001534:	20000002 	.word	0x20000002
 8001538:	20000299 	.word	0x20000299
 800153c:	08009f10 	.word	0x08009f10
 8001540:	08009f24 	.word	0x08009f24
 8001544:	08009f38 	.word	0x08009f38
 8001548:	08009f4c 	.word	0x08009f4c
 800154c:	08009f60 	.word	0x08009f60
 8001550:	08009f74 	.word	0x08009f74
 8001554:	08009f88 	.word	0x08009f88
 8001558:	08009f9c 	.word	0x08009f9c
 800155c:	08009fb0 	.word	0x08009fb0
 8001560:	08009fb4 	.word	0x08009fb4
 8001564:	08009fc4 	.word	0x08009fc4
 8001568:	08009fd8 	.word	0x08009fd8
 800156c:	08009fec 	.word	0x08009fec
 8001570:	0800a000 	.word	0x0800a000

				case 1:
					cursor_pos(1, 1);
 8001574:	2101      	movs	r1, #1
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff fd26 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 800157c:	48a3      	ldr	r0, [pc, #652]	@ (800180c <ui+0x5d4>)
 800157e:	f7ff fca0 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001582:	2101      	movs	r1, #1
 8001584:	2002      	movs	r0, #2
 8001586:	f7ff fd1f 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" menu selector  ");
 800158a:	48a1      	ldr	r0, [pc, #644]	@ (8001810 <ui+0x5d8>)
 800158c:	f7ff fc99 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001590:	4ba0      	ldr	r3, [pc, #640]	@ (8001814 <ui+0x5dc>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b01      	cmp	r3, #1
 8001598:	f040 80e0 	bne.w	800175c <ui+0x524>
						 menu = 2;
 800159c:	4b9e      	ldr	r3, [pc, #632]	@ (8001818 <ui+0x5e0>)
 800159e:	2202      	movs	r2, #2
 80015a0:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80015a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001814 <ui+0x5dc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80015a8:	4b9c      	ldr	r3, [pc, #624]	@ (800181c <ui+0x5e4>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
						 page = 1;
 80015ae:	4b9c      	ldr	r3, [pc, #624]	@ (8001820 <ui+0x5e8>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80015b4:	4b9b      	ldr	r3, [pc, #620]	@ (8001824 <ui+0x5ec>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
					 }
				break;
 80015ba:	e0cf      	b.n	800175c <ui+0x524>

				case 2:
					cursor_pos(1, 1);
 80015bc:	2101      	movs	r1, #1
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fd02 	bl	8000fc8 <cursor_pos>
					write_to_screen("  Min/Max Well  ");
 80015c4:	4898      	ldr	r0, [pc, #608]	@ (8001828 <ui+0x5f0>)
 80015c6:	f7ff fc7c 	bl	8000ec2 <write_to_screen>
					cursor_pos(2, 1);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2002      	movs	r0, #2
 80015ce:	f7ff fcfb 	bl	8000fc8 <cursor_pos>
					write_to_screen("  Min/Max Limit ");
 80015d2:	4896      	ldr	r0, [pc, #600]	@ (800182c <ui+0x5f4>)
 80015d4:	f7ff fc75 	bl	8000ec2 <write_to_screen>
					switch(select){
 80015d8:	4b90      	ldr	r3, [pc, #576]	@ (800181c <ui+0x5e4>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <ui+0x3b0>
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d019      	beq.n	800161a <ui+0x3e2>
 80015e6:	e031      	b.n	800164c <ui+0x414>
						case 1:
							 cursor_pos(1, 3);
 80015e8:	2103      	movs	r1, #3
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fcec 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 80015f0:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <ui+0x5dc>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d12f      	bne.n	800165a <ui+0x422>
								 menu = 5;
 80015fa:	4b87      	ldr	r3, [pc, #540]	@ (8001818 <ui+0x5e0>)
 80015fc:	2205      	movs	r2, #5
 80015fe:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8001600:	4b84      	ldr	r3, [pc, #528]	@ (8001814 <ui+0x5dc>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8001606:	4b85      	ldr	r3, [pc, #532]	@ (800181c <ui+0x5e4>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
								 page = 2;
 800160c:	4b84      	ldr	r3, [pc, #528]	@ (8001820 <ui+0x5e8>)
 800160e:	2202      	movs	r2, #2
 8001610:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8001612:	4b84      	ldr	r3, [pc, #528]	@ (8001824 <ui+0x5ec>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
							 }
						break;
 8001618:	e01f      	b.n	800165a <ui+0x422>

						case 2:
							 cursor_pos(2, 3);
 800161a:	2103      	movs	r1, #3
 800161c:	2002      	movs	r0, #2
 800161e:	f7ff fcd3 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 8001622:	4b7c      	ldr	r3, [pc, #496]	@ (8001814 <ui+0x5dc>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d118      	bne.n	800165e <ui+0x426>
								 menu = 6;
 800162c:	4b7a      	ldr	r3, [pc, #488]	@ (8001818 <ui+0x5e0>)
 800162e:	2206      	movs	r2, #6
 8001630:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 8001632:	4b78      	ldr	r3, [pc, #480]	@ (8001814 <ui+0x5dc>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8001638:	4b78      	ldr	r3, [pc, #480]	@ (800181c <ui+0x5e4>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
								 page = 2;
 800163e:	4b78      	ldr	r3, [pc, #480]	@ (8001820 <ui+0x5e8>)
 8001640:	2202      	movs	r2, #2
 8001642:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8001644:	4b77      	ldr	r3, [pc, #476]	@ (8001824 <ui+0x5ec>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
						 }
							 break;
 800164a:	e008      	b.n	800165e <ui+0x426>

						default:
							select = 1;
 800164c:	4b73      	ldr	r3, [pc, #460]	@ (800181c <ui+0x5e4>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
							update = 1;
 8001652:	4b74      	ldr	r3, [pc, #464]	@ (8001824 <ui+0x5ec>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
						break;
 8001658:	e002      	b.n	8001660 <ui+0x428>
						break;
 800165a:	bf00      	nop
 800165c:	e082      	b.n	8001764 <ui+0x52c>
							 break;
 800165e:	bf00      	nop
				}
				break;
 8001660:	e080      	b.n	8001764 <ui+0x52c>

				case 3:
					cursor_pos(1, 1);
 8001662:	2101      	movs	r1, #1
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff fcaf 	bl	8000fc8 <cursor_pos>
					write_to_screen(" Well form      ");
 800166a:	4871      	ldr	r0, [pc, #452]	@ (8001830 <ui+0x5f8>)
 800166c:	f7ff fc29 	bl	8000ec2 <write_to_screen>
					cursor_pos(2, 1);
 8001670:	2101      	movs	r1, #1
 8001672:	2002      	movs	r0, #2
 8001674:	f7ff fca8 	bl	8000fc8 <cursor_pos>
					write_to_screen(" Well dimensions");
 8001678:	486e      	ldr	r0, [pc, #440]	@ (8001834 <ui+0x5fc>)
 800167a:	f7ff fc22 	bl	8000ec2 <write_to_screen>
					switch(select){
 800167e:	4b67      	ldr	r3, [pc, #412]	@ (800181c <ui+0x5e4>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d002      	beq.n	800168e <ui+0x456>
 8001688:	2b02      	cmp	r3, #2
 800168a:	d019      	beq.n	80016c0 <ui+0x488>
 800168c:	e031      	b.n	80016f2 <ui+0x4ba>
						case 1:
							 cursor_pos(1, 2);
 800168e:	2102      	movs	r1, #2
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fc99 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 8001696:	4b5f      	ldr	r3, [pc, #380]	@ (8001814 <ui+0x5dc>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d12f      	bne.n	8001700 <ui+0x4c8>
								 menu = 7;
 80016a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <ui+0x5e0>)
 80016a2:	2207      	movs	r2, #7
 80016a4:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80016a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <ui+0x5dc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80016ac:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <ui+0x5e4>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
								 page = 2;
 80016b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <ui+0x5e8>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80016b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <ui+0x5ec>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
							 }
						break;
 80016be:	e01f      	b.n	8001700 <ui+0x4c8>

						case 2:
							 cursor_pos(2, 2);
 80016c0:	2102      	movs	r1, #2
 80016c2:	2002      	movs	r0, #2
 80016c4:	f7ff fc80 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 80016c8:	4b52      	ldr	r3, [pc, #328]	@ (8001814 <ui+0x5dc>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d118      	bne.n	8001704 <ui+0x4cc>
								 menu = 8;
 80016d2:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <ui+0x5e0>)
 80016d4:	2208      	movs	r2, #8
 80016d6:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80016d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001814 <ui+0x5dc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80016de:	4b4f      	ldr	r3, [pc, #316]	@ (800181c <ui+0x5e4>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
								 page = 2;
 80016e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001820 <ui+0x5e8>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80016ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001824 <ui+0x5ec>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
						 }
							 break;
 80016f0:	e008      	b.n	8001704 <ui+0x4cc>

						default:
							select = 1;
 80016f2:	4b4a      	ldr	r3, [pc, #296]	@ (800181c <ui+0x5e4>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
							update = 1;
 80016f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001824 <ui+0x5ec>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
						break;
 80016fe:	e002      	b.n	8001706 <ui+0x4ce>
						break;
 8001700:	bf00      	nop
 8001702:	e02f      	b.n	8001764 <ui+0x52c>
							 break;
 8001704:	bf00      	nop
				}
				break;
 8001706:	e02d      	b.n	8001764 <ui+0x52c>

				case 4:
					cursor_pos(1, 1);
 8001708:	2101      	movs	r1, #1
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff fc5c 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001710:	483e      	ldr	r0, [pc, #248]	@ (800180c <ui+0x5d4>)
 8001712:	f7ff fbd6 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001716:	2101      	movs	r1, #1
 8001718:	2002      	movs	r0, #2
 800171a:	f7ff fc55 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" menu selector  ");
 800171e:	483c      	ldr	r0, [pc, #240]	@ (8001810 <ui+0x5d8>)
 8001720:	f7ff fbcf 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001724:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <ui+0x5dc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d119      	bne.n	8001762 <ui+0x52a>
						 menu = 2;
 800172e:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <ui+0x5e0>)
 8001730:	2202      	movs	r2, #2
 8001732:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001734:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <ui+0x5dc>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
						 select = 1;
 800173a:	4b38      	ldr	r3, [pc, #224]	@ (800181c <ui+0x5e4>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
						 page = 1;
 8001740:	4b37      	ldr	r3, [pc, #220]	@ (8001820 <ui+0x5e8>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001746:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <ui+0x5ec>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
					 }
				break;
 800174c:	e009      	b.n	8001762 <ui+0x52a>

				default:
					page = 2;
 800174e:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <ui+0x5e8>)
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
					update = 1;
 8001754:	4b33      	ldr	r3, [pc, #204]	@ (8001824 <ui+0x5ec>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
				break;
 800175a:	e003      	b.n	8001764 <ui+0x52c>
				break;
 800175c:	bf00      	nop
 800175e:	f000 be2e 	b.w	80023be <ui+0x1186>
				break;
 8001762:	bf00      	nop
			}
		break;
 8001764:	f000 be2b 	b.w	80023be <ui+0x1186>

		case 4: //displays
			switch(page){
 8001768:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <ui+0x5e8>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3b01      	subs	r3, #1
 8001770:	2b03      	cmp	r3, #3
 8001772:	f200 8103 	bhi.w	800197c <ui+0x744>
 8001776:	a201      	add	r2, pc, #4	@ (adr r2, 800177c <ui+0x544>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	0800178d 	.word	0x0800178d
 8001780:	080017d5 	.word	0x080017d5
 8001784:	08001849 	.word	0x08001849
 8001788:	08001937 	.word	0x08001937

				case 1:
					cursor_pos(1, 1);
 800178c:	2101      	movs	r1, #1
 800178e:	2001      	movs	r0, #1
 8001790:	f7ff fc1a 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001794:	481d      	ldr	r0, [pc, #116]	@ (800180c <ui+0x5d4>)
 8001796:	f7ff fb94 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 800179a:	2101      	movs	r1, #1
 800179c:	2002      	movs	r0, #2
 800179e:	f7ff fc13 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" menu selector  ");
 80017a2:	481b      	ldr	r0, [pc, #108]	@ (8001810 <ui+0x5d8>)
 80017a4:	f7ff fb8d 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <ui+0x5dc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	f040 80eb 	bne.w	800198a <ui+0x752>
						 menu = 2;
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <ui+0x5e0>)
 80017b6:	2202      	movs	r2, #2
 80017b8:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <ui+0x5dc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <ui+0x5e4>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
						 page = 1;
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <ui+0x5e8>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
						 update = 1;
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <ui+0x5ec>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
					 }
				break;
 80017d2:	e0da      	b.n	800198a <ui+0x752>

				case 2:

					 cursor_pos(1, 1);
 80017d4:	2101      	movs	r1, #1
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff fbf6 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  water level   ");
 80017dc:	4816      	ldr	r0, [pc, #88]	@ (8001838 <ui+0x600>)
 80017de:	f7ff fb70 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f7ff fbef 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  ");
 80017ea:	4814      	ldr	r0, [pc, #80]	@ (800183c <ui+0x604>)
 80017ec:	f7ff fb69 	bl	8000ec2 <write_to_screen>
					 float_to_screen(rs485);
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <ui+0x608>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	f7ff fbb1 	bl	8000f60 <float_to_screen>
					 write_to_screen(" cm             ");
 80017fe:	4811      	ldr	r0, [pc, #68]	@ (8001844 <ui+0x60c>)
 8001800:	f7ff fb5f 	bl	8000ec2 <write_to_screen>
					 update = 1;
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <ui+0x5ec>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
				break;
 800180a:	e0c2      	b.n	8001992 <ui+0x75a>
 800180c:	0800a014 	.word	0x0800a014
 8001810:	0800a028 	.word	0x0800a028
 8001814:	20000298 	.word	0x20000298
 8001818:	20000001 	.word	0x20000001
 800181c:	20000002 	.word	0x20000002
 8001820:	20000000 	.word	0x20000000
 8001824:	20000299 	.word	0x20000299
 8001828:	0800a03c 	.word	0x0800a03c
 800182c:	0800a050 	.word	0x0800a050
 8001830:	0800a064 	.word	0x0800a064
 8001834:	0800a078 	.word	0x0800a078
 8001838:	0800a08c 	.word	0x0800a08c
 800183c:	0800a0a0 	.word	0x0800a0a0
 8001840:	20000294 	.word	0x20000294
 8001844:	0800a0a4 	.word	0x0800a0a4

				case 3:

					float volume = 0;
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	607b      	str	r3, [r7, #4]

					if(strcmp(form, "cy") == 0){
 800184e:	4ba0      	ldr	r3, [pc, #640]	@ (8001ad0 <ui+0x898>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	49a0      	ldr	r1, [pc, #640]	@ (8001ad4 <ui+0x89c>)
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fcbb 	bl	80001d0 <strcmp>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d139      	bne.n	80018d4 <ui+0x69c>
						volume = ((diameter/2) * (diameter/2) * 3.14159 * rs485) / 1000.0f;
 8001860:	4b9d      	ldr	r3, [pc, #628]	@ (8001ad8 <ui+0x8a0>)
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800186a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800186e:	4b9a      	ldr	r3, [pc, #616]	@ (8001ad8 <ui+0x8a0>)
 8001870:	edd3 6a00 	vldr	s13, [r3]
 8001874:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001878:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001880:	ee17 0a90 	vmov	r0, s15
 8001884:	f7fe fe70 	bl	8000568 <__aeabi_f2d>
 8001888:	a38f      	add	r3, pc, #572	@ (adr r3, 8001ac8 <ui+0x890>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7fe fec3 	bl	8000618 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4614      	mov	r4, r2
 8001898:	461d      	mov	r5, r3
 800189a:	4b90      	ldr	r3, [pc, #576]	@ (8001adc <ui+0x8a4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe62 	bl	8000568 <__aeabi_f2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe feb4 	bl	8000618 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b88      	ldr	r3, [pc, #544]	@ (8001ae0 <ui+0x8a8>)
 80018be:	f7fe ffd5 	bl	800086c <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f97d 	bl	8000bc8 <__aeabi_d2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	e017      	b.n	8001904 <ui+0x6cc>
					}
					else{
						volume = (X * Y * rs485) / 1000.0f;
 80018d4:	4b83      	ldr	r3, [pc, #524]	@ (8001ae4 <ui+0x8ac>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	4b82      	ldr	r3, [pc, #520]	@ (8001ae8 <ui+0x8b0>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ee:	4b7b      	ldr	r3, [pc, #492]	@ (8001adc <ui+0x8a4>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f8:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8001aec <ui+0x8b4>
 80018fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001900:	edc7 7a01 	vstr	s15, [r7, #4]
					}

					 cursor_pos(1, 1);
 8001904:	2101      	movs	r1, #1
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff fb5e 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  water volume  ");
 800190c:	4878      	ldr	r0, [pc, #480]	@ (8001af0 <ui+0x8b8>)
 800190e:	f7ff fad8 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001912:	2101      	movs	r1, #1
 8001914:	2002      	movs	r0, #2
 8001916:	f7ff fb57 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  ");
 800191a:	4876      	ldr	r0, [pc, #472]	@ (8001af4 <ui+0x8bc>)
 800191c:	f7ff fad1 	bl	8000ec2 <write_to_screen>
					 float_to_screen(volume);
 8001920:	ed97 0a01 	vldr	s0, [r7, #4]
 8001924:	f7ff fb1c 	bl	8000f60 <float_to_screen>
					 write_to_screen(" L              ");
 8001928:	4873      	ldr	r0, [pc, #460]	@ (8001af8 <ui+0x8c0>)
 800192a:	f7ff faca 	bl	8000ec2 <write_to_screen>
					 update = 1;
 800192e:	4b73      	ldr	r3, [pc, #460]	@ (8001afc <ui+0x8c4>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
				break;
 8001934:	e02d      	b.n	8001992 <ui+0x75a>

				case 4:
					cursor_pos(1, 1);
 8001936:	2101      	movs	r1, #1
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff fb45 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 800193e:	4870      	ldr	r0, [pc, #448]	@ (8001b00 <ui+0x8c8>)
 8001940:	f7ff fabf 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001944:	2101      	movs	r1, #1
 8001946:	2002      	movs	r0, #2
 8001948:	f7ff fb3e 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" menu selector  ");
 800194c:	486d      	ldr	r0, [pc, #436]	@ (8001b04 <ui+0x8cc>)
 800194e:	f7ff fab8 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001952:	4b6d      	ldr	r3, [pc, #436]	@ (8001b08 <ui+0x8d0>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d119      	bne.n	8001990 <ui+0x758>
						 menu = 2;
 800195c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b0c <ui+0x8d4>)
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001962:	4b69      	ldr	r3, [pc, #420]	@ (8001b08 <ui+0x8d0>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001968:	4b69      	ldr	r3, [pc, #420]	@ (8001b10 <ui+0x8d8>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
						 page = 1;
 800196e:	4b69      	ldr	r3, [pc, #420]	@ (8001b14 <ui+0x8dc>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001974:	4b61      	ldr	r3, [pc, #388]	@ (8001afc <ui+0x8c4>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
					 }
				break;
 800197a:	e009      	b.n	8001990 <ui+0x758>

				default:
					page = 2;
 800197c:	4b65      	ldr	r3, [pc, #404]	@ (8001b14 <ui+0x8dc>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
					update = 1;
 8001982:	4b5e      	ldr	r3, [pc, #376]	@ (8001afc <ui+0x8c4>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
				break;
 8001988:	e003      	b.n	8001992 <ui+0x75a>
				break;
 800198a:	bf00      	nop
 800198c:	f000 bd17 	b.w	80023be <ui+0x1186>
				break;
 8001990:	bf00      	nop
			}
		break;
 8001992:	f000 bd14 	b.w	80023be <ui+0x1186>

		case 5: //well level
			switch(page){
 8001996:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <ui+0x8dc>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	3b01      	subs	r3, #1
 800199e:	2b05      	cmp	r3, #5
 80019a0:	f200 812a 	bhi.w	8001bf8 <ui+0x9c0>
 80019a4:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <ui+0x774>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019c5 	.word	0x080019c5
 80019b0:	08001a0d 	.word	0x08001a0d
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a49 	.word	0x08001a49
 80019bc:	08001b39 	.word	0x08001b39
 80019c0:	08001bb3 	.word	0x08001bb3

				case 1:
					cursor_pos(1, 1);
 80019c4:	2101      	movs	r1, #1
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff fafe 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 80019cc:	484c      	ldr	r0, [pc, #304]	@ (8001b00 <ui+0x8c8>)
 80019ce:	f7ff fa78 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 80019d2:	2101      	movs	r1, #1
 80019d4:	2002      	movs	r0, #2
 80019d6:	f7ff faf7 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 80019da:	484f      	ldr	r0, [pc, #316]	@ (8001b18 <ui+0x8e0>)
 80019dc:	f7ff fa71 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 80019e0:	4b49      	ldr	r3, [pc, #292]	@ (8001b08 <ui+0x8d0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	f040 810d 	bne.w	8001c06 <ui+0x9ce>
						 menu = 3;
 80019ec:	4b47      	ldr	r3, [pc, #284]	@ (8001b0c <ui+0x8d4>)
 80019ee:	2203      	movs	r2, #3
 80019f0:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 80019f2:	4b45      	ldr	r3, [pc, #276]	@ (8001b08 <ui+0x8d0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
						 select = 1;
 80019f8:	4b45      	ldr	r3, [pc, #276]	@ (8001b10 <ui+0x8d8>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
						 page = 2;
 80019fe:	4b45      	ldr	r3, [pc, #276]	@ (8001b14 <ui+0x8dc>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001a04:	4b3d      	ldr	r3, [pc, #244]	@ (8001afc <ui+0x8c4>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001a0a:	e0fc      	b.n	8001c06 <ui+0x9ce>

				case 2:
					cursor_pos(1, 1);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7ff fada 	bl	8000fc8 <cursor_pos>
					 write_to_screen("Here you set the");
 8001a14:	4841      	ldr	r0, [pc, #260]	@ (8001b1c <ui+0x8e4>)
 8001a16:	f7ff fa54 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7ff fad3 	bl	8000fc8 <cursor_pos>
					 write_to_screen("max and min    >");
 8001a22:	483f      	ldr	r0, [pc, #252]	@ (8001b20 <ui+0x8e8>)
 8001a24:	f7ff fa4d 	bl	8000ec2 <write_to_screen>
				break;
 8001a28:	e0f4      	b.n	8001c14 <ui+0x9dc>

				case 3:
					cursor_pos(1, 1);
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff facb 	bl	8000fc8 <cursor_pos>
					 write_to_screen("  of the well.  ");
 8001a32:	483c      	ldr	r0, [pc, #240]	@ (8001b24 <ui+0x8ec>)
 8001a34:	f7ff fa45 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f7ff fac4 	bl	8000fc8 <cursor_pos>
					 write_to_screen("                ");
 8001a40:	4839      	ldr	r0, [pc, #228]	@ (8001b28 <ui+0x8f0>)
 8001a42:	f7ff fa3e 	bl	8000ec2 <write_to_screen>
				break;
 8001a46:	e0e5      	b.n	8001c14 <ui+0x9dc>

				case 4:
					cursor_pos(1, 1);
 8001a48:	2101      	movs	r1, #1
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7ff fabc 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Max level well ");
 8001a50:	4836      	ldr	r0, [pc, #216]	@ (8001b2c <ui+0x8f4>)
 8001a52:	f7ff fa36 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001a56:	2101      	movs	r1, #1
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7ff fab5 	bl	8000fc8 <cursor_pos>
					 digit_to_screen(max_well_level);
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <ui+0x8f8>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fa4d 	bl	8000f04 <digit_to_screen>
					 write_to_screen(" cm             ");
 8001a6a:	4832      	ldr	r0, [pc, #200]	@ (8001b34 <ui+0x8fc>)
 8001a6c:	f7ff fa29 	bl	8000ec2 <write_to_screen>
					 if(select >= 2){
 8001a70:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <ui+0x8d8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d90e      	bls.n	8001a98 <ui+0x860>
						 max_well_level++;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <ui+0x8f8>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <ui+0x8f8>)
 8001a8a:	801a      	strh	r2, [r3, #0]
						 select = 1;
 8001a8c:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <ui+0x8d8>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <ui+0x8c4>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8001a98:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <ui+0x8d0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f040 80b3 	bne.w	8001c0a <ui+0x9d2>
						 max_well_level--;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <ui+0x8f8>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <ui+0x8f8>)
 8001ab4:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <ui+0x8d0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <ui+0x8c4>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001ac2:	e0a2      	b.n	8001c0a <ui+0x9d2>
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	f01b866e 	.word	0xf01b866e
 8001acc:	400921f9 	.word	0x400921f9
 8001ad0:	20000018 	.word	0x20000018
 8001ad4:	08009ebc 	.word	0x08009ebc
 8001ad8:	2000000c 	.word	0x2000000c
 8001adc:	20000294 	.word	0x20000294
 8001ae0:	408f4000 	.word	0x408f4000
 8001ae4:	20000010 	.word	0x20000010
 8001ae8:	20000012 	.word	0x20000012
 8001aec:	447a0000 	.word	0x447a0000
 8001af0:	0800a0b8 	.word	0x0800a0b8
 8001af4:	0800a0a0 	.word	0x0800a0a0
 8001af8:	0800a0cc 	.word	0x0800a0cc
 8001afc:	20000299 	.word	0x20000299
 8001b00:	0800a014 	.word	0x0800a014
 8001b04:	0800a028 	.word	0x0800a028
 8001b08:	20000298 	.word	0x20000298
 8001b0c:	20000001 	.word	0x20000001
 8001b10:	20000002 	.word	0x20000002
 8001b14:	20000000 	.word	0x20000000
 8001b18:	0800a0e0 	.word	0x0800a0e0
 8001b1c:	0800a0f4 	.word	0x0800a0f4
 8001b20:	0800a108 	.word	0x0800a108
 8001b24:	0800a11c 	.word	0x0800a11c
 8001b28:	0800a130 	.word	0x0800a130
 8001b2c:	0800a144 	.word	0x0800a144
 8001b30:	20000004 	.word	0x20000004
 8001b34:	0800a0a4 	.word	0x0800a0a4

				case 5:
					cursor_pos(1, 1);
 8001b38:	2101      	movs	r1, #1
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fa44 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Min level well ");
 8001b40:	489f      	ldr	r0, [pc, #636]	@ (8001dc0 <ui+0xb88>)
 8001b42:	f7ff f9be 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001b46:	2101      	movs	r1, #1
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f7ff fa3d 	bl	8000fc8 <cursor_pos>
					 digit_to_screen(min_well_level);
 8001b4e:	4b9d      	ldr	r3, [pc, #628]	@ (8001dc4 <ui+0xb8c>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f9d5 	bl	8000f04 <digit_to_screen>
					 write_to_screen(" cm             ");
 8001b5a:	489b      	ldr	r0, [pc, #620]	@ (8001dc8 <ui+0xb90>)
 8001b5c:	f7ff f9b1 	bl	8000ec2 <write_to_screen>
					 if(select >= 2){
 8001b60:	4b9a      	ldr	r3, [pc, #616]	@ (8001dcc <ui+0xb94>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d90e      	bls.n	8001b88 <ui+0x950>
						 min_well_level++;
 8001b6a:	4b96      	ldr	r3, [pc, #600]	@ (8001dc4 <ui+0xb8c>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b92      	ldr	r3, [pc, #584]	@ (8001dc4 <ui+0xb8c>)
 8001b7a:	801a      	strh	r2, [r3, #0]
						 select = 1;
 8001b7c:	4b93      	ldr	r3, [pc, #588]	@ (8001dcc <ui+0xb94>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001b82:	4b93      	ldr	r3, [pc, #588]	@ (8001dd0 <ui+0xb98>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8001b88:	4b92      	ldr	r3, [pc, #584]	@ (8001dd4 <ui+0xb9c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d13d      	bne.n	8001c0e <ui+0x9d6>
						 min_well_level--;
 8001b92:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc4 <ui+0xb8c>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	4b88      	ldr	r3, [pc, #544]	@ (8001dc4 <ui+0xb8c>)
 8001ba2:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8001ba4:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd4 <ui+0xb9c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001baa:	4b89      	ldr	r3, [pc, #548]	@ (8001dd0 <ui+0xb98>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001bb0:	e02d      	b.n	8001c0e <ui+0x9d6>

				case 6:
					cursor_pos(1, 1);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fa07 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001bba:	4887      	ldr	r0, [pc, #540]	@ (8001dd8 <ui+0xba0>)
 8001bbc:	f7ff f981 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f7ff fa00 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001bc8:	4884      	ldr	r0, [pc, #528]	@ (8001ddc <ui+0xba4>)
 8001bca:	f7ff f97a 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001bce:	4b81      	ldr	r3, [pc, #516]	@ (8001dd4 <ui+0xb9c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d11c      	bne.n	8001c12 <ui+0x9da>
						 menu = 3;
 8001bd8:	4b81      	ldr	r3, [pc, #516]	@ (8001de0 <ui+0xba8>)
 8001bda:	2203      	movs	r2, #3
 8001bdc:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001bde:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd4 <ui+0xb9c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001be4:	4b79      	ldr	r3, [pc, #484]	@ (8001dcc <ui+0xb94>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
						 page = 2;
 8001bea:	4b7e      	ldr	r3, [pc, #504]	@ (8001de4 <ui+0xbac>)
 8001bec:	2202      	movs	r2, #2
 8001bee:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001bf0:	4b77      	ldr	r3, [pc, #476]	@ (8001dd0 <ui+0xb98>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001bf6:	e00c      	b.n	8001c12 <ui+0x9da>

				default:
					page = 2;
 8001bf8:	4b7a      	ldr	r3, [pc, #488]	@ (8001de4 <ui+0xbac>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	701a      	strb	r2, [r3, #0]
					update = 1;
 8001bfe:	4b74      	ldr	r3, [pc, #464]	@ (8001dd0 <ui+0xb98>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
				break;
 8001c04:	e006      	b.n	8001c14 <ui+0x9dc>
				break;
 8001c06:	bf00      	nop
 8001c08:	e3d9      	b.n	80023be <ui+0x1186>
				break;
 8001c0a:	bf00      	nop
 8001c0c:	e3d7      	b.n	80023be <ui+0x1186>
				break;
 8001c0e:	bf00      	nop
 8001c10:	e3d5      	b.n	80023be <ui+0x1186>
				break;
 8001c12:	bf00      	nop
		}
		break;
 8001c14:	e3d3      	b.n	80023be <ui+0x1186>

		case 6: //limit level
			switch(page){
 8001c16:	4b73      	ldr	r3, [pc, #460]	@ (8001de4 <ui+0xbac>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	f200 8115 	bhi.w	8001e4e <ui+0xc16>
 8001c24:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <ui+0x9f4>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c45 	.word	0x08001c45
 8001c30:	08001c8d 	.word	0x08001c8d
 8001c34:	08001cab 	.word	0x08001cab
 8001c38:	08001cc9 	.word	0x08001cc9
 8001c3c:	08001d45 	.word	0x08001d45
 8001c40:	08001e09 	.word	0x08001e09

				case 1:
					cursor_pos(1, 1);
 8001c44:	2101      	movs	r1, #1
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff f9be 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001c4c:	4862      	ldr	r0, [pc, #392]	@ (8001dd8 <ui+0xba0>)
 8001c4e:	f7ff f938 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001c52:	2101      	movs	r1, #1
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff f9b7 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001c5a:	4860      	ldr	r0, [pc, #384]	@ (8001ddc <ui+0xba4>)
 8001c5c:	f7ff f931 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001c60:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd4 <ui+0xb9c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	f040 80f8 	bne.w	8001e5c <ui+0xc24>
						 menu = 3;
 8001c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001de0 <ui+0xba8>)
 8001c6e:	2203      	movs	r2, #3
 8001c70:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001c72:	4b58      	ldr	r3, [pc, #352]	@ (8001dd4 <ui+0xb9c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001c78:	4b54      	ldr	r3, [pc, #336]	@ (8001dcc <ui+0xb94>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
						 page = 2;
 8001c7e:	4b59      	ldr	r3, [pc, #356]	@ (8001de4 <ui+0xbac>)
 8001c80:	2202      	movs	r2, #2
 8001c82:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001c84:	4b52      	ldr	r3, [pc, #328]	@ (8001dd0 <ui+0xb98>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001c8a:	e0e7      	b.n	8001e5c <ui+0xc24>

				case 2:
					cursor_pos(1, 1);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7ff f99a 	bl	8000fc8 <cursor_pos>
					 write_to_screen("Here you set the");
 8001c94:	4854      	ldr	r0, [pc, #336]	@ (8001de8 <ui+0xbb0>)
 8001c96:	f7ff f914 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	f7ff f993 	bl	8000fc8 <cursor_pos>
					 write_to_screen("max and min    >");
 8001ca2:	4852      	ldr	r0, [pc, #328]	@ (8001dec <ui+0xbb4>)
 8001ca4:	f7ff f90d 	bl	8000ec2 <write_to_screen>
				break;
 8001ca8:	e0df      	b.n	8001e6a <ui+0xc32>

				case 3:
					cursor_pos(1, 1);
 8001caa:	2101      	movs	r1, #1
 8001cac:	2001      	movs	r0, #1
 8001cae:	f7ff f98b 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" for the water  ");
 8001cb2:	484f      	ldr	r0, [pc, #316]	@ (8001df0 <ui+0xbb8>)
 8001cb4:	f7ff f905 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001cb8:	2101      	movs	r1, #1
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f7ff f984 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" level you want.");
 8001cc0:	484c      	ldr	r0, [pc, #304]	@ (8001df4 <ui+0xbbc>)
 8001cc2:	f7ff f8fe 	bl	8000ec2 <write_to_screen>
				break;
 8001cc6:	e0d0      	b.n	8001e6a <ui+0xc32>

				case 4:
					cursor_pos(1, 1);
 8001cc8:	2101      	movs	r1, #1
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff f97c 	bl	8000fc8 <cursor_pos>
					 write_to_screen("   Max limit    ");
 8001cd0:	4849      	ldr	r0, [pc, #292]	@ (8001df8 <ui+0xbc0>)
 8001cd2:	f7ff f8f6 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f7ff f975 	bl	8000fc8 <cursor_pos>
					 digit_to_screen(max_level);
 8001cde:	4b47      	ldr	r3, [pc, #284]	@ (8001dfc <ui+0xbc4>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f90d 	bl	8000f04 <digit_to_screen>
					 write_to_screen(" cm             ");
 8001cea:	4837      	ldr	r0, [pc, #220]	@ (8001dc8 <ui+0xb90>)
 8001cec:	f7ff f8e9 	bl	8000ec2 <write_to_screen>
					 if(select >= 2){
 8001cf0:	4b36      	ldr	r3, [pc, #216]	@ (8001dcc <ui+0xb94>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d90e      	bls.n	8001d18 <ui+0xae0>
						 max_level++;
 8001cfa:	4b40      	ldr	r3, [pc, #256]	@ (8001dfc <ui+0xbc4>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	4b3c      	ldr	r3, [pc, #240]	@ (8001dfc <ui+0xbc4>)
 8001d0a:	801a      	strh	r2, [r3, #0]
						 select = 1;
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <ui+0xb94>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001d12:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <ui+0xb98>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8001d18:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <ui+0xb9c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	f040 809e 	bne.w	8001e60 <ui+0xc28>
						 max_level--;
 8001d24:	4b35      	ldr	r3, [pc, #212]	@ (8001dfc <ui+0xbc4>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b32      	ldr	r3, [pc, #200]	@ (8001dfc <ui+0xbc4>)
 8001d34:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8001d36:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <ui+0xb9c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001d3c:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <ui+0xb98>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001d42:	e08d      	b.n	8001e60 <ui+0xc28>

				case 5:
					cursor_pos(1, 1);
 8001d44:	2101      	movs	r1, #1
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff f93e 	bl	8000fc8 <cursor_pos>
					 write_to_screen("   Min limit    ");
 8001d4c:	482c      	ldr	r0, [pc, #176]	@ (8001e00 <ui+0xbc8>)
 8001d4e:	f7ff f8b8 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001d52:	2101      	movs	r1, #1
 8001d54:	2002      	movs	r0, #2
 8001d56:	f7ff f937 	bl	8000fc8 <cursor_pos>
					 digit_to_screen(min_level);
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e04 <ui+0xbcc>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f8cf 	bl	8000f04 <digit_to_screen>
					 write_to_screen(" cm             ");
 8001d66:	4818      	ldr	r0, [pc, #96]	@ (8001dc8 <ui+0xb90>)
 8001d68:	f7ff f8ab 	bl	8000ec2 <write_to_screen>
					 if(select >= 2){
 8001d6c:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <ui+0xb94>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d90e      	bls.n	8001d94 <ui+0xb5c>
						 min_level++;
 8001d76:	4b23      	ldr	r3, [pc, #140]	@ (8001e04 <ui+0xbcc>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <ui+0xbcc>)
 8001d86:	801a      	strh	r2, [r3, #0]
						 select = 1;
 8001d88:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <ui+0xb94>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <ui+0xb98>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
					 }
					 if(conf == 1){
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <ui+0xb9c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d162      	bne.n	8001e64 <ui+0xc2c>
						 min_level--;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <ui+0xbcc>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <ui+0xbcc>)
 8001dae:	801a      	strh	r2, [r3, #0]
						 conf = 0;
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <ui+0xb9c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <ui+0xb98>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001dbc:	e052      	b.n	8001e64 <ui+0xc2c>
 8001dbe:	bf00      	nop
 8001dc0:	0800a158 	.word	0x0800a158
 8001dc4:	2000029a 	.word	0x2000029a
 8001dc8:	0800a0a4 	.word	0x0800a0a4
 8001dcc:	20000002 	.word	0x20000002
 8001dd0:	20000299 	.word	0x20000299
 8001dd4:	20000298 	.word	0x20000298
 8001dd8:	0800a014 	.word	0x0800a014
 8001ddc:	0800a0e0 	.word	0x0800a0e0
 8001de0:	20000001 	.word	0x20000001
 8001de4:	20000000 	.word	0x20000000
 8001de8:	0800a0f4 	.word	0x0800a0f4
 8001dec:	0800a108 	.word	0x0800a108
 8001df0:	0800a16c 	.word	0x0800a16c
 8001df4:	0800a180 	.word	0x0800a180
 8001df8:	0800a194 	.word	0x0800a194
 8001dfc:	20000006 	.word	0x20000006
 8001e00:	0800a1a8 	.word	0x0800a1a8
 8001e04:	20000008 	.word	0x20000008

				case 6:
					cursor_pos(1, 1);
 8001e08:	2101      	movs	r1, #1
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f8dc 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001e10:	48b6      	ldr	r0, [pc, #728]	@ (80020ec <ui+0xeb4>)
 8001e12:	f7ff f856 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001e16:	2101      	movs	r1, #1
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f7ff f8d5 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001e1e:	48b4      	ldr	r0, [pc, #720]	@ (80020f0 <ui+0xeb8>)
 8001e20:	f7ff f84f 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001e24:	4bb3      	ldr	r3, [pc, #716]	@ (80020f4 <ui+0xebc>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d11c      	bne.n	8001e68 <ui+0xc30>
						 menu = 3;
 8001e2e:	4bb2      	ldr	r3, [pc, #712]	@ (80020f8 <ui+0xec0>)
 8001e30:	2203      	movs	r2, #3
 8001e32:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001e34:	4baf      	ldr	r3, [pc, #700]	@ (80020f4 <ui+0xebc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001e3a:	4bb0      	ldr	r3, [pc, #704]	@ (80020fc <ui+0xec4>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
						 page = 2;
 8001e40:	4baf      	ldr	r3, [pc, #700]	@ (8002100 <ui+0xec8>)
 8001e42:	2202      	movs	r2, #2
 8001e44:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001e46:	4baf      	ldr	r3, [pc, #700]	@ (8002104 <ui+0xecc>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001e4c:	e00c      	b.n	8001e68 <ui+0xc30>

				default:
					page = 2;
 8001e4e:	4bac      	ldr	r3, [pc, #688]	@ (8002100 <ui+0xec8>)
 8001e50:	2202      	movs	r2, #2
 8001e52:	701a      	strb	r2, [r3, #0]
					update = 1;
 8001e54:	4bab      	ldr	r3, [pc, #684]	@ (8002104 <ui+0xecc>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
				break;
 8001e5a:	e006      	b.n	8001e6a <ui+0xc32>
				break;
 8001e5c:	bf00      	nop
 8001e5e:	e2ae      	b.n	80023be <ui+0x1186>
				break;
 8001e60:	bf00      	nop
 8001e62:	e2ac      	b.n	80023be <ui+0x1186>
				break;
 8001e64:	bf00      	nop
 8001e66:	e2aa      	b.n	80023be <ui+0x1186>
				break;
 8001e68:	bf00      	nop
		}
		break;
 8001e6a:	e2a8      	b.n	80023be <ui+0x1186>

		case 7: //form selector
			switch(page){
 8001e6c:	4ba4      	ldr	r3, [pc, #656]	@ (8002100 <ui+0xec8>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	f200 80e3 	bhi.w	8002040 <ui+0xe08>
 8001e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e80 <ui+0xc48>)
 8001e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e80:	08001e95 	.word	0x08001e95
 8001e84:	08001edd 	.word	0x08001edd
 8001e88:	08001efb 	.word	0x08001efb
 8001e8c:	08001f19 	.word	0x08001f19
 8001e90:	08001ffb 	.word	0x08001ffb

				case 1:
					cursor_pos(1, 1);
 8001e94:	2101      	movs	r1, #1
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff f896 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8001e9c:	4893      	ldr	r0, [pc, #588]	@ (80020ec <ui+0xeb4>)
 8001e9e:	f7ff f810 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f7ff f88f 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8001eaa:	4891      	ldr	r0, [pc, #580]	@ (80020f0 <ui+0xeb8>)
 8001eac:	f7ff f809 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8001eb0:	4b90      	ldr	r3, [pc, #576]	@ (80020f4 <ui+0xebc>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 80c9 	bne.w	800204e <ui+0xe16>
						 menu = 3;
 8001ebc:	4b8e      	ldr	r3, [pc, #568]	@ (80020f8 <ui+0xec0>)
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8001ec2:	4b8c      	ldr	r3, [pc, #560]	@ (80020f4 <ui+0xebc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
						 select = 1;
 8001ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80020fc <ui+0xec4>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
						 page = 3;
 8001ece:	4b8c      	ldr	r3, [pc, #560]	@ (8002100 <ui+0xec8>)
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8001ed4:	4b8b      	ldr	r3, [pc, #556]	@ (8002104 <ui+0xecc>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
					 }
				break;
 8001eda:	e0b8      	b.n	800204e <ui+0xe16>

				case 2:
					 cursor_pos(1, 1);
 8001edc:	2101      	movs	r1, #1
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f7ff f872 	bl	8000fc8 <cursor_pos>
					 write_to_screen("Here you select ");
 8001ee4:	4888      	ldr	r0, [pc, #544]	@ (8002108 <ui+0xed0>)
 8001ee6:	f7fe ffec 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001eea:	2101      	movs	r1, #1
 8001eec:	2002      	movs	r0, #2
 8001eee:	f7ff f86b 	bl	8000fc8 <cursor_pos>
					 write_to_screen("the form off   >");
 8001ef2:	4886      	ldr	r0, [pc, #536]	@ (800210c <ui+0xed4>)
 8001ef4:	f7fe ffe5 	bl	8000ec2 <write_to_screen>
				break;
 8001ef8:	e0ac      	b.n	8002054 <ui+0xe1c>

				case 3:
					 cursor_pos(1, 1);
 8001efa:	2101      	movs	r1, #1
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff f863 	bl	8000fc8 <cursor_pos>
					 write_to_screen("   the well.    ");
 8001f02:	4883      	ldr	r0, [pc, #524]	@ (8002110 <ui+0xed8>)
 8001f04:	f7fe ffdd 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001f08:	2101      	movs	r1, #1
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7ff f85c 	bl	8000fc8 <cursor_pos>
					 write_to_screen("                ");
 8001f10:	4880      	ldr	r0, [pc, #512]	@ (8002114 <ui+0xedc>)
 8001f12:	f7fe ffd6 	bl	8000ec2 <write_to_screen>
				break;
 8001f16:	e09d      	b.n	8002054 <ui+0xe1c>

				case 4:
					 cursor_pos(1, 1);
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7ff f854 	bl	8000fc8 <cursor_pos>

					 if(strcmp(form, "cy") == 0){
 8001f20:	4b7d      	ldr	r3, [pc, #500]	@ (8002118 <ui+0xee0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	497d      	ldr	r1, [pc, #500]	@ (800211c <ui+0xee4>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe f952 	bl	80001d0 <strcmp>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d108      	bne.n	8001f44 <ui+0xd0c>
						 write_to_screen("   ");
 8001f32:	487b      	ldr	r0, [pc, #492]	@ (8002120 <ui+0xee8>)
 8001f34:	f7fe ffc5 	bl	8000ec2 <write_to_screen>
						 send_to_screen(0b11111111 ,'b', 'd');
 8001f38:	2264      	movs	r2, #100	@ 0x64
 8001f3a:	2162      	movs	r1, #98	@ 0x62
 8001f3c:	20ff      	movs	r0, #255	@ 0xff
 8001f3e:	f7fe fee1 	bl	8000d04 <send_to_screen>
 8001f42:	e002      	b.n	8001f4a <ui+0xd12>
					 }
					 else{
						 write_to_screen("   O");
 8001f44:	4877      	ldr	r0, [pc, #476]	@ (8002124 <ui+0xeec>)
 8001f46:	f7fe ffbc 	bl	8000ec2 <write_to_screen>
					 }

					 write_to_screen(" cylinder       ");
 8001f4a:	4877      	ldr	r0, [pc, #476]	@ (8002128 <ui+0xef0>)
 8001f4c:	f7fe ffb9 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8001f50:	2101      	movs	r1, #1
 8001f52:	2002      	movs	r0, #2
 8001f54:	f7ff f838 	bl	8000fc8 <cursor_pos>

					 if(strcmp(form, "cu") == 0){
 8001f58:	4b6f      	ldr	r3, [pc, #444]	@ (8002118 <ui+0xee0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4973      	ldr	r1, [pc, #460]	@ (800212c <ui+0xef4>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe f936 	bl	80001d0 <strcmp>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d108      	bne.n	8001f7c <ui+0xd44>
						 write_to_screen("   ");
 8001f6a:	486d      	ldr	r0, [pc, #436]	@ (8002120 <ui+0xee8>)
 8001f6c:	f7fe ffa9 	bl	8000ec2 <write_to_screen>
						 send_to_screen(0b11111111 ,'b', 'd');
 8001f70:	2264      	movs	r2, #100	@ 0x64
 8001f72:	2162      	movs	r1, #98	@ 0x62
 8001f74:	20ff      	movs	r0, #255	@ 0xff
 8001f76:	f7fe fec5 	bl	8000d04 <send_to_screen>
 8001f7a:	e002      	b.n	8001f82 <ui+0xd4a>
					 }
					 else{
						 write_to_screen("   O");
 8001f7c:	4869      	ldr	r0, [pc, #420]	@ (8002124 <ui+0xeec>)
 8001f7e:	f7fe ffa0 	bl	8000ec2 <write_to_screen>
					 }

					 write_to_screen(" cuboid         ");
 8001f82:	486b      	ldr	r0, [pc, #428]	@ (8002130 <ui+0xef8>)
 8001f84:	f7fe ff9d 	bl	8000ec2 <write_to_screen>

					 switch(select){
 8001f88:	4b5c      	ldr	r3, [pc, #368]	@ (80020fc <ui+0xec4>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d002      	beq.n	8001f98 <ui+0xd60>
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d013      	beq.n	8001fbe <ui+0xd86>
 8001f96:	e025      	b.n	8001fe4 <ui+0xdac>
						case 1:
							 cursor_pos(1, 3);
 8001f98:	2103      	movs	r1, #3
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff f814 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 8001fa0:	4b54      	ldr	r3, [pc, #336]	@ (80020f4 <ui+0xebc>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d123      	bne.n	8001ff2 <ui+0xdba>
								 conf = 0;
 8001faa:	4b52      	ldr	r3, [pc, #328]	@ (80020f4 <ui+0xebc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
								 form = "cy";
 8001fb0:	4b59      	ldr	r3, [pc, #356]	@ (8002118 <ui+0xee0>)
 8001fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800211c <ui+0xee4>)
 8001fb4:	601a      	str	r2, [r3, #0]
								 update = 1;
 8001fb6:	4b53      	ldr	r3, [pc, #332]	@ (8002104 <ui+0xecc>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
							 }
						break;
 8001fbc:	e019      	b.n	8001ff2 <ui+0xdba>

						case 2:
							 cursor_pos(2, 3);
 8001fbe:	2103      	movs	r1, #3
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f7ff f801 	bl	8000fc8 <cursor_pos>
							 if(conf == 1){
 8001fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80020f4 <ui+0xebc>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d112      	bne.n	8001ff6 <ui+0xdbe>
								 conf = 0;
 8001fd0:	4b48      	ldr	r3, [pc, #288]	@ (80020f4 <ui+0xebc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
								 form = "cu";
 8001fd6:	4b50      	ldr	r3, [pc, #320]	@ (8002118 <ui+0xee0>)
 8001fd8:	4a54      	ldr	r2, [pc, #336]	@ (800212c <ui+0xef4>)
 8001fda:	601a      	str	r2, [r3, #0]
								 update = 1;
 8001fdc:	4b49      	ldr	r3, [pc, #292]	@ (8002104 <ui+0xecc>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
						 }
						 break;
 8001fe2:	e008      	b.n	8001ff6 <ui+0xdbe>

						default:
							select = 1;
 8001fe4:	4b45      	ldr	r3, [pc, #276]	@ (80020fc <ui+0xec4>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
							update = 1;
 8001fea:	4b46      	ldr	r3, [pc, #280]	@ (8002104 <ui+0xecc>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
						break;
 8001ff0:	e002      	b.n	8001ff8 <ui+0xdc0>
						break;
 8001ff2:	bf00      	nop
 8001ff4:	e02e      	b.n	8002054 <ui+0xe1c>
						 break;
 8001ff6:	bf00      	nop
					 }
				break;
 8001ff8:	e02c      	b.n	8002054 <ui+0xe1c>

				case 5:
					cursor_pos(1, 1);
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7fe ffe3 	bl	8000fc8 <cursor_pos>
					 write_to_screen(" Go back to the ");
 8002002:	483a      	ldr	r0, [pc, #232]	@ (80020ec <ui+0xeb4>)
 8002004:	f7fe ff5d 	bl	8000ec2 <write_to_screen>
					 cursor_pos(2, 1);
 8002008:	2101      	movs	r1, #1
 800200a:	2002      	movs	r0, #2
 800200c:	f7fe ffdc 	bl	8000fc8 <cursor_pos>
					 write_to_screen("setting selector");
 8002010:	4837      	ldr	r0, [pc, #220]	@ (80020f0 <ui+0xeb8>)
 8002012:	f7fe ff56 	bl	8000ec2 <write_to_screen>
					 if(conf == 1){
 8002016:	4b37      	ldr	r3, [pc, #220]	@ (80020f4 <ui+0xebc>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d118      	bne.n	8002052 <ui+0xe1a>
						 menu = 3;
 8002020:	4b35      	ldr	r3, [pc, #212]	@ (80020f8 <ui+0xec0>)
 8002022:	2203      	movs	r2, #3
 8002024:	701a      	strb	r2, [r3, #0]
						 conf = 0;
 8002026:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <ui+0xebc>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
						 select = 1;
 800202c:	4b33      	ldr	r3, [pc, #204]	@ (80020fc <ui+0xec4>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
						 page = 3;
 8002032:	4b33      	ldr	r3, [pc, #204]	@ (8002100 <ui+0xec8>)
 8002034:	2203      	movs	r2, #3
 8002036:	701a      	strb	r2, [r3, #0]
						 update = 1;
 8002038:	4b32      	ldr	r3, [pc, #200]	@ (8002104 <ui+0xecc>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
					 }
				break;
 800203e:	e008      	b.n	8002052 <ui+0xe1a>

				default:
					page = 2;
 8002040:	4b2f      	ldr	r3, [pc, #188]	@ (8002100 <ui+0xec8>)
 8002042:	2202      	movs	r2, #2
 8002044:	701a      	strb	r2, [r3, #0]
					update = 1;
 8002046:	4b2f      	ldr	r3, [pc, #188]	@ (8002104 <ui+0xecc>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
				break;
 800204c:	e002      	b.n	8002054 <ui+0xe1c>
				break;
 800204e:	bf00      	nop
 8002050:	e1b5      	b.n	80023be <ui+0x1186>
				break;
 8002052:	bf00      	nop
			}
			break;
 8002054:	e1b3      	b.n	80023be <ui+0x1186>

			case 8: //dimensions selector
				switch(page){
 8002056:	4b2a      	ldr	r3, [pc, #168]	@ (8002100 <ui+0xec8>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	2b05      	cmp	r3, #5
 8002060:	f200 819a 	bhi.w	8002398 <ui+0x1160>
 8002064:	a201      	add	r2, pc, #4	@ (adr r2, 800206c <ui+0xe34>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	08002085 	.word	0x08002085
 8002070:	080020cd 	.word	0x080020cd
 8002074:	0800213d 	.word	0x0800213d
 8002078:	0800215b 	.word	0x0800215b
 800207c:	0800226d 	.word	0x0800226d
 8002080:	08002339 	.word	0x08002339

					case 1:
						cursor_pos(1, 1);
 8002084:	2101      	movs	r1, #1
 8002086:	2001      	movs	r0, #1
 8002088:	f7fe ff9e 	bl	8000fc8 <cursor_pos>
						 write_to_screen(" Go back to the ");
 800208c:	4817      	ldr	r0, [pc, #92]	@ (80020ec <ui+0xeb4>)
 800208e:	f7fe ff18 	bl	8000ec2 <write_to_screen>
						 cursor_pos(2, 1);
 8002092:	2101      	movs	r1, #1
 8002094:	2002      	movs	r0, #2
 8002096:	f7fe ff97 	bl	8000fc8 <cursor_pos>
						 write_to_screen("setting selector");
 800209a:	4815      	ldr	r0, [pc, #84]	@ (80020f0 <ui+0xeb8>)
 800209c:	f7fe ff11 	bl	8000ec2 <write_to_screen>
						 if(conf == 1){
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <ui+0xebc>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 817d 	bne.w	80023a6 <ui+0x116e>
							 menu = 3;
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <ui+0xec0>)
 80020ae:	2203      	movs	r2, #3
 80020b0:	701a      	strb	r2, [r3, #0]
							 conf = 0;
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <ui+0xebc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
							 select = 1;
 80020b8:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <ui+0xec4>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
							 page = 3;
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <ui+0xec8>)
 80020c0:	2203      	movs	r2, #3
 80020c2:	701a      	strb	r2, [r3, #0]
							 update = 1;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <ui+0xecc>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
						 }
					break;
 80020ca:	e16c      	b.n	80023a6 <ui+0x116e>

					case 2:
						 cursor_pos(1, 1);
 80020cc:	2101      	movs	r1, #1
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7fe ff7a 	bl	8000fc8 <cursor_pos>
						 write_to_screen("Here you give   ");
 80020d4:	4817      	ldr	r0, [pc, #92]	@ (8002134 <ui+0xefc>)
 80020d6:	f7fe fef4 	bl	8000ec2 <write_to_screen>
						 cursor_pos(2, 1);
 80020da:	2101      	movs	r1, #1
 80020dc:	2002      	movs	r0, #2
 80020de:	f7fe ff73 	bl	8000fc8 <cursor_pos>
						 write_to_screen("the dimensions >");
 80020e2:	4815      	ldr	r0, [pc, #84]	@ (8002138 <ui+0xf00>)
 80020e4:	f7fe feed 	bl	8000ec2 <write_to_screen>
					break;
 80020e8:	e164      	b.n	80023b4 <ui+0x117c>
 80020ea:	bf00      	nop
 80020ec:	0800a014 	.word	0x0800a014
 80020f0:	0800a0e0 	.word	0x0800a0e0
 80020f4:	20000298 	.word	0x20000298
 80020f8:	20000001 	.word	0x20000001
 80020fc:	20000002 	.word	0x20000002
 8002100:	20000000 	.word	0x20000000
 8002104:	20000299 	.word	0x20000299
 8002108:	0800a1bc 	.word	0x0800a1bc
 800210c:	0800a1d0 	.word	0x0800a1d0
 8002110:	0800a1e4 	.word	0x0800a1e4
 8002114:	0800a130 	.word	0x0800a130
 8002118:	20000018 	.word	0x20000018
 800211c:	08009ebc 	.word	0x08009ebc
 8002120:	0800a1f8 	.word	0x0800a1f8
 8002124:	0800a1fc 	.word	0x0800a1fc
 8002128:	0800a204 	.word	0x0800a204
 800212c:	0800a218 	.word	0x0800a218
 8002130:	0800a21c 	.word	0x0800a21c
 8002134:	0800a230 	.word	0x0800a230
 8002138:	0800a244 	.word	0x0800a244

					case 3:
						 cursor_pos(1, 1);
 800213c:	2101      	movs	r1, #1
 800213e:	2001      	movs	r0, #1
 8002140:	f7fe ff42 	bl	8000fc8 <cursor_pos>
						 write_to_screen(" off the well.  ");
 8002144:	48a0      	ldr	r0, [pc, #640]	@ (80023c8 <ui+0x1190>)
 8002146:	f7fe febc 	bl	8000ec2 <write_to_screen>
						 cursor_pos(2, 1);
 800214a:	2101      	movs	r1, #1
 800214c:	2002      	movs	r0, #2
 800214e:	f7fe ff3b 	bl	8000fc8 <cursor_pos>
						 write_to_screen("                ");
 8002152:	489e      	ldr	r0, [pc, #632]	@ (80023cc <ui+0x1194>)
 8002154:	f7fe feb5 	bl	8000ec2 <write_to_screen>
					break;
 8002158:	e12c      	b.n	80023b4 <ui+0x117c>

					case 4:
						if (strcmp(form, "cy") == 0) {
 800215a:	4b9d      	ldr	r3, [pc, #628]	@ (80023d0 <ui+0x1198>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	499d      	ldr	r1, [pc, #628]	@ (80023d4 <ui+0x119c>)
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f835 	bl	80001d0 <strcmp>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d145      	bne.n	80021f8 <ui+0xfc0>
							cursor_pos(1, 1);
 800216c:	2101      	movs	r1, #1
 800216e:	2001      	movs	r0, #1
 8002170:	f7fe ff2a 	bl	8000fc8 <cursor_pos>
							write_to_screen("   diameter:    ");
 8002174:	4898      	ldr	r0, [pc, #608]	@ (80023d8 <ui+0x11a0>)
 8002176:	f7fe fea4 	bl	8000ec2 <write_to_screen>
							cursor_pos(2, 1);
 800217a:	2101      	movs	r1, #1
 800217c:	2002      	movs	r0, #2
 800217e:	f7fe ff23 	bl	8000fc8 <cursor_pos>
							write_to_screen("   ");
 8002182:	4896      	ldr	r0, [pc, #600]	@ (80023dc <ui+0x11a4>)
 8002184:	f7fe fe9d 	bl	8000ec2 <write_to_screen>
							digit_to_screen(diameter);
 8002188:	4b95      	ldr	r3, [pc, #596]	@ (80023e0 <ui+0x11a8>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002192:	ee17 0a90 	vmov	r0, s15
 8002196:	f7fe feb5 	bl	8000f04 <digit_to_screen>
							write_to_screen(" cm             ");
 800219a:	4892      	ldr	r0, [pc, #584]	@ (80023e4 <ui+0x11ac>)
 800219c:	f7fe fe91 	bl	8000ec2 <write_to_screen>
							 if(select >= 2){
 80021a0:	4b91      	ldr	r3, [pc, #580]	@ (80023e8 <ui+0x11b0>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d90f      	bls.n	80021ca <ui+0xf92>
								 diameter++;
 80021aa:	4b8d      	ldr	r3, [pc, #564]	@ (80023e0 <ui+0x11a8>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021b8:	4b89      	ldr	r3, [pc, #548]	@ (80023e0 <ui+0x11a8>)
 80021ba:	edc3 7a00 	vstr	s15, [r3]
								 select = 1;
 80021be:	4b8a      	ldr	r3, [pc, #552]	@ (80023e8 <ui+0x11b0>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80021c4:	4b89      	ldr	r3, [pc, #548]	@ (80023ec <ui+0x11b4>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
							 }
							 if(conf == 1){
 80021ca:	4b89      	ldr	r3, [pc, #548]	@ (80023f0 <ui+0x11b8>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 80ea 	bne.w	80023aa <ui+0x1172>
								 diameter--;
 80021d6:	4b82      	ldr	r3, [pc, #520]	@ (80023e0 <ui+0x11a8>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021e4:	4b7e      	ldr	r3, [pc, #504]	@ (80023e0 <ui+0x11a8>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
								 conf = 0;
 80021ea:	4b81      	ldr	r3, [pc, #516]	@ (80023f0 <ui+0x11b8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80021f0:	4b7e      	ldr	r3, [pc, #504]	@ (80023ec <ui+0x11b4>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
								 X--;
								 conf = 0;
								 update = 1;
							 }
						}
					break;
 80021f6:	e0d8      	b.n	80023aa <ui+0x1172>
							cursor_pos(1, 1);
 80021f8:	2101      	movs	r1, #1
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7fe fee4 	bl	8000fc8 <cursor_pos>
							write_to_screen("X:              ");
 8002200:	487c      	ldr	r0, [pc, #496]	@ (80023f4 <ui+0x11bc>)
 8002202:	f7fe fe5e 	bl	8000ec2 <write_to_screen>
							cursor_pos(2, 1);
 8002206:	2101      	movs	r1, #1
 8002208:	2002      	movs	r0, #2
 800220a:	f7fe fedd 	bl	8000fc8 <cursor_pos>
							digit_to_screen(X);
 800220e:	4b7a      	ldr	r3, [pc, #488]	@ (80023f8 <ui+0x11c0>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fe75 	bl	8000f04 <digit_to_screen>
							write_to_screen(" cm             ");
 800221a:	4872      	ldr	r0, [pc, #456]	@ (80023e4 <ui+0x11ac>)
 800221c:	f7fe fe51 	bl	8000ec2 <write_to_screen>
							 if(select >= 2){
 8002220:	4b71      	ldr	r3, [pc, #452]	@ (80023e8 <ui+0x11b0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d90c      	bls.n	8002244 <ui+0x100c>
								 X++;
 800222a:	4b73      	ldr	r3, [pc, #460]	@ (80023f8 <ui+0x11c0>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	4b70      	ldr	r3, [pc, #448]	@ (80023f8 <ui+0x11c0>)
 8002236:	801a      	strh	r2, [r3, #0]
								 select = 1;
 8002238:	4b6b      	ldr	r3, [pc, #428]	@ (80023e8 <ui+0x11b0>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800223e:	4b6b      	ldr	r3, [pc, #428]	@ (80023ec <ui+0x11b4>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
							 if(conf == 1){
 8002244:	4b6a      	ldr	r3, [pc, #424]	@ (80023f0 <ui+0x11b8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	f040 80ad 	bne.w	80023aa <ui+0x1172>
								 X--;
 8002250:	4b69      	ldr	r3, [pc, #420]	@ (80023f8 <ui+0x11c0>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b67      	ldr	r3, [pc, #412]	@ (80023f8 <ui+0x11c0>)
 800225c:	801a      	strh	r2, [r3, #0]
								 conf = 0;
 800225e:	4b64      	ldr	r3, [pc, #400]	@ (80023f0 <ui+0x11b8>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002264:	4b61      	ldr	r3, [pc, #388]	@ (80023ec <ui+0x11b4>)
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
					break;
 800226a:	e09e      	b.n	80023aa <ui+0x1172>

					case 5:
						if (strcmp(form, "cy") == 0) {
 800226c:	4b58      	ldr	r3, [pc, #352]	@ (80023d0 <ui+0x1198>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4958      	ldr	r1, [pc, #352]	@ (80023d4 <ui+0x119c>)
 8002272:	4618      	mov	r0, r3
 8002274:	f7fd ffac 	bl	80001d0 <strcmp>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d123      	bne.n	80022c6 <ui+0x108e>
							 cursor_pos(1, 1);
 800227e:	2101      	movs	r1, #1
 8002280:	2001      	movs	r0, #1
 8002282:	f7fe fea1 	bl	8000fc8 <cursor_pos>
							 write_to_screen(" Go back to the ");
 8002286:	485d      	ldr	r0, [pc, #372]	@ (80023fc <ui+0x11c4>)
 8002288:	f7fe fe1b 	bl	8000ec2 <write_to_screen>
							 cursor_pos(2, 1);
 800228c:	2101      	movs	r1, #1
 800228e:	2002      	movs	r0, #2
 8002290:	f7fe fe9a 	bl	8000fc8 <cursor_pos>
							 write_to_screen("setting selector");
 8002294:	485a      	ldr	r0, [pc, #360]	@ (8002400 <ui+0x11c8>)
 8002296:	f7fe fe14 	bl	8000ec2 <write_to_screen>
							 if(conf == 1){
 800229a:	4b55      	ldr	r3, [pc, #340]	@ (80023f0 <ui+0x11b8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	f040 8084 	bne.w	80023ae <ui+0x1176>
								 menu = 3;
 80022a6:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <ui+0x11cc>)
 80022a8:	2203      	movs	r2, #3
 80022aa:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 80022ac:	4b50      	ldr	r3, [pc, #320]	@ (80023f0 <ui+0x11b8>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
								 select = 1;
 80022b2:	4b4d      	ldr	r3, [pc, #308]	@ (80023e8 <ui+0x11b0>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
								 page = 3;
 80022b8:	4b53      	ldr	r3, [pc, #332]	@ (8002408 <ui+0x11d0>)
 80022ba:	2203      	movs	r2, #3
 80022bc:	701a      	strb	r2, [r3, #0]
								 update = 1;
 80022be:	4b4b      	ldr	r3, [pc, #300]	@ (80023ec <ui+0x11b4>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
								 Y--;
								 conf = 0;
								 update = 1;
							 }
						}
					break;
 80022c4:	e073      	b.n	80023ae <ui+0x1176>
							cursor_pos(1, 1);
 80022c6:	2101      	movs	r1, #1
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7fe fe7d 	bl	8000fc8 <cursor_pos>
							write_to_screen("Y:              ");
 80022ce:	484f      	ldr	r0, [pc, #316]	@ (800240c <ui+0x11d4>)
 80022d0:	f7fe fdf7 	bl	8000ec2 <write_to_screen>
							cursor_pos(2, 1);
 80022d4:	2101      	movs	r1, #1
 80022d6:	2002      	movs	r0, #2
 80022d8:	f7fe fe76 	bl	8000fc8 <cursor_pos>
							digit_to_screen(Y);
 80022dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002410 <ui+0x11d8>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fe0e 	bl	8000f04 <digit_to_screen>
							write_to_screen(" cm             ");
 80022e8:	483e      	ldr	r0, [pc, #248]	@ (80023e4 <ui+0x11ac>)
 80022ea:	f7fe fdea 	bl	8000ec2 <write_to_screen>
							 if(select >= 2){
 80022ee:	4b3e      	ldr	r3, [pc, #248]	@ (80023e8 <ui+0x11b0>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d90c      	bls.n	8002312 <ui+0x10da>
								 Y++;
 80022f8:	4b45      	ldr	r3, [pc, #276]	@ (8002410 <ui+0x11d8>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <ui+0x11d8>)
 8002304:	801a      	strh	r2, [r3, #0]
								 select = 1;
 8002306:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <ui+0x11b0>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
								 update = 1;
 800230c:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <ui+0x11b4>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
							 if(conf == 1){
 8002312:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <ui+0x11b8>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d148      	bne.n	80023ae <ui+0x1176>
								 Y--;
 800231c:	4b3c      	ldr	r3, [pc, #240]	@ (8002410 <ui+0x11d8>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b3a      	ldr	r3, [pc, #232]	@ (8002410 <ui+0x11d8>)
 8002328:	801a      	strh	r2, [r3, #0]
								 conf = 0;
 800232a:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <ui+0x11b8>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002330:	4b2e      	ldr	r3, [pc, #184]	@ (80023ec <ui+0x11b4>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
					break;
 8002336:	e03a      	b.n	80023ae <ui+0x1176>

					case 6:
						if (strcmp(form, "cy") == 0) {
 8002338:	4b25      	ldr	r3, [pc, #148]	@ (80023d0 <ui+0x1198>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4925      	ldr	r1, [pc, #148]	@ (80023d4 <ui+0x119c>)
 800233e:	4618      	mov	r0, r3
 8002340:	f7fd ff46 	bl	80001d0 <strcmp>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <ui+0x111a>
							page = 5;
 800234a:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <ui+0x11d0>)
 800234c:	2205      	movs	r2, #5
 800234e:	701a      	strb	r2, [r3, #0]
								 select = 1;
								 page = 3;
								 update = 1;
							 }
						}
					break;
 8002350:	e02f      	b.n	80023b2 <ui+0x117a>
							 cursor_pos(1, 1);
 8002352:	2101      	movs	r1, #1
 8002354:	2001      	movs	r0, #1
 8002356:	f7fe fe37 	bl	8000fc8 <cursor_pos>
							 write_to_screen(" Go back to the ");
 800235a:	4828      	ldr	r0, [pc, #160]	@ (80023fc <ui+0x11c4>)
 800235c:	f7fe fdb1 	bl	8000ec2 <write_to_screen>
							 cursor_pos(2, 1);
 8002360:	2101      	movs	r1, #1
 8002362:	2002      	movs	r0, #2
 8002364:	f7fe fe30 	bl	8000fc8 <cursor_pos>
							 write_to_screen("setting selector");
 8002368:	4825      	ldr	r0, [pc, #148]	@ (8002400 <ui+0x11c8>)
 800236a:	f7fe fdaa 	bl	8000ec2 <write_to_screen>
							 if(conf == 1){
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <ui+0x11b8>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d11c      	bne.n	80023b2 <ui+0x117a>
								 menu = 3;
 8002378:	4b22      	ldr	r3, [pc, #136]	@ (8002404 <ui+0x11cc>)
 800237a:	2203      	movs	r2, #3
 800237c:	701a      	strb	r2, [r3, #0]
								 conf = 0;
 800237e:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <ui+0x11b8>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
								 select = 1;
 8002384:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <ui+0x11b0>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
								 page = 3;
 800238a:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <ui+0x11d0>)
 800238c:	2203      	movs	r2, #3
 800238e:	701a      	strb	r2, [r3, #0]
								 update = 1;
 8002390:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <ui+0x11b4>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
					break;
 8002396:	e00c      	b.n	80023b2 <ui+0x117a>

					default:
						page = 2;
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <ui+0x11d0>)
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
						update = 1;
 800239e:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <ui+0x11b4>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
					break;
 80023a4:	e006      	b.n	80023b4 <ui+0x117c>
					break;
 80023a6:	bf00      	nop
 80023a8:	e009      	b.n	80023be <ui+0x1186>
					break;
 80023aa:	bf00      	nop
 80023ac:	e007      	b.n	80023be <ui+0x1186>
					break;
 80023ae:	bf00      	nop
 80023b0:	e005      	b.n	80023be <ui+0x1186>
					break;
 80023b2:	bf00      	nop
				}
				break;
 80023b4:	e003      	b.n	80023be <ui+0x1186>

		default:
			menu = 2;
 80023b6:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <ui+0x11cc>)
 80023b8:	2202      	movs	r2, #2
 80023ba:	701a      	strb	r2, [r3, #0]
		break;
 80023bc:	bf00      	nop
	}

}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0800a258 	.word	0x0800a258
 80023cc:	0800a130 	.word	0x0800a130
 80023d0:	20000018 	.word	0x20000018
 80023d4:	08009ebc 	.word	0x08009ebc
 80023d8:	0800a26c 	.word	0x0800a26c
 80023dc:	0800a1f8 	.word	0x0800a1f8
 80023e0:	2000000c 	.word	0x2000000c
 80023e4:	0800a0a4 	.word	0x0800a0a4
 80023e8:	20000002 	.word	0x20000002
 80023ec:	20000299 	.word	0x20000299
 80023f0:	20000298 	.word	0x20000298
 80023f4:	0800a280 	.word	0x0800a280
 80023f8:	20000010 	.word	0x20000010
 80023fc:	0800a014 	.word	0x0800a014
 8002400:	0800a0e0 	.word	0x0800a0e0
 8002404:	20000001 	.word	0x20000001
 8002408:	20000000 	.word	0x20000000
 800240c:	0800a294 	.word	0x0800a294
 8002410:	20000012 	.word	0x20000012

08002414 <relay>:
 */

#ifndef INC_SSR_H_
#define INC_SSR_H_

void relay(const char *kraan){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

    if (strcmp(kraan, "ON") == 0) {
 800241c:	4912      	ldr	r1, [pc, #72]	@ (8002468 <relay+0x54>)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fd fed6 	bl	80001d0 <strcmp>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <relay+0x24>
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_SET);
 800242a:	2201      	movs	r2, #1
 800242c:	2104      	movs	r1, #4
 800242e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002432:	f001 fb61 	bl	8003af8 <HAL_GPIO_WritePin>
    }

    else{
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
    }
}
 8002436:	e013      	b.n	8002460 <relay+0x4c>
    else if(strcmp(kraan, "OFF") == 0){
 8002438:	490c      	ldr	r1, [pc, #48]	@ (800246c <relay+0x58>)
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fd fec8 	bl	80001d0 <strcmp>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <relay+0x40>
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	2104      	movs	r1, #4
 800244a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800244e:	f001 fb53 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8002452:	e005      	b.n	8002460 <relay+0x4c>
        HAL_GPIO_WritePin(SSR_GPIO_Port, SSR_Pin, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	2104      	movs	r1, #4
 8002458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800245c:	f001 fb4c 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	0800a2a8 	.word	0x0800a2a8
 800246c:	0800a2ac 	.word	0x0800a2ac

08002470 <Set_LED>:
uint8_t datasentflag = 0;

TIM_HandleTypeDef htim2;

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	b2d9      	uxtb	r1, r3
 8002482:	4a11      	ldr	r2, [pc, #68]	@ (80024c8 <Set_LED+0x58>)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	b2d9      	uxtb	r1, r3
 800248e:	4a0e      	ldr	r2, [pc, #56]	@ (80024c8 <Set_LED+0x58>)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	460a      	mov	r2, r1
 8002498:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	b2d9      	uxtb	r1, r3
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <Set_LED+0x58>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	460a      	mov	r2, r1
 80024a8:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2d9      	uxtb	r1, r3
 80024ae:	4a06      	ldr	r2, [pc, #24]	@ (80024c8 <Set_LED+0x58>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	460a      	mov	r2, r1
 80024b8:	70da      	strb	r2, [r3, #3]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	2000029c 	.word	0x2000029c

080024cc <WS2812_Send>:

uint32_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e039      	b.n	8002550 <WS2812_Send+0x84>
	{

		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80024dc:	4a30      	ldr	r2, [pc, #192]	@ (80025a0 <WS2812_Send+0xd4>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	041a      	lsls	r2, r3, #16
 80024e8:	492d      	ldr	r1, [pc, #180]	@ (80025a0 <WS2812_Send+0xd4>)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	789b      	ldrb	r3, [r3, #2]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	431a      	orrs	r2, r3
 80024f6:	492a      	ldr	r1, [pc, #168]	@ (80025a0 <WS2812_Send+0xd4>)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	78db      	ldrb	r3, [r3, #3]
 8002500:	4313      	orrs	r3, r2
 8002502:	607b      	str	r3, [r7, #4]

		for (int i=23; i>=0; i--)
 8002504:	2317      	movs	r3, #23
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e01c      	b.n	8002544 <WS2812_Send+0x78>
		{
			if (color&(1<<i))
 800250a:	2201      	movs	r2, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	461a      	mov	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <WS2812_Send+0x62>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 800251c:	4a21      	ldr	r2, [pc, #132]	@ (80025a4 <WS2812_Send+0xd8>)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	213c      	movs	r1, #60	@ 0x3c
 8002522:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				indx++;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e007      	b.n	800253e <WS2812_Send+0x72>
			}
			else  // 1/3 of 90
			{
				pwmData[indx] = 30;
 800252e:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <WS2812_Send+0xd8>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	211e      	movs	r1, #30
 8002534:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				indx++;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3b01      	subs	r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	dadf      	bge.n	800250a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	3301      	adds	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b85      	cmp	r3, #133	@ 0x85
 8002554:	ddc2      	ble.n	80024dc <WS2812_Send+0x10>
			}
		}

	}

	for (int i=0; i<50; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	e00a      	b.n	8002572 <WS2812_Send+0xa6>
	{
		pwmData[indx] = 0;
 800255c:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <WS2812_Send+0xd8>)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2100      	movs	r1, #0
 8002562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	3301      	adds	r3, #1
 800256a:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	3301      	adds	r3, #1
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b31      	cmp	r3, #49	@ 0x31
 8002576:	ddf1      	ble.n	800255c <WS2812_Send+0x90>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2 , (uint32_t *)pwmData, indx);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	b29b      	uxth	r3, r3
 800257c:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <WS2812_Send+0xd8>)
 800257e:	2104      	movs	r1, #4
 8002580:	4809      	ldr	r0, [pc, #36]	@ (80025a8 <WS2812_Send+0xdc>)
 8002582:	f002 ff45 	bl	8005410 <HAL_TIM_PWM_Start_DMA>

	while (!datasentflag){};
 8002586:	bf00      	nop
 8002588:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <WS2812_Send+0xe0>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0fb      	beq.n	8002588 <WS2812_Send+0xbc>
		datasentflag = 0;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <WS2812_Send+0xe0>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000029c 	.word	0x2000029c
 80025a4:	20000504 	.word	0x20000504
 80025a8:	200004b8 	.word	0x200004b8
 80025ac:	200004b4 	.word	0x200004b4

080025b0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_2);
 80025b8:	2104      	movs	r1, #4
 80025ba:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80025bc:	f003 f926 	bl	800580c <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80025c0:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200004b8 	.word	0x200004b8
 80025d4:	200004b4 	.word	0x200004b4

080025d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025de:	f000 fd91 	bl	8003104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e2:	f000 f93f 	bl	8002864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e6:	f000 fa5d 	bl	8002aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80025ea:	f000 fa3d 	bl	8002a68 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025ee:	f000 fa0b 	bl	8002a08 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80025f2:	f000 f993 	bl	800291c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  init_screen();
 80025f6:	f7fe fc42 	bl	8000e7e <init_screen>

  ui();
 80025fa:	f7fe fe1d 	bl	8001238 <ui>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(update == 1){
 80025fe:	4b8f      	ldr	r3, [pc, #572]	@ (800283c <main+0x264>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d104      	bne.n	8002612 <main+0x3a>
		update = 0;
 8002608:	4b8c      	ldr	r3, [pc, #560]	@ (800283c <main+0x264>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
		ui();
 800260e:	f7fe fe13 	bl	8001238 <ui>
	}

	sendCommand(0x01, 0x03, 0x0004, 0x01);
 8002612:	2301      	movs	r3, #1
 8002614:	2204      	movs	r2, #4
 8002616:	2103      	movs	r1, #3
 8002618:	2001      	movs	r0, #1
 800261a:	f7fe fd33 	bl	8001084 <sendCommand>
	HAL_Delay(2);
 800261e:	2002      	movs	r0, #2
 8002620:	f000 fdd6 	bl	80031d0 <HAL_Delay>
	readResponse(7);
 8002624:	2007      	movs	r0, #7
 8002626:	f7fe fd81 	bl	800112c <readResponse>

	if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 0 && rs485 <= min_level){
 800262a:	2104      	movs	r1, #4
 800262c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002630:	f001 fa4a 	bl	8003ac8 <HAL_GPIO_ReadPin>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d112      	bne.n	8002660 <main+0x88>
 800263a:	4b81      	ldr	r3, [pc, #516]	@ (8002840 <main+0x268>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b21b      	sxth	r3, r3
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002648:	4b7e      	ldr	r3, [pc, #504]	@ (8002844 <main+0x26c>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	db03      	blt.n	8002660 <main+0x88>
		relay("ON");
 8002658:	487b      	ldr	r0, [pc, #492]	@ (8002848 <main+0x270>)
 800265a:	f7ff fedb 	bl	8002414 <relay>
 800265e:	e034      	b.n	80026ca <main+0xf2>
	}
	else if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 1 && rs485 <= max_level){
 8002660:	2104      	movs	r1, #4
 8002662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002666:	f001 fa2f 	bl	8003ac8 <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d10e      	bne.n	800268e <main+0xb6>
 8002670:	4b76      	ldr	r3, [pc, #472]	@ (800284c <main+0x274>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b21b      	sxth	r3, r3
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800267e:	4b71      	ldr	r3, [pc, #452]	@ (8002844 <main+0x26c>)
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268c:	da1d      	bge.n	80026ca <main+0xf2>

	}
	else if(HAL_GPIO_ReadPin(SSR_GPIO_Port, SSR_Pin) == 1 && rs485 >= max_level){
 800268e:	2104      	movs	r1, #4
 8002690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002694:	f001 fa18 	bl	8003ac8 <HAL_GPIO_ReadPin>
 8002698:	4603      	mov	r3, r0
 800269a:	2b01      	cmp	r3, #1
 800269c:	d112      	bne.n	80026c4 <main+0xec>
 800269e:	4b6b      	ldr	r3, [pc, #428]	@ (800284c <main+0x274>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ac:	4b65      	ldr	r3, [pc, #404]	@ (8002844 <main+0x26c>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d803      	bhi.n	80026c4 <main+0xec>
		relay("OFF");
 80026bc:	4864      	ldr	r0, [pc, #400]	@ (8002850 <main+0x278>)
 80026be:	f7ff fea9 	bl	8002414 <relay>
 80026c2:	e002      	b.n	80026ca <main+0xf2>
	}
	else{
		relay("OFF");
 80026c4:	4862      	ldr	r0, [pc, #392]	@ (8002850 <main+0x278>)
 80026c6:	f7ff fea5 	bl	8002414 <relay>
	}

	float level_size = 133.0f  / (max_well_level - min_well_level);
 80026ca:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <main+0x27c>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b61      	ldr	r3, [pc, #388]	@ (8002858 <main+0x280>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e2:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800285c <main+0x284>
 80026e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ea:	edc7 7a04 	vstr	s15, [r7, #16]
	uint8_t min = (min_level * level_size);
 80026ee:	4b54      	ldr	r3, [pc, #336]	@ (8002840 <main+0x268>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	ee07 3a90 	vmov	s15, r3
 80026f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002708:	edc7 7a01 	vstr	s15, [r7, #4]
 800270c:	793b      	ldrb	r3, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]
	uint8_t max = (max_level * level_size);
 8002710:	4b4e      	ldr	r3, [pc, #312]	@ (800284c <main+0x274>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b21b      	sxth	r3, r3
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800272a:	edc7 7a01 	vstr	s15, [r7, #4]
 800272e:	793b      	ldrb	r3, [r7, #4]
 8002730:	73bb      	strb	r3, [r7, #14]
	uint8_t min_well = (min_well_level * level_size);
 8002732:	4b49      	ldr	r3, [pc, #292]	@ (8002858 <main+0x280>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b21b      	sxth	r3, r3
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002740:	edd7 7a04 	vldr	s15, [r7, #16]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002750:	793b      	ldrb	r3, [r7, #4]
 8002752:	737b      	strb	r3, [r7, #13]
	uint8_t max_well = ((max_well_level - min_well_level) * level_size);
 8002754:	4b3f      	ldr	r3, [pc, #252]	@ (8002854 <main+0x27c>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b21b      	sxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	4b3e      	ldr	r3, [pc, #248]	@ (8002858 <main+0x280>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b21b      	sxth	r3, r3
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	ee07 3a90 	vmov	s15, r3
 8002768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800276c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002778:	edc7 7a01 	vstr	s15, [r7, #4]
 800277c:	793b      	ldrb	r3, [r7, #4]
 800277e:	733b      	strb	r3, [r7, #12]
	uint8_t level = (rs485 * level_size);
 8002780:	4b30      	ldr	r3, [pc, #192]	@ (8002844 <main+0x26c>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	edd7 7a04 	vldr	s15, [r7, #16]
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002792:	edc7 7a01 	vstr	s15, [r7, #4]
 8002796:	793b      	ldrb	r3, [r7, #4]
 8002798:	72fb      	strb	r3, [r7, #11]

	for(uint8_t l = 0; l<=133; l++){
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]
 800279e:	e015      	b.n	80027cc <main+0x1f4>
		if(l <= level){
 80027a0:	7dfa      	ldrb	r2, [r7, #23]
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d808      	bhi.n	80027ba <main+0x1e2>
			Set_LED(l, 0, 0, brightness);
 80027a8:	7df8      	ldrb	r0, [r7, #23]
 80027aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <main+0x288>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	f7ff fe5c 	bl	8002470 <Set_LED>
 80027b8:	e005      	b.n	80027c6 <main+0x1ee>
		}
		else{
			Set_LED(l, 0, 0, 0);
 80027ba:	7df8      	ldrb	r0, [r7, #23]
 80027bc:	2300      	movs	r3, #0
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	f7ff fe55 	bl	8002470 <Set_LED>
	for(uint8_t l = 0; l<=133; l++){
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
 80027c8:	3301      	adds	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b85      	cmp	r3, #133	@ 0x85
 80027d0:	d9e6      	bls.n	80027a0 <main+0x1c8>
		}
	}

	Set_LED(min, (brightness + 100), 0, 0);
 80027d2:	7bf8      	ldrb	r0, [r7, #15]
 80027d4:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <main+0x288>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 80027de:	2300      	movs	r3, #0
 80027e0:	2200      	movs	r2, #0
 80027e2:	f7ff fe45 	bl	8002470 <Set_LED>
	Set_LED(max, 0, (brightness + 100), 0);
 80027e6:	7bb8      	ldrb	r0, [r7, #14]
 80027e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <main+0x288>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80027f2:	2300      	movs	r3, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	f7ff fe3b 	bl	8002470 <Set_LED>
	Set_LED(min_well, (brightness - 5), (brightness - 5), (brightness - 5));
 80027fa:	7b78      	ldrb	r0, [r7, #13]
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <main+0x288>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	1f59      	subs	r1, r3, #5
 8002804:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <main+0x288>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	1f5a      	subs	r2, r3, #5
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <main+0x288>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	3b05      	subs	r3, #5
 8002814:	f7ff fe2c 	bl	8002470 <Set_LED>
	Set_LED(max_well, (brightness - 5), (brightness - 5), (brightness - 5));
 8002818:	7b38      	ldrb	r0, [r7, #12]
 800281a:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <main+0x288>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	1f59      	subs	r1, r3, #5
 8002822:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <main+0x288>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	1f5a      	subs	r2, r3, #5
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <main+0x288>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3b05      	subs	r3, #5
 8002832:	f7ff fe1d 	bl	8002470 <Set_LED>

	WS2812_Send();
 8002836:	f7ff fe49 	bl	80024cc <WS2812_Send>
  {
 800283a:	e6e0      	b.n	80025fe <main+0x26>
 800283c:	20000299 	.word	0x20000299
 8002840:	20000008 	.word	0x20000008
 8002844:	20000294 	.word	0x20000294
 8002848:	0800a2a8 	.word	0x0800a2a8
 800284c:	20000006 	.word	0x20000006
 8002850:	0800a2ac 	.word	0x0800a2ac
 8002854:	20000004 	.word	0x20000004
 8002858:	2000029a 	.word	0x2000029a
 800285c:	43050000 	.word	0x43050000
 8002860:	20000014 	.word	0x20000014

08002864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b09c      	sub	sp, #112	@ 0x70
 8002868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800286e:	2228      	movs	r2, #40	@ 0x28
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f005 fa43 	bl	8007cfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002878:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2230      	movs	r2, #48	@ 0x30
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f005 fa35 	bl	8007cfe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002894:	2301      	movs	r3, #1
 8002896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800289c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 800289e:	2303      	movs	r3, #3
 80028a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028a2:	2301      	movs	r3, #1
 80028a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028a6:	2302      	movs	r3, #2
 80028a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80028b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 f94c 	bl	8003b58 <HAL_RCC_OscConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80028c6:	f000 f9d7 	bl	8002c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ca:	230f      	movs	r3, #15
 80028cc:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ce:	2302      	movs	r3, #2
 80028d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028e0:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028e6:	2102      	movs	r1, #2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f002 f943 	bl	8004b74 <HAL_RCC_ClockConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028f4:	f000 f9c0 	bl	8002c78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028f8:	2301      	movs	r3, #1
 80028fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fb4a 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800290e:	f000 f9b3 	bl	8002c78 <Error_Handler>
  }
}
 8002912:	bf00      	nop
 8002914:	3770      	adds	r7, #112	@ 0x70
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	@ 0x38
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800293c:	463b      	mov	r3, r7
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800294e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 8002950:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002956:	4b2b      	ldr	r3, [pc, #172]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 8002958:	2200      	movs	r2, #0
 800295a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8002962:	4b28      	ldr	r3, [pc, #160]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 8002964:	2259      	movs	r2, #89	@ 0x59
 8002966:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002968:	4b26      	ldr	r3, [pc, #152]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296e:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002974:	4823      	ldr	r0, [pc, #140]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 8002976:	f002 fc93 	bl	80052a0 <HAL_TIM_Base_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002980:	f000 f97a 	bl	8002c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002988:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800298a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800298e:	4619      	mov	r1, r3
 8002990:	481c      	ldr	r0, [pc, #112]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 8002992:	f003 f93f 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800299c:	f000 f96c 	bl	8002c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029a0:	4818      	ldr	r0, [pc, #96]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 80029a2:	f002 fcd4 	bl	800534e <HAL_TIM_PWM_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80029ac:	f000 f964 	bl	8002c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	4811      	ldr	r0, [pc, #68]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 80029c0:	f003 feb6 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80029ca:	f000 f955 	bl	8002c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ce:	2360      	movs	r3, #96	@ 0x60
 80029d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029de:	463b      	mov	r3, r7
 80029e0:	2204      	movs	r2, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4807      	ldr	r0, [pc, #28]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 80029e6:	f003 f801 	bl	80059ec <HAL_TIM_PWM_ConfigChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80029f0:	f000 f942 	bl	8002c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029f4:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <MX_TIM2_Init+0xe8>)
 80029f6:	f000 f9b7 	bl	8002d68 <HAL_TIM_MspPostInit>

}
 80029fa:	bf00      	nop
 80029fc:	3738      	adds	r7, #56	@ 0x38
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200004b8 	.word	0x200004b8

08002a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a0e:	4a15      	ldr	r2, [pc, #84]	@ (8002a64 <MX_USART1_UART_Init+0x5c>)
 8002a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a12:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a2e:	220c      	movs	r2, #12
 8002a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a32:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a38:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a4a:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a4c:	f003 fed6 	bl	80067fc <HAL_UART_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a56:	f000 f90f 	bl	8002c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000020c 	.word	0x2000020c
 8002a64:	40013800 	.word	0x40013800

08002a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <MX_DMA_Init+0x38>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa0 <MX_DMA_Init+0x38>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6153      	str	r3, [r2, #20]
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <MX_DMA_Init+0x38>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2011      	movs	r0, #17
 8002a8c:	f000 fc9f 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002a90:	2011      	movs	r0, #17
 8002a92:	f000 fcb8 	bl	8003406 <HAL_NVIC_EnableIRQ>

}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002ac0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ac4:	6153      	str	r3, [r2, #20]
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b37      	ldr	r3, [pc, #220]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4a36      	ldr	r2, [pc, #216]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002adc:	6153      	str	r3, [r2, #20]
 8002ade:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b31      	ldr	r3, [pc, #196]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4a30      	ldr	r2, [pc, #192]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af4:	6153      	str	r3, [r2, #20]
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <MX_GPIO_Init+0x10c>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSR_Pin|MAX3485_EN_Pin, GPIO_PIN_RESET);
 8002b02:	2200      	movs	r2, #0
 8002b04:	f640 0104 	movw	r1, #2052	@ 0x804
 8002b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b0c:	f000 fff4 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TXB_16x2_D7_Pin|TXB_16x2_D6_Pin|TXB_16x2_D5_Pin|TXB_16x2_D4_Pin
 8002b10:	2200      	movs	r2, #0
 8002b12:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002b16:	4827      	ldr	r0, [pc, #156]	@ (8002bb4 <MX_GPIO_Init+0x110>)
 8002b18:	f000 ffee 	bl	8003af8 <HAL_GPIO_WritePin>
                          |TXB_16x2_E_Pin|TXB_16x2_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SSR_Pin MAX3485_EN_Pin */
  GPIO_InitStruct.Pin = SSR_Pin|MAX3485_EN_Pin;
 8002b1c:	f640 0304 	movw	r3, #2052	@ 0x804
 8002b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4619      	mov	r1, r3
 8002b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b38:	f000 fe54 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin S4_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S4_Pin;
 8002b3c:	2378      	movs	r3, #120	@ 0x78
 8002b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b54:	f000 fe46 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TXB_16x2_D7_Pin TXB_16x2_D6_Pin TXB_16x2_D5_Pin TXB_16x2_D4_Pin
                           TXB_16x2_E_Pin TXB_16x2_RS_Pin */
  GPIO_InitStruct.Pin = TXB_16x2_D7_Pin|TXB_16x2_D6_Pin|TXB_16x2_D5_Pin|TXB_16x2_D4_Pin
 8002b58:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8002b5c:	60fb      	str	r3, [r7, #12]
                          |TXB_16x2_E_Pin|TXB_16x2_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4810      	ldr	r0, [pc, #64]	@ (8002bb4 <MX_GPIO_Init+0x110>)
 8002b72:	f000 fe37 	bl	80037e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2009      	movs	r0, #9
 8002b7c:	f000 fc27 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b80:	2009      	movs	r0, #9
 8002b82:	f000 fc40 	bl	8003406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	200a      	movs	r0, #10
 8002b8c:	f000 fc1f 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b90:	200a      	movs	r0, #10
 8002b92:	f000 fc38 	bl	8003406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	2017      	movs	r0, #23
 8002b9c:	f000 fc17 	bl	80033ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ba0:	2017      	movs	r0, #23
 8002ba2:	f000 fc30 	bl	8003406 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ba6:	bf00      	nop
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	48000400 	.word	0x48000400

08002bb8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
	  cm = HAL_GetTick();
 8002bc2:	f000 faf9 	bl	80031b8 <HAL_GetTick>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4a25      	ldr	r2, [pc, #148]	@ (8002c60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002bca:	6013      	str	r3, [r2, #0]
	  if (cm - pm > 110)
 8002bcc:	4b24      	ldr	r3, [pc, #144]	@ (8002c60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b24      	ldr	r3, [pc, #144]	@ (8002c64 <HAL_GPIO_EXTI_Callback+0xac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b6e      	cmp	r3, #110	@ 0x6e
 8002bd8:	d93e      	bls.n	8002c58 <HAL_GPIO_EXTI_Callback+0xa0>
	  {
	    pm = cm;
 8002bda:	4b21      	ldr	r3, [pc, #132]	@ (8002c60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <HAL_GPIO_EXTI_Callback+0xac>)
 8002be0:	6013      	str	r3, [r2, #0]

		UNUSED(GPIO_Pin);

		if (GPIO_Pin == S1_Pin) {
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d112      	bne.n	8002c0e <HAL_GPIO_EXTI_Callback+0x56>
			if(page > 1){
 8002be8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d92f      	bls.n	8002c52 <HAL_GPIO_EXTI_Callback+0x9a>
				page--;
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002bfe:	701a      	strb	r2, [r3, #0]
				conf = 0;
 8002c00:	4b1a      	ldr	r3, [pc, #104]	@ (8002c6c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
				select = 1;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e021      	b.n	8002c52 <HAL_GPIO_EXTI_Callback+0x9a>
			}
		}
		else if (GPIO_Pin == S2_Pin) {
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	d103      	bne.n	8002c1c <HAL_GPIO_EXTI_Callback+0x64>
			conf = 1;
 8002c14:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e01a      	b.n	8002c52 <HAL_GPIO_EXTI_Callback+0x9a>
		}
		else if (GPIO_Pin == S3_Pin) {
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d107      	bne.n	8002c32 <HAL_GPIO_EXTI_Callback+0x7a>
				select++;
 8002c22:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e00f      	b.n	8002c52 <HAL_GPIO_EXTI_Callback+0x9a>
		}
		else if (GPIO_Pin == S4_Pin) {
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	2b40      	cmp	r3, #64	@ 0x40
 8002c36:	d10c      	bne.n	8002c52 <HAL_GPIO_EXTI_Callback+0x9a>
				page++;
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002c44:	701a      	strb	r2, [r3, #0]
				conf = 0;
 8002c46:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <HAL_GPIO_EXTI_Callback+0xb4>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
				select = 1;
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
		}

		update = 1;
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
	  }
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20003854 	.word	0x20003854
 8002c64:	20003850 	.word	0x20003850
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	20000298 	.word	0x20000298
 8002c70:	20000002 	.word	0x20000002
 8002c74:	20000299 	.word	0x20000299

08002c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c7c:	b672      	cpsid	i
}
 8002c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <Error_Handler+0x8>

08002c84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <HAL_MspInit+0x44>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc8 <HAL_MspInit+0x44>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6193      	str	r3, [r2, #24]
 8002c96:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <HAL_MspInit+0x44>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_MspInit+0x44>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4a08      	ldr	r2, [pc, #32]	@ (8002cc8 <HAL_MspInit+0x44>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	61d3      	str	r3, [r2, #28]
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_MspInit+0x44>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cdc:	d139      	bne.n	8002d52 <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cde:	4b1f      	ldr	r3, [pc, #124]	@ (8002d5c <HAL_TIM_Base_MspInit+0x90>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <HAL_TIM_Base_MspInit+0x90>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	61d3      	str	r3, [r2, #28]
 8002cea:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <HAL_TIM_Base_MspInit+0x90>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d64 <HAL_TIM_Base_MspInit+0x98>)
 8002cfa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002cfe:	2210      	movs	r2, #16
 8002d00:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d02:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002d08:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d0a:	2280      	movs	r2, #128	@ 0x80
 8002d0c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d14:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d1c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002d24:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002d2a:	480d      	ldr	r0, [pc, #52]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d2c:	f000 fb85 	bl	800343a <HAL_DMA_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8002d36:	f7ff ff9f 	bl	8002c78 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a08      	ldr	r2, [pc, #32]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d40:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d4c:	4a04      	ldr	r2, [pc, #16]	@ (8002d60 <HAL_TIM_Base_MspInit+0x94>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	2000380c 	.word	0x2000380c
 8002d64:	40020080 	.word	0x40020080

08002d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d88:	d11b      	bne.n	8002dc2 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8a:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <HAL_TIM_MspPostInit+0x64>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002dcc <HAL_TIM_MspPostInit+0x64>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d94:	6153      	str	r3, [r2, #20]
 8002d96:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <HAL_TIM_MspPostInit+0x64>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 8002da2:	2308      	movs	r3, #8
 8002da4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4804      	ldr	r0, [pc, #16]	@ (8002dd0 <HAL_TIM_MspPostInit+0x68>)
 8002dbe:	f000 fd11 	bl	80037e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dc2:	bf00      	nop
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	48000400 	.word	0x48000400

08002dd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	@ 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a18      	ldr	r2, [pc, #96]	@ (8002e54 <HAL_UART_MspInit+0x80>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d129      	bne.n	8002e4a <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002df6:	4b18      	ldr	r3, [pc, #96]	@ (8002e58 <HAL_UART_MspInit+0x84>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	@ (8002e58 <HAL_UART_MspInit+0x84>)
 8002dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e00:	6193      	str	r3, [r2, #24]
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <HAL_UART_MspInit+0x84>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <HAL_UART_MspInit+0x84>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <HAL_UART_MspInit+0x84>)
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e18:	6153      	str	r3, [r2, #20]
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <HAL_UART_MspInit+0x84>)
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MAX3485_OUT_Pin|MAX3485_IN_Pin;
 8002e26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e38:	2307      	movs	r3, #7
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4619      	mov	r1, r3
 8002e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e46:	f000 fccd 	bl	80037e4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002e4a:	bf00      	nop
 8002e4c:	3728      	adds	r7, #40	@ 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40013800 	.word	0x40013800
 8002e58:	40021000 	.word	0x40021000

08002e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <NMI_Handler+0x4>

08002e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <HardFault_Handler+0x4>

08002e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <MemManage_Handler+0x4>

08002e74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <BusFault_Handler+0x4>

08002e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <UsageFault_Handler+0x4>

08002e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb2:	f000 f96d 	bl	8003190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8002ebe:	2008      	movs	r0, #8
 8002ec0:	f000 fe32 	bl	8003b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8002ecc:	2010      	movs	r0, #16
 8002ece:	f000 fe2b 	bl	8003b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002edc:	4802      	ldr	r0, [pc, #8]	@ (8002ee8 <DMA1_Channel7_IRQHandler+0x10>)
 8002ede:	f000 fb90 	bl	8003602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	2000380c 	.word	0x2000380c

08002eec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8002ef0:	2020      	movs	r0, #32
 8002ef2:	f000 fe19 	bl	8003b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S4_Pin);
 8002ef6:	2040      	movs	r0, #64	@ 0x40
 8002ef8:	f000 fe16 	bl	8003b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return 1;
 8002f04:	2301      	movs	r3, #1
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <_kill>:

int _kill(int pid, int sig)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f1a:	f004 ff43 	bl	8007da4 <__errno>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2216      	movs	r2, #22
 8002f22:	601a      	str	r2, [r3, #0]
  return -1;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <_exit>:

void _exit (int status)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f38:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ffe7 	bl	8002f10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f42:	bf00      	nop
 8002f44:	e7fd      	b.n	8002f42 <_exit+0x12>

08002f46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e00a      	b.n	8002f6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f58:	f3af 8000 	nop.w
 8002f5c:	4601      	mov	r1, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	60ba      	str	r2, [r7, #8]
 8002f64:	b2ca      	uxtb	r2, r1
 8002f66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	dbf0      	blt.n	8002f58 <_read+0x12>
  }

  return len;
 8002f76:	687b      	ldr	r3, [r7, #4]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e009      	b.n	8002fa6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	60ba      	str	r2, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	dbf1      	blt.n	8002f92 <_write+0x12>
  }
  return len;
 8002fae:	687b      	ldr	r3, [r7, #4]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_close>:

int _close(int file)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fe0:	605a      	str	r2, [r3, #4]
  return 0;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_isatty>:

int _isatty(int file)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff8:	2301      	movs	r3, #1
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003028:	4a14      	ldr	r2, [pc, #80]	@ (800307c <_sbrk+0x5c>)
 800302a:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <_sbrk+0x60>)
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	@ (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003050:	f004 fea8 	bl	8007da4 <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	4a05      	ldr	r2, [pc, #20]	@ (8003084 <_sbrk+0x64>)
 8003070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20004000 	.word	0x20004000
 8003080:	00000400 	.word	0x00000400
 8003084:	20003858 	.word	0x20003858
 8003088:	200039b0 	.word	0x200039b0

0800308c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <SystemInit+0x20>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003096:	4a05      	ldr	r2, [pc, #20]	@ (80030ac <SystemInit+0x20>)
 8003098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80030b4:	f7ff ffea 	bl	800308c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b8:	480c      	ldr	r0, [pc, #48]	@ (80030ec <LoopForever+0x6>)
  ldr r1, =_edata
 80030ba:	490d      	ldr	r1, [pc, #52]	@ (80030f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030bc:	4a0d      	ldr	r2, [pc, #52]	@ (80030f4 <LoopForever+0xe>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030c0:	e002      	b.n	80030c8 <LoopCopyDataInit>

080030c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c6:	3304      	adds	r3, #4

080030c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030cc:	d3f9      	bcc.n	80030c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ce:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030d0:	4c0a      	ldr	r4, [pc, #40]	@ (80030fc <LoopForever+0x16>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d4:	e001      	b.n	80030da <LoopFillZerobss>

080030d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d8:	3204      	adds	r2, #4

080030da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030dc:	d3fb      	bcc.n	80030d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030de:	f004 fe67 	bl	8007db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030e2:	f7ff fa79 	bl	80025d8 <main>

080030e6 <LoopForever>:

LoopForever:
    b LoopForever
 80030e6:	e7fe      	b.n	80030e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80030ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80030f4:	0800a66c 	.word	0x0800a66c
  ldr r2, =_sbss
 80030f8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80030fc:	200039ac 	.word	0x200039ac

08003100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003100:	e7fe      	b.n	8003100 <ADC1_IRQHandler>
	...

08003104 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003108:	4b08      	ldr	r3, [pc, #32]	@ (800312c <HAL_Init+0x28>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a07      	ldr	r2, [pc, #28]	@ (800312c <HAL_Init+0x28>)
 800310e:	f043 0310 	orr.w	r3, r3, #16
 8003112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003114:	2003      	movs	r0, #3
 8003116:	f000 f94f 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800311a:	200f      	movs	r0, #15
 800311c:	f000 f808 	bl	8003130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003120:	f7ff fdb0 	bl	8002c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40022000 	.word	0x40022000

08003130 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003138:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_InitTick+0x54>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <HAL_InitTick+0x58>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	4619      	mov	r1, r3
 8003142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003146:	fbb3 f3f1 	udiv	r3, r3, r1
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f967 	bl	8003422 <HAL_SYSTICK_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e00e      	b.n	800317c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b0f      	cmp	r3, #15
 8003162:	d80a      	bhi.n	800317a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003164:	2200      	movs	r2, #0
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	f000 f92f 	bl	80033ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003170:	4a06      	ldr	r2, [pc, #24]	@ (800318c <HAL_InitTick+0x5c>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	2000001c 	.word	0x2000001c
 8003188:	20000024 	.word	0x20000024
 800318c:	20000020 	.word	0x20000020

08003190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_IncTick+0x20>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_IncTick+0x24>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	4a04      	ldr	r2, [pc, #16]	@ (80031b4 <HAL_IncTick+0x24>)
 80031a2:	6013      	str	r3, [r2, #0]
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000024 	.word	0x20000024
 80031b4:	2000385c 	.word	0x2000385c

080031b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80031bc:	4b03      	ldr	r3, [pc, #12]	@ (80031cc <HAL_GetTick+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	2000385c 	.word	0x2000385c

080031d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7ff ffee 	bl	80031b8 <HAL_GetTick>
 80031dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d005      	beq.n	80031f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <HAL_Delay+0x44>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80031f6:	bf00      	nop
 80031f8:	f7ff ffde 	bl	80031b8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	429a      	cmp	r2, r3
 8003206:	d8f7      	bhi.n	80031f8 <HAL_Delay+0x28>
  {
  }
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000024 	.word	0x20000024

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	@ (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	@ (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db0b      	blt.n	80032a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4907      	ldr	r1, [pc, #28]	@ (80032b4 <__NVIC_EnableIRQ+0x38>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	@ (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	@ (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	@ 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	@ 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff8e 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff29 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff3e 	bl	8003260 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff8e 	bl	800330c <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5d 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff31 	bl	800327c <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffa2 	bl	8003374 <SysTick_Config>
 8003430:	4603      	mov	r3, r0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e037      	b.n	80034c0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003466:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800346a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f97e 	bl	80037a4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_DMA_Start_IT+0x20>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e04a      	b.n	800357e <HAL_DMA_Start_IT+0xb6>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d13a      	bne.n	8003570 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f912 	bl	8003748 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 020e 	orr.w	r2, r2, #14
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e00f      	b.n	800355e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 020a 	orr.w	r2, r2, #10
 800354c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0204 	bic.w	r2, r2, #4
 800355c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e005      	b.n	800357c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003578:	2302      	movs	r3, #2
 800357a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800357c:	7dfb      	ldrb	r3, [r7, #23]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003598:	2b02      	cmp	r3, #2
 800359a:	d005      	beq.n	80035a8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2204      	movs	r2, #4
 80035a0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e027      	b.n	80035f8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 020e 	bic.w	r2, r2, #14
 80035b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f202 	lsl.w	r2, r1, r2
 80035d6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
    }
  }
  return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	2204      	movs	r2, #4
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d024      	beq.n	8003674 <HAL_DMA_IRQHandler+0x72>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01f      	beq.n	8003674 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0204 	bic.w	r2, r2, #4
 8003650:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365a:	2104      	movs	r1, #4
 800365c:	fa01 f202 	lsl.w	r2, r1, r2
 8003660:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d06a      	beq.n	8003740 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003672:	e065      	b.n	8003740 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2202      	movs	r2, #2
 800367a:	409a      	lsls	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02c      	beq.n	80036de <HAL_DMA_IRQHandler+0xdc>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d027      	beq.n	80036de <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 020a 	bic.w	r2, r2, #10
 80036aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	2102      	movs	r1, #2
 80036be:	fa01 f202 	lsl.w	r2, r1, r2
 80036c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d035      	beq.n	8003740 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036dc:	e030      	b.n	8003740 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	2208      	movs	r2, #8
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d028      	beq.n	8003740 <HAL_DMA_IRQHandler+0x13e>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d023      	beq.n	8003740 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 020e 	bic.w	r2, r2, #14
 8003706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
    }
  }
}
 800373e:	e7ff      	b.n	8003740 <HAL_DMA_IRQHandler+0x13e>
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b10      	cmp	r3, #16
 8003774:	d108      	bne.n	8003788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003786:	e007      	b.n	8003798 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <DMA_CalcBaseAndBitshift+0x34>)
 80037b4:	4413      	add	r3, r2
 80037b6:	4a09      	ldr	r2, [pc, #36]	@ (80037dc <DMA_CalcBaseAndBitshift+0x38>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	009a      	lsls	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a06      	ldr	r2, [pc, #24]	@ (80037e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80037c8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	bffdfff8 	.word	0xbffdfff8
 80037dc:	cccccccd 	.word	0xcccccccd
 80037e0:	40020000 	.word	0x40020000

080037e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f2:	e14e      	b.n	8003a92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	4013      	ands	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8140 	beq.w	8003a8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d005      	beq.n	8003824 <HAL_GPIO_Init+0x40>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d130      	bne.n	8003886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800385a:	2201      	movs	r2, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 0201 	and.w	r2, r3, #1
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b03      	cmp	r3, #3
 8003890:	d017      	beq.n	80038c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d123      	bne.n	8003916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	08da      	lsrs	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3208      	adds	r2, #8
 80038d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	220f      	movs	r2, #15
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4013      	ands	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	08da      	lsrs	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3208      	adds	r2, #8
 8003910:	6939      	ldr	r1, [r7, #16]
 8003912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	2203      	movs	r2, #3
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0203 	and.w	r2, r3, #3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 809a 	beq.w	8003a8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003958:	4b55      	ldr	r3, [pc, #340]	@ (8003ab0 <HAL_GPIO_Init+0x2cc>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	4a54      	ldr	r2, [pc, #336]	@ (8003ab0 <HAL_GPIO_Init+0x2cc>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6193      	str	r3, [r2, #24]
 8003964:	4b52      	ldr	r3, [pc, #328]	@ (8003ab0 <HAL_GPIO_Init+0x2cc>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003970:	4a50      	ldr	r2, [pc, #320]	@ (8003ab4 <HAL_GPIO_Init+0x2d0>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	3302      	adds	r3, #2
 8003978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800399a:	d013      	beq.n	80039c4 <HAL_GPIO_Init+0x1e0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a46      	ldr	r2, [pc, #280]	@ (8003ab8 <HAL_GPIO_Init+0x2d4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00d      	beq.n	80039c0 <HAL_GPIO_Init+0x1dc>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a45      	ldr	r2, [pc, #276]	@ (8003abc <HAL_GPIO_Init+0x2d8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <HAL_GPIO_Init+0x1d8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a44      	ldr	r2, [pc, #272]	@ (8003ac0 <HAL_GPIO_Init+0x2dc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_GPIO_Init+0x1d4>
 80039b4:	2303      	movs	r3, #3
 80039b6:	e006      	b.n	80039c6 <HAL_GPIO_Init+0x1e2>
 80039b8:	2305      	movs	r3, #5
 80039ba:	e004      	b.n	80039c6 <HAL_GPIO_Init+0x1e2>
 80039bc:	2302      	movs	r3, #2
 80039be:	e002      	b.n	80039c6 <HAL_GPIO_Init+0x1e2>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_GPIO_Init+0x1e2>
 80039c4:	2300      	movs	r3, #0
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	f002 0203 	and.w	r2, r2, #3
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	4093      	lsls	r3, r2
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039d6:	4937      	ldr	r1, [pc, #220]	@ (8003ab4 <HAL_GPIO_Init+0x2d0>)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039e4:	4b37      	ldr	r3, [pc, #220]	@ (8003ac4 <HAL_GPIO_Init+0x2e0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a08:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac4 <HAL_GPIO_Init+0x2e0>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac4 <HAL_GPIO_Init+0x2e0>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a32:	4a24      	ldr	r2, [pc, #144]	@ (8003ac4 <HAL_GPIO_Init+0x2e0>)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a38:	4b22      	ldr	r3, [pc, #136]	@ (8003ac4 <HAL_GPIO_Init+0x2e0>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a5c:	4a19      	ldr	r2, [pc, #100]	@ (8003ac4 <HAL_GPIO_Init+0x2e0>)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a62:	4b18      	ldr	r3, [pc, #96]	@ (8003ac4 <HAL_GPIO_Init+0x2e0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a86:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac4 <HAL_GPIO_Init+0x2e0>)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f47f aea9 	bne.w	80037f4 <HAL_GPIO_Init+0x10>
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	48000400 	.word	0x48000400
 8003abc:	48000800 	.word	0x48000800
 8003ac0:	48000c00 	.word	0x48000c00
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e001      	b.n	8003aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b14:	e002      	b.n	8003b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b32:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b3e:	4a05      	ldr	r2, [pc, #20]	@ (8003b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff f836 	bl	8002bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40010400 	.word	0x40010400

08003b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b68:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f000 bff4 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 816d 	beq.w	8003e6e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b94:	4bb4      	ldr	r3, [pc, #720]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00c      	beq.n	8003bba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ba0:	4bb1      	ldr	r3, [pc, #708]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d157      	bne.n	8003c5c <HAL_RCC_OscConfig+0x104>
 8003bac:	4bae      	ldr	r3, [pc, #696]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb8:	d150      	bne.n	8003c5c <HAL_RCC_OscConfig+0x104>
 8003bba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bbe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bda:	d802      	bhi.n	8003be2 <HAL_RCC_OscConfig+0x8a>
 8003bdc:	4ba2      	ldr	r3, [pc, #648]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	e015      	b.n	8003c0e <HAL_RCC_OscConfig+0xb6>
 8003be2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003be6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003bf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bfa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003bfe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003c0a:	4b97      	ldr	r3, [pc, #604]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c12:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003c16:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003c1a:	fa92 f2a2 	rbit	r2, r2
 8003c1e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003c22:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003c26:	fab2 f282 	clz	r2, r2
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	f042 0220 	orr.w	r2, r2, #32
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	f002 021f 	and.w	r2, r2, #31
 8003c36:	2101      	movs	r1, #1
 8003c38:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8114 	beq.w	8003e6c <HAL_RCC_OscConfig+0x314>
 8003c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 810b 	bne.w	8003e6c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f000 bf85 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6c:	d106      	bne.n	8003c7c <HAL_RCC_OscConfig+0x124>
 8003c6e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7d      	ldr	r2, [pc, #500]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e036      	b.n	8003cea <HAL_RCC_OscConfig+0x192>
 8003c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x14e>
 8003c8c:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a75      	ldr	r2, [pc, #468]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b73      	ldr	r3, [pc, #460]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a72      	ldr	r2, [pc, #456]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e021      	b.n	8003cea <HAL_RCC_OscConfig+0x192>
 8003ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x17a>
 8003cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a6a      	ldr	r2, [pc, #424]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b68      	ldr	r3, [pc, #416]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a67      	ldr	r2, [pc, #412]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e00b      	b.n	8003cea <HAL_RCC_OscConfig+0x192>
 8003cd2:	4b65      	ldr	r3, [pc, #404]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a64      	ldr	r2, [pc, #400]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b62      	ldr	r3, [pc, #392]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a61      	ldr	r2, [pc, #388]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003ce4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cea:	4b5f      	ldr	r3, [pc, #380]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cee:	f023 020f 	bic.w	r2, r3, #15
 8003cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	495a      	ldr	r1, [pc, #360]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d054      	beq.n	8003dbe <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7ff fa50 	bl	80031b8 <HAL_GetTick>
 8003d18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d1e:	f7ff fa4b 	bl	80031b8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	@ 0x64
 8003d2c:	d902      	bls.n	8003d34 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f000 bf19 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>
 8003d34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d38:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003d48:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d54:	d802      	bhi.n	8003d5c <HAL_RCC_OscConfig+0x204>
 8003d56:	4b44      	ldr	r3, [pc, #272]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	e015      	b.n	8003d88 <HAL_RCC_OscConfig+0x230>
 8003d5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003d78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003d84:	4b38      	ldr	r3, [pc, #224]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d8c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003d90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003d94:	fa92 f2a2 	rbit	r2, r2
 8003d98:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003d9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003da0:	fab2 f282 	clz	r2, r2
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f042 0220 	orr.w	r2, r2, #32
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f002 021f 	and.w	r2, r2, #31
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f202 	lsl.w	r2, r1, r2
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0b0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1c6>
 8003dbc:	e057      	b.n	8003e6e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7ff f9fb 	bl	80031b8 <HAL_GetTick>
 8003dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7ff f9f6 	bl	80031b8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b64      	cmp	r3, #100	@ 0x64
 8003dd6:	d902      	bls.n	8003dde <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	f000 bec4 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>
 8003dde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003de2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003df2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dfe:	d802      	bhi.n	8003e06 <HAL_RCC_OscConfig+0x2ae>
 8003e00:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x2da>
 8003e06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e0a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e1e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e68 <HAL_RCC_OscConfig+0x310>)
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e36:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003e3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e3e:	fa92 f2a2 	rbit	r2, r2
 8003e42:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003e46:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003e4a:	fab2 f282 	clz	r2, r2
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	f042 0220 	orr.w	r2, r2, #32
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	f002 021f 	and.w	r2, r2, #31
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1b0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x270>
 8003e66:	e002      	b.n	8003e6e <HAL_RCC_OscConfig+0x316>
 8003e68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 816c 	beq.w	800415c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e84:	4bcc      	ldr	r3, [pc, #816]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00b      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e90:	4bc9      	ldr	r3, [pc, #804]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d16d      	bne.n	8003f78 <HAL_RCC_OscConfig+0x420>
 8003e9c:	4bc6      	ldr	r3, [pc, #792]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d167      	bne.n	8003f78 <HAL_RCC_OscConfig+0x420>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003eba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ec6:	d802      	bhi.n	8003ece <HAL_RCC_OscConfig+0x376>
 8003ec8:	4bbb      	ldr	r3, [pc, #748]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	e013      	b.n	8003ef6 <HAL_RCC_OscConfig+0x39e>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003ee6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003ef2:	4bb1      	ldr	r3, [pc, #708]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003efc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003f00:	fa92 f2a2 	rbit	r2, r2
 8003f04:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003f08:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003f0c:	fab2 f282 	clz	r2, r2
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	f042 0220 	orr.w	r2, r2, #32
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	f002 021f 	and.w	r2, r2, #31
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCC_OscConfig+0x3e6>
 8003f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d002      	beq.n	8003f3e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f000 be14 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3e:	4b9e      	ldr	r3, [pc, #632]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	21f8      	movs	r1, #248	@ 0xf8
 8003f54:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003f5c:	fa91 f1a1 	rbit	r1, r1
 8003f60:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003f64:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003f68:	fab1 f181 	clz	r1, r1
 8003f6c:	b2c9      	uxtb	r1, r1
 8003f6e:	408b      	lsls	r3, r1
 8003f70:	4991      	ldr	r1, [pc, #580]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f76:	e0f1      	b.n	800415c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8083 	beq.w	8004090 <HAL_RCC_OscConfig+0x538>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003f9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003faa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7ff f8ff 	bl	80031b8 <HAL_GetTick>
 8003fba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7ff f8fa 	bl	80031b8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d902      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	f000 bdc8 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003fe8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	fab3 f383 	clz	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ff4:	d802      	bhi.n	8003ffc <HAL_RCC_OscConfig+0x4a4>
 8003ff6:	4b70      	ldr	r3, [pc, #448]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	e013      	b.n	8004024 <HAL_RCC_OscConfig+0x4cc>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800400e:	2302      	movs	r3, #2
 8004010:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004014:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004020:	4b65      	ldr	r3, [pc, #404]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	2202      	movs	r2, #2
 8004026:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800402a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800402e:	fa92 f2a2 	rbit	r2, r2
 8004032:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004036:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800403a:	fab2 f282 	clz	r2, r2
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	f042 0220 	orr.w	r2, r2, #32
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	f002 021f 	and.w	r2, r2, #31
 800404a:	2101      	movs	r1, #1
 800404c:	fa01 f202 	lsl.w	r2, r1, r2
 8004050:	4013      	ands	r3, r2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0b4      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b58      	ldr	r3, [pc, #352]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800405e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004062:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	21f8      	movs	r1, #248	@ 0xf8
 800406c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004074:	fa91 f1a1 	rbit	r1, r1
 8004078:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800407c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004080:	fab1 f181 	clz	r1, r1
 8004084:	b2c9      	uxtb	r1, r1
 8004086:	408b      	lsls	r3, r1
 8004088:	494b      	ldr	r1, [pc, #300]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
 800408e:	e065      	b.n	800415c <HAL_RCC_OscConfig+0x604>
 8004090:	2301      	movs	r3, #1
 8004092:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80040a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	461a      	mov	r2, r3
 80040b8:	2300      	movs	r3, #0
 80040ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7ff f87c 	bl	80031b8 <HAL_GetTick>
 80040c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c6:	f7ff f877 	bl	80031b8 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d902      	bls.n	80040dc <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	f000 bd45 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>
 80040dc:	2302      	movs	r3, #2
 80040de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80040ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80040fa:	d802      	bhi.n	8004102 <HAL_RCC_OscConfig+0x5aa>
 80040fc:	4b2e      	ldr	r3, [pc, #184]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	e013      	b.n	800412a <HAL_RCC_OscConfig+0x5d2>
 8004102:	2302      	movs	r3, #2
 8004104:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800410c:	fa93 f3a3 	rbit	r3, r3
 8004110:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004114:	2302      	movs	r3, #2
 8004116:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800411a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <HAL_RCC_OscConfig+0x660>)
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	2202      	movs	r2, #2
 800412c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004130:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004134:	fa92 f2a2 	rbit	r2, r2
 8004138:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800413c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004140:	fab2 f282 	clz	r2, r2
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	f042 0220 	orr.w	r2, r2, #32
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	f002 021f 	and.w	r2, r2, #31
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f202 	lsl.w	r2, r1, r2
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1b4      	bne.n	80040c6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004160:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8115 	beq.w	800439c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004176:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d07e      	beq.n	8004280 <HAL_RCC_OscConfig+0x728>
 8004182:	2301      	movs	r3, #1
 8004184:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <HAL_RCC_OscConfig+0x664>)
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	461a      	mov	r2, r3
 80041a8:	2301      	movs	r3, #1
 80041aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ac:	f7ff f804 	bl	80031b8 <HAL_GetTick>
 80041b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b4:	e00f      	b.n	80041d6 <HAL_RCC_OscConfig+0x67e>
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fe fffa 	bl	80031b8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d902      	bls.n	80041d6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	f000 bcc8 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80041e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80041f0:	2202      	movs	r2, #2
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	fa93 f2a3 	rbit	r2, r3
 8004202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004214:	2202      	movs	r2, #2
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	fa93 f2a3 	rbit	r2, r3
 8004226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800422e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004230:	4bb0      	ldr	r3, [pc, #704]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 8004232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004238:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800423c:	2102      	movs	r1, #2
 800423e:	6019      	str	r1, [r3, #0]
 8004240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004244:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	fa93 f1a3 	rbit	r1, r3
 800424e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004252:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004256:	6019      	str	r1, [r3, #0]
  return result;
 8004258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800425c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0a0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x668>
 800427e:	e08d      	b.n	800439c <HAL_RCC_OscConfig+0x844>
 8004280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004284:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004290:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	fa93 f2a3 	rbit	r2, r3
 800429a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042a2:	601a      	str	r2, [r3, #0]
  return result;
 80042a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b90      	ldr	r3, [pc, #576]	@ (80044f8 <HAL_RCC_OscConfig+0x9a0>)
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	461a      	mov	r2, r3
 80042be:	2300      	movs	r3, #0
 80042c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c2:	f7fe ff79 	bl	80031b8 <HAL_GetTick>
 80042c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fe ff74 	bl	80031b8 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d902      	bls.n	80042e2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	f000 bc42 	b.w	8004b66 <HAL_RCC_OscConfig+0x100e>
 80042e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80042ea:	2202      	movs	r2, #2
 80042ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	fa93 f2a3 	rbit	r2, r3
 80042fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004300:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800430e:	2202      	movs	r2, #2
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004316:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	fa93 f2a3 	rbit	r2, r3
 8004320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004332:	2202      	movs	r2, #2
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	fa93 f2a3 	rbit	r2, r3
 8004344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004348:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800434c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434e:	4b69      	ldr	r3, [pc, #420]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 8004350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004356:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800435a:	2102      	movs	r1, #2
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004362:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	fa93 f1a3 	rbit	r1, r3
 800436c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004370:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004374:	6019      	str	r1, [r3, #0]
  return result;
 8004376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	2101      	movs	r1, #1
 8004392:	fa01 f303 	lsl.w	r3, r1, r3
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d197      	bne.n	80042cc <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800439c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 819e 	beq.w	80046ee <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b8:	4b4e      	ldr	r3, [pc, #312]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b4b      	ldr	r3, [pc, #300]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	4a4a      	ldr	r2, [pc, #296]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	61d3      	str	r3, [r2, #28]
 80043d0:	4b48      	ldr	r3, [pc, #288]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80043d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80043ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b42      	ldr	r3, [pc, #264]	@ (80044fc <HAL_RCC_OscConfig+0x9a4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11a      	bne.n	8004434 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fe:	4b3f      	ldr	r3, [pc, #252]	@ (80044fc <HAL_RCC_OscConfig+0x9a4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3e      	ldr	r2, [pc, #248]	@ (80044fc <HAL_RCC_OscConfig+0x9a4>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fe fed5 	bl	80031b8 <HAL_GetTick>
 800440e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004412:	e009      	b.n	8004428 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004414:	f7fe fed0 	bl	80031b8 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b64      	cmp	r3, #100	@ 0x64
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e39e      	b.n	8004b66 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	4b34      	ldr	r3, [pc, #208]	@ (80044fc <HAL_RCC_OscConfig+0x9a4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0ef      	beq.n	8004414 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004438:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x8fa>
 8004444:	4b2b      	ldr	r3, [pc, #172]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a2a      	ldr	r2, [pc, #168]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6213      	str	r3, [r2, #32]
 8004450:	e035      	b.n	80044be <HAL_RCC_OscConfig+0x966>
 8004452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004456:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x924>
 8004462:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	4a23      	ldr	r2, [pc, #140]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	6213      	str	r3, [r2, #32]
 800446e:	4b21      	ldr	r3, [pc, #132]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4a20      	ldr	r2, [pc, #128]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	6213      	str	r3, [r2, #32]
 800447a:	e020      	b.n	80044be <HAL_RCC_OscConfig+0x966>
 800447c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004480:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b05      	cmp	r3, #5
 800448a:	d10c      	bne.n	80044a6 <HAL_RCC_OscConfig+0x94e>
 800448c:	4b19      	ldr	r3, [pc, #100]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 8004492:	f043 0304 	orr.w	r3, r3, #4
 8004496:	6213      	str	r3, [r2, #32]
 8004498:	4b16      	ldr	r3, [pc, #88]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4a15      	ldr	r2, [pc, #84]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	6213      	str	r3, [r2, #32]
 80044a4:	e00b      	b.n	80044be <HAL_RCC_OscConfig+0x966>
 80044a6:	4b13      	ldr	r3, [pc, #76]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	4a12      	ldr	r2, [pc, #72]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6213      	str	r3, [r2, #32]
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	4a0f      	ldr	r2, [pc, #60]	@ (80044f4 <HAL_RCC_OscConfig+0x99c>)
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8087 	beq.w	80045de <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d0:	f7fe fe72 	bl	80031b8 <HAL_GetTick>
 80044d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d8:	e012      	b.n	8004500 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fe fe6d 	bl	80031b8 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d908      	bls.n	8004500 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e339      	b.n	8004b66 <HAL_RCC_OscConfig+0x100e>
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	10908120 	.word	0x10908120
 80044fc:	40007000 	.word	0x40007000
 8004500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004504:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004508:	2202      	movs	r2, #2
 800450a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004510:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	fa93 f2a3 	rbit	r2, r3
 800451a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800451e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004528:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800452c:	2202      	movs	r2, #2
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004534:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	fa93 f2a3 	rbit	r2, r3
 800453e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004542:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004546:	601a      	str	r2, [r3, #0]
  return result;
 8004548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004550:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <HAL_RCC_OscConfig+0xa10>
 8004562:	4b98      	ldr	r3, [pc, #608]	@ (80047c4 <HAL_RCC_OscConfig+0xc6c>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	e013      	b.n	8004590 <HAL_RCC_OscConfig+0xa38>
 8004568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004570:	2202      	movs	r2, #2
 8004572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004578:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fa93 f2a3 	rbit	r2, r3
 8004582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004586:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	4b8d      	ldr	r3, [pc, #564]	@ (80047c4 <HAL_RCC_OscConfig+0xc6c>)
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004594:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004598:	2102      	movs	r1, #2
 800459a:	6011      	str	r1, [r2, #0]
 800459c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	fa92 f1a2 	rbit	r1, r2
 80045aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045b2:	6011      	str	r1, [r2, #0]
  return result;
 80045b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	fab2 f282 	clz	r2, r2
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	f002 021f 	and.w	r2, r2, #31
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f202 	lsl.w	r2, r1, r2
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f43f af7f 	beq.w	80044da <HAL_RCC_OscConfig+0x982>
 80045dc:	e07d      	b.n	80046da <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fe fdeb 	bl	80031b8 <HAL_GetTick>
 80045e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe fde6 	bl	80031b8 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e2b2      	b.n	8004b66 <HAL_RCC_OscConfig+0x100e>
 8004600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004604:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004608:	2202      	movs	r2, #2
 800460a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004610:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	fa93 f2a3 	rbit	r2, r3
 800461a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004628:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800462c:	2202      	movs	r2, #2
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004634:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004642:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004646:	601a      	str	r2, [r3, #0]
  return result;
 8004648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004650:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004652:	fab3 f383 	clz	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_RCC_OscConfig+0xb10>
 8004662:	4b58      	ldr	r3, [pc, #352]	@ (80047c4 <HAL_RCC_OscConfig+0xc6c>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	e013      	b.n	8004690 <HAL_RCC_OscConfig+0xb38>
 8004668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004678:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	fa93 f2a3 	rbit	r2, r3
 8004682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004686:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	4b4d      	ldr	r3, [pc, #308]	@ (80047c4 <HAL_RCC_OscConfig+0xc6c>)
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004694:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004698:	2102      	movs	r1, #2
 800469a:	6011      	str	r1, [r2, #0]
 800469c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046a0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	fa92 f1a2 	rbit	r1, r2
 80046aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046ae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046b2:	6011      	str	r1, [r2, #0]
  return result;
 80046b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046b8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	fab2 f282 	clz	r2, r2
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	f002 021f 	and.w	r2, r2, #31
 80046ce:	2101      	movs	r1, #1
 80046d0:	fa01 f202 	lsl.w	r2, r1, r2
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d186      	bne.n	80045e8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046da:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e2:	4b38      	ldr	r3, [pc, #224]	@ (80047c4 <HAL_RCC_OscConfig+0xc6c>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	4a37      	ldr	r2, [pc, #220]	@ (80047c4 <HAL_RCC_OscConfig+0xc6c>)
 80046e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8232 	beq.w	8004b64 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004700:	4b30      	ldr	r3, [pc, #192]	@ (80047c4 <HAL_RCC_OscConfig+0xc6c>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	f000 8201 	beq.w	8004b10 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004712:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	2b02      	cmp	r3, #2
 800471c:	f040 8157 	bne.w	80049ce <HAL_RCC_OscConfig+0xe76>
 8004720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004724:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004728:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800472c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004732:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	fa93 f2a3 	rbit	r2, r3
 800473c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004740:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004744:	601a      	str	r2, [r3, #0]
  return result;
 8004746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800474e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004750:	fab3 f383 	clz	r3, r3
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800475a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	461a      	mov	r2, r3
 8004762:	2300      	movs	r3, #0
 8004764:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fe fd27 	bl	80031b8 <HAL_GetTick>
 800476a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800476e:	e009      	b.n	8004784 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004770:	f7fe fd22 	bl	80031b8 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e1f0      	b.n	8004b66 <HAL_RCC_OscConfig+0x100e>
 8004784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004788:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800478c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004796:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	fa93 f2a3 	rbit	r2, r3
 80047a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047a8:	601a      	str	r2, [r3, #0]
  return result;
 80047aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80047bc:	d804      	bhi.n	80047c8 <HAL_RCC_OscConfig+0xc70>
 80047be:	4b01      	ldr	r3, [pc, #4]	@ (80047c4 <HAL_RCC_OscConfig+0xc6c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	e029      	b.n	8004818 <HAL_RCC_OscConfig+0xcc0>
 80047c4:	40021000 	.word	0x40021000
 80047c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047cc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80047d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	fa93 f2a3 	rbit	r2, r3
 80047e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80047f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004800:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	fa93 f2a3 	rbit	r2, r3
 800480a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	4bc3      	ldr	r3, [pc, #780]	@ (8004b24 <HAL_RCC_OscConfig+0xfcc>)
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800481c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004820:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004824:	6011      	str	r1, [r2, #0]
 8004826:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800482a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	fa92 f1a2 	rbit	r1, r2
 8004834:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004838:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800483c:	6011      	str	r1, [r2, #0]
  return result;
 800483e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004842:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	fab2 f282 	clz	r2, r2
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	f042 0220 	orr.w	r2, r2, #32
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	f002 021f 	and.w	r2, r2, #31
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f202 	lsl.w	r2, r1, r2
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d185      	bne.n	8004770 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004864:	4baf      	ldr	r3, [pc, #700]	@ (8004b24 <HAL_RCC_OscConfig+0xfcc>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800486c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004870:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800487c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	430b      	orrs	r3, r1
 8004886:	49a7      	ldr	r1, [pc, #668]	@ (8004b24 <HAL_RCC_OscConfig+0xfcc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
 800488c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004890:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004894:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	fa93 f2a3 	rbit	r2, r3
 80048a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048b0:	601a      	str	r2, [r3, #0]
  return result;
 80048b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048ba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80048c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	461a      	mov	r2, r3
 80048ce:	2301      	movs	r3, #1
 80048d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d2:	f7fe fc71 	bl	80031b8 <HAL_GetTick>
 80048d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048da:	e009      	b.n	80048f0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fe fc6c 	bl	80031b8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e13a      	b.n	8004b66 <HAL_RCC_OscConfig+0x100e>
 80048f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80048f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004902:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	fa93 f2a3 	rbit	r2, r3
 800490c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004910:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004914:	601a      	str	r2, [r3, #0]
  return result;
 8004916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800491e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b3f      	cmp	r3, #63	@ 0x3f
 8004928:	d802      	bhi.n	8004930 <HAL_RCC_OscConfig+0xdd8>
 800492a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b24 <HAL_RCC_OscConfig+0xfcc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	e027      	b.n	8004980 <HAL_RCC_OscConfig+0xe28>
 8004930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004934:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004938:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800493c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004942:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	fa93 f2a3 	rbit	r2, r3
 800494c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004950:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800495a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800495e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004968:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	fa93 f2a3 	rbit	r2, r3
 8004972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004976:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	4b69      	ldr	r3, [pc, #420]	@ (8004b24 <HAL_RCC_OscConfig+0xfcc>)
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004984:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004988:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004992:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	fa92 f1a2 	rbit	r1, r2
 800499c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049a0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049a4:	6011      	str	r1, [r2, #0]
  return result;
 80049a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049aa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	fab2 f282 	clz	r2, r2
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	f042 0220 	orr.w	r2, r2, #32
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f002 021f 	and.w	r2, r2, #31
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f202 	lsl.w	r2, r1, r2
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d087      	beq.n	80048dc <HAL_RCC_OscConfig+0xd84>
 80049cc:	e0ca      	b.n	8004b64 <HAL_RCC_OscConfig+0x100c>
 80049ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	fa93 f2a3 	rbit	r2, r3
 80049ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80049f2:	601a      	str	r2, [r3, #0]
  return result;
 80049f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80049fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fe fbd0 	bl	80031b8 <HAL_GetTick>
 8004a18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1c:	e009      	b.n	8004a32 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fe fbcb 	bl	80031b8 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e099      	b.n	8004b66 <HAL_RCC_OscConfig+0x100e>
 8004a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a36:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a44:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	fa93 f2a3 	rbit	r2, r3
 8004a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a52:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a56:	601a      	str	r2, [r3, #0]
  return result;
 8004a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a6a:	d802      	bhi.n	8004a72 <HAL_RCC_OscConfig+0xf1a>
 8004a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b24 <HAL_RCC_OscConfig+0xfcc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	e027      	b.n	8004ac2 <HAL_RCC_OscConfig+0xf6a>
 8004a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a76:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004a7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a84:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	fa93 f2a3 	rbit	r2, r3
 8004a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a92:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004aa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aaa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	fa93 f2a3 	rbit	r2, r3
 8004ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <HAL_RCC_OscConfig+0xfcc>)
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004aca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ace:	6011      	str	r1, [r2, #0]
 8004ad0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ad4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	fa92 f1a2 	rbit	r1, r2
 8004ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ae2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004ae6:	6011      	str	r1, [r2, #0]
  return result;
 8004ae8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	fab2 f282 	clz	r2, r2
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	f042 0220 	orr.w	r2, r2, #32
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	f002 021f 	and.w	r2, r2, #31
 8004b02:	2101      	movs	r1, #1
 8004b04:	fa01 f202 	lsl.w	r2, r1, r2
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d187      	bne.n	8004a1e <HAL_RCC_OscConfig+0xec6>
 8004b0e:	e029      	b.n	8004b64 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d103      	bne.n	8004b28 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e020      	b.n	8004b66 <HAL_RCC_OscConfig+0x100e>
 8004b24:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b28:	4b11      	ldr	r3, [pc, #68]	@ (8004b70 <HAL_RCC_OscConfig+0x1018>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004b34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004b48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004b4c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000

08004b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b09e      	sub	sp, #120	@ 0x78
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e154      	b.n	8004e36 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b89      	ldr	r3, [pc, #548]	@ (8004db4 <HAL_RCC_ClockConfig+0x240>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d910      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b86      	ldr	r3, [pc, #536]	@ (8004db4 <HAL_RCC_ClockConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 0207 	bic.w	r2, r3, #7
 8004ba2:	4984      	ldr	r1, [pc, #528]	@ (8004db4 <HAL_RCC_ClockConfig+0x240>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b82      	ldr	r3, [pc, #520]	@ (8004db4 <HAL_RCC_ClockConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e13c      	b.n	8004e36 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc8:	4b7b      	ldr	r3, [pc, #492]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4978      	ldr	r1, [pc, #480]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80cd 	beq.w	8004d82 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d137      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xec>
 8004bf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf8:	fa93 f3a3 	rbit	r3, r3
 8004bfc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c00:	fab3 f383 	clz	r3, r3
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c08:	d802      	bhi.n	8004c10 <HAL_RCC_ClockConfig+0x9c>
 8004c0a:	4b6b      	ldr	r3, [pc, #428]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	e00f      	b.n	8004c30 <HAL_RCC_ClockConfig+0xbc>
 8004c10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c18:	fa93 f3a3 	rbit	r3, r3
 8004c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c22:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c2c:	4b62      	ldr	r3, [pc, #392]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c38:	fa92 f2a2 	rbit	r2, r2
 8004c3c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004c3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c40:	fab2 f282 	clz	r2, r2
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	f042 0220 	orr.w	r2, r2, #32
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	f002 021f 	and.w	r2, r2, #31
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f202 	lsl.w	r2, r1, r2
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d171      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0ea      	b.n	8004e36 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d137      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x164>
 8004c68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c6c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c70:	fa93 f3a3 	rbit	r3, r3
 8004c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c80:	d802      	bhi.n	8004c88 <HAL_RCC_ClockConfig+0x114>
 8004c82:	4b4d      	ldr	r3, [pc, #308]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	e00f      	b.n	8004ca8 <HAL_RCC_ClockConfig+0x134>
 8004c88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ca4:	4b44      	ldr	r3, [pc, #272]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cb0:	fa92 f2a2 	rbit	r2, r2
 8004cb4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004cb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cb8:	fab2 f282 	clz	r2, r2
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	f042 0220 	orr.w	r2, r2, #32
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	f002 021f 	and.w	r2, r2, #31
 8004cc8:	2101      	movs	r1, #1
 8004cca:	fa01 f202 	lsl.w	r2, r1, r2
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d135      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0ae      	b.n	8004e36 <HAL_RCC_ClockConfig+0x2c2>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b3f      	cmp	r3, #63	@ 0x3f
 8004cee:	d802      	bhi.n	8004cf6 <HAL_RCC_ClockConfig+0x182>
 8004cf0:	4b31      	ldr	r3, [pc, #196]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	e00d      	b.n	8004d12 <HAL_RCC_ClockConfig+0x19e>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d02:	2302      	movs	r3, #2
 8004d04:	623b      	str	r3, [r7, #32]
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	fa93 f3a3 	rbit	r3, r3
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	2202      	movs	r2, #2
 8004d14:	61ba      	str	r2, [r7, #24]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	fa92 f2a2 	rbit	r2, r2
 8004d1c:	617a      	str	r2, [r7, #20]
  return result;
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	fab2 f282 	clz	r2, r2
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	f042 0220 	orr.w	r2, r2, #32
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	f002 021f 	and.w	r2, r2, #31
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f202 	lsl.w	r2, r1, r2
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e07a      	b.n	8004e36 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d40:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 0203 	bic.w	r2, r3, #3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	491a      	ldr	r1, [pc, #104]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d52:	f7fe fa31 	bl	80031b8 <HAL_GetTick>
 8004d56:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d5a:	f7fe fa2d 	bl	80031b8 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e062      	b.n	8004e36 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d70:	4b11      	ldr	r3, [pc, #68]	@ (8004db8 <HAL_RCC_ClockConfig+0x244>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 020c 	and.w	r2, r3, #12
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d1eb      	bne.n	8004d5a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d82:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <HAL_RCC_ClockConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d215      	bcs.n	8004dbc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d90:	4b08      	ldr	r3, [pc, #32]	@ (8004db4 <HAL_RCC_ClockConfig+0x240>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 0207 	bic.w	r2, r3, #7
 8004d98:	4906      	ldr	r1, [pc, #24]	@ (8004db4 <HAL_RCC_ClockConfig+0x240>)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <HAL_RCC_ClockConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d006      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e041      	b.n	8004e36 <HAL_RCC_ClockConfig+0x2c2>
 8004db2:	bf00      	nop
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e40 <HAL_RCC_ClockConfig+0x2cc>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	491a      	ldr	r1, [pc, #104]	@ (8004e40 <HAL_RCC_ClockConfig+0x2cc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de6:	4b16      	ldr	r3, [pc, #88]	@ (8004e40 <HAL_RCC_ClockConfig+0x2cc>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4912      	ldr	r1, [pc, #72]	@ (8004e40 <HAL_RCC_ClockConfig+0x2cc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004dfa:	f000 f829 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004dfe:	4601      	mov	r1, r0
 8004e00:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <HAL_RCC_ClockConfig+0x2cc>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e08:	22f0      	movs	r2, #240	@ 0xf0
 8004e0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	fa92 f2a2 	rbit	r2, r2
 8004e12:	60fa      	str	r2, [r7, #12]
  return result;
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	fab2 f282 	clz	r2, r2
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	40d3      	lsrs	r3, r2
 8004e1e:	4a09      	ldr	r2, [pc, #36]	@ (8004e44 <HAL_RCC_ClockConfig+0x2d0>)
 8004e20:	5cd3      	ldrb	r3, [r2, r3]
 8004e22:	fa21 f303 	lsr.w	r3, r1, r3
 8004e26:	4a08      	ldr	r2, [pc, #32]	@ (8004e48 <HAL_RCC_ClockConfig+0x2d4>)
 8004e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e2a:	4b08      	ldr	r3, [pc, #32]	@ (8004e4c <HAL_RCC_ClockConfig+0x2d8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fe f97e 	bl	8003130 <HAL_InitTick>
  
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3778      	adds	r7, #120	@ 0x78
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000
 8004e44:	0800a2b0 	.word	0x0800a2b0
 8004e48:	2000001c 	.word	0x2000001c
 8004e4c:	20000020 	.word	0x20000020

08004e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	2300      	movs	r3, #0
 8004e64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d002      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0x30>
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCC_GetSysClockFreq+0x36>
 8004e7e:	e026      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e80:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e82:	613b      	str	r3, [r7, #16]
      break;
 8004e84:	e026      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	0c9b      	lsrs	r3, r3, #18
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	4a17      	ldr	r2, [pc, #92]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e90:	5cd3      	ldrb	r3, [r2, r3]
 8004e92:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004e94:	4b13      	ldr	r3, [pc, #76]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ea0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004eac:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e004      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	613b      	str	r3, [r7, #16]
      break;
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004ed0:	613b      	str	r3, [r7, #16]
      break;
 8004ed2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed4:	693b      	ldr	r3, [r7, #16]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	01e84800 	.word	0x01e84800
 8004eec:	0800a2c8 	.word	0x0800a2c8
 8004ef0:	0800a2d8 	.word	0x0800a2d8
 8004ef4:	003d0900 	.word	0x003d0900
 8004ef8:	007a1200 	.word	0x007a1200

08004efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f00:	4b03      	ldr	r3, [pc, #12]	@ (8004f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f02:	681b      	ldr	r3, [r3, #0]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	2000001c 	.word	0x2000001c

08004f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f1a:	f7ff ffef 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 8004f1e:	4601      	mov	r1, r0
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f28:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004f2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	fa92 f2a2 	rbit	r2, r2
 8004f34:	603a      	str	r2, [r7, #0]
  return result;
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	fab2 f282 	clz	r2, r2
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	40d3      	lsrs	r3, r2
 8004f40:	4a04      	ldr	r2, [pc, #16]	@ (8004f54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f42:	5cd3      	ldrb	r3, [r2, r3]
 8004f44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	0800a2c0 	.word	0x0800a2c0

08004f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f5e:	f7ff ffcd 	bl	8004efc <HAL_RCC_GetHCLKFreq>
 8004f62:	4601      	mov	r1, r0
 8004f64:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004f6c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004f70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	fa92 f2a2 	rbit	r2, r2
 8004f78:	603a      	str	r2, [r7, #0]
  return result;
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	fab2 f282 	clz	r2, r2
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	40d3      	lsrs	r3, r2
 8004f84:	4a04      	ldr	r2, [pc, #16]	@ (8004f98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40021000 	.word	0x40021000
 8004f98:	0800a2c0 	.word	0x0800a2c0

08004f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b092      	sub	sp, #72	@ 0x48
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80d2 	beq.w	8005164 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10e      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	4a49      	ldr	r2, [pc, #292]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd6:	61d3      	str	r3, [r2, #28]
 8004fd8:	4b47      	ldr	r3, [pc, #284]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fea:	4b44      	ldr	r3, [pc, #272]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d118      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ff6:	4b41      	ldr	r3, [pc, #260]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a40      	ldr	r2, [pc, #256]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005000:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005002:	f7fe f8d9 	bl	80031b8 <HAL_GetTick>
 8005006:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005008:	e008      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500a:	f7fe f8d5 	bl	80031b8 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b64      	cmp	r3, #100	@ 0x64
 8005016:	d901      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e13a      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501c:	4b37      	ldr	r3, [pc, #220]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005028:	4b33      	ldr	r3, [pc, #204]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005030:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8082 	beq.w	800513e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005042:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005044:	429a      	cmp	r2, r3
 8005046:	d07a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005048:	4b2b      	ldr	r3, [pc, #172]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005052:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005056:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005062:	fab3 f383 	clz	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	4b25      	ldr	r3, [pc, #148]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	461a      	mov	r2, r3
 8005072:	2301      	movs	r3, #1
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800507a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	4b1c      	ldr	r3, [pc, #112]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	461a      	mov	r2, r3
 8005096:	2300      	movs	r3, #0
 8005098:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800509a:	4a17      	ldr	r2, [pc, #92]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800509c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d049      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050aa:	f7fe f885 	bl	80031b8 <HAL_GetTick>
 80050ae:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7fe f881 	bl	80031b8 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e0e4      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80050c8:	2302      	movs	r3, #2
 80050ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	fa93 f3a3 	rbit	r3, r3
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d4:	2302      	movs	r3, #2
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	fa93 f3a3 	rbit	r3, r3
 80050de:	61fb      	str	r3, [r7, #28]
  return result;
 80050e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	fab3 f383 	clz	r3, r3
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d108      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80050f2:	4b01      	ldr	r3, [pc, #4]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	e00d      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40007000 	.word	0x40007000
 8005100:	10908100 	.word	0x10908100
 8005104:	2302      	movs	r3, #2
 8005106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	fa93 f3a3 	rbit	r3, r3
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	4b62      	ldr	r3, [pc, #392]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	2202      	movs	r2, #2
 8005116:	613a      	str	r2, [r7, #16]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	fa92 f2a2 	rbit	r2, r2
 800511e:	60fa      	str	r2, [r7, #12]
  return result;
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	fab2 f282 	clz	r2, r2
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	f002 021f 	and.w	r2, r2, #31
 8005132:	2101      	movs	r1, #1
 8005134:	fa01 f202 	lsl.w	r2, r1, r2
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0b9      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800513e:	4b57      	ldr	r3, [pc, #348]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4954      	ldr	r1, [pc, #336]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800514c:	4313      	orrs	r3, r2
 800514e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005150:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005154:	2b01      	cmp	r3, #1
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005158:	4b50      	ldr	r3, [pc, #320]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	4a4f      	ldr	r2, [pc, #316]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800515e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005162:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005170:	4b4a      	ldr	r3, [pc, #296]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	f023 0203 	bic.w	r2, r3, #3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4947      	ldr	r1, [pc, #284]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800517e:	4313      	orrs	r3, r2
 8005180:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800518e:	4b43      	ldr	r3, [pc, #268]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	f023 0210 	bic.w	r2, r3, #16
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	4940      	ldr	r1, [pc, #256]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800519c:	4313      	orrs	r3, r2
 800519e:	630b      	str	r3, [r1, #48]	@ 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ac:	4b3b      	ldr	r3, [pc, #236]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	f023 0220 	bic.w	r2, r3, #32
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	4938      	ldr	r1, [pc, #224]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051ca:	4b34      	ldr	r3, [pc, #208]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ce:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4931      	ldr	r1, [pc, #196]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051e8:	4b2c      	ldr	r3, [pc, #176]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	4929      	ldr	r1, [pc, #164]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005202:	2b00      	cmp	r3, #0
 8005204:	d008      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005206:	4b25      	ldr	r3, [pc, #148]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	4922      	ldr	r1, [pc, #136]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005214:	4313      	orrs	r3, r2
 8005216:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005224:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	491a      	ldr	r1, [pc, #104]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005232:	4313      	orrs	r3, r2
 8005234:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005242:	4b16      	ldr	r3, [pc, #88]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	4913      	ldr	r1, [pc, #76]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005250:	4313      	orrs	r3, r2
 8005252:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005260:	4b0e      	ldr	r3, [pc, #56]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005264:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	490b      	ldr	r1, [pc, #44]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800526e:	4313      	orrs	r3, r2
 8005270:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800527e:	4b07      	ldr	r3, [pc, #28]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005282:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	4904      	ldr	r1, [pc, #16]	@ (800529c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800528c:	4313      	orrs	r3, r2
 800528e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3748      	adds	r7, #72	@ 0x48
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000

080052a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e049      	b.n	8005346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fd fd00 	bl	8002ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 fe46 	bl	8005f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e049      	b.n	80053f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f841 	bl	80053fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f000 fdef 	bl	8005f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e03c      	b.n	80054b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b04      	cmp	r3, #4
 8005440:	d109      	bne.n	8005456 <HAL_TIM_PWM_Start_DMA+0x46>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	bf0c      	ite	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	2300      	movne	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	e02f      	b.n	80054b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d109      	bne.n	8005470 <HAL_TIM_PWM_Start_DMA+0x60>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e022      	b.n	80054b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d109      	bne.n	800548a <HAL_TIM_PWM_Start_DMA+0x7a>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	e015      	b.n	80054b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b10      	cmp	r3, #16
 800548e:	d109      	bne.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x94>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e008      	b.n	80054b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80054ba:	2302      	movs	r3, #2
 80054bc:	e192      	b.n	80057e4 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	e03c      	b.n	8005552 <HAL_TIM_PWM_Start_DMA+0x142>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d109      	bne.n	80054f2 <HAL_TIM_PWM_Start_DMA+0xe2>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	bf0c      	ite	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	2300      	movne	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e02f      	b.n	8005552 <HAL_TIM_PWM_Start_DMA+0x142>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d109      	bne.n	800550c <HAL_TIM_PWM_Start_DMA+0xfc>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	e022      	b.n	8005552 <HAL_TIM_PWM_Start_DMA+0x142>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	d109      	bne.n	8005526 <HAL_TIM_PWM_Start_DMA+0x116>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	e015      	b.n	8005552 <HAL_TIM_PWM_Start_DMA+0x142>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b10      	cmp	r3, #16
 800552a:	d109      	bne.n	8005540 <HAL_TIM_PWM_Start_DMA+0x130>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e008      	b.n	8005552 <HAL_TIM_PWM_Start_DMA+0x142>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d034      	beq.n	80055c0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_TIM_PWM_Start_DMA+0x152>
 800555c:	887b      	ldrh	r3, [r7, #2]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e13e      	b.n	80057e4 <HAL_TIM_PWM_Start_DMA+0x3d4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_TIM_PWM_Start_DMA+0x166>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005574:	e026      	b.n	80055c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b04      	cmp	r3, #4
 800557a:	d104      	bne.n	8005586 <HAL_TIM_PWM_Start_DMA+0x176>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005584:	e01e      	b.n	80055c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Start_DMA+0x186>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005594:	e016      	b.n	80055c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start_DMA+0x196>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055a4:	e00e      	b.n	80055c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b4:	e006      	b.n	80055c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055be:	e001      	b.n	80055c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e10f      	b.n	80057e4 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }

  switch (Channel)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	f200 80ae 	bhi.w	8005728 <HAL_TIM_PWM_Start_DMA+0x318>
 80055cc:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005609 	.word	0x08005609
 80055d8:	08005729 	.word	0x08005729
 80055dc:	08005729 	.word	0x08005729
 80055e0:	08005729 	.word	0x08005729
 80055e4:	08005651 	.word	0x08005651
 80055e8:	08005729 	.word	0x08005729
 80055ec:	08005729 	.word	0x08005729
 80055f0:	08005729 	.word	0x08005729
 80055f4:	08005699 	.word	0x08005699
 80055f8:	08005729 	.word	0x08005729
 80055fc:	08005729 	.word	0x08005729
 8005600:	08005729 	.word	0x08005729
 8005604:	080056e1 	.word	0x080056e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560c:	4a77      	ldr	r2, [pc, #476]	@ (80057ec <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800560e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005614:	4a76      	ldr	r2, [pc, #472]	@ (80057f0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005616:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	4a75      	ldr	r2, [pc, #468]	@ (80057f4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3334      	adds	r3, #52	@ 0x34
 800562c:	461a      	mov	r2, r3
 800562e:	887b      	ldrh	r3, [r7, #2]
 8005630:	f7fd ff4a 	bl	80034c8 <HAL_DMA_Start_IT>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e0d2      	b.n	80057e4 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564c:	60da      	str	r2, [r3, #12]
      break;
 800564e:	e06e      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	4a65      	ldr	r2, [pc, #404]	@ (80057ec <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005656:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565c:	4a64      	ldr	r2, [pc, #400]	@ (80057f0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800565e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	4a63      	ldr	r2, [pc, #396]	@ (80057f4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3338      	adds	r3, #56	@ 0x38
 8005674:	461a      	mov	r2, r3
 8005676:	887b      	ldrh	r3, [r7, #2]
 8005678:	f7fd ff26 	bl	80034c8 <HAL_DMA_Start_IT>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e0ae      	b.n	80057e4 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005694:	60da      	str	r2, [r3, #12]
      break;
 8005696:	e04a      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569c:	4a53      	ldr	r2, [pc, #332]	@ (80057ec <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800569e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	4a52      	ldr	r2, [pc, #328]	@ (80057f0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80056a6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	4a51      	ldr	r2, [pc, #324]	@ (80057f4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	333c      	adds	r3, #60	@ 0x3c
 80056bc:	461a      	mov	r2, r3
 80056be:	887b      	ldrh	r3, [r7, #2]
 80056c0:	f7fd ff02 	bl	80034c8 <HAL_DMA_Start_IT>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e08a      	b.n	80057e4 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056dc:	60da      	str	r2, [r3, #12]
      break;
 80056de:	e026      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	4a41      	ldr	r2, [pc, #260]	@ (80057ec <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80056e6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ec:	4a40      	ldr	r2, [pc, #256]	@ (80057f0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80056ee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f4:	4a3f      	ldr	r2, [pc, #252]	@ (80057f4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3340      	adds	r3, #64	@ 0x40
 8005704:	461a      	mov	r2, r3
 8005706:	887b      	ldrh	r3, [r7, #2]
 8005708:	f7fd fede 	bl	80034c8 <HAL_DMA_Start_IT>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e066      	b.n	80057e4 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005724:	60da      	str	r2, [r3, #12]
      break;
 8005726:	e002      	b.n	800572e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	75fb      	strb	r3, [r7, #23]
      break;
 800572c:	bf00      	nop
  }

  if (status == HAL_OK)
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d156      	bne.n	80057e2 <HAL_TIM_PWM_Start_DMA+0x3d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2201      	movs	r2, #1
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 ffd1 	bl	80066e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a2c      	ldr	r2, [pc, #176]	@ (80057f8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00e      	beq.n	800576a <HAL_TIM_PWM_Start_DMA+0x35a>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2a      	ldr	r2, [pc, #168]	@ (80057fc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_TIM_PWM_Start_DMA+0x35a>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a29      	ldr	r2, [pc, #164]	@ (8005800 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <HAL_TIM_PWM_Start_DMA+0x35a>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a27      	ldr	r2, [pc, #156]	@ (8005804 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d101      	bne.n	800576e <HAL_TIM_PWM_Start_DMA+0x35e>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <HAL_TIM_PWM_Start_DMA+0x360>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005782:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1b      	ldr	r2, [pc, #108]	@ (80057f8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d009      	beq.n	80057a2 <HAL_TIM_PWM_Start_DMA+0x392>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005796:	d004      	beq.n	80057a2 <HAL_TIM_PWM_Start_DMA+0x392>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a17      	ldr	r2, [pc, #92]	@ (80057fc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d115      	bne.n	80057ce <HAL_TIM_PWM_Start_DMA+0x3be>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	4b17      	ldr	r3, [pc, #92]	@ (8005808 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b06      	cmp	r3, #6
 80057b2:	d015      	beq.n	80057e0 <HAL_TIM_PWM_Start_DMA+0x3d0>
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ba:	d011      	beq.n	80057e0 <HAL_TIM_PWM_Start_DMA+0x3d0>
      {
        __HAL_TIM_ENABLE(htim);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057cc:	e008      	b.n	80057e0 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	e000      	b.n	80057e2 <HAL_TIM_PWM_Start_DMA+0x3d2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	08005e61 	.word	0x08005e61
 80057f0:	08005f09 	.word	0x08005f09
 80057f4:	08005dcf 	.word	0x08005dcf
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800
 8005808:	00010007 	.word	0x00010007

0800580c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b0c      	cmp	r3, #12
 800581e:	d855      	bhi.n	80058cc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005820:	a201      	add	r2, pc, #4	@ (adr r2, 8005828 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	0800585d 	.word	0x0800585d
 800582c:	080058cd 	.word	0x080058cd
 8005830:	080058cd 	.word	0x080058cd
 8005834:	080058cd 	.word	0x080058cd
 8005838:	08005879 	.word	0x08005879
 800583c:	080058cd 	.word	0x080058cd
 8005840:	080058cd 	.word	0x080058cd
 8005844:	080058cd 	.word	0x080058cd
 8005848:	08005895 	.word	0x08005895
 800584c:	080058cd 	.word	0x080058cd
 8005850:	080058cd 	.word	0x080058cd
 8005854:	080058cd 	.word	0x080058cd
 8005858:	080058b1 	.word	0x080058b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800586a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	4618      	mov	r0, r3
 8005872:	f7fd fe88 	bl	8003586 <HAL_DMA_Abort_IT>
      break;
 8005876:	e02c      	b.n	80058d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005886:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	4618      	mov	r0, r3
 800588e:	f7fd fe7a 	bl	8003586 <HAL_DMA_Abort_IT>
      break;
 8005892:	e01e      	b.n	80058d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fd fe6c 	bl	8003586 <HAL_DMA_Abort_IT>
      break;
 80058ae:	e010      	b.n	80058d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fd fe5e 	bl	8003586 <HAL_DMA_Abort_IT>
      break;
 80058ca:	e002      	b.n	80058d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      break;
 80058d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d17b      	bne.n	80059d0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2200      	movs	r2, #0
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 feff 	bl	80066e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3c      	ldr	r2, [pc, #240]	@ (80059dc <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_TIM_PWM_Stop_DMA+0x102>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3a      	ldr	r2, [pc, #232]	@ (80059e0 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_TIM_PWM_Stop_DMA+0x102>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a39      	ldr	r2, [pc, #228]	@ (80059e4 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIM_PWM_Stop_DMA+0x102>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a37      	ldr	r2, [pc, #220]	@ (80059e8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d101      	bne.n	8005912 <HAL_TIM_PWM_Stop_DMA+0x106>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <HAL_TIM_PWM_Stop_DMA+0x108>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d017      	beq.n	8005948 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a1a      	ldr	r2, [r3, #32]
 800591e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10f      	bne.n	8005948 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6a1a      	ldr	r2, [r3, #32]
 800592e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005946:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a1a      	ldr	r2, [r3, #32]
 800594e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005952:	4013      	ands	r3, r2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10f      	bne.n	8005978 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a1a      	ldr	r2, [r3, #32]
 800595e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005962:	4013      	ands	r3, r2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d107      	bne.n	8005978 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005986:	e023      	b.n	80059d0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b04      	cmp	r3, #4
 800598c:	d104      	bne.n	8005998 <HAL_TIM_PWM_Stop_DMA+0x18c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005996:	e01b      	b.n	80059d0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b08      	cmp	r3, #8
 800599c:	d104      	bne.n	80059a8 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059a6:	e013      	b.n	80059d0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d104      	bne.n	80059b8 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059b6:	e00b      	b.n	80059d0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d104      	bne.n	80059c8 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c6:	e003      	b.n	80059d0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40014400 	.word	0x40014400
 80059e8:	40014800 	.word	0x40014800

080059ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e0ff      	b.n	8005c0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b14      	cmp	r3, #20
 8005a16:	f200 80f0 	bhi.w	8005bfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	08005bfb 	.word	0x08005bfb
 8005a28:	08005bfb 	.word	0x08005bfb
 8005a2c:	08005bfb 	.word	0x08005bfb
 8005a30:	08005ab5 	.word	0x08005ab5
 8005a34:	08005bfb 	.word	0x08005bfb
 8005a38:	08005bfb 	.word	0x08005bfb
 8005a3c:	08005bfb 	.word	0x08005bfb
 8005a40:	08005af7 	.word	0x08005af7
 8005a44:	08005bfb 	.word	0x08005bfb
 8005a48:	08005bfb 	.word	0x08005bfb
 8005a4c:	08005bfb 	.word	0x08005bfb
 8005a50:	08005b37 	.word	0x08005b37
 8005a54:	08005bfb 	.word	0x08005bfb
 8005a58:	08005bfb 	.word	0x08005bfb
 8005a5c:	08005bfb 	.word	0x08005bfb
 8005a60:	08005b79 	.word	0x08005b79
 8005a64:	08005bfb 	.word	0x08005bfb
 8005a68:	08005bfb 	.word	0x08005bfb
 8005a6c:	08005bfb 	.word	0x08005bfb
 8005a70:	08005bb9 	.word	0x08005bb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 faf2 	bl	8006064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0208 	orr.w	r2, r2, #8
 8005a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0204 	bic.w	r2, r2, #4
 8005a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	619a      	str	r2, [r3, #24]
      break;
 8005ab2:	e0a5      	b.n	8005c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fb58 	bl	8006170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	021a      	lsls	r2, r3, #8
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	619a      	str	r2, [r3, #24]
      break;
 8005af4:	e084      	b.n	8005c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fbb7 	bl	8006270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0208 	orr.w	r2, r2, #8
 8005b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0204 	bic.w	r2, r2, #4
 8005b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	61da      	str	r2, [r3, #28]
      break;
 8005b34:	e064      	b.n	8005c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fc15 	bl	800636c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	61da      	str	r2, [r3, #28]
      break;
 8005b76:	e043      	b.n	8005c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fc58 	bl	8006434 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0208 	orr.w	r2, r2, #8
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0204 	bic.w	r2, r2, #4
 8005ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bb6:	e023      	b.n	8005c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fc96 	bl	80064f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bf8:	e002      	b.n	8005c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop

08005c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e0b6      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x18a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6c:	d03e      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0xd8>
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c72:	f200 8087 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x170>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_TIM_ConfigClockSource+0x176>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c82:	d87f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x170>
 8005c84:	2b70      	cmp	r3, #112	@ 0x70
 8005c86:	d01a      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0xaa>
 8005c88:	2b70      	cmp	r3, #112	@ 0x70
 8005c8a:	d87b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x170>
 8005c8c:	2b60      	cmp	r3, #96	@ 0x60
 8005c8e:	d050      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x11e>
 8005c90:	2b60      	cmp	r3, #96	@ 0x60
 8005c92:	d877      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x170>
 8005c94:	2b50      	cmp	r3, #80	@ 0x50
 8005c96:	d03c      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0xfe>
 8005c98:	2b50      	cmp	r3, #80	@ 0x50
 8005c9a:	d873      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x170>
 8005c9c:	2b40      	cmp	r3, #64	@ 0x40
 8005c9e:	d058      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x13e>
 8005ca0:	2b40      	cmp	r3, #64	@ 0x40
 8005ca2:	d86f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x170>
 8005ca4:	2b30      	cmp	r3, #48	@ 0x30
 8005ca6:	d064      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15e>
 8005ca8:	2b30      	cmp	r3, #48	@ 0x30
 8005caa:	d86b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x170>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d060      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15e>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d867      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x170>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15e>
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d05a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x15e>
 8005cbc:	e062      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cce:	f000 fce9 	bl	80066a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	609a      	str	r2, [r3, #8]
      break;
 8005cea:	e04f      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfc:	f000 fcd2 	bl	80066a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d0e:	609a      	str	r2, [r3, #8]
      break;
 8005d10:	e03c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 fc46 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2150      	movs	r1, #80	@ 0x50
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fc9f 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8005d30:	e02c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 fc65 	bl	800660e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2160      	movs	r1, #96	@ 0x60
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fc8f 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8005d50:	e01c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 fc26 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2140      	movs	r1, #64	@ 0x40
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fc7f 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8005d70:	e00c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 fc76 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8005d82:	e003      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dda:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d107      	bne.n	8005df6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df4:	e02a      	b.n	8005e4c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d107      	bne.n	8005e10 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2202      	movs	r2, #2
 8005e04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e0e:	e01d      	b.n	8005e4c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d107      	bne.n	8005e2a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e28:	e010      	b.n	8005e4c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d107      	bne.n	8005e44 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2208      	movs	r2, #8
 8005e38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e42:	e003      	b.n	8005e4c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff ffb4 	bl	8005dba <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d10b      	bne.n	8005e90 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d136      	bne.n	8005ef4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e8e:	e031      	b.n	8005ef4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d10b      	bne.n	8005eb2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d125      	bne.n	8005ef4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eb0:	e020      	b.n	8005ef4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d10b      	bne.n	8005ed4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d114      	bne.n	8005ef4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed2:	e00f      	b.n	8005ef4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d10a      	bne.n	8005ef4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7fc fb5b 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d103      	bne.n	8005f28 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	771a      	strb	r2, [r3, #28]
 8005f26:	e019      	b.n	8005f5c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d103      	bne.n	8005f3a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2202      	movs	r2, #2
 8005f36:	771a      	strb	r2, [r3, #28]
 8005f38:	e010      	b.n	8005f5c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d103      	bne.n	8005f4c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2204      	movs	r2, #4
 8005f48:	771a      	strb	r2, [r3, #28]
 8005f4a:	e007      	b.n	8005f5c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d102      	bne.n	8005f5c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ff22 	bl	8005da6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a34      	ldr	r2, [pc, #208]	@ (8006054 <TIM_Base_SetConfig+0xe4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_Base_SetConfig+0x20>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8e:	d108      	bne.n	8005fa2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8006054 <TIM_Base_SetConfig+0xe4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00f      	beq.n	8005fca <TIM_Base_SetConfig+0x5a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb0:	d00b      	beq.n	8005fca <TIM_Base_SetConfig+0x5a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a28      	ldr	r2, [pc, #160]	@ (8006058 <TIM_Base_SetConfig+0xe8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <TIM_Base_SetConfig+0x5a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a27      	ldr	r2, [pc, #156]	@ (800605c <TIM_Base_SetConfig+0xec>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_Base_SetConfig+0x5a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a26      	ldr	r2, [pc, #152]	@ (8006060 <TIM_Base_SetConfig+0xf0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d108      	bne.n	8005fdc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a14      	ldr	r2, [pc, #80]	@ (8006054 <TIM_Base_SetConfig+0xe4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00b      	beq.n	8006020 <TIM_Base_SetConfig+0xb0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a13      	ldr	r2, [pc, #76]	@ (8006058 <TIM_Base_SetConfig+0xe8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d007      	beq.n	8006020 <TIM_Base_SetConfig+0xb0>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a12      	ldr	r2, [pc, #72]	@ (800605c <TIM_Base_SetConfig+0xec>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_Base_SetConfig+0xb0>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a11      	ldr	r2, [pc, #68]	@ (8006060 <TIM_Base_SetConfig+0xf0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d103      	bne.n	8006028 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b01      	cmp	r3, #1
 8006038:	d105      	bne.n	8006046 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f023 0201 	bic.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	611a      	str	r2, [r3, #16]
  }
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800

08006064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f023 0201 	bic.w	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f023 0302 	bic.w	r3, r3, #2
 80060b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a28      	ldr	r2, [pc, #160]	@ (8006160 <TIM_OC1_SetConfig+0xfc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_OC1_SetConfig+0x78>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a27      	ldr	r2, [pc, #156]	@ (8006164 <TIM_OC1_SetConfig+0x100>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_OC1_SetConfig+0x78>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a26      	ldr	r2, [pc, #152]	@ (8006168 <TIM_OC1_SetConfig+0x104>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC1_SetConfig+0x78>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a25      	ldr	r2, [pc, #148]	@ (800616c <TIM_OC1_SetConfig+0x108>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10c      	bne.n	80060f6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0308 	bic.w	r3, r3, #8
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a19      	ldr	r2, [pc, #100]	@ (8006160 <TIM_OC1_SetConfig+0xfc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00b      	beq.n	8006116 <TIM_OC1_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a18      	ldr	r2, [pc, #96]	@ (8006164 <TIM_OC1_SetConfig+0x100>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d007      	beq.n	8006116 <TIM_OC1_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a17      	ldr	r2, [pc, #92]	@ (8006168 <TIM_OC1_SetConfig+0x104>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d003      	beq.n	8006116 <TIM_OC1_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a16      	ldr	r2, [pc, #88]	@ (800616c <TIM_OC1_SetConfig+0x108>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d111      	bne.n	800613a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800611c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	621a      	str	r2, [r3, #32]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40012c00 	.word	0x40012c00
 8006164:	40014000 	.word	0x40014000
 8006168:	40014400 	.word	0x40014400
 800616c:	40014800 	.word	0x40014800

08006170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f023 0210 	bic.w	r2, r3, #16
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800619e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f023 0320 	bic.w	r3, r3, #32
 80061be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a24      	ldr	r2, [pc, #144]	@ (8006260 <TIM_OC2_SetConfig+0xf0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d10d      	bne.n	80061f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006260 <TIM_OC2_SetConfig+0xf0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00b      	beq.n	8006210 <TIM_OC2_SetConfig+0xa0>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006264 <TIM_OC2_SetConfig+0xf4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d007      	beq.n	8006210 <TIM_OC2_SetConfig+0xa0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a19      	ldr	r2, [pc, #100]	@ (8006268 <TIM_OC2_SetConfig+0xf8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_OC2_SetConfig+0xa0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a18      	ldr	r2, [pc, #96]	@ (800626c <TIM_OC2_SetConfig+0xfc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d113      	bne.n	8006238 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006216:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800621e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40014000 	.word	0x40014000
 8006268:	40014400 	.word	0x40014400
 800626c:	40014800 	.word	0x40014800

08006270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a23      	ldr	r2, [pc, #140]	@ (800635c <TIM_OC3_SetConfig+0xec>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10d      	bne.n	80062ee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <TIM_OC3_SetConfig+0xec>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00b      	beq.n	800630e <TIM_OC3_SetConfig+0x9e>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a19      	ldr	r2, [pc, #100]	@ (8006360 <TIM_OC3_SetConfig+0xf0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <TIM_OC3_SetConfig+0x9e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a18      	ldr	r2, [pc, #96]	@ (8006364 <TIM_OC3_SetConfig+0xf4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC3_SetConfig+0x9e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a17      	ldr	r2, [pc, #92]	@ (8006368 <TIM_OC3_SetConfig+0xf8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d113      	bne.n	8006336 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800631c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	621a      	str	r2, [r3, #32]
}
 8006350:	bf00      	nop
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	40012c00 	.word	0x40012c00
 8006360:	40014000 	.word	0x40014000
 8006364:	40014400 	.word	0x40014400
 8006368:	40014800 	.word	0x40014800

0800636c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800639e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	031b      	lsls	r3, r3, #12
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a16      	ldr	r2, [pc, #88]	@ (8006424 <TIM_OC4_SetConfig+0xb8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00b      	beq.n	80063e8 <TIM_OC4_SetConfig+0x7c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a15      	ldr	r2, [pc, #84]	@ (8006428 <TIM_OC4_SetConfig+0xbc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d007      	beq.n	80063e8 <TIM_OC4_SetConfig+0x7c>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a14      	ldr	r2, [pc, #80]	@ (800642c <TIM_OC4_SetConfig+0xc0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_OC4_SetConfig+0x7c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a13      	ldr	r2, [pc, #76]	@ (8006430 <TIM_OC4_SetConfig+0xc4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d109      	bne.n	80063fc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	019b      	lsls	r3, r3, #6
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800

08006434 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006478:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a15      	ldr	r2, [pc, #84]	@ (80064e0 <TIM_OC5_SetConfig+0xac>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00b      	beq.n	80064a6 <TIM_OC5_SetConfig+0x72>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a14      	ldr	r2, [pc, #80]	@ (80064e4 <TIM_OC5_SetConfig+0xb0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <TIM_OC5_SetConfig+0x72>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a13      	ldr	r2, [pc, #76]	@ (80064e8 <TIM_OC5_SetConfig+0xb4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_OC5_SetConfig+0x72>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a12      	ldr	r2, [pc, #72]	@ (80064ec <TIM_OC5_SetConfig+0xb8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d109      	bne.n	80064ba <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	621a      	str	r2, [r3, #32]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400
 80064ec:	40014800 	.word	0x40014800

080064f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	051b      	lsls	r3, r3, #20
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a16      	ldr	r2, [pc, #88]	@ (80065a0 <TIM_OC6_SetConfig+0xb0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00b      	beq.n	8006564 <TIM_OC6_SetConfig+0x74>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a15      	ldr	r2, [pc, #84]	@ (80065a4 <TIM_OC6_SetConfig+0xb4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_OC6_SetConfig+0x74>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a14      	ldr	r2, [pc, #80]	@ (80065a8 <TIM_OC6_SetConfig+0xb8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_OC6_SetConfig+0x74>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a13      	ldr	r2, [pc, #76]	@ (80065ac <TIM_OC6_SetConfig+0xbc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d109      	bne.n	8006578 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800656a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40014400 	.word	0x40014400
 80065ac:	40014800 	.word	0x40014800

080065b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 030a 	bic.w	r3, r3, #10
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800660e:	b480      	push	{r7}
 8006610:	b087      	sub	sp, #28
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f023 0210 	bic.w	r2, r3, #16
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800664a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	f043 0307 	orr.w	r3, r3, #7
 8006690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	021a      	lsls	r2, r3, #8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	609a      	str	r2, [r3, #8]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	2201      	movs	r2, #1
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	43db      	mvns	r3, r3
 8006706:	401a      	ands	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	fa01 f303 	lsl.w	r3, r1, r3
 800671c:	431a      	orrs	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006744:	2302      	movs	r3, #2
 8006746:	e04f      	b.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a21      	ldr	r2, [pc, #132]	@ (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d108      	bne.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006778:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a14      	ldr	r2, [pc, #80]	@ (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d009      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067b0:	d004      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a10      	ldr	r2, [pc, #64]	@ (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d10c      	bne.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40014000 	.word	0x40014000

080067fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e040      	b.n	8006890 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fc fad8 	bl	8002dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2224      	movs	r2, #36	@ 0x24
 8006828:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fab0 	bl	8006da8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f977 	bl	8006b3c <UART_SetConfig>
 800684e:	4603      	mov	r3, r0
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e01b      	b.n	8006890 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006866:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006876:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fb2f 	bl	8006eec <UART_CheckIdleState>
 800688e:	4603      	mov	r3, r0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	@ 0x28
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d177      	bne.n	80069a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_UART_Transmit+0x24>
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e070      	b.n	80069a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2221      	movs	r2, #33	@ 0x21
 80068cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ce:	f7fc fc73 	bl	80031b8 <HAL_GetTick>
 80068d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ec:	d108      	bne.n	8006900 <HAL_UART_Transmit+0x68>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	e003      	b.n	8006908 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006904:	2300      	movs	r3, #0
 8006906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006908:	e02f      	b.n	800696a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2200      	movs	r2, #0
 8006912:	2180      	movs	r1, #128	@ 0x80
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fb91 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e03b      	b.n	80069a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	881a      	ldrh	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800693c:	b292      	uxth	r2, r2
 800693e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	3302      	adds	r3, #2
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	e007      	b.n	8006958 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	3301      	adds	r3, #1
 8006956:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1c9      	bne.n	800690a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2200      	movs	r2, #0
 800697e:	2140      	movs	r1, #64	@ 0x40
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fb5b 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e005      	b.n	80069a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	e000      	b.n	80069a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069a0:	2302      	movs	r3, #2
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3720      	adds	r7, #32
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b08a      	sub	sp, #40	@ 0x28
 80069ae:	af02      	add	r7, sp, #8
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	f040 80b6 	bne.w	8006b32 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_UART_Receive+0x28>
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e0ae      	b.n	8006b34 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2222      	movs	r2, #34	@ 0x22
 80069e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ec:	f7fc fbe4 	bl	80031b8 <HAL_GetTick>
 80069f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	88fa      	ldrh	r2, [r7, #6]
 80069fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0a:	d10e      	bne.n	8006a2a <HAL_UART_Receive+0x80>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <HAL_UART_Receive+0x76>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a1e:	e02d      	b.n	8006a7c <HAL_UART_Receive+0xd2>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	22ff      	movs	r2, #255	@ 0xff
 8006a24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a28:	e028      	b.n	8006a7c <HAL_UART_Receive+0xd2>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10d      	bne.n	8006a4e <HAL_UART_Receive+0xa4>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <HAL_UART_Receive+0x9a>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	22ff      	movs	r2, #255	@ 0xff
 8006a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a42:	e01b      	b.n	8006a7c <HAL_UART_Receive+0xd2>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	227f      	movs	r2, #127	@ 0x7f
 8006a48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a4c:	e016      	b.n	8006a7c <HAL_UART_Receive+0xd2>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a56:	d10d      	bne.n	8006a74 <HAL_UART_Receive+0xca>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d104      	bne.n	8006a6a <HAL_UART_Receive+0xc0>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	227f      	movs	r2, #127	@ 0x7f
 8006a64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a68:	e008      	b.n	8006a7c <HAL_UART_Receive+0xd2>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	223f      	movs	r2, #63	@ 0x3f
 8006a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a72:	e003      	b.n	8006a7c <HAL_UART_Receive+0xd2>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8c:	d108      	bne.n	8006aa0 <HAL_UART_Receive+0xf6>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e003      	b.n	8006aa8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006aa8:	e037      	b.n	8006b1a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2120      	movs	r1, #32
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fac1 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e033      	b.n	8006b34 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10c      	bne.n	8006aec <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	8a7b      	ldrh	r3, [r7, #18]
 8006adc:	4013      	ands	r3, r2
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	e00d      	b.n	8006b08 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	8a7b      	ldrh	r3, [r7, #18]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	4013      	ands	r3, r2
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	3301      	adds	r3, #1
 8006b06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1c1      	bne.n	8006aaa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	e000      	b.n	8006b34 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006b32:	2302      	movs	r3, #2
  }
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b8a      	ldr	r3, [pc, #552]	@ (8006d90 <UART_SetConfig+0x254>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	6979      	ldr	r1, [r7, #20]
 8006b70:	430b      	orrs	r3, r1
 8006b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a78      	ldr	r2, [pc, #480]	@ (8006d94 <UART_SetConfig+0x258>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d120      	bne.n	8006bfa <UART_SetConfig+0xbe>
 8006bb8:	4b77      	ldr	r3, [pc, #476]	@ (8006d98 <UART_SetConfig+0x25c>)
 8006bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d817      	bhi.n	8006bf4 <UART_SetConfig+0xb8>
 8006bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <UART_SetConfig+0x90>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006be9 	.word	0x08006be9
 8006bd4:	08006bef 	.word	0x08006bef
 8006bd8:	08006be3 	.word	0x08006be3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e01d      	b.n	8006c1e <UART_SetConfig+0xe2>
 8006be2:	2302      	movs	r3, #2
 8006be4:	77fb      	strb	r3, [r7, #31]
 8006be6:	e01a      	b.n	8006c1e <UART_SetConfig+0xe2>
 8006be8:	2304      	movs	r3, #4
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e017      	b.n	8006c1e <UART_SetConfig+0xe2>
 8006bee:	2308      	movs	r3, #8
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e014      	b.n	8006c1e <UART_SetConfig+0xe2>
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e011      	b.n	8006c1e <UART_SetConfig+0xe2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a67      	ldr	r2, [pc, #412]	@ (8006d9c <UART_SetConfig+0x260>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d102      	bne.n	8006c0a <UART_SetConfig+0xce>
 8006c04:	2300      	movs	r3, #0
 8006c06:	77fb      	strb	r3, [r7, #31]
 8006c08:	e009      	b.n	8006c1e <UART_SetConfig+0xe2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a64      	ldr	r2, [pc, #400]	@ (8006da0 <UART_SetConfig+0x264>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d102      	bne.n	8006c1a <UART_SetConfig+0xde>
 8006c14:	2300      	movs	r3, #0
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e001      	b.n	8006c1e <UART_SetConfig+0xe2>
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c26:	d15a      	bne.n	8006cde <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006c28:	7ffb      	ldrb	r3, [r7, #31]
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d827      	bhi.n	8006c7e <UART_SetConfig+0x142>
 8006c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <UART_SetConfig+0xf8>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c61 	.word	0x08006c61
 8006c3c:	08006c69 	.word	0x08006c69
 8006c40:	08006c7f 	.word	0x08006c7f
 8006c44:	08006c6f 	.word	0x08006c6f
 8006c48:	08006c7f 	.word	0x08006c7f
 8006c4c:	08006c7f 	.word	0x08006c7f
 8006c50:	08006c7f 	.word	0x08006c7f
 8006c54:	08006c77 	.word	0x08006c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c58:	f7fe f95c 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 8006c5c:	61b8      	str	r0, [r7, #24]
        break;
 8006c5e:	e013      	b.n	8006c88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c60:	f7fe f97a 	bl	8004f58 <HAL_RCC_GetPCLK2Freq>
 8006c64:	61b8      	str	r0, [r7, #24]
        break;
 8006c66:	e00f      	b.n	8006c88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c68:	4b4e      	ldr	r3, [pc, #312]	@ (8006da4 <UART_SetConfig+0x268>)
 8006c6a:	61bb      	str	r3, [r7, #24]
        break;
 8006c6c:	e00c      	b.n	8006c88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6e:	f7fe f8ef 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8006c72:	61b8      	str	r0, [r7, #24]
        break;
 8006c74:	e008      	b.n	8006c88 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c7a:	61bb      	str	r3, [r7, #24]
        break;
 8006c7c:	e004      	b.n	8006c88 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	77bb      	strb	r3, [r7, #30]
        break;
 8006c86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d074      	beq.n	8006d78 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	005a      	lsls	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	441a      	add	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d916      	bls.n	8006cd8 <UART_SetConfig+0x19c>
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb0:	d212      	bcs.n	8006cd8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f023 030f 	bic.w	r3, r3, #15
 8006cba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	89fb      	ldrh	r3, [r7, #14]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	89fa      	ldrh	r2, [r7, #14]
 8006cd4:	60da      	str	r2, [r3, #12]
 8006cd6:	e04f      	b.n	8006d78 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	77bb      	strb	r3, [r7, #30]
 8006cdc:	e04c      	b.n	8006d78 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cde:	7ffb      	ldrb	r3, [r7, #31]
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d828      	bhi.n	8006d36 <UART_SetConfig+0x1fa>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <UART_SetConfig+0x1b0>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d21 	.word	0x08006d21
 8006cf8:	08006d37 	.word	0x08006d37
 8006cfc:	08006d27 	.word	0x08006d27
 8006d00:	08006d37 	.word	0x08006d37
 8006d04:	08006d37 	.word	0x08006d37
 8006d08:	08006d37 	.word	0x08006d37
 8006d0c:	08006d2f 	.word	0x08006d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d10:	f7fe f900 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 8006d14:	61b8      	str	r0, [r7, #24]
        break;
 8006d16:	e013      	b.n	8006d40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d18:	f7fe f91e 	bl	8004f58 <HAL_RCC_GetPCLK2Freq>
 8006d1c:	61b8      	str	r0, [r7, #24]
        break;
 8006d1e:	e00f      	b.n	8006d40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d20:	4b20      	ldr	r3, [pc, #128]	@ (8006da4 <UART_SetConfig+0x268>)
 8006d22:	61bb      	str	r3, [r7, #24]
        break;
 8006d24:	e00c      	b.n	8006d40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d26:	f7fe f893 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8006d2a:	61b8      	str	r0, [r7, #24]
        break;
 8006d2c:	e008      	b.n	8006d40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d32:	61bb      	str	r3, [r7, #24]
        break;
 8006d34:	e004      	b.n	8006d40 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d3e:	bf00      	nop
    }

    if (pclk != 0U)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d018      	beq.n	8006d78 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	085a      	lsrs	r2, r3, #1
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	441a      	add	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b0f      	cmp	r3, #15
 8006d5e:	d909      	bls.n	8006d74 <UART_SetConfig+0x238>
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d66:	d205      	bcs.n	8006d74 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60da      	str	r2, [r3, #12]
 8006d72:	e001      	b.n	8006d78 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d84:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	efff69f3 	.word	0xefff69f3
 8006d94:	40013800 	.word	0x40013800
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	40004400 	.word	0x40004400
 8006da0:	40004800 	.word	0x40004800
 8006da4:	007a1200 	.word	0x007a1200

08006da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01a      	beq.n	8006ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ea6:	d10a      	bne.n	8006ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	605a      	str	r2, [r3, #4]
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b098      	sub	sp, #96	@ 0x60
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006efc:	f7fc f95c 	bl	80031b8 <HAL_GetTick>
 8006f00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d12e      	bne.n	8006f6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f88c 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d021      	beq.n	8006f6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e062      	b.n	8007034 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d149      	bne.n	8007010 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f84:	2200      	movs	r2, #0
 8006f86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f856 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d03c      	beq.n	8007010 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e6      	bne.n	8006f96 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3308      	adds	r3, #8
 8006fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fe8:	61fa      	str	r2, [r7, #28]
 8006fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	69b9      	ldr	r1, [r7, #24]
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e5      	bne.n	8006fc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e011      	b.n	8007034 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3758      	adds	r7, #88	@ 0x58
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704c:	e04f      	b.n	80070ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d04b      	beq.n	80070ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007056:	f7fc f8af 	bl	80031b8 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <UART_WaitOnFlagUntilTimeout+0x30>
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e04e      	b.n	800710e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	d037      	beq.n	80070ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b80      	cmp	r3, #128	@ 0x80
 8007082:	d034      	beq.n	80070ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b40      	cmp	r3, #64	@ 0x40
 8007088:	d031      	beq.n	80070ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b08      	cmp	r3, #8
 8007096:	d110      	bne.n	80070ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2208      	movs	r2, #8
 800709e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f838 	bl	8007116 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2208      	movs	r2, #8
 80070aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e029      	b.n	800710e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070c8:	d111      	bne.n	80070ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f81e 	bl	8007116 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e00f      	b.n	800710e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4013      	ands	r3, r2
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	bf0c      	ite	eq
 80070fe:	2301      	moveq	r3, #1
 8007100:	2300      	movne	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	429a      	cmp	r2, r3
 800710a:	d0a0      	beq.n	800704e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007116:	b480      	push	{r7}
 8007118:	b095      	sub	sp, #84	@ 0x54
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800712c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713c:	643b      	str	r3, [r7, #64]	@ 0x40
 800713e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e6      	bne.n	800711e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3308      	adds	r3, #8
 8007156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e5      	bne.n	8007150 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007188:	2b01      	cmp	r3, #1
 800718a:	d118      	bne.n	80071be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	60bb      	str	r3, [r7, #8]
   return(result);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f023 0310 	bic.w	r3, r3, #16
 80071a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6979      	ldr	r1, [r7, #20]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	613b      	str	r3, [r7, #16]
   return(result);
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e6      	bne.n	800718c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071d2:	bf00      	nop
 80071d4:	3754      	adds	r7, #84	@ 0x54
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <__cvt>:
 80071de:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e2:	ec57 6b10 	vmov	r6, r7, d0
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	460c      	mov	r4, r1
 80071ea:	4619      	mov	r1, r3
 80071ec:	463b      	mov	r3, r7
 80071ee:	bfbb      	ittet	lt
 80071f0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80071f4:	461f      	movlt	r7, r3
 80071f6:	2300      	movge	r3, #0
 80071f8:	232d      	movlt	r3, #45	@ 0x2d
 80071fa:	700b      	strb	r3, [r1, #0]
 80071fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071fe:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007202:	4691      	mov	r9, r2
 8007204:	f023 0820 	bic.w	r8, r3, #32
 8007208:	bfbc      	itt	lt
 800720a:	4632      	movlt	r2, r6
 800720c:	4616      	movlt	r6, r2
 800720e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007212:	d005      	beq.n	8007220 <__cvt+0x42>
 8007214:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007218:	d100      	bne.n	800721c <__cvt+0x3e>
 800721a:	3401      	adds	r4, #1
 800721c:	2102      	movs	r1, #2
 800721e:	e000      	b.n	8007222 <__cvt+0x44>
 8007220:	2103      	movs	r1, #3
 8007222:	ab03      	add	r3, sp, #12
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	ab02      	add	r3, sp, #8
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	ec47 6b10 	vmov	d0, r6, r7
 800722e:	4653      	mov	r3, sl
 8007230:	4622      	mov	r2, r4
 8007232:	f000 fe6d 	bl	8007f10 <_dtoa_r>
 8007236:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800723a:	4605      	mov	r5, r0
 800723c:	d119      	bne.n	8007272 <__cvt+0x94>
 800723e:	f019 0f01 	tst.w	r9, #1
 8007242:	d00e      	beq.n	8007262 <__cvt+0x84>
 8007244:	eb00 0904 	add.w	r9, r0, r4
 8007248:	2200      	movs	r2, #0
 800724a:	2300      	movs	r3, #0
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f7f9 fc4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007254:	b108      	cbz	r0, 800725a <__cvt+0x7c>
 8007256:	f8cd 900c 	str.w	r9, [sp, #12]
 800725a:	2230      	movs	r2, #48	@ 0x30
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	454b      	cmp	r3, r9
 8007260:	d31e      	bcc.n	80072a0 <__cvt+0xc2>
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007266:	1b5b      	subs	r3, r3, r5
 8007268:	4628      	mov	r0, r5
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	b004      	add	sp, #16
 800726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007272:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007276:	eb00 0904 	add.w	r9, r0, r4
 800727a:	d1e5      	bne.n	8007248 <__cvt+0x6a>
 800727c:	7803      	ldrb	r3, [r0, #0]
 800727e:	2b30      	cmp	r3, #48	@ 0x30
 8007280:	d10a      	bne.n	8007298 <__cvt+0xba>
 8007282:	2200      	movs	r2, #0
 8007284:	2300      	movs	r3, #0
 8007286:	4630      	mov	r0, r6
 8007288:	4639      	mov	r1, r7
 800728a:	f7f9 fc2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800728e:	b918      	cbnz	r0, 8007298 <__cvt+0xba>
 8007290:	f1c4 0401 	rsb	r4, r4, #1
 8007294:	f8ca 4000 	str.w	r4, [sl]
 8007298:	f8da 3000 	ldr.w	r3, [sl]
 800729c:	4499      	add	r9, r3
 800729e:	e7d3      	b.n	8007248 <__cvt+0x6a>
 80072a0:	1c59      	adds	r1, r3, #1
 80072a2:	9103      	str	r1, [sp, #12]
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e7d9      	b.n	800725c <__cvt+0x7e>

080072a8 <__exponent>:
 80072a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072aa:	2900      	cmp	r1, #0
 80072ac:	bfba      	itte	lt
 80072ae:	4249      	neglt	r1, r1
 80072b0:	232d      	movlt	r3, #45	@ 0x2d
 80072b2:	232b      	movge	r3, #43	@ 0x2b
 80072b4:	2909      	cmp	r1, #9
 80072b6:	7002      	strb	r2, [r0, #0]
 80072b8:	7043      	strb	r3, [r0, #1]
 80072ba:	dd29      	ble.n	8007310 <__exponent+0x68>
 80072bc:	f10d 0307 	add.w	r3, sp, #7
 80072c0:	461d      	mov	r5, r3
 80072c2:	270a      	movs	r7, #10
 80072c4:	461a      	mov	r2, r3
 80072c6:	fbb1 f6f7 	udiv	r6, r1, r7
 80072ca:	fb07 1416 	mls	r4, r7, r6, r1
 80072ce:	3430      	adds	r4, #48	@ 0x30
 80072d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072d4:	460c      	mov	r4, r1
 80072d6:	2c63      	cmp	r4, #99	@ 0x63
 80072d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80072dc:	4631      	mov	r1, r6
 80072de:	dcf1      	bgt.n	80072c4 <__exponent+0x1c>
 80072e0:	3130      	adds	r1, #48	@ 0x30
 80072e2:	1e94      	subs	r4, r2, #2
 80072e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072e8:	1c41      	adds	r1, r0, #1
 80072ea:	4623      	mov	r3, r4
 80072ec:	42ab      	cmp	r3, r5
 80072ee:	d30a      	bcc.n	8007306 <__exponent+0x5e>
 80072f0:	f10d 0309 	add.w	r3, sp, #9
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	42ac      	cmp	r4, r5
 80072f8:	bf88      	it	hi
 80072fa:	2300      	movhi	r3, #0
 80072fc:	3302      	adds	r3, #2
 80072fe:	4403      	add	r3, r0
 8007300:	1a18      	subs	r0, r3, r0
 8007302:	b003      	add	sp, #12
 8007304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007306:	f813 6b01 	ldrb.w	r6, [r3], #1
 800730a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800730e:	e7ed      	b.n	80072ec <__exponent+0x44>
 8007310:	2330      	movs	r3, #48	@ 0x30
 8007312:	3130      	adds	r1, #48	@ 0x30
 8007314:	7083      	strb	r3, [r0, #2]
 8007316:	70c1      	strb	r1, [r0, #3]
 8007318:	1d03      	adds	r3, r0, #4
 800731a:	e7f1      	b.n	8007300 <__exponent+0x58>

0800731c <_printf_float>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	b08d      	sub	sp, #52	@ 0x34
 8007322:	460c      	mov	r4, r1
 8007324:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007328:	4616      	mov	r6, r2
 800732a:	461f      	mov	r7, r3
 800732c:	4605      	mov	r5, r0
 800732e:	f000 fcef 	bl	8007d10 <_localeconv_r>
 8007332:	6803      	ldr	r3, [r0, #0]
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	4618      	mov	r0, r3
 8007338:	f7f8 ffaa 	bl	8000290 <strlen>
 800733c:	2300      	movs	r3, #0
 800733e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007340:	f8d8 3000 	ldr.w	r3, [r8]
 8007344:	9005      	str	r0, [sp, #20]
 8007346:	3307      	adds	r3, #7
 8007348:	f023 0307 	bic.w	r3, r3, #7
 800734c:	f103 0208 	add.w	r2, r3, #8
 8007350:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007354:	f8d4 b000 	ldr.w	fp, [r4]
 8007358:	f8c8 2000 	str.w	r2, [r8]
 800735c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007360:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007364:	9307      	str	r3, [sp, #28]
 8007366:	f8cd 8018 	str.w	r8, [sp, #24]
 800736a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800736e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007372:	4b9c      	ldr	r3, [pc, #624]	@ (80075e4 <_printf_float+0x2c8>)
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	f7f9 fbe8 	bl	8000b4c <__aeabi_dcmpun>
 800737c:	bb70      	cbnz	r0, 80073dc <_printf_float+0xc0>
 800737e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007382:	4b98      	ldr	r3, [pc, #608]	@ (80075e4 <_printf_float+0x2c8>)
 8007384:	f04f 32ff 	mov.w	r2, #4294967295
 8007388:	f7f9 fbc2 	bl	8000b10 <__aeabi_dcmple>
 800738c:	bb30      	cbnz	r0, 80073dc <_printf_float+0xc0>
 800738e:	2200      	movs	r2, #0
 8007390:	2300      	movs	r3, #0
 8007392:	4640      	mov	r0, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f7f9 fbb1 	bl	8000afc <__aeabi_dcmplt>
 800739a:	b110      	cbz	r0, 80073a2 <_printf_float+0x86>
 800739c:	232d      	movs	r3, #45	@ 0x2d
 800739e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073a2:	4a91      	ldr	r2, [pc, #580]	@ (80075e8 <_printf_float+0x2cc>)
 80073a4:	4b91      	ldr	r3, [pc, #580]	@ (80075ec <_printf_float+0x2d0>)
 80073a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80073aa:	bf8c      	ite	hi
 80073ac:	4690      	movhi	r8, r2
 80073ae:	4698      	movls	r8, r3
 80073b0:	2303      	movs	r3, #3
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	f02b 0304 	bic.w	r3, fp, #4
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	f04f 0900 	mov.w	r9, #0
 80073be:	9700      	str	r7, [sp, #0]
 80073c0:	4633      	mov	r3, r6
 80073c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 f9d2 	bl	8007770 <_printf_common>
 80073cc:	3001      	adds	r0, #1
 80073ce:	f040 808d 	bne.w	80074ec <_printf_float+0x1d0>
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	b00d      	add	sp, #52	@ 0x34
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	4640      	mov	r0, r8
 80073e2:	4649      	mov	r1, r9
 80073e4:	f7f9 fbb2 	bl	8000b4c <__aeabi_dcmpun>
 80073e8:	b140      	cbz	r0, 80073fc <_printf_float+0xe0>
 80073ea:	464b      	mov	r3, r9
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfbc      	itt	lt
 80073f0:	232d      	movlt	r3, #45	@ 0x2d
 80073f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073f6:	4a7e      	ldr	r2, [pc, #504]	@ (80075f0 <_printf_float+0x2d4>)
 80073f8:	4b7e      	ldr	r3, [pc, #504]	@ (80075f4 <_printf_float+0x2d8>)
 80073fa:	e7d4      	b.n	80073a6 <_printf_float+0x8a>
 80073fc:	6863      	ldr	r3, [r4, #4]
 80073fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007402:	9206      	str	r2, [sp, #24]
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	d13b      	bne.n	8007480 <_printf_float+0x164>
 8007408:	2306      	movs	r3, #6
 800740a:	6063      	str	r3, [r4, #4]
 800740c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007410:	2300      	movs	r3, #0
 8007412:	6022      	str	r2, [r4, #0]
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	ab0a      	add	r3, sp, #40	@ 0x28
 8007418:	e9cd a301 	strd	sl, r3, [sp, #4]
 800741c:	ab09      	add	r3, sp, #36	@ 0x24
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	6861      	ldr	r1, [r4, #4]
 8007422:	ec49 8b10 	vmov	d0, r8, r9
 8007426:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800742a:	4628      	mov	r0, r5
 800742c:	f7ff fed7 	bl	80071de <__cvt>
 8007430:	9b06      	ldr	r3, [sp, #24]
 8007432:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007434:	2b47      	cmp	r3, #71	@ 0x47
 8007436:	4680      	mov	r8, r0
 8007438:	d129      	bne.n	800748e <_printf_float+0x172>
 800743a:	1cc8      	adds	r0, r1, #3
 800743c:	db02      	blt.n	8007444 <_printf_float+0x128>
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	4299      	cmp	r1, r3
 8007442:	dd41      	ble.n	80074c8 <_printf_float+0x1ac>
 8007444:	f1aa 0a02 	sub.w	sl, sl, #2
 8007448:	fa5f fa8a 	uxtb.w	sl, sl
 800744c:	3901      	subs	r1, #1
 800744e:	4652      	mov	r2, sl
 8007450:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007454:	9109      	str	r1, [sp, #36]	@ 0x24
 8007456:	f7ff ff27 	bl	80072a8 <__exponent>
 800745a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800745c:	1813      	adds	r3, r2, r0
 800745e:	2a01      	cmp	r2, #1
 8007460:	4681      	mov	r9, r0
 8007462:	6123      	str	r3, [r4, #16]
 8007464:	dc02      	bgt.n	800746c <_printf_float+0x150>
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	07d2      	lsls	r2, r2, #31
 800746a:	d501      	bpl.n	8007470 <_printf_float+0x154>
 800746c:	3301      	adds	r3, #1
 800746e:	6123      	str	r3, [r4, #16]
 8007470:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0a2      	beq.n	80073be <_printf_float+0xa2>
 8007478:	232d      	movs	r3, #45	@ 0x2d
 800747a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800747e:	e79e      	b.n	80073be <_printf_float+0xa2>
 8007480:	9a06      	ldr	r2, [sp, #24]
 8007482:	2a47      	cmp	r2, #71	@ 0x47
 8007484:	d1c2      	bne.n	800740c <_printf_float+0xf0>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1c0      	bne.n	800740c <_printf_float+0xf0>
 800748a:	2301      	movs	r3, #1
 800748c:	e7bd      	b.n	800740a <_printf_float+0xee>
 800748e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007492:	d9db      	bls.n	800744c <_printf_float+0x130>
 8007494:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007498:	d118      	bne.n	80074cc <_printf_float+0x1b0>
 800749a:	2900      	cmp	r1, #0
 800749c:	6863      	ldr	r3, [r4, #4]
 800749e:	dd0b      	ble.n	80074b8 <_printf_float+0x19c>
 80074a0:	6121      	str	r1, [r4, #16]
 80074a2:	b913      	cbnz	r3, 80074aa <_printf_float+0x18e>
 80074a4:	6822      	ldr	r2, [r4, #0]
 80074a6:	07d0      	lsls	r0, r2, #31
 80074a8:	d502      	bpl.n	80074b0 <_printf_float+0x194>
 80074aa:	3301      	adds	r3, #1
 80074ac:	440b      	add	r3, r1
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80074b2:	f04f 0900 	mov.w	r9, #0
 80074b6:	e7db      	b.n	8007470 <_printf_float+0x154>
 80074b8:	b913      	cbnz	r3, 80074c0 <_printf_float+0x1a4>
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	07d2      	lsls	r2, r2, #31
 80074be:	d501      	bpl.n	80074c4 <_printf_float+0x1a8>
 80074c0:	3302      	adds	r3, #2
 80074c2:	e7f4      	b.n	80074ae <_printf_float+0x192>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e7f2      	b.n	80074ae <_printf_float+0x192>
 80074c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80074cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ce:	4299      	cmp	r1, r3
 80074d0:	db05      	blt.n	80074de <_printf_float+0x1c2>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	6121      	str	r1, [r4, #16]
 80074d6:	07d8      	lsls	r0, r3, #31
 80074d8:	d5ea      	bpl.n	80074b0 <_printf_float+0x194>
 80074da:	1c4b      	adds	r3, r1, #1
 80074dc:	e7e7      	b.n	80074ae <_printf_float+0x192>
 80074de:	2900      	cmp	r1, #0
 80074e0:	bfd4      	ite	le
 80074e2:	f1c1 0202 	rsble	r2, r1, #2
 80074e6:	2201      	movgt	r2, #1
 80074e8:	4413      	add	r3, r2
 80074ea:	e7e0      	b.n	80074ae <_printf_float+0x192>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	055a      	lsls	r2, r3, #21
 80074f0:	d407      	bmi.n	8007502 <_printf_float+0x1e6>
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	d12b      	bne.n	8007558 <_printf_float+0x23c>
 8007500:	e767      	b.n	80073d2 <_printf_float+0xb6>
 8007502:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007506:	f240 80dd 	bls.w	80076c4 <_printf_float+0x3a8>
 800750a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800750e:	2200      	movs	r2, #0
 8007510:	2300      	movs	r3, #0
 8007512:	f7f9 fae9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007516:	2800      	cmp	r0, #0
 8007518:	d033      	beq.n	8007582 <_printf_float+0x266>
 800751a:	4a37      	ldr	r2, [pc, #220]	@ (80075f8 <_printf_float+0x2dc>)
 800751c:	2301      	movs	r3, #1
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	47b8      	blx	r7
 8007524:	3001      	adds	r0, #1
 8007526:	f43f af54 	beq.w	80073d2 <_printf_float+0xb6>
 800752a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800752e:	4543      	cmp	r3, r8
 8007530:	db02      	blt.n	8007538 <_printf_float+0x21c>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	07d8      	lsls	r0, r3, #31
 8007536:	d50f      	bpl.n	8007558 <_printf_float+0x23c>
 8007538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	f43f af45 	beq.w	80073d2 <_printf_float+0xb6>
 8007548:	f04f 0900 	mov.w	r9, #0
 800754c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007550:	f104 0a1a 	add.w	sl, r4, #26
 8007554:	45c8      	cmp	r8, r9
 8007556:	dc09      	bgt.n	800756c <_printf_float+0x250>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	079b      	lsls	r3, r3, #30
 800755c:	f100 8103 	bmi.w	8007766 <_printf_float+0x44a>
 8007560:	68e0      	ldr	r0, [r4, #12]
 8007562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007564:	4298      	cmp	r0, r3
 8007566:	bfb8      	it	lt
 8007568:	4618      	movlt	r0, r3
 800756a:	e734      	b.n	80073d6 <_printf_float+0xba>
 800756c:	2301      	movs	r3, #1
 800756e:	4652      	mov	r2, sl
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f af2b 	beq.w	80073d2 <_printf_float+0xb6>
 800757c:	f109 0901 	add.w	r9, r9, #1
 8007580:	e7e8      	b.n	8007554 <_printf_float+0x238>
 8007582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	dc39      	bgt.n	80075fc <_printf_float+0x2e0>
 8007588:	4a1b      	ldr	r2, [pc, #108]	@ (80075f8 <_printf_float+0x2dc>)
 800758a:	2301      	movs	r3, #1
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f af1d 	beq.w	80073d2 <_printf_float+0xb6>
 8007598:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800759c:	ea59 0303 	orrs.w	r3, r9, r3
 80075a0:	d102      	bne.n	80075a8 <_printf_float+0x28c>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	07d9      	lsls	r1, r3, #31
 80075a6:	d5d7      	bpl.n	8007558 <_printf_float+0x23c>
 80075a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f af0d 	beq.w	80073d2 <_printf_float+0xb6>
 80075b8:	f04f 0a00 	mov.w	sl, #0
 80075bc:	f104 0b1a 	add.w	fp, r4, #26
 80075c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075c2:	425b      	negs	r3, r3
 80075c4:	4553      	cmp	r3, sl
 80075c6:	dc01      	bgt.n	80075cc <_printf_float+0x2b0>
 80075c8:	464b      	mov	r3, r9
 80075ca:	e793      	b.n	80074f4 <_printf_float+0x1d8>
 80075cc:	2301      	movs	r3, #1
 80075ce:	465a      	mov	r2, fp
 80075d0:	4631      	mov	r1, r6
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	f43f aefb 	beq.w	80073d2 <_printf_float+0xb6>
 80075dc:	f10a 0a01 	add.w	sl, sl, #1
 80075e0:	e7ee      	b.n	80075c0 <_printf_float+0x2a4>
 80075e2:	bf00      	nop
 80075e4:	7fefffff 	.word	0x7fefffff
 80075e8:	0800a2ec 	.word	0x0800a2ec
 80075ec:	0800a2e8 	.word	0x0800a2e8
 80075f0:	0800a2f4 	.word	0x0800a2f4
 80075f4:	0800a2f0 	.word	0x0800a2f0
 80075f8:	0800a2f8 	.word	0x0800a2f8
 80075fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007602:	4553      	cmp	r3, sl
 8007604:	bfa8      	it	ge
 8007606:	4653      	movge	r3, sl
 8007608:	2b00      	cmp	r3, #0
 800760a:	4699      	mov	r9, r3
 800760c:	dc36      	bgt.n	800767c <_printf_float+0x360>
 800760e:	f04f 0b00 	mov.w	fp, #0
 8007612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007616:	f104 021a 	add.w	r2, r4, #26
 800761a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800761c:	9306      	str	r3, [sp, #24]
 800761e:	eba3 0309 	sub.w	r3, r3, r9
 8007622:	455b      	cmp	r3, fp
 8007624:	dc31      	bgt.n	800768a <_printf_float+0x36e>
 8007626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007628:	459a      	cmp	sl, r3
 800762a:	dc3a      	bgt.n	80076a2 <_printf_float+0x386>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	07da      	lsls	r2, r3, #31
 8007630:	d437      	bmi.n	80076a2 <_printf_float+0x386>
 8007632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007634:	ebaa 0903 	sub.w	r9, sl, r3
 8007638:	9b06      	ldr	r3, [sp, #24]
 800763a:	ebaa 0303 	sub.w	r3, sl, r3
 800763e:	4599      	cmp	r9, r3
 8007640:	bfa8      	it	ge
 8007642:	4699      	movge	r9, r3
 8007644:	f1b9 0f00 	cmp.w	r9, #0
 8007648:	dc33      	bgt.n	80076b2 <_printf_float+0x396>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007652:	f104 0b1a 	add.w	fp, r4, #26
 8007656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007658:	ebaa 0303 	sub.w	r3, sl, r3
 800765c:	eba3 0309 	sub.w	r3, r3, r9
 8007660:	4543      	cmp	r3, r8
 8007662:	f77f af79 	ble.w	8007558 <_printf_float+0x23c>
 8007666:	2301      	movs	r3, #1
 8007668:	465a      	mov	r2, fp
 800766a:	4631      	mov	r1, r6
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	f43f aeae 	beq.w	80073d2 <_printf_float+0xb6>
 8007676:	f108 0801 	add.w	r8, r8, #1
 800767a:	e7ec      	b.n	8007656 <_printf_float+0x33a>
 800767c:	4642      	mov	r2, r8
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	d1c2      	bne.n	800760e <_printf_float+0x2f2>
 8007688:	e6a3      	b.n	80073d2 <_printf_float+0xb6>
 800768a:	2301      	movs	r3, #1
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	9206      	str	r2, [sp, #24]
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	f43f ae9c 	beq.w	80073d2 <_printf_float+0xb6>
 800769a:	9a06      	ldr	r2, [sp, #24]
 800769c:	f10b 0b01 	add.w	fp, fp, #1
 80076a0:	e7bb      	b.n	800761a <_printf_float+0x2fe>
 80076a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	d1c0      	bne.n	8007632 <_printf_float+0x316>
 80076b0:	e68f      	b.n	80073d2 <_printf_float+0xb6>
 80076b2:	9a06      	ldr	r2, [sp, #24]
 80076b4:	464b      	mov	r3, r9
 80076b6:	4442      	add	r2, r8
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	d1c3      	bne.n	800764a <_printf_float+0x32e>
 80076c2:	e686      	b.n	80073d2 <_printf_float+0xb6>
 80076c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076c8:	f1ba 0f01 	cmp.w	sl, #1
 80076cc:	dc01      	bgt.n	80076d2 <_printf_float+0x3b6>
 80076ce:	07db      	lsls	r3, r3, #31
 80076d0:	d536      	bpl.n	8007740 <_printf_float+0x424>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4642      	mov	r2, r8
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f ae78 	beq.w	80073d2 <_printf_float+0xb6>
 80076e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	f43f ae70 	beq.w	80073d2 <_printf_float+0xb6>
 80076f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076fe:	f7f9 f9f3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007702:	b9c0      	cbnz	r0, 8007736 <_printf_float+0x41a>
 8007704:	4653      	mov	r3, sl
 8007706:	f108 0201 	add.w	r2, r8, #1
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	d10c      	bne.n	800772e <_printf_float+0x412>
 8007714:	e65d      	b.n	80073d2 <_printf_float+0xb6>
 8007716:	2301      	movs	r3, #1
 8007718:	465a      	mov	r2, fp
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	f43f ae56 	beq.w	80073d2 <_printf_float+0xb6>
 8007726:	f108 0801 	add.w	r8, r8, #1
 800772a:	45d0      	cmp	r8, sl
 800772c:	dbf3      	blt.n	8007716 <_printf_float+0x3fa>
 800772e:	464b      	mov	r3, r9
 8007730:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007734:	e6df      	b.n	80074f6 <_printf_float+0x1da>
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	f104 0b1a 	add.w	fp, r4, #26
 800773e:	e7f4      	b.n	800772a <_printf_float+0x40e>
 8007740:	2301      	movs	r3, #1
 8007742:	4642      	mov	r2, r8
 8007744:	e7e1      	b.n	800770a <_printf_float+0x3ee>
 8007746:	2301      	movs	r3, #1
 8007748:	464a      	mov	r2, r9
 800774a:	4631      	mov	r1, r6
 800774c:	4628      	mov	r0, r5
 800774e:	47b8      	blx	r7
 8007750:	3001      	adds	r0, #1
 8007752:	f43f ae3e 	beq.w	80073d2 <_printf_float+0xb6>
 8007756:	f108 0801 	add.w	r8, r8, #1
 800775a:	68e3      	ldr	r3, [r4, #12]
 800775c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800775e:	1a5b      	subs	r3, r3, r1
 8007760:	4543      	cmp	r3, r8
 8007762:	dcf0      	bgt.n	8007746 <_printf_float+0x42a>
 8007764:	e6fc      	b.n	8007560 <_printf_float+0x244>
 8007766:	f04f 0800 	mov.w	r8, #0
 800776a:	f104 0919 	add.w	r9, r4, #25
 800776e:	e7f4      	b.n	800775a <_printf_float+0x43e>

08007770 <_printf_common>:
 8007770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	4616      	mov	r6, r2
 8007776:	4698      	mov	r8, r3
 8007778:	688a      	ldr	r2, [r1, #8]
 800777a:	690b      	ldr	r3, [r1, #16]
 800777c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007780:	4293      	cmp	r3, r2
 8007782:	bfb8      	it	lt
 8007784:	4613      	movlt	r3, r2
 8007786:	6033      	str	r3, [r6, #0]
 8007788:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800778c:	4607      	mov	r7, r0
 800778e:	460c      	mov	r4, r1
 8007790:	b10a      	cbz	r2, 8007796 <_printf_common+0x26>
 8007792:	3301      	adds	r3, #1
 8007794:	6033      	str	r3, [r6, #0]
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	0699      	lsls	r1, r3, #26
 800779a:	bf42      	ittt	mi
 800779c:	6833      	ldrmi	r3, [r6, #0]
 800779e:	3302      	addmi	r3, #2
 80077a0:	6033      	strmi	r3, [r6, #0]
 80077a2:	6825      	ldr	r5, [r4, #0]
 80077a4:	f015 0506 	ands.w	r5, r5, #6
 80077a8:	d106      	bne.n	80077b8 <_printf_common+0x48>
 80077aa:	f104 0a19 	add.w	sl, r4, #25
 80077ae:	68e3      	ldr	r3, [r4, #12]
 80077b0:	6832      	ldr	r2, [r6, #0]
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	42ab      	cmp	r3, r5
 80077b6:	dc26      	bgt.n	8007806 <_printf_common+0x96>
 80077b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077bc:	6822      	ldr	r2, [r4, #0]
 80077be:	3b00      	subs	r3, #0
 80077c0:	bf18      	it	ne
 80077c2:	2301      	movne	r3, #1
 80077c4:	0692      	lsls	r2, r2, #26
 80077c6:	d42b      	bmi.n	8007820 <_printf_common+0xb0>
 80077c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077cc:	4641      	mov	r1, r8
 80077ce:	4638      	mov	r0, r7
 80077d0:	47c8      	blx	r9
 80077d2:	3001      	adds	r0, #1
 80077d4:	d01e      	beq.n	8007814 <_printf_common+0xa4>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	6922      	ldr	r2, [r4, #16]
 80077da:	f003 0306 	and.w	r3, r3, #6
 80077de:	2b04      	cmp	r3, #4
 80077e0:	bf02      	ittt	eq
 80077e2:	68e5      	ldreq	r5, [r4, #12]
 80077e4:	6833      	ldreq	r3, [r6, #0]
 80077e6:	1aed      	subeq	r5, r5, r3
 80077e8:	68a3      	ldr	r3, [r4, #8]
 80077ea:	bf0c      	ite	eq
 80077ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f0:	2500      	movne	r5, #0
 80077f2:	4293      	cmp	r3, r2
 80077f4:	bfc4      	itt	gt
 80077f6:	1a9b      	subgt	r3, r3, r2
 80077f8:	18ed      	addgt	r5, r5, r3
 80077fa:	2600      	movs	r6, #0
 80077fc:	341a      	adds	r4, #26
 80077fe:	42b5      	cmp	r5, r6
 8007800:	d11a      	bne.n	8007838 <_printf_common+0xc8>
 8007802:	2000      	movs	r0, #0
 8007804:	e008      	b.n	8007818 <_printf_common+0xa8>
 8007806:	2301      	movs	r3, #1
 8007808:	4652      	mov	r2, sl
 800780a:	4641      	mov	r1, r8
 800780c:	4638      	mov	r0, r7
 800780e:	47c8      	blx	r9
 8007810:	3001      	adds	r0, #1
 8007812:	d103      	bne.n	800781c <_printf_common+0xac>
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781c:	3501      	adds	r5, #1
 800781e:	e7c6      	b.n	80077ae <_printf_common+0x3e>
 8007820:	18e1      	adds	r1, r4, r3
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	2030      	movs	r0, #48	@ 0x30
 8007826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800782a:	4422      	add	r2, r4
 800782c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007834:	3302      	adds	r3, #2
 8007836:	e7c7      	b.n	80077c8 <_printf_common+0x58>
 8007838:	2301      	movs	r3, #1
 800783a:	4622      	mov	r2, r4
 800783c:	4641      	mov	r1, r8
 800783e:	4638      	mov	r0, r7
 8007840:	47c8      	blx	r9
 8007842:	3001      	adds	r0, #1
 8007844:	d0e6      	beq.n	8007814 <_printf_common+0xa4>
 8007846:	3601      	adds	r6, #1
 8007848:	e7d9      	b.n	80077fe <_printf_common+0x8e>
	...

0800784c <_printf_i>:
 800784c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	7e0f      	ldrb	r7, [r1, #24]
 8007852:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007854:	2f78      	cmp	r7, #120	@ 0x78
 8007856:	4691      	mov	r9, r2
 8007858:	4680      	mov	r8, r0
 800785a:	460c      	mov	r4, r1
 800785c:	469a      	mov	sl, r3
 800785e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007862:	d807      	bhi.n	8007874 <_printf_i+0x28>
 8007864:	2f62      	cmp	r7, #98	@ 0x62
 8007866:	d80a      	bhi.n	800787e <_printf_i+0x32>
 8007868:	2f00      	cmp	r7, #0
 800786a:	f000 80d1 	beq.w	8007a10 <_printf_i+0x1c4>
 800786e:	2f58      	cmp	r7, #88	@ 0x58
 8007870:	f000 80b8 	beq.w	80079e4 <_printf_i+0x198>
 8007874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800787c:	e03a      	b.n	80078f4 <_printf_i+0xa8>
 800787e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007882:	2b15      	cmp	r3, #21
 8007884:	d8f6      	bhi.n	8007874 <_printf_i+0x28>
 8007886:	a101      	add	r1, pc, #4	@ (adr r1, 800788c <_printf_i+0x40>)
 8007888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800788c:	080078e5 	.word	0x080078e5
 8007890:	080078f9 	.word	0x080078f9
 8007894:	08007875 	.word	0x08007875
 8007898:	08007875 	.word	0x08007875
 800789c:	08007875 	.word	0x08007875
 80078a0:	08007875 	.word	0x08007875
 80078a4:	080078f9 	.word	0x080078f9
 80078a8:	08007875 	.word	0x08007875
 80078ac:	08007875 	.word	0x08007875
 80078b0:	08007875 	.word	0x08007875
 80078b4:	08007875 	.word	0x08007875
 80078b8:	080079f7 	.word	0x080079f7
 80078bc:	08007923 	.word	0x08007923
 80078c0:	080079b1 	.word	0x080079b1
 80078c4:	08007875 	.word	0x08007875
 80078c8:	08007875 	.word	0x08007875
 80078cc:	08007a19 	.word	0x08007a19
 80078d0:	08007875 	.word	0x08007875
 80078d4:	08007923 	.word	0x08007923
 80078d8:	08007875 	.word	0x08007875
 80078dc:	08007875 	.word	0x08007875
 80078e0:	080079b9 	.word	0x080079b9
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	1d1a      	adds	r2, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6032      	str	r2, [r6, #0]
 80078ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078f4:	2301      	movs	r3, #1
 80078f6:	e09c      	b.n	8007a32 <_printf_i+0x1e6>
 80078f8:	6833      	ldr	r3, [r6, #0]
 80078fa:	6820      	ldr	r0, [r4, #0]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	6031      	str	r1, [r6, #0]
 8007900:	0606      	lsls	r6, r0, #24
 8007902:	d501      	bpl.n	8007908 <_printf_i+0xbc>
 8007904:	681d      	ldr	r5, [r3, #0]
 8007906:	e003      	b.n	8007910 <_printf_i+0xc4>
 8007908:	0645      	lsls	r5, r0, #25
 800790a:	d5fb      	bpl.n	8007904 <_printf_i+0xb8>
 800790c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007910:	2d00      	cmp	r5, #0
 8007912:	da03      	bge.n	800791c <_printf_i+0xd0>
 8007914:	232d      	movs	r3, #45	@ 0x2d
 8007916:	426d      	negs	r5, r5
 8007918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800791c:	4858      	ldr	r0, [pc, #352]	@ (8007a80 <_printf_i+0x234>)
 800791e:	230a      	movs	r3, #10
 8007920:	e011      	b.n	8007946 <_printf_i+0xfa>
 8007922:	6821      	ldr	r1, [r4, #0]
 8007924:	6833      	ldr	r3, [r6, #0]
 8007926:	0608      	lsls	r0, r1, #24
 8007928:	f853 5b04 	ldr.w	r5, [r3], #4
 800792c:	d402      	bmi.n	8007934 <_printf_i+0xe8>
 800792e:	0649      	lsls	r1, r1, #25
 8007930:	bf48      	it	mi
 8007932:	b2ad      	uxthmi	r5, r5
 8007934:	2f6f      	cmp	r7, #111	@ 0x6f
 8007936:	4852      	ldr	r0, [pc, #328]	@ (8007a80 <_printf_i+0x234>)
 8007938:	6033      	str	r3, [r6, #0]
 800793a:	bf14      	ite	ne
 800793c:	230a      	movne	r3, #10
 800793e:	2308      	moveq	r3, #8
 8007940:	2100      	movs	r1, #0
 8007942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007946:	6866      	ldr	r6, [r4, #4]
 8007948:	60a6      	str	r6, [r4, #8]
 800794a:	2e00      	cmp	r6, #0
 800794c:	db05      	blt.n	800795a <_printf_i+0x10e>
 800794e:	6821      	ldr	r1, [r4, #0]
 8007950:	432e      	orrs	r6, r5
 8007952:	f021 0104 	bic.w	r1, r1, #4
 8007956:	6021      	str	r1, [r4, #0]
 8007958:	d04b      	beq.n	80079f2 <_printf_i+0x1a6>
 800795a:	4616      	mov	r6, r2
 800795c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007960:	fb03 5711 	mls	r7, r3, r1, r5
 8007964:	5dc7      	ldrb	r7, [r0, r7]
 8007966:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800796a:	462f      	mov	r7, r5
 800796c:	42bb      	cmp	r3, r7
 800796e:	460d      	mov	r5, r1
 8007970:	d9f4      	bls.n	800795c <_printf_i+0x110>
 8007972:	2b08      	cmp	r3, #8
 8007974:	d10b      	bne.n	800798e <_printf_i+0x142>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	07df      	lsls	r7, r3, #31
 800797a:	d508      	bpl.n	800798e <_printf_i+0x142>
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	6861      	ldr	r1, [r4, #4]
 8007980:	4299      	cmp	r1, r3
 8007982:	bfde      	ittt	le
 8007984:	2330      	movle	r3, #48	@ 0x30
 8007986:	f806 3c01 	strble.w	r3, [r6, #-1]
 800798a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800798e:	1b92      	subs	r2, r2, r6
 8007990:	6122      	str	r2, [r4, #16]
 8007992:	f8cd a000 	str.w	sl, [sp]
 8007996:	464b      	mov	r3, r9
 8007998:	aa03      	add	r2, sp, #12
 800799a:	4621      	mov	r1, r4
 800799c:	4640      	mov	r0, r8
 800799e:	f7ff fee7 	bl	8007770 <_printf_common>
 80079a2:	3001      	adds	r0, #1
 80079a4:	d14a      	bne.n	8007a3c <_printf_i+0x1f0>
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	b004      	add	sp, #16
 80079ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	f043 0320 	orr.w	r3, r3, #32
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	4832      	ldr	r0, [pc, #200]	@ (8007a84 <_printf_i+0x238>)
 80079ba:	2778      	movs	r7, #120	@ 0x78
 80079bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	6831      	ldr	r1, [r6, #0]
 80079c4:	061f      	lsls	r7, r3, #24
 80079c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80079ca:	d402      	bmi.n	80079d2 <_printf_i+0x186>
 80079cc:	065f      	lsls	r7, r3, #25
 80079ce:	bf48      	it	mi
 80079d0:	b2ad      	uxthmi	r5, r5
 80079d2:	6031      	str	r1, [r6, #0]
 80079d4:	07d9      	lsls	r1, r3, #31
 80079d6:	bf44      	itt	mi
 80079d8:	f043 0320 	orrmi.w	r3, r3, #32
 80079dc:	6023      	strmi	r3, [r4, #0]
 80079de:	b11d      	cbz	r5, 80079e8 <_printf_i+0x19c>
 80079e0:	2310      	movs	r3, #16
 80079e2:	e7ad      	b.n	8007940 <_printf_i+0xf4>
 80079e4:	4826      	ldr	r0, [pc, #152]	@ (8007a80 <_printf_i+0x234>)
 80079e6:	e7e9      	b.n	80079bc <_printf_i+0x170>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	f023 0320 	bic.w	r3, r3, #32
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	e7f6      	b.n	80079e0 <_printf_i+0x194>
 80079f2:	4616      	mov	r6, r2
 80079f4:	e7bd      	b.n	8007972 <_printf_i+0x126>
 80079f6:	6833      	ldr	r3, [r6, #0]
 80079f8:	6825      	ldr	r5, [r4, #0]
 80079fa:	6961      	ldr	r1, [r4, #20]
 80079fc:	1d18      	adds	r0, r3, #4
 80079fe:	6030      	str	r0, [r6, #0]
 8007a00:	062e      	lsls	r6, r5, #24
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	d501      	bpl.n	8007a0a <_printf_i+0x1be>
 8007a06:	6019      	str	r1, [r3, #0]
 8007a08:	e002      	b.n	8007a10 <_printf_i+0x1c4>
 8007a0a:	0668      	lsls	r0, r5, #25
 8007a0c:	d5fb      	bpl.n	8007a06 <_printf_i+0x1ba>
 8007a0e:	8019      	strh	r1, [r3, #0]
 8007a10:	2300      	movs	r3, #0
 8007a12:	6123      	str	r3, [r4, #16]
 8007a14:	4616      	mov	r6, r2
 8007a16:	e7bc      	b.n	8007992 <_printf_i+0x146>
 8007a18:	6833      	ldr	r3, [r6, #0]
 8007a1a:	1d1a      	adds	r2, r3, #4
 8007a1c:	6032      	str	r2, [r6, #0]
 8007a1e:	681e      	ldr	r6, [r3, #0]
 8007a20:	6862      	ldr	r2, [r4, #4]
 8007a22:	2100      	movs	r1, #0
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7f8 fbe3 	bl	80001f0 <memchr>
 8007a2a:	b108      	cbz	r0, 8007a30 <_printf_i+0x1e4>
 8007a2c:	1b80      	subs	r0, r0, r6
 8007a2e:	6060      	str	r0, [r4, #4]
 8007a30:	6863      	ldr	r3, [r4, #4]
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	2300      	movs	r3, #0
 8007a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a3a:	e7aa      	b.n	8007992 <_printf_i+0x146>
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	4632      	mov	r2, r6
 8007a40:	4649      	mov	r1, r9
 8007a42:	4640      	mov	r0, r8
 8007a44:	47d0      	blx	sl
 8007a46:	3001      	adds	r0, #1
 8007a48:	d0ad      	beq.n	80079a6 <_printf_i+0x15a>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	079b      	lsls	r3, r3, #30
 8007a4e:	d413      	bmi.n	8007a78 <_printf_i+0x22c>
 8007a50:	68e0      	ldr	r0, [r4, #12]
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	4298      	cmp	r0, r3
 8007a56:	bfb8      	it	lt
 8007a58:	4618      	movlt	r0, r3
 8007a5a:	e7a6      	b.n	80079aa <_printf_i+0x15e>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4649      	mov	r1, r9
 8007a62:	4640      	mov	r0, r8
 8007a64:	47d0      	blx	sl
 8007a66:	3001      	adds	r0, #1
 8007a68:	d09d      	beq.n	80079a6 <_printf_i+0x15a>
 8007a6a:	3501      	adds	r5, #1
 8007a6c:	68e3      	ldr	r3, [r4, #12]
 8007a6e:	9903      	ldr	r1, [sp, #12]
 8007a70:	1a5b      	subs	r3, r3, r1
 8007a72:	42ab      	cmp	r3, r5
 8007a74:	dcf2      	bgt.n	8007a5c <_printf_i+0x210>
 8007a76:	e7eb      	b.n	8007a50 <_printf_i+0x204>
 8007a78:	2500      	movs	r5, #0
 8007a7a:	f104 0619 	add.w	r6, r4, #25
 8007a7e:	e7f5      	b.n	8007a6c <_printf_i+0x220>
 8007a80:	0800a2fa 	.word	0x0800a2fa
 8007a84:	0800a30b 	.word	0x0800a30b

08007a88 <std>:
 8007a88:	2300      	movs	r3, #0
 8007a8a:	b510      	push	{r4, lr}
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a96:	6083      	str	r3, [r0, #8]
 8007a98:	8181      	strh	r1, [r0, #12]
 8007a9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a9c:	81c2      	strh	r2, [r0, #14]
 8007a9e:	6183      	str	r3, [r0, #24]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	305c      	adds	r0, #92	@ 0x5c
 8007aa6:	f000 f92a 	bl	8007cfe <memset>
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <std+0x58>)
 8007aac:	6263      	str	r3, [r4, #36]	@ 0x24
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <std+0x5c>)
 8007ab0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae8 <std+0x60>)
 8007ab4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <std+0x64>)
 8007ab8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007aba:	4b0d      	ldr	r3, [pc, #52]	@ (8007af0 <std+0x68>)
 8007abc:	6224      	str	r4, [r4, #32]
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d006      	beq.n	8007ad0 <std+0x48>
 8007ac2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ac6:	4294      	cmp	r4, r2
 8007ac8:	d002      	beq.n	8007ad0 <std+0x48>
 8007aca:	33d0      	adds	r3, #208	@ 0xd0
 8007acc:	429c      	cmp	r4, r3
 8007ace:	d105      	bne.n	8007adc <std+0x54>
 8007ad0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad8:	f000 b98e 	b.w	8007df8 <__retarget_lock_init_recursive>
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	bf00      	nop
 8007ae0:	08007c79 	.word	0x08007c79
 8007ae4:	08007c9b 	.word	0x08007c9b
 8007ae8:	08007cd3 	.word	0x08007cd3
 8007aec:	08007cf7 	.word	0x08007cf7
 8007af0:	20003860 	.word	0x20003860

08007af4 <stdio_exit_handler>:
 8007af4:	4a02      	ldr	r2, [pc, #8]	@ (8007b00 <stdio_exit_handler+0xc>)
 8007af6:	4903      	ldr	r1, [pc, #12]	@ (8007b04 <stdio_exit_handler+0x10>)
 8007af8:	4803      	ldr	r0, [pc, #12]	@ (8007b08 <stdio_exit_handler+0x14>)
 8007afa:	f000 b869 	b.w	8007bd0 <_fwalk_sglue>
 8007afe:	bf00      	nop
 8007b00:	20000028 	.word	0x20000028
 8007b04:	0800975d 	.word	0x0800975d
 8007b08:	20000038 	.word	0x20000038

08007b0c <cleanup_stdio>:
 8007b0c:	6841      	ldr	r1, [r0, #4]
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b40 <cleanup_stdio+0x34>)
 8007b10:	4299      	cmp	r1, r3
 8007b12:	b510      	push	{r4, lr}
 8007b14:	4604      	mov	r4, r0
 8007b16:	d001      	beq.n	8007b1c <cleanup_stdio+0x10>
 8007b18:	f001 fe20 	bl	800975c <_fflush_r>
 8007b1c:	68a1      	ldr	r1, [r4, #8]
 8007b1e:	4b09      	ldr	r3, [pc, #36]	@ (8007b44 <cleanup_stdio+0x38>)
 8007b20:	4299      	cmp	r1, r3
 8007b22:	d002      	beq.n	8007b2a <cleanup_stdio+0x1e>
 8007b24:	4620      	mov	r0, r4
 8007b26:	f001 fe19 	bl	800975c <_fflush_r>
 8007b2a:	68e1      	ldr	r1, [r4, #12]
 8007b2c:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <cleanup_stdio+0x3c>)
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	d004      	beq.n	8007b3c <cleanup_stdio+0x30>
 8007b32:	4620      	mov	r0, r4
 8007b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b38:	f001 be10 	b.w	800975c <_fflush_r>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	bf00      	nop
 8007b40:	20003860 	.word	0x20003860
 8007b44:	200038c8 	.word	0x200038c8
 8007b48:	20003930 	.word	0x20003930

08007b4c <global_stdio_init.part.0>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b7c <global_stdio_init.part.0+0x30>)
 8007b50:	4c0b      	ldr	r4, [pc, #44]	@ (8007b80 <global_stdio_init.part.0+0x34>)
 8007b52:	4a0c      	ldr	r2, [pc, #48]	@ (8007b84 <global_stdio_init.part.0+0x38>)
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	4620      	mov	r0, r4
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2104      	movs	r1, #4
 8007b5c:	f7ff ff94 	bl	8007a88 <std>
 8007b60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b64:	2201      	movs	r2, #1
 8007b66:	2109      	movs	r1, #9
 8007b68:	f7ff ff8e 	bl	8007a88 <std>
 8007b6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b70:	2202      	movs	r2, #2
 8007b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b76:	2112      	movs	r1, #18
 8007b78:	f7ff bf86 	b.w	8007a88 <std>
 8007b7c:	20003998 	.word	0x20003998
 8007b80:	20003860 	.word	0x20003860
 8007b84:	08007af5 	.word	0x08007af5

08007b88 <__sfp_lock_acquire>:
 8007b88:	4801      	ldr	r0, [pc, #4]	@ (8007b90 <__sfp_lock_acquire+0x8>)
 8007b8a:	f000 b936 	b.w	8007dfa <__retarget_lock_acquire_recursive>
 8007b8e:	bf00      	nop
 8007b90:	200039a1 	.word	0x200039a1

08007b94 <__sfp_lock_release>:
 8007b94:	4801      	ldr	r0, [pc, #4]	@ (8007b9c <__sfp_lock_release+0x8>)
 8007b96:	f000 b931 	b.w	8007dfc <__retarget_lock_release_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	200039a1 	.word	0x200039a1

08007ba0 <__sinit>:
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	f7ff fff0 	bl	8007b88 <__sfp_lock_acquire>
 8007ba8:	6a23      	ldr	r3, [r4, #32]
 8007baa:	b11b      	cbz	r3, 8007bb4 <__sinit+0x14>
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	f7ff bff0 	b.w	8007b94 <__sfp_lock_release>
 8007bb4:	4b04      	ldr	r3, [pc, #16]	@ (8007bc8 <__sinit+0x28>)
 8007bb6:	6223      	str	r3, [r4, #32]
 8007bb8:	4b04      	ldr	r3, [pc, #16]	@ (8007bcc <__sinit+0x2c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f5      	bne.n	8007bac <__sinit+0xc>
 8007bc0:	f7ff ffc4 	bl	8007b4c <global_stdio_init.part.0>
 8007bc4:	e7f2      	b.n	8007bac <__sinit+0xc>
 8007bc6:	bf00      	nop
 8007bc8:	08007b0d 	.word	0x08007b0d
 8007bcc:	20003998 	.word	0x20003998

08007bd0 <_fwalk_sglue>:
 8007bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	4688      	mov	r8, r1
 8007bd8:	4614      	mov	r4, r2
 8007bda:	2600      	movs	r6, #0
 8007bdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007be0:	f1b9 0901 	subs.w	r9, r9, #1
 8007be4:	d505      	bpl.n	8007bf2 <_fwalk_sglue+0x22>
 8007be6:	6824      	ldr	r4, [r4, #0]
 8007be8:	2c00      	cmp	r4, #0
 8007bea:	d1f7      	bne.n	8007bdc <_fwalk_sglue+0xc>
 8007bec:	4630      	mov	r0, r6
 8007bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf2:	89ab      	ldrh	r3, [r5, #12]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d907      	bls.n	8007c08 <_fwalk_sglue+0x38>
 8007bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	d003      	beq.n	8007c08 <_fwalk_sglue+0x38>
 8007c00:	4629      	mov	r1, r5
 8007c02:	4638      	mov	r0, r7
 8007c04:	47c0      	blx	r8
 8007c06:	4306      	orrs	r6, r0
 8007c08:	3568      	adds	r5, #104	@ 0x68
 8007c0a:	e7e9      	b.n	8007be0 <_fwalk_sglue+0x10>

08007c0c <sniprintf>:
 8007c0c:	b40c      	push	{r2, r3}
 8007c0e:	b530      	push	{r4, r5, lr}
 8007c10:	4b18      	ldr	r3, [pc, #96]	@ (8007c74 <sniprintf+0x68>)
 8007c12:	1e0c      	subs	r4, r1, #0
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	b09d      	sub	sp, #116	@ 0x74
 8007c18:	da08      	bge.n	8007c2c <sniprintf+0x20>
 8007c1a:	238b      	movs	r3, #139	@ 0x8b
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	b01d      	add	sp, #116	@ 0x74
 8007c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c28:	b002      	add	sp, #8
 8007c2a:	4770      	bx	lr
 8007c2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007c3a:	bf14      	ite	ne
 8007c3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c40:	4623      	moveq	r3, r4
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	9307      	str	r3, [sp, #28]
 8007c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c4a:	9002      	str	r0, [sp, #8]
 8007c4c:	9006      	str	r0, [sp, #24]
 8007c4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c54:	ab21      	add	r3, sp, #132	@ 0x84
 8007c56:	a902      	add	r1, sp, #8
 8007c58:	4628      	mov	r0, r5
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	f001 fbfe 	bl	800945c <_svfiprintf_r>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	bfbc      	itt	lt
 8007c64:	238b      	movlt	r3, #139	@ 0x8b
 8007c66:	602b      	strlt	r3, [r5, #0]
 8007c68:	2c00      	cmp	r4, #0
 8007c6a:	d0da      	beq.n	8007c22 <sniprintf+0x16>
 8007c6c:	9b02      	ldr	r3, [sp, #8]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
 8007c72:	e7d6      	b.n	8007c22 <sniprintf+0x16>
 8007c74:	20000034 	.word	0x20000034

08007c78 <__sread>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c80:	f000 f86c 	bl	8007d5c <_read_r>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	bfab      	itete	ge
 8007c88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c8c:	181b      	addge	r3, r3, r0
 8007c8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c92:	bfac      	ite	ge
 8007c94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c96:	81a3      	strhlt	r3, [r4, #12]
 8007c98:	bd10      	pop	{r4, pc}

08007c9a <__swrite>:
 8007c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	898b      	ldrh	r3, [r1, #12]
 8007ca2:	05db      	lsls	r3, r3, #23
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	4616      	mov	r6, r2
 8007caa:	d505      	bpl.n	8007cb8 <__swrite+0x1e>
 8007cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f000 f840 	bl	8007d38 <_lseek_r>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cce:	f000 b857 	b.w	8007d80 <_write_r>

08007cd2 <__sseek>:
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cda:	f000 f82d 	bl	8007d38 <_lseek_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	bf15      	itete	ne
 8007ce4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ce6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cee:	81a3      	strheq	r3, [r4, #12]
 8007cf0:	bf18      	it	ne
 8007cf2:	81a3      	strhne	r3, [r4, #12]
 8007cf4:	bd10      	pop	{r4, pc}

08007cf6 <__sclose>:
 8007cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfa:	f000 b80d 	b.w	8007d18 <_close_r>

08007cfe <memset>:
 8007cfe:	4402      	add	r2, r0
 8007d00:	4603      	mov	r3, r0
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d100      	bne.n	8007d08 <memset+0xa>
 8007d06:	4770      	bx	lr
 8007d08:	f803 1b01 	strb.w	r1, [r3], #1
 8007d0c:	e7f9      	b.n	8007d02 <memset+0x4>
	...

08007d10 <_localeconv_r>:
 8007d10:	4800      	ldr	r0, [pc, #0]	@ (8007d14 <_localeconv_r+0x4>)
 8007d12:	4770      	bx	lr
 8007d14:	20000174 	.word	0x20000174

08007d18 <_close_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	@ (8007d34 <_close_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7fb f948 	bl	8002fb8 <_close>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_close_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_close_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	2000399c 	.word	0x2000399c

08007d38 <_lseek_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	@ (8007d58 <_lseek_r+0x20>)
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4611      	mov	r1, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7fb f95d 	bl	8003006 <_lseek>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_lseek_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_lseek_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	2000399c 	.word	0x2000399c

08007d5c <_read_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	@ (8007d7c <_read_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7fb f8eb 	bl	8002f46 <_read>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_read_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_read_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	2000399c 	.word	0x2000399c

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	@ (8007da0 <_write_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7fb f8f6 	bl	8002f80 <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	2000399c 	.word	0x2000399c

08007da4 <__errno>:
 8007da4:	4b01      	ldr	r3, [pc, #4]	@ (8007dac <__errno+0x8>)
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000034 	.word	0x20000034

08007db0 <__libc_init_array>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4d0d      	ldr	r5, [pc, #52]	@ (8007de8 <__libc_init_array+0x38>)
 8007db4:	4c0d      	ldr	r4, [pc, #52]	@ (8007dec <__libc_init_array+0x3c>)
 8007db6:	1b64      	subs	r4, r4, r5
 8007db8:	10a4      	asrs	r4, r4, #2
 8007dba:	2600      	movs	r6, #0
 8007dbc:	42a6      	cmp	r6, r4
 8007dbe:	d109      	bne.n	8007dd4 <__libc_init_array+0x24>
 8007dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007df0 <__libc_init_array+0x40>)
 8007dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007df4 <__libc_init_array+0x44>)
 8007dc4:	f002 f868 	bl	8009e98 <_init>
 8007dc8:	1b64      	subs	r4, r4, r5
 8007dca:	10a4      	asrs	r4, r4, #2
 8007dcc:	2600      	movs	r6, #0
 8007dce:	42a6      	cmp	r6, r4
 8007dd0:	d105      	bne.n	8007dde <__libc_init_array+0x2e>
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd8:	4798      	blx	r3
 8007dda:	3601      	adds	r6, #1
 8007ddc:	e7ee      	b.n	8007dbc <__libc_init_array+0xc>
 8007dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de2:	4798      	blx	r3
 8007de4:	3601      	adds	r6, #1
 8007de6:	e7f2      	b.n	8007dce <__libc_init_array+0x1e>
 8007de8:	0800a664 	.word	0x0800a664
 8007dec:	0800a664 	.word	0x0800a664
 8007df0:	0800a664 	.word	0x0800a664
 8007df4:	0800a668 	.word	0x0800a668

08007df8 <__retarget_lock_init_recursive>:
 8007df8:	4770      	bx	lr

08007dfa <__retarget_lock_acquire_recursive>:
 8007dfa:	4770      	bx	lr

08007dfc <__retarget_lock_release_recursive>:
 8007dfc:	4770      	bx	lr

08007dfe <quorem>:
 8007dfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e02:	6903      	ldr	r3, [r0, #16]
 8007e04:	690c      	ldr	r4, [r1, #16]
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	4607      	mov	r7, r0
 8007e0a:	db7e      	blt.n	8007f0a <quorem+0x10c>
 8007e0c:	3c01      	subs	r4, #1
 8007e0e:	f101 0814 	add.w	r8, r1, #20
 8007e12:	00a3      	lsls	r3, r4, #2
 8007e14:	f100 0514 	add.w	r5, r0, #20
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e30:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e34:	d32e      	bcc.n	8007e94 <quorem+0x96>
 8007e36:	f04f 0a00 	mov.w	sl, #0
 8007e3a:	46c4      	mov	ip, r8
 8007e3c:	46ae      	mov	lr, r5
 8007e3e:	46d3      	mov	fp, sl
 8007e40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e44:	b298      	uxth	r0, r3
 8007e46:	fb06 a000 	mla	r0, r6, r0, sl
 8007e4a:	0c02      	lsrs	r2, r0, #16
 8007e4c:	0c1b      	lsrs	r3, r3, #16
 8007e4e:	fb06 2303 	mla	r3, r6, r3, r2
 8007e52:	f8de 2000 	ldr.w	r2, [lr]
 8007e56:	b280      	uxth	r0, r0
 8007e58:	b292      	uxth	r2, r2
 8007e5a:	1a12      	subs	r2, r2, r0
 8007e5c:	445a      	add	r2, fp
 8007e5e:	f8de 0000 	ldr.w	r0, [lr]
 8007e62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e70:	b292      	uxth	r2, r2
 8007e72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e76:	45e1      	cmp	r9, ip
 8007e78:	f84e 2b04 	str.w	r2, [lr], #4
 8007e7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e80:	d2de      	bcs.n	8007e40 <quorem+0x42>
 8007e82:	9b00      	ldr	r3, [sp, #0]
 8007e84:	58eb      	ldr	r3, [r5, r3]
 8007e86:	b92b      	cbnz	r3, 8007e94 <quorem+0x96>
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	3b04      	subs	r3, #4
 8007e8c:	429d      	cmp	r5, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	d32f      	bcc.n	8007ef2 <quorem+0xf4>
 8007e92:	613c      	str	r4, [r7, #16]
 8007e94:	4638      	mov	r0, r7
 8007e96:	f001 f97d 	bl	8009194 <__mcmp>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	db25      	blt.n	8007eea <quorem+0xec>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ea6:	f8d1 c000 	ldr.w	ip, [r1]
 8007eaa:	fa1f fe82 	uxth.w	lr, r2
 8007eae:	fa1f f38c 	uxth.w	r3, ip
 8007eb2:	eba3 030e 	sub.w	r3, r3, lr
 8007eb6:	4403      	add	r3, r0
 8007eb8:	0c12      	lsrs	r2, r2, #16
 8007eba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ebe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ec8:	45c1      	cmp	r9, r8
 8007eca:	f841 3b04 	str.w	r3, [r1], #4
 8007ece:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ed2:	d2e6      	bcs.n	8007ea2 <quorem+0xa4>
 8007ed4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ed8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007edc:	b922      	cbnz	r2, 8007ee8 <quorem+0xea>
 8007ede:	3b04      	subs	r3, #4
 8007ee0:	429d      	cmp	r5, r3
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	d30b      	bcc.n	8007efe <quorem+0x100>
 8007ee6:	613c      	str	r4, [r7, #16]
 8007ee8:	3601      	adds	r6, #1
 8007eea:	4630      	mov	r0, r6
 8007eec:	b003      	add	sp, #12
 8007eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	3b04      	subs	r3, #4
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	d1cb      	bne.n	8007e92 <quorem+0x94>
 8007efa:	3c01      	subs	r4, #1
 8007efc:	e7c6      	b.n	8007e8c <quorem+0x8e>
 8007efe:	6812      	ldr	r2, [r2, #0]
 8007f00:	3b04      	subs	r3, #4
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	d1ef      	bne.n	8007ee6 <quorem+0xe8>
 8007f06:	3c01      	subs	r4, #1
 8007f08:	e7ea      	b.n	8007ee0 <quorem+0xe2>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e7ee      	b.n	8007eec <quorem+0xee>
	...

08007f10 <_dtoa_r>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	69c7      	ldr	r7, [r0, #28]
 8007f16:	b097      	sub	sp, #92	@ 0x5c
 8007f18:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007f1c:	ec55 4b10 	vmov	r4, r5, d0
 8007f20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007f22:	9107      	str	r1, [sp, #28]
 8007f24:	4681      	mov	r9, r0
 8007f26:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f28:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f2a:	b97f      	cbnz	r7, 8007f4c <_dtoa_r+0x3c>
 8007f2c:	2010      	movs	r0, #16
 8007f2e:	f000 fe09 	bl	8008b44 <malloc>
 8007f32:	4602      	mov	r2, r0
 8007f34:	f8c9 001c 	str.w	r0, [r9, #28]
 8007f38:	b920      	cbnz	r0, 8007f44 <_dtoa_r+0x34>
 8007f3a:	4ba9      	ldr	r3, [pc, #676]	@ (80081e0 <_dtoa_r+0x2d0>)
 8007f3c:	21ef      	movs	r1, #239	@ 0xef
 8007f3e:	48a9      	ldr	r0, [pc, #676]	@ (80081e4 <_dtoa_r+0x2d4>)
 8007f40:	f001 fc6c 	bl	800981c <__assert_func>
 8007f44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f48:	6007      	str	r7, [r0, #0]
 8007f4a:	60c7      	str	r7, [r0, #12]
 8007f4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f50:	6819      	ldr	r1, [r3, #0]
 8007f52:	b159      	cbz	r1, 8007f6c <_dtoa_r+0x5c>
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	604a      	str	r2, [r1, #4]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	4093      	lsls	r3, r2
 8007f5c:	608b      	str	r3, [r1, #8]
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f000 fee6 	bl	8008d30 <_Bfree>
 8007f64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	1e2b      	subs	r3, r5, #0
 8007f6e:	bfb9      	ittee	lt
 8007f70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f74:	9305      	strlt	r3, [sp, #20]
 8007f76:	2300      	movge	r3, #0
 8007f78:	6033      	strge	r3, [r6, #0]
 8007f7a:	9f05      	ldr	r7, [sp, #20]
 8007f7c:	4b9a      	ldr	r3, [pc, #616]	@ (80081e8 <_dtoa_r+0x2d8>)
 8007f7e:	bfbc      	itt	lt
 8007f80:	2201      	movlt	r2, #1
 8007f82:	6032      	strlt	r2, [r6, #0]
 8007f84:	43bb      	bics	r3, r7
 8007f86:	d112      	bne.n	8007fae <_dtoa_r+0x9e>
 8007f88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f94:	4323      	orrs	r3, r4
 8007f96:	f000 855a 	beq.w	8008a4e <_dtoa_r+0xb3e>
 8007f9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80081fc <_dtoa_r+0x2ec>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 855c 	beq.w	8008a5e <_dtoa_r+0xb4e>
 8007fa6:	f10a 0303 	add.w	r3, sl, #3
 8007faa:	f000 bd56 	b.w	8008a5a <_dtoa_r+0xb4a>
 8007fae:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	ec51 0b17 	vmov	r0, r1, d7
 8007fb8:	2300      	movs	r3, #0
 8007fba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007fbe:	f7f8 fd93 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fc2:	4680      	mov	r8, r0
 8007fc4:	b158      	cbz	r0, 8007fde <_dtoa_r+0xce>
 8007fc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007fc8:	2301      	movs	r3, #1
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fce:	b113      	cbz	r3, 8007fd6 <_dtoa_r+0xc6>
 8007fd0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007fd2:	4b86      	ldr	r3, [pc, #536]	@ (80081ec <_dtoa_r+0x2dc>)
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008200 <_dtoa_r+0x2f0>
 8007fda:	f000 bd40 	b.w	8008a5e <_dtoa_r+0xb4e>
 8007fde:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007fe2:	aa14      	add	r2, sp, #80	@ 0x50
 8007fe4:	a915      	add	r1, sp, #84	@ 0x54
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	f001 f984 	bl	80092f4 <__d2b>
 8007fec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ff0:	9002      	str	r0, [sp, #8]
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	d078      	beq.n	80080e8 <_dtoa_r+0x1d8>
 8007ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ff8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008004:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008008:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800800c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008010:	4619      	mov	r1, r3
 8008012:	2200      	movs	r2, #0
 8008014:	4b76      	ldr	r3, [pc, #472]	@ (80081f0 <_dtoa_r+0x2e0>)
 8008016:	f7f8 f947 	bl	80002a8 <__aeabi_dsub>
 800801a:	a36b      	add	r3, pc, #428	@ (adr r3, 80081c8 <_dtoa_r+0x2b8>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f7f8 fafa 	bl	8000618 <__aeabi_dmul>
 8008024:	a36a      	add	r3, pc, #424	@ (adr r3, 80081d0 <_dtoa_r+0x2c0>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f7f8 f93f 	bl	80002ac <__adddf3>
 800802e:	4604      	mov	r4, r0
 8008030:	4630      	mov	r0, r6
 8008032:	460d      	mov	r5, r1
 8008034:	f7f8 fa86 	bl	8000544 <__aeabi_i2d>
 8008038:	a367      	add	r3, pc, #412	@ (adr r3, 80081d8 <_dtoa_r+0x2c8>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 faeb 	bl	8000618 <__aeabi_dmul>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4620      	mov	r0, r4
 8008048:	4629      	mov	r1, r5
 800804a:	f7f8 f92f 	bl	80002ac <__adddf3>
 800804e:	4604      	mov	r4, r0
 8008050:	460d      	mov	r5, r1
 8008052:	f7f8 fd91 	bl	8000b78 <__aeabi_d2iz>
 8008056:	2200      	movs	r2, #0
 8008058:	4607      	mov	r7, r0
 800805a:	2300      	movs	r3, #0
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	f7f8 fd4c 	bl	8000afc <__aeabi_dcmplt>
 8008064:	b140      	cbz	r0, 8008078 <_dtoa_r+0x168>
 8008066:	4638      	mov	r0, r7
 8008068:	f7f8 fa6c 	bl	8000544 <__aeabi_i2d>
 800806c:	4622      	mov	r2, r4
 800806e:	462b      	mov	r3, r5
 8008070:	f7f8 fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008074:	b900      	cbnz	r0, 8008078 <_dtoa_r+0x168>
 8008076:	3f01      	subs	r7, #1
 8008078:	2f16      	cmp	r7, #22
 800807a:	d852      	bhi.n	8008122 <_dtoa_r+0x212>
 800807c:	4b5d      	ldr	r3, [pc, #372]	@ (80081f4 <_dtoa_r+0x2e4>)
 800807e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800808a:	f7f8 fd37 	bl	8000afc <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d049      	beq.n	8008126 <_dtoa_r+0x216>
 8008092:	3f01      	subs	r7, #1
 8008094:	2300      	movs	r3, #0
 8008096:	9310      	str	r3, [sp, #64]	@ 0x40
 8008098:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800809a:	1b9b      	subs	r3, r3, r6
 800809c:	1e5a      	subs	r2, r3, #1
 800809e:	bf45      	ittet	mi
 80080a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80080a4:	9300      	strmi	r3, [sp, #0]
 80080a6:	2300      	movpl	r3, #0
 80080a8:	2300      	movmi	r3, #0
 80080aa:	9206      	str	r2, [sp, #24]
 80080ac:	bf54      	ite	pl
 80080ae:	9300      	strpl	r3, [sp, #0]
 80080b0:	9306      	strmi	r3, [sp, #24]
 80080b2:	2f00      	cmp	r7, #0
 80080b4:	db39      	blt.n	800812a <_dtoa_r+0x21a>
 80080b6:	9b06      	ldr	r3, [sp, #24]
 80080b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80080ba:	443b      	add	r3, r7
 80080bc:	9306      	str	r3, [sp, #24]
 80080be:	2300      	movs	r3, #0
 80080c0:	9308      	str	r3, [sp, #32]
 80080c2:	9b07      	ldr	r3, [sp, #28]
 80080c4:	2b09      	cmp	r3, #9
 80080c6:	d863      	bhi.n	8008190 <_dtoa_r+0x280>
 80080c8:	2b05      	cmp	r3, #5
 80080ca:	bfc4      	itt	gt
 80080cc:	3b04      	subgt	r3, #4
 80080ce:	9307      	strgt	r3, [sp, #28]
 80080d0:	9b07      	ldr	r3, [sp, #28]
 80080d2:	f1a3 0302 	sub.w	r3, r3, #2
 80080d6:	bfcc      	ite	gt
 80080d8:	2400      	movgt	r4, #0
 80080da:	2401      	movle	r4, #1
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d863      	bhi.n	80081a8 <_dtoa_r+0x298>
 80080e0:	e8df f003 	tbb	[pc, r3]
 80080e4:	2b375452 	.word	0x2b375452
 80080e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80080ec:	441e      	add	r6, r3
 80080ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	bfc1      	itttt	gt
 80080f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80080fa:	409f      	lslgt	r7, r3
 80080fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008100:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008104:	bfd6      	itet	le
 8008106:	f1c3 0320 	rsble	r3, r3, #32
 800810a:	ea47 0003 	orrgt.w	r0, r7, r3
 800810e:	fa04 f003 	lslle.w	r0, r4, r3
 8008112:	f7f8 fa07 	bl	8000524 <__aeabi_ui2d>
 8008116:	2201      	movs	r2, #1
 8008118:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800811c:	3e01      	subs	r6, #1
 800811e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008120:	e776      	b.n	8008010 <_dtoa_r+0x100>
 8008122:	2301      	movs	r3, #1
 8008124:	e7b7      	b.n	8008096 <_dtoa_r+0x186>
 8008126:	9010      	str	r0, [sp, #64]	@ 0x40
 8008128:	e7b6      	b.n	8008098 <_dtoa_r+0x188>
 800812a:	9b00      	ldr	r3, [sp, #0]
 800812c:	1bdb      	subs	r3, r3, r7
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	427b      	negs	r3, r7
 8008132:	9308      	str	r3, [sp, #32]
 8008134:	2300      	movs	r3, #0
 8008136:	930d      	str	r3, [sp, #52]	@ 0x34
 8008138:	e7c3      	b.n	80080c2 <_dtoa_r+0x1b2>
 800813a:	2301      	movs	r3, #1
 800813c:	9309      	str	r3, [sp, #36]	@ 0x24
 800813e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008140:	eb07 0b03 	add.w	fp, r7, r3
 8008144:	f10b 0301 	add.w	r3, fp, #1
 8008148:	2b01      	cmp	r3, #1
 800814a:	9303      	str	r3, [sp, #12]
 800814c:	bfb8      	it	lt
 800814e:	2301      	movlt	r3, #1
 8008150:	e006      	b.n	8008160 <_dtoa_r+0x250>
 8008152:	2301      	movs	r3, #1
 8008154:	9309      	str	r3, [sp, #36]	@ 0x24
 8008156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008158:	2b00      	cmp	r3, #0
 800815a:	dd28      	ble.n	80081ae <_dtoa_r+0x29e>
 800815c:	469b      	mov	fp, r3
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008164:	2100      	movs	r1, #0
 8008166:	2204      	movs	r2, #4
 8008168:	f102 0514 	add.w	r5, r2, #20
 800816c:	429d      	cmp	r5, r3
 800816e:	d926      	bls.n	80081be <_dtoa_r+0x2ae>
 8008170:	6041      	str	r1, [r0, #4]
 8008172:	4648      	mov	r0, r9
 8008174:	f000 fd9c 	bl	8008cb0 <_Balloc>
 8008178:	4682      	mov	sl, r0
 800817a:	2800      	cmp	r0, #0
 800817c:	d142      	bne.n	8008204 <_dtoa_r+0x2f4>
 800817e:	4b1e      	ldr	r3, [pc, #120]	@ (80081f8 <_dtoa_r+0x2e8>)
 8008180:	4602      	mov	r2, r0
 8008182:	f240 11af 	movw	r1, #431	@ 0x1af
 8008186:	e6da      	b.n	8007f3e <_dtoa_r+0x2e>
 8008188:	2300      	movs	r3, #0
 800818a:	e7e3      	b.n	8008154 <_dtoa_r+0x244>
 800818c:	2300      	movs	r3, #0
 800818e:	e7d5      	b.n	800813c <_dtoa_r+0x22c>
 8008190:	2401      	movs	r4, #1
 8008192:	2300      	movs	r3, #0
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	9409      	str	r4, [sp, #36]	@ 0x24
 8008198:	f04f 3bff 	mov.w	fp, #4294967295
 800819c:	2200      	movs	r2, #0
 800819e:	f8cd b00c 	str.w	fp, [sp, #12]
 80081a2:	2312      	movs	r3, #18
 80081a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80081a6:	e7db      	b.n	8008160 <_dtoa_r+0x250>
 80081a8:	2301      	movs	r3, #1
 80081aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ac:	e7f4      	b.n	8008198 <_dtoa_r+0x288>
 80081ae:	f04f 0b01 	mov.w	fp, #1
 80081b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80081b6:	465b      	mov	r3, fp
 80081b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80081bc:	e7d0      	b.n	8008160 <_dtoa_r+0x250>
 80081be:	3101      	adds	r1, #1
 80081c0:	0052      	lsls	r2, r2, #1
 80081c2:	e7d1      	b.n	8008168 <_dtoa_r+0x258>
 80081c4:	f3af 8000 	nop.w
 80081c8:	636f4361 	.word	0x636f4361
 80081cc:	3fd287a7 	.word	0x3fd287a7
 80081d0:	8b60c8b3 	.word	0x8b60c8b3
 80081d4:	3fc68a28 	.word	0x3fc68a28
 80081d8:	509f79fb 	.word	0x509f79fb
 80081dc:	3fd34413 	.word	0x3fd34413
 80081e0:	0800a329 	.word	0x0800a329
 80081e4:	0800a340 	.word	0x0800a340
 80081e8:	7ff00000 	.word	0x7ff00000
 80081ec:	0800a2f9 	.word	0x0800a2f9
 80081f0:	3ff80000 	.word	0x3ff80000
 80081f4:	0800a490 	.word	0x0800a490
 80081f8:	0800a398 	.word	0x0800a398
 80081fc:	0800a325 	.word	0x0800a325
 8008200:	0800a2f8 	.word	0x0800a2f8
 8008204:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008208:	6018      	str	r0, [r3, #0]
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	2b0e      	cmp	r3, #14
 800820e:	f200 80a1 	bhi.w	8008354 <_dtoa_r+0x444>
 8008212:	2c00      	cmp	r4, #0
 8008214:	f000 809e 	beq.w	8008354 <_dtoa_r+0x444>
 8008218:	2f00      	cmp	r7, #0
 800821a:	dd33      	ble.n	8008284 <_dtoa_r+0x374>
 800821c:	4b9c      	ldr	r3, [pc, #624]	@ (8008490 <_dtoa_r+0x580>)
 800821e:	f007 020f 	and.w	r2, r7, #15
 8008222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008226:	ed93 7b00 	vldr	d7, [r3]
 800822a:	05f8      	lsls	r0, r7, #23
 800822c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008230:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008234:	d516      	bpl.n	8008264 <_dtoa_r+0x354>
 8008236:	4b97      	ldr	r3, [pc, #604]	@ (8008494 <_dtoa_r+0x584>)
 8008238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800823c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008240:	f7f8 fb14 	bl	800086c <__aeabi_ddiv>
 8008244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008248:	f004 040f 	and.w	r4, r4, #15
 800824c:	2603      	movs	r6, #3
 800824e:	4d91      	ldr	r5, [pc, #580]	@ (8008494 <_dtoa_r+0x584>)
 8008250:	b954      	cbnz	r4, 8008268 <_dtoa_r+0x358>
 8008252:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800825a:	f7f8 fb07 	bl	800086c <__aeabi_ddiv>
 800825e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008262:	e028      	b.n	80082b6 <_dtoa_r+0x3a6>
 8008264:	2602      	movs	r6, #2
 8008266:	e7f2      	b.n	800824e <_dtoa_r+0x33e>
 8008268:	07e1      	lsls	r1, r4, #31
 800826a:	d508      	bpl.n	800827e <_dtoa_r+0x36e>
 800826c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008274:	f7f8 f9d0 	bl	8000618 <__aeabi_dmul>
 8008278:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800827c:	3601      	adds	r6, #1
 800827e:	1064      	asrs	r4, r4, #1
 8008280:	3508      	adds	r5, #8
 8008282:	e7e5      	b.n	8008250 <_dtoa_r+0x340>
 8008284:	f000 80af 	beq.w	80083e6 <_dtoa_r+0x4d6>
 8008288:	427c      	negs	r4, r7
 800828a:	4b81      	ldr	r3, [pc, #516]	@ (8008490 <_dtoa_r+0x580>)
 800828c:	4d81      	ldr	r5, [pc, #516]	@ (8008494 <_dtoa_r+0x584>)
 800828e:	f004 020f 	and.w	r2, r4, #15
 8008292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800829e:	f7f8 f9bb 	bl	8000618 <__aeabi_dmul>
 80082a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082a6:	1124      	asrs	r4, r4, #4
 80082a8:	2300      	movs	r3, #0
 80082aa:	2602      	movs	r6, #2
 80082ac:	2c00      	cmp	r4, #0
 80082ae:	f040 808f 	bne.w	80083d0 <_dtoa_r+0x4c0>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1d3      	bne.n	800825e <_dtoa_r+0x34e>
 80082b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8094 	beq.w	80083ea <_dtoa_r+0x4da>
 80082c2:	4b75      	ldr	r3, [pc, #468]	@ (8008498 <_dtoa_r+0x588>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	4620      	mov	r0, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7f8 fc17 	bl	8000afc <__aeabi_dcmplt>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	f000 808b 	beq.w	80083ea <_dtoa_r+0x4da>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8087 	beq.w	80083ea <_dtoa_r+0x4da>
 80082dc:	f1bb 0f00 	cmp.w	fp, #0
 80082e0:	dd34      	ble.n	800834c <_dtoa_r+0x43c>
 80082e2:	4620      	mov	r0, r4
 80082e4:	4b6d      	ldr	r3, [pc, #436]	@ (800849c <_dtoa_r+0x58c>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 f995 	bl	8000618 <__aeabi_dmul>
 80082ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80082f6:	3601      	adds	r6, #1
 80082f8:	465c      	mov	r4, fp
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7f8 f922 	bl	8000544 <__aeabi_i2d>
 8008300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008304:	f7f8 f988 	bl	8000618 <__aeabi_dmul>
 8008308:	4b65      	ldr	r3, [pc, #404]	@ (80084a0 <_dtoa_r+0x590>)
 800830a:	2200      	movs	r2, #0
 800830c:	f7f7 ffce 	bl	80002ac <__adddf3>
 8008310:	4605      	mov	r5, r0
 8008312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008316:	2c00      	cmp	r4, #0
 8008318:	d16a      	bne.n	80083f0 <_dtoa_r+0x4e0>
 800831a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800831e:	4b61      	ldr	r3, [pc, #388]	@ (80084a4 <_dtoa_r+0x594>)
 8008320:	2200      	movs	r2, #0
 8008322:	f7f7 ffc1 	bl	80002a8 <__aeabi_dsub>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800832e:	462a      	mov	r2, r5
 8008330:	4633      	mov	r3, r6
 8008332:	f7f8 fc01 	bl	8000b38 <__aeabi_dcmpgt>
 8008336:	2800      	cmp	r0, #0
 8008338:	f040 8298 	bne.w	800886c <_dtoa_r+0x95c>
 800833c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008340:	462a      	mov	r2, r5
 8008342:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008346:	f7f8 fbd9 	bl	8000afc <__aeabi_dcmplt>
 800834a:	bb38      	cbnz	r0, 800839c <_dtoa_r+0x48c>
 800834c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008350:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008356:	2b00      	cmp	r3, #0
 8008358:	f2c0 8157 	blt.w	800860a <_dtoa_r+0x6fa>
 800835c:	2f0e      	cmp	r7, #14
 800835e:	f300 8154 	bgt.w	800860a <_dtoa_r+0x6fa>
 8008362:	4b4b      	ldr	r3, [pc, #300]	@ (8008490 <_dtoa_r+0x580>)
 8008364:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008368:	ed93 7b00 	vldr	d7, [r3]
 800836c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800836e:	2b00      	cmp	r3, #0
 8008370:	ed8d 7b00 	vstr	d7, [sp]
 8008374:	f280 80e5 	bge.w	8008542 <_dtoa_r+0x632>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	f300 80e1 	bgt.w	8008542 <_dtoa_r+0x632>
 8008380:	d10c      	bne.n	800839c <_dtoa_r+0x48c>
 8008382:	4b48      	ldr	r3, [pc, #288]	@ (80084a4 <_dtoa_r+0x594>)
 8008384:	2200      	movs	r2, #0
 8008386:	ec51 0b17 	vmov	r0, r1, d7
 800838a:	f7f8 f945 	bl	8000618 <__aeabi_dmul>
 800838e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008392:	f7f8 fbc7 	bl	8000b24 <__aeabi_dcmpge>
 8008396:	2800      	cmp	r0, #0
 8008398:	f000 8266 	beq.w	8008868 <_dtoa_r+0x958>
 800839c:	2400      	movs	r4, #0
 800839e:	4625      	mov	r5, r4
 80083a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083a2:	4656      	mov	r6, sl
 80083a4:	ea6f 0803 	mvn.w	r8, r3
 80083a8:	2700      	movs	r7, #0
 80083aa:	4621      	mov	r1, r4
 80083ac:	4648      	mov	r0, r9
 80083ae:	f000 fcbf 	bl	8008d30 <_Bfree>
 80083b2:	2d00      	cmp	r5, #0
 80083b4:	f000 80bd 	beq.w	8008532 <_dtoa_r+0x622>
 80083b8:	b12f      	cbz	r7, 80083c6 <_dtoa_r+0x4b6>
 80083ba:	42af      	cmp	r7, r5
 80083bc:	d003      	beq.n	80083c6 <_dtoa_r+0x4b6>
 80083be:	4639      	mov	r1, r7
 80083c0:	4648      	mov	r0, r9
 80083c2:	f000 fcb5 	bl	8008d30 <_Bfree>
 80083c6:	4629      	mov	r1, r5
 80083c8:	4648      	mov	r0, r9
 80083ca:	f000 fcb1 	bl	8008d30 <_Bfree>
 80083ce:	e0b0      	b.n	8008532 <_dtoa_r+0x622>
 80083d0:	07e2      	lsls	r2, r4, #31
 80083d2:	d505      	bpl.n	80083e0 <_dtoa_r+0x4d0>
 80083d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083d8:	f7f8 f91e 	bl	8000618 <__aeabi_dmul>
 80083dc:	3601      	adds	r6, #1
 80083de:	2301      	movs	r3, #1
 80083e0:	1064      	asrs	r4, r4, #1
 80083e2:	3508      	adds	r5, #8
 80083e4:	e762      	b.n	80082ac <_dtoa_r+0x39c>
 80083e6:	2602      	movs	r6, #2
 80083e8:	e765      	b.n	80082b6 <_dtoa_r+0x3a6>
 80083ea:	9c03      	ldr	r4, [sp, #12]
 80083ec:	46b8      	mov	r8, r7
 80083ee:	e784      	b.n	80082fa <_dtoa_r+0x3ea>
 80083f0:	4b27      	ldr	r3, [pc, #156]	@ (8008490 <_dtoa_r+0x580>)
 80083f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083fc:	4454      	add	r4, sl
 80083fe:	2900      	cmp	r1, #0
 8008400:	d054      	beq.n	80084ac <_dtoa_r+0x59c>
 8008402:	4929      	ldr	r1, [pc, #164]	@ (80084a8 <_dtoa_r+0x598>)
 8008404:	2000      	movs	r0, #0
 8008406:	f7f8 fa31 	bl	800086c <__aeabi_ddiv>
 800840a:	4633      	mov	r3, r6
 800840c:	462a      	mov	r2, r5
 800840e:	f7f7 ff4b 	bl	80002a8 <__aeabi_dsub>
 8008412:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008416:	4656      	mov	r6, sl
 8008418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800841c:	f7f8 fbac 	bl	8000b78 <__aeabi_d2iz>
 8008420:	4605      	mov	r5, r0
 8008422:	f7f8 f88f 	bl	8000544 <__aeabi_i2d>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800842e:	f7f7 ff3b 	bl	80002a8 <__aeabi_dsub>
 8008432:	3530      	adds	r5, #48	@ 0x30
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800843c:	f806 5b01 	strb.w	r5, [r6], #1
 8008440:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008444:	f7f8 fb5a 	bl	8000afc <__aeabi_dcmplt>
 8008448:	2800      	cmp	r0, #0
 800844a:	d172      	bne.n	8008532 <_dtoa_r+0x622>
 800844c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008450:	4911      	ldr	r1, [pc, #68]	@ (8008498 <_dtoa_r+0x588>)
 8008452:	2000      	movs	r0, #0
 8008454:	f7f7 ff28 	bl	80002a8 <__aeabi_dsub>
 8008458:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800845c:	f7f8 fb4e 	bl	8000afc <__aeabi_dcmplt>
 8008460:	2800      	cmp	r0, #0
 8008462:	f040 80b4 	bne.w	80085ce <_dtoa_r+0x6be>
 8008466:	42a6      	cmp	r6, r4
 8008468:	f43f af70 	beq.w	800834c <_dtoa_r+0x43c>
 800846c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008470:	4b0a      	ldr	r3, [pc, #40]	@ (800849c <_dtoa_r+0x58c>)
 8008472:	2200      	movs	r2, #0
 8008474:	f7f8 f8d0 	bl	8000618 <__aeabi_dmul>
 8008478:	4b08      	ldr	r3, [pc, #32]	@ (800849c <_dtoa_r+0x58c>)
 800847a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800847e:	2200      	movs	r2, #0
 8008480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008484:	f7f8 f8c8 	bl	8000618 <__aeabi_dmul>
 8008488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800848c:	e7c4      	b.n	8008418 <_dtoa_r+0x508>
 800848e:	bf00      	nop
 8008490:	0800a490 	.word	0x0800a490
 8008494:	0800a468 	.word	0x0800a468
 8008498:	3ff00000 	.word	0x3ff00000
 800849c:	40240000 	.word	0x40240000
 80084a0:	401c0000 	.word	0x401c0000
 80084a4:	40140000 	.word	0x40140000
 80084a8:	3fe00000 	.word	0x3fe00000
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7f8 f8b2 	bl	8000618 <__aeabi_dmul>
 80084b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80084ba:	4656      	mov	r6, sl
 80084bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084c0:	f7f8 fb5a 	bl	8000b78 <__aeabi_d2iz>
 80084c4:	4605      	mov	r5, r0
 80084c6:	f7f8 f83d 	bl	8000544 <__aeabi_i2d>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084d2:	f7f7 fee9 	bl	80002a8 <__aeabi_dsub>
 80084d6:	3530      	adds	r5, #48	@ 0x30
 80084d8:	f806 5b01 	strb.w	r5, [r6], #1
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	42a6      	cmp	r6, r4
 80084e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	d124      	bne.n	8008536 <_dtoa_r+0x626>
 80084ec:	4baf      	ldr	r3, [pc, #700]	@ (80087ac <_dtoa_r+0x89c>)
 80084ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80084f2:	f7f7 fedb 	bl	80002ac <__adddf3>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084fe:	f7f8 fb1b 	bl	8000b38 <__aeabi_dcmpgt>
 8008502:	2800      	cmp	r0, #0
 8008504:	d163      	bne.n	80085ce <_dtoa_r+0x6be>
 8008506:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800850a:	49a8      	ldr	r1, [pc, #672]	@ (80087ac <_dtoa_r+0x89c>)
 800850c:	2000      	movs	r0, #0
 800850e:	f7f7 fecb 	bl	80002a8 <__aeabi_dsub>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800851a:	f7f8 faef 	bl	8000afc <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f43f af14 	beq.w	800834c <_dtoa_r+0x43c>
 8008524:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008526:	1e73      	subs	r3, r6, #1
 8008528:	9313      	str	r3, [sp, #76]	@ 0x4c
 800852a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800852e:	2b30      	cmp	r3, #48	@ 0x30
 8008530:	d0f8      	beq.n	8008524 <_dtoa_r+0x614>
 8008532:	4647      	mov	r7, r8
 8008534:	e03b      	b.n	80085ae <_dtoa_r+0x69e>
 8008536:	4b9e      	ldr	r3, [pc, #632]	@ (80087b0 <_dtoa_r+0x8a0>)
 8008538:	f7f8 f86e 	bl	8000618 <__aeabi_dmul>
 800853c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008540:	e7bc      	b.n	80084bc <_dtoa_r+0x5ac>
 8008542:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008546:	4656      	mov	r6, sl
 8008548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800854c:	4620      	mov	r0, r4
 800854e:	4629      	mov	r1, r5
 8008550:	f7f8 f98c 	bl	800086c <__aeabi_ddiv>
 8008554:	f7f8 fb10 	bl	8000b78 <__aeabi_d2iz>
 8008558:	4680      	mov	r8, r0
 800855a:	f7f7 fff3 	bl	8000544 <__aeabi_i2d>
 800855e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008562:	f7f8 f859 	bl	8000618 <__aeabi_dmul>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4620      	mov	r0, r4
 800856c:	4629      	mov	r1, r5
 800856e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008572:	f7f7 fe99 	bl	80002a8 <__aeabi_dsub>
 8008576:	f806 4b01 	strb.w	r4, [r6], #1
 800857a:	9d03      	ldr	r5, [sp, #12]
 800857c:	eba6 040a 	sub.w	r4, r6, sl
 8008580:	42a5      	cmp	r5, r4
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	d133      	bne.n	80085f0 <_dtoa_r+0x6e0>
 8008588:	f7f7 fe90 	bl	80002ac <__adddf3>
 800858c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008590:	4604      	mov	r4, r0
 8008592:	460d      	mov	r5, r1
 8008594:	f7f8 fad0 	bl	8000b38 <__aeabi_dcmpgt>
 8008598:	b9c0      	cbnz	r0, 80085cc <_dtoa_r+0x6bc>
 800859a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f8 faa1 	bl	8000ae8 <__aeabi_dcmpeq>
 80085a6:	b110      	cbz	r0, 80085ae <_dtoa_r+0x69e>
 80085a8:	f018 0f01 	tst.w	r8, #1
 80085ac:	d10e      	bne.n	80085cc <_dtoa_r+0x6bc>
 80085ae:	9902      	ldr	r1, [sp, #8]
 80085b0:	4648      	mov	r0, r9
 80085b2:	f000 fbbd 	bl	8008d30 <_Bfree>
 80085b6:	2300      	movs	r3, #0
 80085b8:	7033      	strb	r3, [r6, #0]
 80085ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085bc:	3701      	adds	r7, #1
 80085be:	601f      	str	r7, [r3, #0]
 80085c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 824b 	beq.w	8008a5e <_dtoa_r+0xb4e>
 80085c8:	601e      	str	r6, [r3, #0]
 80085ca:	e248      	b.n	8008a5e <_dtoa_r+0xb4e>
 80085cc:	46b8      	mov	r8, r7
 80085ce:	4633      	mov	r3, r6
 80085d0:	461e      	mov	r6, r3
 80085d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085d6:	2a39      	cmp	r2, #57	@ 0x39
 80085d8:	d106      	bne.n	80085e8 <_dtoa_r+0x6d8>
 80085da:	459a      	cmp	sl, r3
 80085dc:	d1f8      	bne.n	80085d0 <_dtoa_r+0x6c0>
 80085de:	2230      	movs	r2, #48	@ 0x30
 80085e0:	f108 0801 	add.w	r8, r8, #1
 80085e4:	f88a 2000 	strb.w	r2, [sl]
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	3201      	adds	r2, #1
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	e7a0      	b.n	8008532 <_dtoa_r+0x622>
 80085f0:	4b6f      	ldr	r3, [pc, #444]	@ (80087b0 <_dtoa_r+0x8a0>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7f8 f810 	bl	8000618 <__aeabi_dmul>
 80085f8:	2200      	movs	r2, #0
 80085fa:	2300      	movs	r3, #0
 80085fc:	4604      	mov	r4, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	f7f8 fa72 	bl	8000ae8 <__aeabi_dcmpeq>
 8008604:	2800      	cmp	r0, #0
 8008606:	d09f      	beq.n	8008548 <_dtoa_r+0x638>
 8008608:	e7d1      	b.n	80085ae <_dtoa_r+0x69e>
 800860a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800860c:	2a00      	cmp	r2, #0
 800860e:	f000 80ea 	beq.w	80087e6 <_dtoa_r+0x8d6>
 8008612:	9a07      	ldr	r2, [sp, #28]
 8008614:	2a01      	cmp	r2, #1
 8008616:	f300 80cd 	bgt.w	80087b4 <_dtoa_r+0x8a4>
 800861a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800861c:	2a00      	cmp	r2, #0
 800861e:	f000 80c1 	beq.w	80087a4 <_dtoa_r+0x894>
 8008622:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008626:	9c08      	ldr	r4, [sp, #32]
 8008628:	9e00      	ldr	r6, [sp, #0]
 800862a:	9a00      	ldr	r2, [sp, #0]
 800862c:	441a      	add	r2, r3
 800862e:	9200      	str	r2, [sp, #0]
 8008630:	9a06      	ldr	r2, [sp, #24]
 8008632:	2101      	movs	r1, #1
 8008634:	441a      	add	r2, r3
 8008636:	4648      	mov	r0, r9
 8008638:	9206      	str	r2, [sp, #24]
 800863a:	f000 fc2d 	bl	8008e98 <__i2b>
 800863e:	4605      	mov	r5, r0
 8008640:	b166      	cbz	r6, 800865c <_dtoa_r+0x74c>
 8008642:	9b06      	ldr	r3, [sp, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd09      	ble.n	800865c <_dtoa_r+0x74c>
 8008648:	42b3      	cmp	r3, r6
 800864a:	9a00      	ldr	r2, [sp, #0]
 800864c:	bfa8      	it	ge
 800864e:	4633      	movge	r3, r6
 8008650:	1ad2      	subs	r2, r2, r3
 8008652:	9200      	str	r2, [sp, #0]
 8008654:	9a06      	ldr	r2, [sp, #24]
 8008656:	1af6      	subs	r6, r6, r3
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	9306      	str	r3, [sp, #24]
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	b30b      	cbz	r3, 80086a4 <_dtoa_r+0x794>
 8008660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 80c6 	beq.w	80087f4 <_dtoa_r+0x8e4>
 8008668:	2c00      	cmp	r4, #0
 800866a:	f000 80c0 	beq.w	80087ee <_dtoa_r+0x8de>
 800866e:	4629      	mov	r1, r5
 8008670:	4622      	mov	r2, r4
 8008672:	4648      	mov	r0, r9
 8008674:	f000 fcc8 	bl	8009008 <__pow5mult>
 8008678:	9a02      	ldr	r2, [sp, #8]
 800867a:	4601      	mov	r1, r0
 800867c:	4605      	mov	r5, r0
 800867e:	4648      	mov	r0, r9
 8008680:	f000 fc20 	bl	8008ec4 <__multiply>
 8008684:	9902      	ldr	r1, [sp, #8]
 8008686:	4680      	mov	r8, r0
 8008688:	4648      	mov	r0, r9
 800868a:	f000 fb51 	bl	8008d30 <_Bfree>
 800868e:	9b08      	ldr	r3, [sp, #32]
 8008690:	1b1b      	subs	r3, r3, r4
 8008692:	9308      	str	r3, [sp, #32]
 8008694:	f000 80b1 	beq.w	80087fa <_dtoa_r+0x8ea>
 8008698:	9a08      	ldr	r2, [sp, #32]
 800869a:	4641      	mov	r1, r8
 800869c:	4648      	mov	r0, r9
 800869e:	f000 fcb3 	bl	8009008 <__pow5mult>
 80086a2:	9002      	str	r0, [sp, #8]
 80086a4:	2101      	movs	r1, #1
 80086a6:	4648      	mov	r0, r9
 80086a8:	f000 fbf6 	bl	8008e98 <__i2b>
 80086ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086ae:	4604      	mov	r4, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 81d8 	beq.w	8008a66 <_dtoa_r+0xb56>
 80086b6:	461a      	mov	r2, r3
 80086b8:	4601      	mov	r1, r0
 80086ba:	4648      	mov	r0, r9
 80086bc:	f000 fca4 	bl	8009008 <__pow5mult>
 80086c0:	9b07      	ldr	r3, [sp, #28]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	4604      	mov	r4, r0
 80086c6:	f300 809f 	bgt.w	8008808 <_dtoa_r+0x8f8>
 80086ca:	9b04      	ldr	r3, [sp, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f040 8097 	bne.w	8008800 <_dtoa_r+0x8f0>
 80086d2:	9b05      	ldr	r3, [sp, #20]
 80086d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f040 8093 	bne.w	8008804 <_dtoa_r+0x8f4>
 80086de:	9b05      	ldr	r3, [sp, #20]
 80086e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086e4:	0d1b      	lsrs	r3, r3, #20
 80086e6:	051b      	lsls	r3, r3, #20
 80086e8:	b133      	cbz	r3, 80086f8 <_dtoa_r+0x7e8>
 80086ea:	9b00      	ldr	r3, [sp, #0]
 80086ec:	3301      	adds	r3, #1
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	9b06      	ldr	r3, [sp, #24]
 80086f2:	3301      	adds	r3, #1
 80086f4:	9306      	str	r3, [sp, #24]
 80086f6:	2301      	movs	r3, #1
 80086f8:	9308      	str	r3, [sp, #32]
 80086fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 81b8 	beq.w	8008a72 <_dtoa_r+0xb62>
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008708:	6918      	ldr	r0, [r3, #16]
 800870a:	f000 fb79 	bl	8008e00 <__hi0bits>
 800870e:	f1c0 0020 	rsb	r0, r0, #32
 8008712:	9b06      	ldr	r3, [sp, #24]
 8008714:	4418      	add	r0, r3
 8008716:	f010 001f 	ands.w	r0, r0, #31
 800871a:	f000 8082 	beq.w	8008822 <_dtoa_r+0x912>
 800871e:	f1c0 0320 	rsb	r3, r0, #32
 8008722:	2b04      	cmp	r3, #4
 8008724:	dd73      	ble.n	800880e <_dtoa_r+0x8fe>
 8008726:	9b00      	ldr	r3, [sp, #0]
 8008728:	f1c0 001c 	rsb	r0, r0, #28
 800872c:	4403      	add	r3, r0
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	9b06      	ldr	r3, [sp, #24]
 8008732:	4403      	add	r3, r0
 8008734:	4406      	add	r6, r0
 8008736:	9306      	str	r3, [sp, #24]
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dd05      	ble.n	800874a <_dtoa_r+0x83a>
 800873e:	9902      	ldr	r1, [sp, #8]
 8008740:	461a      	mov	r2, r3
 8008742:	4648      	mov	r0, r9
 8008744:	f000 fcba 	bl	80090bc <__lshift>
 8008748:	9002      	str	r0, [sp, #8]
 800874a:	9b06      	ldr	r3, [sp, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd05      	ble.n	800875c <_dtoa_r+0x84c>
 8008750:	4621      	mov	r1, r4
 8008752:	461a      	mov	r2, r3
 8008754:	4648      	mov	r0, r9
 8008756:	f000 fcb1 	bl	80090bc <__lshift>
 800875a:	4604      	mov	r4, r0
 800875c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d061      	beq.n	8008826 <_dtoa_r+0x916>
 8008762:	9802      	ldr	r0, [sp, #8]
 8008764:	4621      	mov	r1, r4
 8008766:	f000 fd15 	bl	8009194 <__mcmp>
 800876a:	2800      	cmp	r0, #0
 800876c:	da5b      	bge.n	8008826 <_dtoa_r+0x916>
 800876e:	2300      	movs	r3, #0
 8008770:	9902      	ldr	r1, [sp, #8]
 8008772:	220a      	movs	r2, #10
 8008774:	4648      	mov	r0, r9
 8008776:	f000 fafd 	bl	8008d74 <__multadd>
 800877a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877c:	9002      	str	r0, [sp, #8]
 800877e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 8177 	beq.w	8008a76 <_dtoa_r+0xb66>
 8008788:	4629      	mov	r1, r5
 800878a:	2300      	movs	r3, #0
 800878c:	220a      	movs	r2, #10
 800878e:	4648      	mov	r0, r9
 8008790:	f000 faf0 	bl	8008d74 <__multadd>
 8008794:	f1bb 0f00 	cmp.w	fp, #0
 8008798:	4605      	mov	r5, r0
 800879a:	dc6f      	bgt.n	800887c <_dtoa_r+0x96c>
 800879c:	9b07      	ldr	r3, [sp, #28]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	dc49      	bgt.n	8008836 <_dtoa_r+0x926>
 80087a2:	e06b      	b.n	800887c <_dtoa_r+0x96c>
 80087a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80087aa:	e73c      	b.n	8008626 <_dtoa_r+0x716>
 80087ac:	3fe00000 	.word	0x3fe00000
 80087b0:	40240000 	.word	0x40240000
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	1e5c      	subs	r4, r3, #1
 80087b8:	9b08      	ldr	r3, [sp, #32]
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	db09      	blt.n	80087d2 <_dtoa_r+0x8c2>
 80087be:	1b1c      	subs	r4, r3, r4
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f6bf af30 	bge.w	8008628 <_dtoa_r+0x718>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	9a03      	ldr	r2, [sp, #12]
 80087cc:	1a9e      	subs	r6, r3, r2
 80087ce:	2300      	movs	r3, #0
 80087d0:	e72b      	b.n	800862a <_dtoa_r+0x71a>
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087d6:	9408      	str	r4, [sp, #32]
 80087d8:	1ae3      	subs	r3, r4, r3
 80087da:	441a      	add	r2, r3
 80087dc:	9e00      	ldr	r6, [sp, #0]
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80087e2:	2400      	movs	r4, #0
 80087e4:	e721      	b.n	800862a <_dtoa_r+0x71a>
 80087e6:	9c08      	ldr	r4, [sp, #32]
 80087e8:	9e00      	ldr	r6, [sp, #0]
 80087ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80087ec:	e728      	b.n	8008640 <_dtoa_r+0x730>
 80087ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80087f2:	e751      	b.n	8008698 <_dtoa_r+0x788>
 80087f4:	9a08      	ldr	r2, [sp, #32]
 80087f6:	9902      	ldr	r1, [sp, #8]
 80087f8:	e750      	b.n	800869c <_dtoa_r+0x78c>
 80087fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80087fe:	e751      	b.n	80086a4 <_dtoa_r+0x794>
 8008800:	2300      	movs	r3, #0
 8008802:	e779      	b.n	80086f8 <_dtoa_r+0x7e8>
 8008804:	9b04      	ldr	r3, [sp, #16]
 8008806:	e777      	b.n	80086f8 <_dtoa_r+0x7e8>
 8008808:	2300      	movs	r3, #0
 800880a:	9308      	str	r3, [sp, #32]
 800880c:	e779      	b.n	8008702 <_dtoa_r+0x7f2>
 800880e:	d093      	beq.n	8008738 <_dtoa_r+0x828>
 8008810:	9a00      	ldr	r2, [sp, #0]
 8008812:	331c      	adds	r3, #28
 8008814:	441a      	add	r2, r3
 8008816:	9200      	str	r2, [sp, #0]
 8008818:	9a06      	ldr	r2, [sp, #24]
 800881a:	441a      	add	r2, r3
 800881c:	441e      	add	r6, r3
 800881e:	9206      	str	r2, [sp, #24]
 8008820:	e78a      	b.n	8008738 <_dtoa_r+0x828>
 8008822:	4603      	mov	r3, r0
 8008824:	e7f4      	b.n	8008810 <_dtoa_r+0x900>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	46b8      	mov	r8, r7
 800882c:	dc20      	bgt.n	8008870 <_dtoa_r+0x960>
 800882e:	469b      	mov	fp, r3
 8008830:	9b07      	ldr	r3, [sp, #28]
 8008832:	2b02      	cmp	r3, #2
 8008834:	dd1e      	ble.n	8008874 <_dtoa_r+0x964>
 8008836:	f1bb 0f00 	cmp.w	fp, #0
 800883a:	f47f adb1 	bne.w	80083a0 <_dtoa_r+0x490>
 800883e:	4621      	mov	r1, r4
 8008840:	465b      	mov	r3, fp
 8008842:	2205      	movs	r2, #5
 8008844:	4648      	mov	r0, r9
 8008846:	f000 fa95 	bl	8008d74 <__multadd>
 800884a:	4601      	mov	r1, r0
 800884c:	4604      	mov	r4, r0
 800884e:	9802      	ldr	r0, [sp, #8]
 8008850:	f000 fca0 	bl	8009194 <__mcmp>
 8008854:	2800      	cmp	r0, #0
 8008856:	f77f ada3 	ble.w	80083a0 <_dtoa_r+0x490>
 800885a:	4656      	mov	r6, sl
 800885c:	2331      	movs	r3, #49	@ 0x31
 800885e:	f806 3b01 	strb.w	r3, [r6], #1
 8008862:	f108 0801 	add.w	r8, r8, #1
 8008866:	e59f      	b.n	80083a8 <_dtoa_r+0x498>
 8008868:	9c03      	ldr	r4, [sp, #12]
 800886a:	46b8      	mov	r8, r7
 800886c:	4625      	mov	r5, r4
 800886e:	e7f4      	b.n	800885a <_dtoa_r+0x94a>
 8008870:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8101 	beq.w	8008a7e <_dtoa_r+0xb6e>
 800887c:	2e00      	cmp	r6, #0
 800887e:	dd05      	ble.n	800888c <_dtoa_r+0x97c>
 8008880:	4629      	mov	r1, r5
 8008882:	4632      	mov	r2, r6
 8008884:	4648      	mov	r0, r9
 8008886:	f000 fc19 	bl	80090bc <__lshift>
 800888a:	4605      	mov	r5, r0
 800888c:	9b08      	ldr	r3, [sp, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d05c      	beq.n	800894c <_dtoa_r+0xa3c>
 8008892:	6869      	ldr	r1, [r5, #4]
 8008894:	4648      	mov	r0, r9
 8008896:	f000 fa0b 	bl	8008cb0 <_Balloc>
 800889a:	4606      	mov	r6, r0
 800889c:	b928      	cbnz	r0, 80088aa <_dtoa_r+0x99a>
 800889e:	4b82      	ldr	r3, [pc, #520]	@ (8008aa8 <_dtoa_r+0xb98>)
 80088a0:	4602      	mov	r2, r0
 80088a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088a6:	f7ff bb4a 	b.w	8007f3e <_dtoa_r+0x2e>
 80088aa:	692a      	ldr	r2, [r5, #16]
 80088ac:	3202      	adds	r2, #2
 80088ae:	0092      	lsls	r2, r2, #2
 80088b0:	f105 010c 	add.w	r1, r5, #12
 80088b4:	300c      	adds	r0, #12
 80088b6:	f000 ffa3 	bl	8009800 <memcpy>
 80088ba:	2201      	movs	r2, #1
 80088bc:	4631      	mov	r1, r6
 80088be:	4648      	mov	r0, r9
 80088c0:	f000 fbfc 	bl	80090bc <__lshift>
 80088c4:	f10a 0301 	add.w	r3, sl, #1
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	eb0a 030b 	add.w	r3, sl, fp
 80088ce:	9308      	str	r3, [sp, #32]
 80088d0:	9b04      	ldr	r3, [sp, #16]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	462f      	mov	r7, r5
 80088d8:	9306      	str	r3, [sp, #24]
 80088da:	4605      	mov	r5, r0
 80088dc:	9b00      	ldr	r3, [sp, #0]
 80088de:	9802      	ldr	r0, [sp, #8]
 80088e0:	4621      	mov	r1, r4
 80088e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80088e6:	f7ff fa8a 	bl	8007dfe <quorem>
 80088ea:	4603      	mov	r3, r0
 80088ec:	3330      	adds	r3, #48	@ 0x30
 80088ee:	9003      	str	r0, [sp, #12]
 80088f0:	4639      	mov	r1, r7
 80088f2:	9802      	ldr	r0, [sp, #8]
 80088f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f6:	f000 fc4d 	bl	8009194 <__mcmp>
 80088fa:	462a      	mov	r2, r5
 80088fc:	9004      	str	r0, [sp, #16]
 80088fe:	4621      	mov	r1, r4
 8008900:	4648      	mov	r0, r9
 8008902:	f000 fc63 	bl	80091cc <__mdiff>
 8008906:	68c2      	ldr	r2, [r0, #12]
 8008908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890a:	4606      	mov	r6, r0
 800890c:	bb02      	cbnz	r2, 8008950 <_dtoa_r+0xa40>
 800890e:	4601      	mov	r1, r0
 8008910:	9802      	ldr	r0, [sp, #8]
 8008912:	f000 fc3f 	bl	8009194 <__mcmp>
 8008916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008918:	4602      	mov	r2, r0
 800891a:	4631      	mov	r1, r6
 800891c:	4648      	mov	r0, r9
 800891e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008920:	9309      	str	r3, [sp, #36]	@ 0x24
 8008922:	f000 fa05 	bl	8008d30 <_Bfree>
 8008926:	9b07      	ldr	r3, [sp, #28]
 8008928:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800892a:	9e00      	ldr	r6, [sp, #0]
 800892c:	ea42 0103 	orr.w	r1, r2, r3
 8008930:	9b06      	ldr	r3, [sp, #24]
 8008932:	4319      	orrs	r1, r3
 8008934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008936:	d10d      	bne.n	8008954 <_dtoa_r+0xa44>
 8008938:	2b39      	cmp	r3, #57	@ 0x39
 800893a:	d027      	beq.n	800898c <_dtoa_r+0xa7c>
 800893c:	9a04      	ldr	r2, [sp, #16]
 800893e:	2a00      	cmp	r2, #0
 8008940:	dd01      	ble.n	8008946 <_dtoa_r+0xa36>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	3331      	adds	r3, #49	@ 0x31
 8008946:	f88b 3000 	strb.w	r3, [fp]
 800894a:	e52e      	b.n	80083aa <_dtoa_r+0x49a>
 800894c:	4628      	mov	r0, r5
 800894e:	e7b9      	b.n	80088c4 <_dtoa_r+0x9b4>
 8008950:	2201      	movs	r2, #1
 8008952:	e7e2      	b.n	800891a <_dtoa_r+0xa0a>
 8008954:	9904      	ldr	r1, [sp, #16]
 8008956:	2900      	cmp	r1, #0
 8008958:	db04      	blt.n	8008964 <_dtoa_r+0xa54>
 800895a:	9807      	ldr	r0, [sp, #28]
 800895c:	4301      	orrs	r1, r0
 800895e:	9806      	ldr	r0, [sp, #24]
 8008960:	4301      	orrs	r1, r0
 8008962:	d120      	bne.n	80089a6 <_dtoa_r+0xa96>
 8008964:	2a00      	cmp	r2, #0
 8008966:	ddee      	ble.n	8008946 <_dtoa_r+0xa36>
 8008968:	9902      	ldr	r1, [sp, #8]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	2201      	movs	r2, #1
 800896e:	4648      	mov	r0, r9
 8008970:	f000 fba4 	bl	80090bc <__lshift>
 8008974:	4621      	mov	r1, r4
 8008976:	9002      	str	r0, [sp, #8]
 8008978:	f000 fc0c 	bl	8009194 <__mcmp>
 800897c:	2800      	cmp	r0, #0
 800897e:	9b00      	ldr	r3, [sp, #0]
 8008980:	dc02      	bgt.n	8008988 <_dtoa_r+0xa78>
 8008982:	d1e0      	bne.n	8008946 <_dtoa_r+0xa36>
 8008984:	07da      	lsls	r2, r3, #31
 8008986:	d5de      	bpl.n	8008946 <_dtoa_r+0xa36>
 8008988:	2b39      	cmp	r3, #57	@ 0x39
 800898a:	d1da      	bne.n	8008942 <_dtoa_r+0xa32>
 800898c:	2339      	movs	r3, #57	@ 0x39
 800898e:	f88b 3000 	strb.w	r3, [fp]
 8008992:	4633      	mov	r3, r6
 8008994:	461e      	mov	r6, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800899c:	2a39      	cmp	r2, #57	@ 0x39
 800899e:	d04e      	beq.n	8008a3e <_dtoa_r+0xb2e>
 80089a0:	3201      	adds	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	e501      	b.n	80083aa <_dtoa_r+0x49a>
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	dd03      	ble.n	80089b2 <_dtoa_r+0xaa2>
 80089aa:	2b39      	cmp	r3, #57	@ 0x39
 80089ac:	d0ee      	beq.n	800898c <_dtoa_r+0xa7c>
 80089ae:	3301      	adds	r3, #1
 80089b0:	e7c9      	b.n	8008946 <_dtoa_r+0xa36>
 80089b2:	9a00      	ldr	r2, [sp, #0]
 80089b4:	9908      	ldr	r1, [sp, #32]
 80089b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089ba:	428a      	cmp	r2, r1
 80089bc:	d028      	beq.n	8008a10 <_dtoa_r+0xb00>
 80089be:	9902      	ldr	r1, [sp, #8]
 80089c0:	2300      	movs	r3, #0
 80089c2:	220a      	movs	r2, #10
 80089c4:	4648      	mov	r0, r9
 80089c6:	f000 f9d5 	bl	8008d74 <__multadd>
 80089ca:	42af      	cmp	r7, r5
 80089cc:	9002      	str	r0, [sp, #8]
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	f04f 020a 	mov.w	r2, #10
 80089d6:	4639      	mov	r1, r7
 80089d8:	4648      	mov	r0, r9
 80089da:	d107      	bne.n	80089ec <_dtoa_r+0xadc>
 80089dc:	f000 f9ca 	bl	8008d74 <__multadd>
 80089e0:	4607      	mov	r7, r0
 80089e2:	4605      	mov	r5, r0
 80089e4:	9b00      	ldr	r3, [sp, #0]
 80089e6:	3301      	adds	r3, #1
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	e777      	b.n	80088dc <_dtoa_r+0x9cc>
 80089ec:	f000 f9c2 	bl	8008d74 <__multadd>
 80089f0:	4629      	mov	r1, r5
 80089f2:	4607      	mov	r7, r0
 80089f4:	2300      	movs	r3, #0
 80089f6:	220a      	movs	r2, #10
 80089f8:	4648      	mov	r0, r9
 80089fa:	f000 f9bb 	bl	8008d74 <__multadd>
 80089fe:	4605      	mov	r5, r0
 8008a00:	e7f0      	b.n	80089e4 <_dtoa_r+0xad4>
 8008a02:	f1bb 0f00 	cmp.w	fp, #0
 8008a06:	bfcc      	ite	gt
 8008a08:	465e      	movgt	r6, fp
 8008a0a:	2601      	movle	r6, #1
 8008a0c:	4456      	add	r6, sl
 8008a0e:	2700      	movs	r7, #0
 8008a10:	9902      	ldr	r1, [sp, #8]
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	2201      	movs	r2, #1
 8008a16:	4648      	mov	r0, r9
 8008a18:	f000 fb50 	bl	80090bc <__lshift>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	9002      	str	r0, [sp, #8]
 8008a20:	f000 fbb8 	bl	8009194 <__mcmp>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	dcb4      	bgt.n	8008992 <_dtoa_r+0xa82>
 8008a28:	d102      	bne.n	8008a30 <_dtoa_r+0xb20>
 8008a2a:	9b00      	ldr	r3, [sp, #0]
 8008a2c:	07db      	lsls	r3, r3, #31
 8008a2e:	d4b0      	bmi.n	8008992 <_dtoa_r+0xa82>
 8008a30:	4633      	mov	r3, r6
 8008a32:	461e      	mov	r6, r3
 8008a34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a38:	2a30      	cmp	r2, #48	@ 0x30
 8008a3a:	d0fa      	beq.n	8008a32 <_dtoa_r+0xb22>
 8008a3c:	e4b5      	b.n	80083aa <_dtoa_r+0x49a>
 8008a3e:	459a      	cmp	sl, r3
 8008a40:	d1a8      	bne.n	8008994 <_dtoa_r+0xa84>
 8008a42:	2331      	movs	r3, #49	@ 0x31
 8008a44:	f108 0801 	add.w	r8, r8, #1
 8008a48:	f88a 3000 	strb.w	r3, [sl]
 8008a4c:	e4ad      	b.n	80083aa <_dtoa_r+0x49a>
 8008a4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008aac <_dtoa_r+0xb9c>
 8008a54:	b11b      	cbz	r3, 8008a5e <_dtoa_r+0xb4e>
 8008a56:	f10a 0308 	add.w	r3, sl, #8
 8008a5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	4650      	mov	r0, sl
 8008a60:	b017      	add	sp, #92	@ 0x5c
 8008a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	9b07      	ldr	r3, [sp, #28]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	f77f ae2e 	ble.w	80086ca <_dtoa_r+0x7ba>
 8008a6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a70:	9308      	str	r3, [sp, #32]
 8008a72:	2001      	movs	r0, #1
 8008a74:	e64d      	b.n	8008712 <_dtoa_r+0x802>
 8008a76:	f1bb 0f00 	cmp.w	fp, #0
 8008a7a:	f77f aed9 	ble.w	8008830 <_dtoa_r+0x920>
 8008a7e:	4656      	mov	r6, sl
 8008a80:	9802      	ldr	r0, [sp, #8]
 8008a82:	4621      	mov	r1, r4
 8008a84:	f7ff f9bb 	bl	8007dfe <quorem>
 8008a88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8008a90:	eba6 020a 	sub.w	r2, r6, sl
 8008a94:	4593      	cmp	fp, r2
 8008a96:	ddb4      	ble.n	8008a02 <_dtoa_r+0xaf2>
 8008a98:	9902      	ldr	r1, [sp, #8]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	220a      	movs	r2, #10
 8008a9e:	4648      	mov	r0, r9
 8008aa0:	f000 f968 	bl	8008d74 <__multadd>
 8008aa4:	9002      	str	r0, [sp, #8]
 8008aa6:	e7eb      	b.n	8008a80 <_dtoa_r+0xb70>
 8008aa8:	0800a398 	.word	0x0800a398
 8008aac:	0800a31c 	.word	0x0800a31c

08008ab0 <_free_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	d041      	beq.n	8008b3c <_free_r+0x8c>
 8008ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008abc:	1f0c      	subs	r4, r1, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfb8      	it	lt
 8008ac2:	18e4      	addlt	r4, r4, r3
 8008ac4:	f000 f8e8 	bl	8008c98 <__malloc_lock>
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b40 <_free_r+0x90>)
 8008aca:	6813      	ldr	r3, [r2, #0]
 8008acc:	b933      	cbnz	r3, 8008adc <_free_r+0x2c>
 8008ace:	6063      	str	r3, [r4, #4]
 8008ad0:	6014      	str	r4, [r2, #0]
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad8:	f000 b8e4 	b.w	8008ca4 <__malloc_unlock>
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	d908      	bls.n	8008af2 <_free_r+0x42>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	1821      	adds	r1, r4, r0
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	bf01      	itttt	eq
 8008ae8:	6819      	ldreq	r1, [r3, #0]
 8008aea:	685b      	ldreq	r3, [r3, #4]
 8008aec:	1809      	addeq	r1, r1, r0
 8008aee:	6021      	streq	r1, [r4, #0]
 8008af0:	e7ed      	b.n	8008ace <_free_r+0x1e>
 8008af2:	461a      	mov	r2, r3
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b10b      	cbz	r3, 8008afc <_free_r+0x4c>
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	d9fa      	bls.n	8008af2 <_free_r+0x42>
 8008afc:	6811      	ldr	r1, [r2, #0]
 8008afe:	1850      	adds	r0, r2, r1
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d10b      	bne.n	8008b1c <_free_r+0x6c>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	4401      	add	r1, r0
 8008b08:	1850      	adds	r0, r2, r1
 8008b0a:	4283      	cmp	r3, r0
 8008b0c:	6011      	str	r1, [r2, #0]
 8008b0e:	d1e0      	bne.n	8008ad2 <_free_r+0x22>
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	6053      	str	r3, [r2, #4]
 8008b16:	4408      	add	r0, r1
 8008b18:	6010      	str	r0, [r2, #0]
 8008b1a:	e7da      	b.n	8008ad2 <_free_r+0x22>
 8008b1c:	d902      	bls.n	8008b24 <_free_r+0x74>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	e7d6      	b.n	8008ad2 <_free_r+0x22>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	1821      	adds	r1, r4, r0
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf04      	itt	eq
 8008b2c:	6819      	ldreq	r1, [r3, #0]
 8008b2e:	685b      	ldreq	r3, [r3, #4]
 8008b30:	6063      	str	r3, [r4, #4]
 8008b32:	bf04      	itt	eq
 8008b34:	1809      	addeq	r1, r1, r0
 8008b36:	6021      	streq	r1, [r4, #0]
 8008b38:	6054      	str	r4, [r2, #4]
 8008b3a:	e7ca      	b.n	8008ad2 <_free_r+0x22>
 8008b3c:	bd38      	pop	{r3, r4, r5, pc}
 8008b3e:	bf00      	nop
 8008b40:	200039a8 	.word	0x200039a8

08008b44 <malloc>:
 8008b44:	4b02      	ldr	r3, [pc, #8]	@ (8008b50 <malloc+0xc>)
 8008b46:	4601      	mov	r1, r0
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f000 b825 	b.w	8008b98 <_malloc_r>
 8008b4e:	bf00      	nop
 8008b50:	20000034 	.word	0x20000034

08008b54 <sbrk_aligned>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4e0f      	ldr	r6, [pc, #60]	@ (8008b94 <sbrk_aligned+0x40>)
 8008b58:	460c      	mov	r4, r1
 8008b5a:	6831      	ldr	r1, [r6, #0]
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	b911      	cbnz	r1, 8008b66 <sbrk_aligned+0x12>
 8008b60:	f000 fe3e 	bl	80097e0 <_sbrk_r>
 8008b64:	6030      	str	r0, [r6, #0]
 8008b66:	4621      	mov	r1, r4
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f000 fe39 	bl	80097e0 <_sbrk_r>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	d103      	bne.n	8008b7a <sbrk_aligned+0x26>
 8008b72:	f04f 34ff 	mov.w	r4, #4294967295
 8008b76:	4620      	mov	r0, r4
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	1cc4      	adds	r4, r0, #3
 8008b7c:	f024 0403 	bic.w	r4, r4, #3
 8008b80:	42a0      	cmp	r0, r4
 8008b82:	d0f8      	beq.n	8008b76 <sbrk_aligned+0x22>
 8008b84:	1a21      	subs	r1, r4, r0
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 fe2a 	bl	80097e0 <_sbrk_r>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d1f2      	bne.n	8008b76 <sbrk_aligned+0x22>
 8008b90:	e7ef      	b.n	8008b72 <sbrk_aligned+0x1e>
 8008b92:	bf00      	nop
 8008b94:	200039a4 	.word	0x200039a4

08008b98 <_malloc_r>:
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	1ccd      	adds	r5, r1, #3
 8008b9e:	f025 0503 	bic.w	r5, r5, #3
 8008ba2:	3508      	adds	r5, #8
 8008ba4:	2d0c      	cmp	r5, #12
 8008ba6:	bf38      	it	cc
 8008ba8:	250c      	movcc	r5, #12
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	4606      	mov	r6, r0
 8008bae:	db01      	blt.n	8008bb4 <_malloc_r+0x1c>
 8008bb0:	42a9      	cmp	r1, r5
 8008bb2:	d904      	bls.n	8008bbe <_malloc_r+0x26>
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	6033      	str	r3, [r6, #0]
 8008bb8:	2000      	movs	r0, #0
 8008bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c94 <_malloc_r+0xfc>
 8008bc2:	f000 f869 	bl	8008c98 <__malloc_lock>
 8008bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bca:	461c      	mov	r4, r3
 8008bcc:	bb44      	cbnz	r4, 8008c20 <_malloc_r+0x88>
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff ffbf 	bl	8008b54 <sbrk_aligned>
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	4604      	mov	r4, r0
 8008bda:	d158      	bne.n	8008c8e <_malloc_r+0xf6>
 8008bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8008be0:	4627      	mov	r7, r4
 8008be2:	2f00      	cmp	r7, #0
 8008be4:	d143      	bne.n	8008c6e <_malloc_r+0xd6>
 8008be6:	2c00      	cmp	r4, #0
 8008be8:	d04b      	beq.n	8008c82 <_malloc_r+0xea>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	4639      	mov	r1, r7
 8008bee:	4630      	mov	r0, r6
 8008bf0:	eb04 0903 	add.w	r9, r4, r3
 8008bf4:	f000 fdf4 	bl	80097e0 <_sbrk_r>
 8008bf8:	4581      	cmp	r9, r0
 8008bfa:	d142      	bne.n	8008c82 <_malloc_r+0xea>
 8008bfc:	6821      	ldr	r1, [r4, #0]
 8008bfe:	1a6d      	subs	r5, r5, r1
 8008c00:	4629      	mov	r1, r5
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ffa6 	bl	8008b54 <sbrk_aligned>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d03a      	beq.n	8008c82 <_malloc_r+0xea>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	442b      	add	r3, r5
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	f8d8 3000 	ldr.w	r3, [r8]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	bb62      	cbnz	r2, 8008c74 <_malloc_r+0xdc>
 8008c1a:	f8c8 7000 	str.w	r7, [r8]
 8008c1e:	e00f      	b.n	8008c40 <_malloc_r+0xa8>
 8008c20:	6822      	ldr	r2, [r4, #0]
 8008c22:	1b52      	subs	r2, r2, r5
 8008c24:	d420      	bmi.n	8008c68 <_malloc_r+0xd0>
 8008c26:	2a0b      	cmp	r2, #11
 8008c28:	d917      	bls.n	8008c5a <_malloc_r+0xc2>
 8008c2a:	1961      	adds	r1, r4, r5
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	6025      	str	r5, [r4, #0]
 8008c30:	bf18      	it	ne
 8008c32:	6059      	strne	r1, [r3, #4]
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	bf08      	it	eq
 8008c38:	f8c8 1000 	streq.w	r1, [r8]
 8008c3c:	5162      	str	r2, [r4, r5]
 8008c3e:	604b      	str	r3, [r1, #4]
 8008c40:	4630      	mov	r0, r6
 8008c42:	f000 f82f 	bl	8008ca4 <__malloc_unlock>
 8008c46:	f104 000b 	add.w	r0, r4, #11
 8008c4a:	1d23      	adds	r3, r4, #4
 8008c4c:	f020 0007 	bic.w	r0, r0, #7
 8008c50:	1ac2      	subs	r2, r0, r3
 8008c52:	bf1c      	itt	ne
 8008c54:	1a1b      	subne	r3, r3, r0
 8008c56:	50a3      	strne	r3, [r4, r2]
 8008c58:	e7af      	b.n	8008bba <_malloc_r+0x22>
 8008c5a:	6862      	ldr	r2, [r4, #4]
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	bf0c      	ite	eq
 8008c60:	f8c8 2000 	streq.w	r2, [r8]
 8008c64:	605a      	strne	r2, [r3, #4]
 8008c66:	e7eb      	b.n	8008c40 <_malloc_r+0xa8>
 8008c68:	4623      	mov	r3, r4
 8008c6a:	6864      	ldr	r4, [r4, #4]
 8008c6c:	e7ae      	b.n	8008bcc <_malloc_r+0x34>
 8008c6e:	463c      	mov	r4, r7
 8008c70:	687f      	ldr	r7, [r7, #4]
 8008c72:	e7b6      	b.n	8008be2 <_malloc_r+0x4a>
 8008c74:	461a      	mov	r2, r3
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d1fb      	bne.n	8008c74 <_malloc_r+0xdc>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	6053      	str	r3, [r2, #4]
 8008c80:	e7de      	b.n	8008c40 <_malloc_r+0xa8>
 8008c82:	230c      	movs	r3, #12
 8008c84:	6033      	str	r3, [r6, #0]
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 f80c 	bl	8008ca4 <__malloc_unlock>
 8008c8c:	e794      	b.n	8008bb8 <_malloc_r+0x20>
 8008c8e:	6005      	str	r5, [r0, #0]
 8008c90:	e7d6      	b.n	8008c40 <_malloc_r+0xa8>
 8008c92:	bf00      	nop
 8008c94:	200039a8 	.word	0x200039a8

08008c98 <__malloc_lock>:
 8008c98:	4801      	ldr	r0, [pc, #4]	@ (8008ca0 <__malloc_lock+0x8>)
 8008c9a:	f7ff b8ae 	b.w	8007dfa <__retarget_lock_acquire_recursive>
 8008c9e:	bf00      	nop
 8008ca0:	200039a0 	.word	0x200039a0

08008ca4 <__malloc_unlock>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	@ (8008cac <__malloc_unlock+0x8>)
 8008ca6:	f7ff b8a9 	b.w	8007dfc <__retarget_lock_release_recursive>
 8008caa:	bf00      	nop
 8008cac:	200039a0 	.word	0x200039a0

08008cb0 <_Balloc>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	69c6      	ldr	r6, [r0, #28]
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	b976      	cbnz	r6, 8008cd8 <_Balloc+0x28>
 8008cba:	2010      	movs	r0, #16
 8008cbc:	f7ff ff42 	bl	8008b44 <malloc>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	61e0      	str	r0, [r4, #28]
 8008cc4:	b920      	cbnz	r0, 8008cd0 <_Balloc+0x20>
 8008cc6:	4b18      	ldr	r3, [pc, #96]	@ (8008d28 <_Balloc+0x78>)
 8008cc8:	4818      	ldr	r0, [pc, #96]	@ (8008d2c <_Balloc+0x7c>)
 8008cca:	216b      	movs	r1, #107	@ 0x6b
 8008ccc:	f000 fda6 	bl	800981c <__assert_func>
 8008cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cd4:	6006      	str	r6, [r0, #0]
 8008cd6:	60c6      	str	r6, [r0, #12]
 8008cd8:	69e6      	ldr	r6, [r4, #28]
 8008cda:	68f3      	ldr	r3, [r6, #12]
 8008cdc:	b183      	cbz	r3, 8008d00 <_Balloc+0x50>
 8008cde:	69e3      	ldr	r3, [r4, #28]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ce6:	b9b8      	cbnz	r0, 8008d18 <_Balloc+0x68>
 8008ce8:	2101      	movs	r1, #1
 8008cea:	fa01 f605 	lsl.w	r6, r1, r5
 8008cee:	1d72      	adds	r2, r6, #5
 8008cf0:	0092      	lsls	r2, r2, #2
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 fdb0 	bl	8009858 <_calloc_r>
 8008cf8:	b160      	cbz	r0, 8008d14 <_Balloc+0x64>
 8008cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cfe:	e00e      	b.n	8008d1e <_Balloc+0x6e>
 8008d00:	2221      	movs	r2, #33	@ 0x21
 8008d02:	2104      	movs	r1, #4
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fda7 	bl	8009858 <_calloc_r>
 8008d0a:	69e3      	ldr	r3, [r4, #28]
 8008d0c:	60f0      	str	r0, [r6, #12]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e4      	bne.n	8008cde <_Balloc+0x2e>
 8008d14:	2000      	movs	r0, #0
 8008d16:	bd70      	pop	{r4, r5, r6, pc}
 8008d18:	6802      	ldr	r2, [r0, #0]
 8008d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d24:	e7f7      	b.n	8008d16 <_Balloc+0x66>
 8008d26:	bf00      	nop
 8008d28:	0800a329 	.word	0x0800a329
 8008d2c:	0800a3a9 	.word	0x0800a3a9

08008d30 <_Bfree>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	69c6      	ldr	r6, [r0, #28]
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	b976      	cbnz	r6, 8008d58 <_Bfree+0x28>
 8008d3a:	2010      	movs	r0, #16
 8008d3c:	f7ff ff02 	bl	8008b44 <malloc>
 8008d40:	4602      	mov	r2, r0
 8008d42:	61e8      	str	r0, [r5, #28]
 8008d44:	b920      	cbnz	r0, 8008d50 <_Bfree+0x20>
 8008d46:	4b09      	ldr	r3, [pc, #36]	@ (8008d6c <_Bfree+0x3c>)
 8008d48:	4809      	ldr	r0, [pc, #36]	@ (8008d70 <_Bfree+0x40>)
 8008d4a:	218f      	movs	r1, #143	@ 0x8f
 8008d4c:	f000 fd66 	bl	800981c <__assert_func>
 8008d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d54:	6006      	str	r6, [r0, #0]
 8008d56:	60c6      	str	r6, [r0, #12]
 8008d58:	b13c      	cbz	r4, 8008d6a <_Bfree+0x3a>
 8008d5a:	69eb      	ldr	r3, [r5, #28]
 8008d5c:	6862      	ldr	r2, [r4, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d64:	6021      	str	r1, [r4, #0]
 8008d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	0800a329 	.word	0x0800a329
 8008d70:	0800a3a9 	.word	0x0800a3a9

08008d74 <__multadd>:
 8008d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	690d      	ldr	r5, [r1, #16]
 8008d7a:	4607      	mov	r7, r0
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	461e      	mov	r6, r3
 8008d80:	f101 0c14 	add.w	ip, r1, #20
 8008d84:	2000      	movs	r0, #0
 8008d86:	f8dc 3000 	ldr.w	r3, [ip]
 8008d8a:	b299      	uxth	r1, r3
 8008d8c:	fb02 6101 	mla	r1, r2, r1, r6
 8008d90:	0c1e      	lsrs	r6, r3, #16
 8008d92:	0c0b      	lsrs	r3, r1, #16
 8008d94:	fb02 3306 	mla	r3, r2, r6, r3
 8008d98:	b289      	uxth	r1, r1
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008da0:	4285      	cmp	r5, r0
 8008da2:	f84c 1b04 	str.w	r1, [ip], #4
 8008da6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008daa:	dcec      	bgt.n	8008d86 <__multadd+0x12>
 8008dac:	b30e      	cbz	r6, 8008df2 <__multadd+0x7e>
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	42ab      	cmp	r3, r5
 8008db2:	dc19      	bgt.n	8008de8 <__multadd+0x74>
 8008db4:	6861      	ldr	r1, [r4, #4]
 8008db6:	4638      	mov	r0, r7
 8008db8:	3101      	adds	r1, #1
 8008dba:	f7ff ff79 	bl	8008cb0 <_Balloc>
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	b928      	cbnz	r0, 8008dce <__multadd+0x5a>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008df8 <__multadd+0x84>)
 8008dc6:	480d      	ldr	r0, [pc, #52]	@ (8008dfc <__multadd+0x88>)
 8008dc8:	21ba      	movs	r1, #186	@ 0xba
 8008dca:	f000 fd27 	bl	800981c <__assert_func>
 8008dce:	6922      	ldr	r2, [r4, #16]
 8008dd0:	3202      	adds	r2, #2
 8008dd2:	f104 010c 	add.w	r1, r4, #12
 8008dd6:	0092      	lsls	r2, r2, #2
 8008dd8:	300c      	adds	r0, #12
 8008dda:	f000 fd11 	bl	8009800 <memcpy>
 8008dde:	4621      	mov	r1, r4
 8008de0:	4638      	mov	r0, r7
 8008de2:	f7ff ffa5 	bl	8008d30 <_Bfree>
 8008de6:	4644      	mov	r4, r8
 8008de8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dec:	3501      	adds	r5, #1
 8008dee:	615e      	str	r6, [r3, #20]
 8008df0:	6125      	str	r5, [r4, #16]
 8008df2:	4620      	mov	r0, r4
 8008df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df8:	0800a398 	.word	0x0800a398
 8008dfc:	0800a3a9 	.word	0x0800a3a9

08008e00 <__hi0bits>:
 8008e00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e04:	4603      	mov	r3, r0
 8008e06:	bf36      	itet	cc
 8008e08:	0403      	lslcc	r3, r0, #16
 8008e0a:	2000      	movcs	r0, #0
 8008e0c:	2010      	movcc	r0, #16
 8008e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e12:	bf3c      	itt	cc
 8008e14:	021b      	lslcc	r3, r3, #8
 8008e16:	3008      	addcc	r0, #8
 8008e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e1c:	bf3c      	itt	cc
 8008e1e:	011b      	lslcc	r3, r3, #4
 8008e20:	3004      	addcc	r0, #4
 8008e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e26:	bf3c      	itt	cc
 8008e28:	009b      	lslcc	r3, r3, #2
 8008e2a:	3002      	addcc	r0, #2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	db05      	blt.n	8008e3c <__hi0bits+0x3c>
 8008e30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e34:	f100 0001 	add.w	r0, r0, #1
 8008e38:	bf08      	it	eq
 8008e3a:	2020      	moveq	r0, #32
 8008e3c:	4770      	bx	lr

08008e3e <__lo0bits>:
 8008e3e:	6803      	ldr	r3, [r0, #0]
 8008e40:	4602      	mov	r2, r0
 8008e42:	f013 0007 	ands.w	r0, r3, #7
 8008e46:	d00b      	beq.n	8008e60 <__lo0bits+0x22>
 8008e48:	07d9      	lsls	r1, r3, #31
 8008e4a:	d421      	bmi.n	8008e90 <__lo0bits+0x52>
 8008e4c:	0798      	lsls	r0, r3, #30
 8008e4e:	bf49      	itett	mi
 8008e50:	085b      	lsrmi	r3, r3, #1
 8008e52:	089b      	lsrpl	r3, r3, #2
 8008e54:	2001      	movmi	r0, #1
 8008e56:	6013      	strmi	r3, [r2, #0]
 8008e58:	bf5c      	itt	pl
 8008e5a:	6013      	strpl	r3, [r2, #0]
 8008e5c:	2002      	movpl	r0, #2
 8008e5e:	4770      	bx	lr
 8008e60:	b299      	uxth	r1, r3
 8008e62:	b909      	cbnz	r1, 8008e68 <__lo0bits+0x2a>
 8008e64:	0c1b      	lsrs	r3, r3, #16
 8008e66:	2010      	movs	r0, #16
 8008e68:	b2d9      	uxtb	r1, r3
 8008e6a:	b909      	cbnz	r1, 8008e70 <__lo0bits+0x32>
 8008e6c:	3008      	adds	r0, #8
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	0719      	lsls	r1, r3, #28
 8008e72:	bf04      	itt	eq
 8008e74:	091b      	lsreq	r3, r3, #4
 8008e76:	3004      	addeq	r0, #4
 8008e78:	0799      	lsls	r1, r3, #30
 8008e7a:	bf04      	itt	eq
 8008e7c:	089b      	lsreq	r3, r3, #2
 8008e7e:	3002      	addeq	r0, #2
 8008e80:	07d9      	lsls	r1, r3, #31
 8008e82:	d403      	bmi.n	8008e8c <__lo0bits+0x4e>
 8008e84:	085b      	lsrs	r3, r3, #1
 8008e86:	f100 0001 	add.w	r0, r0, #1
 8008e8a:	d003      	beq.n	8008e94 <__lo0bits+0x56>
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	4770      	bx	lr
 8008e90:	2000      	movs	r0, #0
 8008e92:	4770      	bx	lr
 8008e94:	2020      	movs	r0, #32
 8008e96:	4770      	bx	lr

08008e98 <__i2b>:
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	f7ff ff07 	bl	8008cb0 <_Balloc>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	b928      	cbnz	r0, 8008eb2 <__i2b+0x1a>
 8008ea6:	4b05      	ldr	r3, [pc, #20]	@ (8008ebc <__i2b+0x24>)
 8008ea8:	4805      	ldr	r0, [pc, #20]	@ (8008ec0 <__i2b+0x28>)
 8008eaa:	f240 1145 	movw	r1, #325	@ 0x145
 8008eae:	f000 fcb5 	bl	800981c <__assert_func>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	6144      	str	r4, [r0, #20]
 8008eb6:	6103      	str	r3, [r0, #16]
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	bf00      	nop
 8008ebc:	0800a398 	.word	0x0800a398
 8008ec0:	0800a3a9 	.word	0x0800a3a9

08008ec4 <__multiply>:
 8008ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	4617      	mov	r7, r2
 8008eca:	690a      	ldr	r2, [r1, #16]
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	bfa8      	it	ge
 8008ed2:	463b      	movge	r3, r7
 8008ed4:	4689      	mov	r9, r1
 8008ed6:	bfa4      	itt	ge
 8008ed8:	460f      	movge	r7, r1
 8008eda:	4699      	movge	r9, r3
 8008edc:	693d      	ldr	r5, [r7, #16]
 8008ede:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	eb05 060a 	add.w	r6, r5, sl
 8008eea:	42b3      	cmp	r3, r6
 8008eec:	b085      	sub	sp, #20
 8008eee:	bfb8      	it	lt
 8008ef0:	3101      	addlt	r1, #1
 8008ef2:	f7ff fedd 	bl	8008cb0 <_Balloc>
 8008ef6:	b930      	cbnz	r0, 8008f06 <__multiply+0x42>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	4b41      	ldr	r3, [pc, #260]	@ (8009000 <__multiply+0x13c>)
 8008efc:	4841      	ldr	r0, [pc, #260]	@ (8009004 <__multiply+0x140>)
 8008efe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f02:	f000 fc8b 	bl	800981c <__assert_func>
 8008f06:	f100 0414 	add.w	r4, r0, #20
 8008f0a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008f0e:	4623      	mov	r3, r4
 8008f10:	2200      	movs	r2, #0
 8008f12:	4573      	cmp	r3, lr
 8008f14:	d320      	bcc.n	8008f58 <__multiply+0x94>
 8008f16:	f107 0814 	add.w	r8, r7, #20
 8008f1a:	f109 0114 	add.w	r1, r9, #20
 8008f1e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008f22:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008f26:	9302      	str	r3, [sp, #8]
 8008f28:	1beb      	subs	r3, r5, r7
 8008f2a:	3b15      	subs	r3, #21
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	3304      	adds	r3, #4
 8008f32:	3715      	adds	r7, #21
 8008f34:	42bd      	cmp	r5, r7
 8008f36:	bf38      	it	cc
 8008f38:	2304      	movcc	r3, #4
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	9103      	str	r1, [sp, #12]
 8008f40:	428b      	cmp	r3, r1
 8008f42:	d80c      	bhi.n	8008f5e <__multiply+0x9a>
 8008f44:	2e00      	cmp	r6, #0
 8008f46:	dd03      	ble.n	8008f50 <__multiply+0x8c>
 8008f48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d055      	beq.n	8008ffc <__multiply+0x138>
 8008f50:	6106      	str	r6, [r0, #16]
 8008f52:	b005      	add	sp, #20
 8008f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f58:	f843 2b04 	str.w	r2, [r3], #4
 8008f5c:	e7d9      	b.n	8008f12 <__multiply+0x4e>
 8008f5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f62:	f1ba 0f00 	cmp.w	sl, #0
 8008f66:	d01f      	beq.n	8008fa8 <__multiply+0xe4>
 8008f68:	46c4      	mov	ip, r8
 8008f6a:	46a1      	mov	r9, r4
 8008f6c:	2700      	movs	r7, #0
 8008f6e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f72:	f8d9 3000 	ldr.w	r3, [r9]
 8008f76:	fa1f fb82 	uxth.w	fp, r2
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f80:	443b      	add	r3, r7
 8008f82:	f8d9 7000 	ldr.w	r7, [r9]
 8008f86:	0c12      	lsrs	r2, r2, #16
 8008f88:	0c3f      	lsrs	r7, r7, #16
 8008f8a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f8e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f98:	4565      	cmp	r5, ip
 8008f9a:	f849 3b04 	str.w	r3, [r9], #4
 8008f9e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008fa2:	d8e4      	bhi.n	8008f6e <__multiply+0xaa>
 8008fa4:	9b01      	ldr	r3, [sp, #4]
 8008fa6:	50e7      	str	r7, [r4, r3]
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008fae:	3104      	adds	r1, #4
 8008fb0:	f1b9 0f00 	cmp.w	r9, #0
 8008fb4:	d020      	beq.n	8008ff8 <__multiply+0x134>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	4647      	mov	r7, r8
 8008fba:	46a4      	mov	ip, r4
 8008fbc:	f04f 0a00 	mov.w	sl, #0
 8008fc0:	f8b7 b000 	ldrh.w	fp, [r7]
 8008fc4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008fc8:	fb09 220b 	mla	r2, r9, fp, r2
 8008fcc:	4452      	add	r2, sl
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fd4:	f84c 3b04 	str.w	r3, [ip], #4
 8008fd8:	f857 3b04 	ldr.w	r3, [r7], #4
 8008fdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fe0:	f8bc 3000 	ldrh.w	r3, [ip]
 8008fe4:	fb09 330a 	mla	r3, r9, sl, r3
 8008fe8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008fec:	42bd      	cmp	r5, r7
 8008fee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ff2:	d8e5      	bhi.n	8008fc0 <__multiply+0xfc>
 8008ff4:	9a01      	ldr	r2, [sp, #4]
 8008ff6:	50a3      	str	r3, [r4, r2]
 8008ff8:	3404      	adds	r4, #4
 8008ffa:	e79f      	b.n	8008f3c <__multiply+0x78>
 8008ffc:	3e01      	subs	r6, #1
 8008ffe:	e7a1      	b.n	8008f44 <__multiply+0x80>
 8009000:	0800a398 	.word	0x0800a398
 8009004:	0800a3a9 	.word	0x0800a3a9

08009008 <__pow5mult>:
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	4615      	mov	r5, r2
 800900e:	f012 0203 	ands.w	r2, r2, #3
 8009012:	4607      	mov	r7, r0
 8009014:	460e      	mov	r6, r1
 8009016:	d007      	beq.n	8009028 <__pow5mult+0x20>
 8009018:	4c25      	ldr	r4, [pc, #148]	@ (80090b0 <__pow5mult+0xa8>)
 800901a:	3a01      	subs	r2, #1
 800901c:	2300      	movs	r3, #0
 800901e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009022:	f7ff fea7 	bl	8008d74 <__multadd>
 8009026:	4606      	mov	r6, r0
 8009028:	10ad      	asrs	r5, r5, #2
 800902a:	d03d      	beq.n	80090a8 <__pow5mult+0xa0>
 800902c:	69fc      	ldr	r4, [r7, #28]
 800902e:	b97c      	cbnz	r4, 8009050 <__pow5mult+0x48>
 8009030:	2010      	movs	r0, #16
 8009032:	f7ff fd87 	bl	8008b44 <malloc>
 8009036:	4602      	mov	r2, r0
 8009038:	61f8      	str	r0, [r7, #28]
 800903a:	b928      	cbnz	r0, 8009048 <__pow5mult+0x40>
 800903c:	4b1d      	ldr	r3, [pc, #116]	@ (80090b4 <__pow5mult+0xac>)
 800903e:	481e      	ldr	r0, [pc, #120]	@ (80090b8 <__pow5mult+0xb0>)
 8009040:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009044:	f000 fbea 	bl	800981c <__assert_func>
 8009048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800904c:	6004      	str	r4, [r0, #0]
 800904e:	60c4      	str	r4, [r0, #12]
 8009050:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009058:	b94c      	cbnz	r4, 800906e <__pow5mult+0x66>
 800905a:	f240 2171 	movw	r1, #625	@ 0x271
 800905e:	4638      	mov	r0, r7
 8009060:	f7ff ff1a 	bl	8008e98 <__i2b>
 8009064:	2300      	movs	r3, #0
 8009066:	f8c8 0008 	str.w	r0, [r8, #8]
 800906a:	4604      	mov	r4, r0
 800906c:	6003      	str	r3, [r0, #0]
 800906e:	f04f 0900 	mov.w	r9, #0
 8009072:	07eb      	lsls	r3, r5, #31
 8009074:	d50a      	bpl.n	800908c <__pow5mult+0x84>
 8009076:	4631      	mov	r1, r6
 8009078:	4622      	mov	r2, r4
 800907a:	4638      	mov	r0, r7
 800907c:	f7ff ff22 	bl	8008ec4 <__multiply>
 8009080:	4631      	mov	r1, r6
 8009082:	4680      	mov	r8, r0
 8009084:	4638      	mov	r0, r7
 8009086:	f7ff fe53 	bl	8008d30 <_Bfree>
 800908a:	4646      	mov	r6, r8
 800908c:	106d      	asrs	r5, r5, #1
 800908e:	d00b      	beq.n	80090a8 <__pow5mult+0xa0>
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	b938      	cbnz	r0, 80090a4 <__pow5mult+0x9c>
 8009094:	4622      	mov	r2, r4
 8009096:	4621      	mov	r1, r4
 8009098:	4638      	mov	r0, r7
 800909a:	f7ff ff13 	bl	8008ec4 <__multiply>
 800909e:	6020      	str	r0, [r4, #0]
 80090a0:	f8c0 9000 	str.w	r9, [r0]
 80090a4:	4604      	mov	r4, r0
 80090a6:	e7e4      	b.n	8009072 <__pow5mult+0x6a>
 80090a8:	4630      	mov	r0, r6
 80090aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ae:	bf00      	nop
 80090b0:	0800a45c 	.word	0x0800a45c
 80090b4:	0800a329 	.word	0x0800a329
 80090b8:	0800a3a9 	.word	0x0800a3a9

080090bc <__lshift>:
 80090bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c0:	460c      	mov	r4, r1
 80090c2:	6849      	ldr	r1, [r1, #4]
 80090c4:	6923      	ldr	r3, [r4, #16]
 80090c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	4607      	mov	r7, r0
 80090ce:	4691      	mov	r9, r2
 80090d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090d4:	f108 0601 	add.w	r6, r8, #1
 80090d8:	42b3      	cmp	r3, r6
 80090da:	db0b      	blt.n	80090f4 <__lshift+0x38>
 80090dc:	4638      	mov	r0, r7
 80090de:	f7ff fde7 	bl	8008cb0 <_Balloc>
 80090e2:	4605      	mov	r5, r0
 80090e4:	b948      	cbnz	r0, 80090fa <__lshift+0x3e>
 80090e6:	4602      	mov	r2, r0
 80090e8:	4b28      	ldr	r3, [pc, #160]	@ (800918c <__lshift+0xd0>)
 80090ea:	4829      	ldr	r0, [pc, #164]	@ (8009190 <__lshift+0xd4>)
 80090ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090f0:	f000 fb94 	bl	800981c <__assert_func>
 80090f4:	3101      	adds	r1, #1
 80090f6:	005b      	lsls	r3, r3, #1
 80090f8:	e7ee      	b.n	80090d8 <__lshift+0x1c>
 80090fa:	2300      	movs	r3, #0
 80090fc:	f100 0114 	add.w	r1, r0, #20
 8009100:	f100 0210 	add.w	r2, r0, #16
 8009104:	4618      	mov	r0, r3
 8009106:	4553      	cmp	r3, sl
 8009108:	db33      	blt.n	8009172 <__lshift+0xb6>
 800910a:	6920      	ldr	r0, [r4, #16]
 800910c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009110:	f104 0314 	add.w	r3, r4, #20
 8009114:	f019 091f 	ands.w	r9, r9, #31
 8009118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800911c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009120:	d02b      	beq.n	800917a <__lshift+0xbe>
 8009122:	f1c9 0e20 	rsb	lr, r9, #32
 8009126:	468a      	mov	sl, r1
 8009128:	2200      	movs	r2, #0
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	fa00 f009 	lsl.w	r0, r0, r9
 8009130:	4310      	orrs	r0, r2
 8009132:	f84a 0b04 	str.w	r0, [sl], #4
 8009136:	f853 2b04 	ldr.w	r2, [r3], #4
 800913a:	459c      	cmp	ip, r3
 800913c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009140:	d8f3      	bhi.n	800912a <__lshift+0x6e>
 8009142:	ebac 0304 	sub.w	r3, ip, r4
 8009146:	3b15      	subs	r3, #21
 8009148:	f023 0303 	bic.w	r3, r3, #3
 800914c:	3304      	adds	r3, #4
 800914e:	f104 0015 	add.w	r0, r4, #21
 8009152:	4560      	cmp	r0, ip
 8009154:	bf88      	it	hi
 8009156:	2304      	movhi	r3, #4
 8009158:	50ca      	str	r2, [r1, r3]
 800915a:	b10a      	cbz	r2, 8009160 <__lshift+0xa4>
 800915c:	f108 0602 	add.w	r6, r8, #2
 8009160:	3e01      	subs	r6, #1
 8009162:	4638      	mov	r0, r7
 8009164:	612e      	str	r6, [r5, #16]
 8009166:	4621      	mov	r1, r4
 8009168:	f7ff fde2 	bl	8008d30 <_Bfree>
 800916c:	4628      	mov	r0, r5
 800916e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009172:	f842 0f04 	str.w	r0, [r2, #4]!
 8009176:	3301      	adds	r3, #1
 8009178:	e7c5      	b.n	8009106 <__lshift+0x4a>
 800917a:	3904      	subs	r1, #4
 800917c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009180:	f841 2f04 	str.w	r2, [r1, #4]!
 8009184:	459c      	cmp	ip, r3
 8009186:	d8f9      	bhi.n	800917c <__lshift+0xc0>
 8009188:	e7ea      	b.n	8009160 <__lshift+0xa4>
 800918a:	bf00      	nop
 800918c:	0800a398 	.word	0x0800a398
 8009190:	0800a3a9 	.word	0x0800a3a9

08009194 <__mcmp>:
 8009194:	690a      	ldr	r2, [r1, #16]
 8009196:	4603      	mov	r3, r0
 8009198:	6900      	ldr	r0, [r0, #16]
 800919a:	1a80      	subs	r0, r0, r2
 800919c:	b530      	push	{r4, r5, lr}
 800919e:	d10e      	bne.n	80091be <__mcmp+0x2a>
 80091a0:	3314      	adds	r3, #20
 80091a2:	3114      	adds	r1, #20
 80091a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091b4:	4295      	cmp	r5, r2
 80091b6:	d003      	beq.n	80091c0 <__mcmp+0x2c>
 80091b8:	d205      	bcs.n	80091c6 <__mcmp+0x32>
 80091ba:	f04f 30ff 	mov.w	r0, #4294967295
 80091be:	bd30      	pop	{r4, r5, pc}
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	d3f3      	bcc.n	80091ac <__mcmp+0x18>
 80091c4:	e7fb      	b.n	80091be <__mcmp+0x2a>
 80091c6:	2001      	movs	r0, #1
 80091c8:	e7f9      	b.n	80091be <__mcmp+0x2a>
	...

080091cc <__mdiff>:
 80091cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	4689      	mov	r9, r1
 80091d2:	4606      	mov	r6, r0
 80091d4:	4611      	mov	r1, r2
 80091d6:	4648      	mov	r0, r9
 80091d8:	4614      	mov	r4, r2
 80091da:	f7ff ffdb 	bl	8009194 <__mcmp>
 80091de:	1e05      	subs	r5, r0, #0
 80091e0:	d112      	bne.n	8009208 <__mdiff+0x3c>
 80091e2:	4629      	mov	r1, r5
 80091e4:	4630      	mov	r0, r6
 80091e6:	f7ff fd63 	bl	8008cb0 <_Balloc>
 80091ea:	4602      	mov	r2, r0
 80091ec:	b928      	cbnz	r0, 80091fa <__mdiff+0x2e>
 80091ee:	4b3f      	ldr	r3, [pc, #252]	@ (80092ec <__mdiff+0x120>)
 80091f0:	f240 2137 	movw	r1, #567	@ 0x237
 80091f4:	483e      	ldr	r0, [pc, #248]	@ (80092f0 <__mdiff+0x124>)
 80091f6:	f000 fb11 	bl	800981c <__assert_func>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009200:	4610      	mov	r0, r2
 8009202:	b003      	add	sp, #12
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	bfbc      	itt	lt
 800920a:	464b      	movlt	r3, r9
 800920c:	46a1      	movlt	r9, r4
 800920e:	4630      	mov	r0, r6
 8009210:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009214:	bfba      	itte	lt
 8009216:	461c      	movlt	r4, r3
 8009218:	2501      	movlt	r5, #1
 800921a:	2500      	movge	r5, #0
 800921c:	f7ff fd48 	bl	8008cb0 <_Balloc>
 8009220:	4602      	mov	r2, r0
 8009222:	b918      	cbnz	r0, 800922c <__mdiff+0x60>
 8009224:	4b31      	ldr	r3, [pc, #196]	@ (80092ec <__mdiff+0x120>)
 8009226:	f240 2145 	movw	r1, #581	@ 0x245
 800922a:	e7e3      	b.n	80091f4 <__mdiff+0x28>
 800922c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009230:	6926      	ldr	r6, [r4, #16]
 8009232:	60c5      	str	r5, [r0, #12]
 8009234:	f109 0310 	add.w	r3, r9, #16
 8009238:	f109 0514 	add.w	r5, r9, #20
 800923c:	f104 0e14 	add.w	lr, r4, #20
 8009240:	f100 0b14 	add.w	fp, r0, #20
 8009244:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009248:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	46d9      	mov	r9, fp
 8009250:	f04f 0c00 	mov.w	ip, #0
 8009254:	9b01      	ldr	r3, [sp, #4]
 8009256:	f85e 0b04 	ldr.w	r0, [lr], #4
 800925a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	fa1f f38a 	uxth.w	r3, sl
 8009264:	4619      	mov	r1, r3
 8009266:	b283      	uxth	r3, r0
 8009268:	1acb      	subs	r3, r1, r3
 800926a:	0c00      	lsrs	r0, r0, #16
 800926c:	4463      	add	r3, ip
 800926e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009272:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009276:	b29b      	uxth	r3, r3
 8009278:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800927c:	4576      	cmp	r6, lr
 800927e:	f849 3b04 	str.w	r3, [r9], #4
 8009282:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009286:	d8e5      	bhi.n	8009254 <__mdiff+0x88>
 8009288:	1b33      	subs	r3, r6, r4
 800928a:	3b15      	subs	r3, #21
 800928c:	f023 0303 	bic.w	r3, r3, #3
 8009290:	3415      	adds	r4, #21
 8009292:	3304      	adds	r3, #4
 8009294:	42a6      	cmp	r6, r4
 8009296:	bf38      	it	cc
 8009298:	2304      	movcc	r3, #4
 800929a:	441d      	add	r5, r3
 800929c:	445b      	add	r3, fp
 800929e:	461e      	mov	r6, r3
 80092a0:	462c      	mov	r4, r5
 80092a2:	4544      	cmp	r4, r8
 80092a4:	d30e      	bcc.n	80092c4 <__mdiff+0xf8>
 80092a6:	f108 0103 	add.w	r1, r8, #3
 80092aa:	1b49      	subs	r1, r1, r5
 80092ac:	f021 0103 	bic.w	r1, r1, #3
 80092b0:	3d03      	subs	r5, #3
 80092b2:	45a8      	cmp	r8, r5
 80092b4:	bf38      	it	cc
 80092b6:	2100      	movcc	r1, #0
 80092b8:	440b      	add	r3, r1
 80092ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092be:	b191      	cbz	r1, 80092e6 <__mdiff+0x11a>
 80092c0:	6117      	str	r7, [r2, #16]
 80092c2:	e79d      	b.n	8009200 <__mdiff+0x34>
 80092c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80092c8:	46e6      	mov	lr, ip
 80092ca:	0c08      	lsrs	r0, r1, #16
 80092cc:	fa1c fc81 	uxtah	ip, ip, r1
 80092d0:	4471      	add	r1, lr
 80092d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80092d6:	b289      	uxth	r1, r1
 80092d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092dc:	f846 1b04 	str.w	r1, [r6], #4
 80092e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092e4:	e7dd      	b.n	80092a2 <__mdiff+0xd6>
 80092e6:	3f01      	subs	r7, #1
 80092e8:	e7e7      	b.n	80092ba <__mdiff+0xee>
 80092ea:	bf00      	nop
 80092ec:	0800a398 	.word	0x0800a398
 80092f0:	0800a3a9 	.word	0x0800a3a9

080092f4 <__d2b>:
 80092f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	460f      	mov	r7, r1
 80092fa:	2101      	movs	r1, #1
 80092fc:	ec59 8b10 	vmov	r8, r9, d0
 8009300:	4616      	mov	r6, r2
 8009302:	f7ff fcd5 	bl	8008cb0 <_Balloc>
 8009306:	4604      	mov	r4, r0
 8009308:	b930      	cbnz	r0, 8009318 <__d2b+0x24>
 800930a:	4602      	mov	r2, r0
 800930c:	4b23      	ldr	r3, [pc, #140]	@ (800939c <__d2b+0xa8>)
 800930e:	4824      	ldr	r0, [pc, #144]	@ (80093a0 <__d2b+0xac>)
 8009310:	f240 310f 	movw	r1, #783	@ 0x30f
 8009314:	f000 fa82 	bl	800981c <__assert_func>
 8009318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800931c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009320:	b10d      	cbz	r5, 8009326 <__d2b+0x32>
 8009322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	f1b8 0300 	subs.w	r3, r8, #0
 800932c:	d023      	beq.n	8009376 <__d2b+0x82>
 800932e:	4668      	mov	r0, sp
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	f7ff fd84 	bl	8008e3e <__lo0bits>
 8009336:	e9dd 1200 	ldrd	r1, r2, [sp]
 800933a:	b1d0      	cbz	r0, 8009372 <__d2b+0x7e>
 800933c:	f1c0 0320 	rsb	r3, r0, #32
 8009340:	fa02 f303 	lsl.w	r3, r2, r3
 8009344:	430b      	orrs	r3, r1
 8009346:	40c2      	lsrs	r2, r0
 8009348:	6163      	str	r3, [r4, #20]
 800934a:	9201      	str	r2, [sp, #4]
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	61a3      	str	r3, [r4, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	bf0c      	ite	eq
 8009354:	2201      	moveq	r2, #1
 8009356:	2202      	movne	r2, #2
 8009358:	6122      	str	r2, [r4, #16]
 800935a:	b1a5      	cbz	r5, 8009386 <__d2b+0x92>
 800935c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009360:	4405      	add	r5, r0
 8009362:	603d      	str	r5, [r7, #0]
 8009364:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009368:	6030      	str	r0, [r6, #0]
 800936a:	4620      	mov	r0, r4
 800936c:	b003      	add	sp, #12
 800936e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009372:	6161      	str	r1, [r4, #20]
 8009374:	e7ea      	b.n	800934c <__d2b+0x58>
 8009376:	a801      	add	r0, sp, #4
 8009378:	f7ff fd61 	bl	8008e3e <__lo0bits>
 800937c:	9b01      	ldr	r3, [sp, #4]
 800937e:	6163      	str	r3, [r4, #20]
 8009380:	3020      	adds	r0, #32
 8009382:	2201      	movs	r2, #1
 8009384:	e7e8      	b.n	8009358 <__d2b+0x64>
 8009386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800938a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800938e:	6038      	str	r0, [r7, #0]
 8009390:	6918      	ldr	r0, [r3, #16]
 8009392:	f7ff fd35 	bl	8008e00 <__hi0bits>
 8009396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800939a:	e7e5      	b.n	8009368 <__d2b+0x74>
 800939c:	0800a398 	.word	0x0800a398
 80093a0:	0800a3a9 	.word	0x0800a3a9

080093a4 <__ssputs_r>:
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	688e      	ldr	r6, [r1, #8]
 80093aa:	461f      	mov	r7, r3
 80093ac:	42be      	cmp	r6, r7
 80093ae:	680b      	ldr	r3, [r1, #0]
 80093b0:	4682      	mov	sl, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4690      	mov	r8, r2
 80093b6:	d82d      	bhi.n	8009414 <__ssputs_r+0x70>
 80093b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093c0:	d026      	beq.n	8009410 <__ssputs_r+0x6c>
 80093c2:	6965      	ldr	r5, [r4, #20]
 80093c4:	6909      	ldr	r1, [r1, #16]
 80093c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093ca:	eba3 0901 	sub.w	r9, r3, r1
 80093ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093d2:	1c7b      	adds	r3, r7, #1
 80093d4:	444b      	add	r3, r9
 80093d6:	106d      	asrs	r5, r5, #1
 80093d8:	429d      	cmp	r5, r3
 80093da:	bf38      	it	cc
 80093dc:	461d      	movcc	r5, r3
 80093de:	0553      	lsls	r3, r2, #21
 80093e0:	d527      	bpl.n	8009432 <__ssputs_r+0x8e>
 80093e2:	4629      	mov	r1, r5
 80093e4:	f7ff fbd8 	bl	8008b98 <_malloc_r>
 80093e8:	4606      	mov	r6, r0
 80093ea:	b360      	cbz	r0, 8009446 <__ssputs_r+0xa2>
 80093ec:	6921      	ldr	r1, [r4, #16]
 80093ee:	464a      	mov	r2, r9
 80093f0:	f000 fa06 	bl	8009800 <memcpy>
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093fe:	81a3      	strh	r3, [r4, #12]
 8009400:	6126      	str	r6, [r4, #16]
 8009402:	6165      	str	r5, [r4, #20]
 8009404:	444e      	add	r6, r9
 8009406:	eba5 0509 	sub.w	r5, r5, r9
 800940a:	6026      	str	r6, [r4, #0]
 800940c:	60a5      	str	r5, [r4, #8]
 800940e:	463e      	mov	r6, r7
 8009410:	42be      	cmp	r6, r7
 8009412:	d900      	bls.n	8009416 <__ssputs_r+0x72>
 8009414:	463e      	mov	r6, r7
 8009416:	6820      	ldr	r0, [r4, #0]
 8009418:	4632      	mov	r2, r6
 800941a:	4641      	mov	r1, r8
 800941c:	f000 f9c6 	bl	80097ac <memmove>
 8009420:	68a3      	ldr	r3, [r4, #8]
 8009422:	1b9b      	subs	r3, r3, r6
 8009424:	60a3      	str	r3, [r4, #8]
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	4433      	add	r3, r6
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	2000      	movs	r0, #0
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	462a      	mov	r2, r5
 8009434:	f000 fa36 	bl	80098a4 <_realloc_r>
 8009438:	4606      	mov	r6, r0
 800943a:	2800      	cmp	r0, #0
 800943c:	d1e0      	bne.n	8009400 <__ssputs_r+0x5c>
 800943e:	6921      	ldr	r1, [r4, #16]
 8009440:	4650      	mov	r0, sl
 8009442:	f7ff fb35 	bl	8008ab0 <_free_r>
 8009446:	230c      	movs	r3, #12
 8009448:	f8ca 3000 	str.w	r3, [sl]
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009452:	81a3      	strh	r3, [r4, #12]
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	e7e9      	b.n	800942e <__ssputs_r+0x8a>
	...

0800945c <_svfiprintf_r>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	4698      	mov	r8, r3
 8009462:	898b      	ldrh	r3, [r1, #12]
 8009464:	061b      	lsls	r3, r3, #24
 8009466:	b09d      	sub	sp, #116	@ 0x74
 8009468:	4607      	mov	r7, r0
 800946a:	460d      	mov	r5, r1
 800946c:	4614      	mov	r4, r2
 800946e:	d510      	bpl.n	8009492 <_svfiprintf_r+0x36>
 8009470:	690b      	ldr	r3, [r1, #16]
 8009472:	b973      	cbnz	r3, 8009492 <_svfiprintf_r+0x36>
 8009474:	2140      	movs	r1, #64	@ 0x40
 8009476:	f7ff fb8f 	bl	8008b98 <_malloc_r>
 800947a:	6028      	str	r0, [r5, #0]
 800947c:	6128      	str	r0, [r5, #16]
 800947e:	b930      	cbnz	r0, 800948e <_svfiprintf_r+0x32>
 8009480:	230c      	movs	r3, #12
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	f04f 30ff 	mov.w	r0, #4294967295
 8009488:	b01d      	add	sp, #116	@ 0x74
 800948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948e:	2340      	movs	r3, #64	@ 0x40
 8009490:	616b      	str	r3, [r5, #20]
 8009492:	2300      	movs	r3, #0
 8009494:	9309      	str	r3, [sp, #36]	@ 0x24
 8009496:	2320      	movs	r3, #32
 8009498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800949c:	f8cd 800c 	str.w	r8, [sp, #12]
 80094a0:	2330      	movs	r3, #48	@ 0x30
 80094a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009640 <_svfiprintf_r+0x1e4>
 80094a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094aa:	f04f 0901 	mov.w	r9, #1
 80094ae:	4623      	mov	r3, r4
 80094b0:	469a      	mov	sl, r3
 80094b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094b6:	b10a      	cbz	r2, 80094bc <_svfiprintf_r+0x60>
 80094b8:	2a25      	cmp	r2, #37	@ 0x25
 80094ba:	d1f9      	bne.n	80094b0 <_svfiprintf_r+0x54>
 80094bc:	ebba 0b04 	subs.w	fp, sl, r4
 80094c0:	d00b      	beq.n	80094da <_svfiprintf_r+0x7e>
 80094c2:	465b      	mov	r3, fp
 80094c4:	4622      	mov	r2, r4
 80094c6:	4629      	mov	r1, r5
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7ff ff6b 	bl	80093a4 <__ssputs_r>
 80094ce:	3001      	adds	r0, #1
 80094d0:	f000 80a7 	beq.w	8009622 <_svfiprintf_r+0x1c6>
 80094d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d6:	445a      	add	r2, fp
 80094d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80094da:	f89a 3000 	ldrb.w	r3, [sl]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 809f 	beq.w	8009622 <_svfiprintf_r+0x1c6>
 80094e4:	2300      	movs	r3, #0
 80094e6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ee:	f10a 0a01 	add.w	sl, sl, #1
 80094f2:	9304      	str	r3, [sp, #16]
 80094f4:	9307      	str	r3, [sp, #28]
 80094f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80094fc:	4654      	mov	r4, sl
 80094fe:	2205      	movs	r2, #5
 8009500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009504:	484e      	ldr	r0, [pc, #312]	@ (8009640 <_svfiprintf_r+0x1e4>)
 8009506:	f7f6 fe73 	bl	80001f0 <memchr>
 800950a:	9a04      	ldr	r2, [sp, #16]
 800950c:	b9d8      	cbnz	r0, 8009546 <_svfiprintf_r+0xea>
 800950e:	06d0      	lsls	r0, r2, #27
 8009510:	bf44      	itt	mi
 8009512:	2320      	movmi	r3, #32
 8009514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009518:	0711      	lsls	r1, r2, #28
 800951a:	bf44      	itt	mi
 800951c:	232b      	movmi	r3, #43	@ 0x2b
 800951e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009522:	f89a 3000 	ldrb.w	r3, [sl]
 8009526:	2b2a      	cmp	r3, #42	@ 0x2a
 8009528:	d015      	beq.n	8009556 <_svfiprintf_r+0xfa>
 800952a:	9a07      	ldr	r2, [sp, #28]
 800952c:	4654      	mov	r4, sl
 800952e:	2000      	movs	r0, #0
 8009530:	f04f 0c0a 	mov.w	ip, #10
 8009534:	4621      	mov	r1, r4
 8009536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800953a:	3b30      	subs	r3, #48	@ 0x30
 800953c:	2b09      	cmp	r3, #9
 800953e:	d94b      	bls.n	80095d8 <_svfiprintf_r+0x17c>
 8009540:	b1b0      	cbz	r0, 8009570 <_svfiprintf_r+0x114>
 8009542:	9207      	str	r2, [sp, #28]
 8009544:	e014      	b.n	8009570 <_svfiprintf_r+0x114>
 8009546:	eba0 0308 	sub.w	r3, r0, r8
 800954a:	fa09 f303 	lsl.w	r3, r9, r3
 800954e:	4313      	orrs	r3, r2
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	46a2      	mov	sl, r4
 8009554:	e7d2      	b.n	80094fc <_svfiprintf_r+0xa0>
 8009556:	9b03      	ldr	r3, [sp, #12]
 8009558:	1d19      	adds	r1, r3, #4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	9103      	str	r1, [sp, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	bfbb      	ittet	lt
 8009562:	425b      	neglt	r3, r3
 8009564:	f042 0202 	orrlt.w	r2, r2, #2
 8009568:	9307      	strge	r3, [sp, #28]
 800956a:	9307      	strlt	r3, [sp, #28]
 800956c:	bfb8      	it	lt
 800956e:	9204      	strlt	r2, [sp, #16]
 8009570:	7823      	ldrb	r3, [r4, #0]
 8009572:	2b2e      	cmp	r3, #46	@ 0x2e
 8009574:	d10a      	bne.n	800958c <_svfiprintf_r+0x130>
 8009576:	7863      	ldrb	r3, [r4, #1]
 8009578:	2b2a      	cmp	r3, #42	@ 0x2a
 800957a:	d132      	bne.n	80095e2 <_svfiprintf_r+0x186>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	1d1a      	adds	r2, r3, #4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	9203      	str	r2, [sp, #12]
 8009584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009588:	3402      	adds	r4, #2
 800958a:	9305      	str	r3, [sp, #20]
 800958c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009650 <_svfiprintf_r+0x1f4>
 8009590:	7821      	ldrb	r1, [r4, #0]
 8009592:	2203      	movs	r2, #3
 8009594:	4650      	mov	r0, sl
 8009596:	f7f6 fe2b 	bl	80001f0 <memchr>
 800959a:	b138      	cbz	r0, 80095ac <_svfiprintf_r+0x150>
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	eba0 000a 	sub.w	r0, r0, sl
 80095a2:	2240      	movs	r2, #64	@ 0x40
 80095a4:	4082      	lsls	r2, r0
 80095a6:	4313      	orrs	r3, r2
 80095a8:	3401      	adds	r4, #1
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b0:	4824      	ldr	r0, [pc, #144]	@ (8009644 <_svfiprintf_r+0x1e8>)
 80095b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095b6:	2206      	movs	r2, #6
 80095b8:	f7f6 fe1a 	bl	80001f0 <memchr>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d036      	beq.n	800962e <_svfiprintf_r+0x1d2>
 80095c0:	4b21      	ldr	r3, [pc, #132]	@ (8009648 <_svfiprintf_r+0x1ec>)
 80095c2:	bb1b      	cbnz	r3, 800960c <_svfiprintf_r+0x1b0>
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	3307      	adds	r3, #7
 80095c8:	f023 0307 	bic.w	r3, r3, #7
 80095cc:	3308      	adds	r3, #8
 80095ce:	9303      	str	r3, [sp, #12]
 80095d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d2:	4433      	add	r3, r6
 80095d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d6:	e76a      	b.n	80094ae <_svfiprintf_r+0x52>
 80095d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095dc:	460c      	mov	r4, r1
 80095de:	2001      	movs	r0, #1
 80095e0:	e7a8      	b.n	8009534 <_svfiprintf_r+0xd8>
 80095e2:	2300      	movs	r3, #0
 80095e4:	3401      	adds	r4, #1
 80095e6:	9305      	str	r3, [sp, #20]
 80095e8:	4619      	mov	r1, r3
 80095ea:	f04f 0c0a 	mov.w	ip, #10
 80095ee:	4620      	mov	r0, r4
 80095f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f4:	3a30      	subs	r2, #48	@ 0x30
 80095f6:	2a09      	cmp	r2, #9
 80095f8:	d903      	bls.n	8009602 <_svfiprintf_r+0x1a6>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0c6      	beq.n	800958c <_svfiprintf_r+0x130>
 80095fe:	9105      	str	r1, [sp, #20]
 8009600:	e7c4      	b.n	800958c <_svfiprintf_r+0x130>
 8009602:	fb0c 2101 	mla	r1, ip, r1, r2
 8009606:	4604      	mov	r4, r0
 8009608:	2301      	movs	r3, #1
 800960a:	e7f0      	b.n	80095ee <_svfiprintf_r+0x192>
 800960c:	ab03      	add	r3, sp, #12
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	462a      	mov	r2, r5
 8009612:	4b0e      	ldr	r3, [pc, #56]	@ (800964c <_svfiprintf_r+0x1f0>)
 8009614:	a904      	add	r1, sp, #16
 8009616:	4638      	mov	r0, r7
 8009618:	f7fd fe80 	bl	800731c <_printf_float>
 800961c:	1c42      	adds	r2, r0, #1
 800961e:	4606      	mov	r6, r0
 8009620:	d1d6      	bne.n	80095d0 <_svfiprintf_r+0x174>
 8009622:	89ab      	ldrh	r3, [r5, #12]
 8009624:	065b      	lsls	r3, r3, #25
 8009626:	f53f af2d 	bmi.w	8009484 <_svfiprintf_r+0x28>
 800962a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800962c:	e72c      	b.n	8009488 <_svfiprintf_r+0x2c>
 800962e:	ab03      	add	r3, sp, #12
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	462a      	mov	r2, r5
 8009634:	4b05      	ldr	r3, [pc, #20]	@ (800964c <_svfiprintf_r+0x1f0>)
 8009636:	a904      	add	r1, sp, #16
 8009638:	4638      	mov	r0, r7
 800963a:	f7fe f907 	bl	800784c <_printf_i>
 800963e:	e7ed      	b.n	800961c <_svfiprintf_r+0x1c0>
 8009640:	0800a402 	.word	0x0800a402
 8009644:	0800a40c 	.word	0x0800a40c
 8009648:	0800731d 	.word	0x0800731d
 800964c:	080093a5 	.word	0x080093a5
 8009650:	0800a408 	.word	0x0800a408

08009654 <__sflush_r>:
 8009654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965c:	0716      	lsls	r6, r2, #28
 800965e:	4605      	mov	r5, r0
 8009660:	460c      	mov	r4, r1
 8009662:	d454      	bmi.n	800970e <__sflush_r+0xba>
 8009664:	684b      	ldr	r3, [r1, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	dc02      	bgt.n	8009670 <__sflush_r+0x1c>
 800966a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	dd48      	ble.n	8009702 <__sflush_r+0xae>
 8009670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009672:	2e00      	cmp	r6, #0
 8009674:	d045      	beq.n	8009702 <__sflush_r+0xae>
 8009676:	2300      	movs	r3, #0
 8009678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800967c:	682f      	ldr	r7, [r5, #0]
 800967e:	6a21      	ldr	r1, [r4, #32]
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	d030      	beq.n	80096e6 <__sflush_r+0x92>
 8009684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	0759      	lsls	r1, r3, #29
 800968a:	d505      	bpl.n	8009698 <__sflush_r+0x44>
 800968c:	6863      	ldr	r3, [r4, #4]
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009692:	b10b      	cbz	r3, 8009698 <__sflush_r+0x44>
 8009694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009696:	1ad2      	subs	r2, r2, r3
 8009698:	2300      	movs	r3, #0
 800969a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800969c:	6a21      	ldr	r1, [r4, #32]
 800969e:	4628      	mov	r0, r5
 80096a0:	47b0      	blx	r6
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	d106      	bne.n	80096b6 <__sflush_r+0x62>
 80096a8:	6829      	ldr	r1, [r5, #0]
 80096aa:	291d      	cmp	r1, #29
 80096ac:	d82b      	bhi.n	8009706 <__sflush_r+0xb2>
 80096ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009758 <__sflush_r+0x104>)
 80096b0:	40ca      	lsrs	r2, r1
 80096b2:	07d6      	lsls	r6, r2, #31
 80096b4:	d527      	bpl.n	8009706 <__sflush_r+0xb2>
 80096b6:	2200      	movs	r2, #0
 80096b8:	6062      	str	r2, [r4, #4]
 80096ba:	04d9      	lsls	r1, r3, #19
 80096bc:	6922      	ldr	r2, [r4, #16]
 80096be:	6022      	str	r2, [r4, #0]
 80096c0:	d504      	bpl.n	80096cc <__sflush_r+0x78>
 80096c2:	1c42      	adds	r2, r0, #1
 80096c4:	d101      	bne.n	80096ca <__sflush_r+0x76>
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	b903      	cbnz	r3, 80096cc <__sflush_r+0x78>
 80096ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80096cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096ce:	602f      	str	r7, [r5, #0]
 80096d0:	b1b9      	cbz	r1, 8009702 <__sflush_r+0xae>
 80096d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096d6:	4299      	cmp	r1, r3
 80096d8:	d002      	beq.n	80096e0 <__sflush_r+0x8c>
 80096da:	4628      	mov	r0, r5
 80096dc:	f7ff f9e8 	bl	8008ab0 <_free_r>
 80096e0:	2300      	movs	r3, #0
 80096e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80096e4:	e00d      	b.n	8009702 <__sflush_r+0xae>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4628      	mov	r0, r5
 80096ea:	47b0      	blx	r6
 80096ec:	4602      	mov	r2, r0
 80096ee:	1c50      	adds	r0, r2, #1
 80096f0:	d1c9      	bne.n	8009686 <__sflush_r+0x32>
 80096f2:	682b      	ldr	r3, [r5, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0c6      	beq.n	8009686 <__sflush_r+0x32>
 80096f8:	2b1d      	cmp	r3, #29
 80096fa:	d001      	beq.n	8009700 <__sflush_r+0xac>
 80096fc:	2b16      	cmp	r3, #22
 80096fe:	d11e      	bne.n	800973e <__sflush_r+0xea>
 8009700:	602f      	str	r7, [r5, #0]
 8009702:	2000      	movs	r0, #0
 8009704:	e022      	b.n	800974c <__sflush_r+0xf8>
 8009706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800970a:	b21b      	sxth	r3, r3
 800970c:	e01b      	b.n	8009746 <__sflush_r+0xf2>
 800970e:	690f      	ldr	r7, [r1, #16]
 8009710:	2f00      	cmp	r7, #0
 8009712:	d0f6      	beq.n	8009702 <__sflush_r+0xae>
 8009714:	0793      	lsls	r3, r2, #30
 8009716:	680e      	ldr	r6, [r1, #0]
 8009718:	bf08      	it	eq
 800971a:	694b      	ldreq	r3, [r1, #20]
 800971c:	600f      	str	r7, [r1, #0]
 800971e:	bf18      	it	ne
 8009720:	2300      	movne	r3, #0
 8009722:	eba6 0807 	sub.w	r8, r6, r7
 8009726:	608b      	str	r3, [r1, #8]
 8009728:	f1b8 0f00 	cmp.w	r8, #0
 800972c:	dde9      	ble.n	8009702 <__sflush_r+0xae>
 800972e:	6a21      	ldr	r1, [r4, #32]
 8009730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009732:	4643      	mov	r3, r8
 8009734:	463a      	mov	r2, r7
 8009736:	4628      	mov	r0, r5
 8009738:	47b0      	blx	r6
 800973a:	2800      	cmp	r0, #0
 800973c:	dc08      	bgt.n	8009750 <__sflush_r+0xfc>
 800973e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009750:	4407      	add	r7, r0
 8009752:	eba8 0800 	sub.w	r8, r8, r0
 8009756:	e7e7      	b.n	8009728 <__sflush_r+0xd4>
 8009758:	20400001 	.word	0x20400001

0800975c <_fflush_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	690b      	ldr	r3, [r1, #16]
 8009760:	4605      	mov	r5, r0
 8009762:	460c      	mov	r4, r1
 8009764:	b913      	cbnz	r3, 800976c <_fflush_r+0x10>
 8009766:	2500      	movs	r5, #0
 8009768:	4628      	mov	r0, r5
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	b118      	cbz	r0, 8009776 <_fflush_r+0x1a>
 800976e:	6a03      	ldr	r3, [r0, #32]
 8009770:	b90b      	cbnz	r3, 8009776 <_fflush_r+0x1a>
 8009772:	f7fe fa15 	bl	8007ba0 <__sinit>
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0f3      	beq.n	8009766 <_fflush_r+0xa>
 800977e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009780:	07d0      	lsls	r0, r2, #31
 8009782:	d404      	bmi.n	800978e <_fflush_r+0x32>
 8009784:	0599      	lsls	r1, r3, #22
 8009786:	d402      	bmi.n	800978e <_fflush_r+0x32>
 8009788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800978a:	f7fe fb36 	bl	8007dfa <__retarget_lock_acquire_recursive>
 800978e:	4628      	mov	r0, r5
 8009790:	4621      	mov	r1, r4
 8009792:	f7ff ff5f 	bl	8009654 <__sflush_r>
 8009796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009798:	07da      	lsls	r2, r3, #31
 800979a:	4605      	mov	r5, r0
 800979c:	d4e4      	bmi.n	8009768 <_fflush_r+0xc>
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	059b      	lsls	r3, r3, #22
 80097a2:	d4e1      	bmi.n	8009768 <_fflush_r+0xc>
 80097a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097a6:	f7fe fb29 	bl	8007dfc <__retarget_lock_release_recursive>
 80097aa:	e7dd      	b.n	8009768 <_fflush_r+0xc>

080097ac <memmove>:
 80097ac:	4288      	cmp	r0, r1
 80097ae:	b510      	push	{r4, lr}
 80097b0:	eb01 0402 	add.w	r4, r1, r2
 80097b4:	d902      	bls.n	80097bc <memmove+0x10>
 80097b6:	4284      	cmp	r4, r0
 80097b8:	4623      	mov	r3, r4
 80097ba:	d807      	bhi.n	80097cc <memmove+0x20>
 80097bc:	1e43      	subs	r3, r0, #1
 80097be:	42a1      	cmp	r1, r4
 80097c0:	d008      	beq.n	80097d4 <memmove+0x28>
 80097c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ca:	e7f8      	b.n	80097be <memmove+0x12>
 80097cc:	4402      	add	r2, r0
 80097ce:	4601      	mov	r1, r0
 80097d0:	428a      	cmp	r2, r1
 80097d2:	d100      	bne.n	80097d6 <memmove+0x2a>
 80097d4:	bd10      	pop	{r4, pc}
 80097d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097de:	e7f7      	b.n	80097d0 <memmove+0x24>

080097e0 <_sbrk_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d06      	ldr	r5, [pc, #24]	@ (80097fc <_sbrk_r+0x1c>)
 80097e4:	2300      	movs	r3, #0
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	602b      	str	r3, [r5, #0]
 80097ec:	f7f9 fc18 	bl	8003020 <_sbrk>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d102      	bne.n	80097fa <_sbrk_r+0x1a>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	b103      	cbz	r3, 80097fa <_sbrk_r+0x1a>
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	2000399c 	.word	0x2000399c

08009800 <memcpy>:
 8009800:	440a      	add	r2, r1
 8009802:	4291      	cmp	r1, r2
 8009804:	f100 33ff 	add.w	r3, r0, #4294967295
 8009808:	d100      	bne.n	800980c <memcpy+0xc>
 800980a:	4770      	bx	lr
 800980c:	b510      	push	{r4, lr}
 800980e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009816:	4291      	cmp	r1, r2
 8009818:	d1f9      	bne.n	800980e <memcpy+0xe>
 800981a:	bd10      	pop	{r4, pc}

0800981c <__assert_func>:
 800981c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800981e:	4614      	mov	r4, r2
 8009820:	461a      	mov	r2, r3
 8009822:	4b09      	ldr	r3, [pc, #36]	@ (8009848 <__assert_func+0x2c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4605      	mov	r5, r0
 8009828:	68d8      	ldr	r0, [r3, #12]
 800982a:	b14c      	cbz	r4, 8009840 <__assert_func+0x24>
 800982c:	4b07      	ldr	r3, [pc, #28]	@ (800984c <__assert_func+0x30>)
 800982e:	9100      	str	r1, [sp, #0]
 8009830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009834:	4906      	ldr	r1, [pc, #24]	@ (8009850 <__assert_func+0x34>)
 8009836:	462b      	mov	r3, r5
 8009838:	f000 f870 	bl	800991c <fiprintf>
 800983c:	f000 f880 	bl	8009940 <abort>
 8009840:	4b04      	ldr	r3, [pc, #16]	@ (8009854 <__assert_func+0x38>)
 8009842:	461c      	mov	r4, r3
 8009844:	e7f3      	b.n	800982e <__assert_func+0x12>
 8009846:	bf00      	nop
 8009848:	20000034 	.word	0x20000034
 800984c:	0800a41d 	.word	0x0800a41d
 8009850:	0800a42a 	.word	0x0800a42a
 8009854:	0800a458 	.word	0x0800a458

08009858 <_calloc_r>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	fba1 5402 	umull	r5, r4, r1, r2
 800985e:	b934      	cbnz	r4, 800986e <_calloc_r+0x16>
 8009860:	4629      	mov	r1, r5
 8009862:	f7ff f999 	bl	8008b98 <_malloc_r>
 8009866:	4606      	mov	r6, r0
 8009868:	b928      	cbnz	r0, 8009876 <_calloc_r+0x1e>
 800986a:	4630      	mov	r0, r6
 800986c:	bd70      	pop	{r4, r5, r6, pc}
 800986e:	220c      	movs	r2, #12
 8009870:	6002      	str	r2, [r0, #0]
 8009872:	2600      	movs	r6, #0
 8009874:	e7f9      	b.n	800986a <_calloc_r+0x12>
 8009876:	462a      	mov	r2, r5
 8009878:	4621      	mov	r1, r4
 800987a:	f7fe fa40 	bl	8007cfe <memset>
 800987e:	e7f4      	b.n	800986a <_calloc_r+0x12>

08009880 <__ascii_mbtowc>:
 8009880:	b082      	sub	sp, #8
 8009882:	b901      	cbnz	r1, 8009886 <__ascii_mbtowc+0x6>
 8009884:	a901      	add	r1, sp, #4
 8009886:	b142      	cbz	r2, 800989a <__ascii_mbtowc+0x1a>
 8009888:	b14b      	cbz	r3, 800989e <__ascii_mbtowc+0x1e>
 800988a:	7813      	ldrb	r3, [r2, #0]
 800988c:	600b      	str	r3, [r1, #0]
 800988e:	7812      	ldrb	r2, [r2, #0]
 8009890:	1e10      	subs	r0, r2, #0
 8009892:	bf18      	it	ne
 8009894:	2001      	movne	r0, #1
 8009896:	b002      	add	sp, #8
 8009898:	4770      	bx	lr
 800989a:	4610      	mov	r0, r2
 800989c:	e7fb      	b.n	8009896 <__ascii_mbtowc+0x16>
 800989e:	f06f 0001 	mvn.w	r0, #1
 80098a2:	e7f8      	b.n	8009896 <__ascii_mbtowc+0x16>

080098a4 <_realloc_r>:
 80098a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a8:	4607      	mov	r7, r0
 80098aa:	4614      	mov	r4, r2
 80098ac:	460d      	mov	r5, r1
 80098ae:	b921      	cbnz	r1, 80098ba <_realloc_r+0x16>
 80098b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	4611      	mov	r1, r2
 80098b6:	f7ff b96f 	b.w	8008b98 <_malloc_r>
 80098ba:	b92a      	cbnz	r2, 80098c8 <_realloc_r+0x24>
 80098bc:	f7ff f8f8 	bl	8008ab0 <_free_r>
 80098c0:	4625      	mov	r5, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c8:	f000 f841 	bl	800994e <_malloc_usable_size_r>
 80098cc:	4284      	cmp	r4, r0
 80098ce:	4606      	mov	r6, r0
 80098d0:	d802      	bhi.n	80098d8 <_realloc_r+0x34>
 80098d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098d6:	d8f4      	bhi.n	80098c2 <_realloc_r+0x1e>
 80098d8:	4621      	mov	r1, r4
 80098da:	4638      	mov	r0, r7
 80098dc:	f7ff f95c 	bl	8008b98 <_malloc_r>
 80098e0:	4680      	mov	r8, r0
 80098e2:	b908      	cbnz	r0, 80098e8 <_realloc_r+0x44>
 80098e4:	4645      	mov	r5, r8
 80098e6:	e7ec      	b.n	80098c2 <_realloc_r+0x1e>
 80098e8:	42b4      	cmp	r4, r6
 80098ea:	4622      	mov	r2, r4
 80098ec:	4629      	mov	r1, r5
 80098ee:	bf28      	it	cs
 80098f0:	4632      	movcs	r2, r6
 80098f2:	f7ff ff85 	bl	8009800 <memcpy>
 80098f6:	4629      	mov	r1, r5
 80098f8:	4638      	mov	r0, r7
 80098fa:	f7ff f8d9 	bl	8008ab0 <_free_r>
 80098fe:	e7f1      	b.n	80098e4 <_realloc_r+0x40>

08009900 <__ascii_wctomb>:
 8009900:	4603      	mov	r3, r0
 8009902:	4608      	mov	r0, r1
 8009904:	b141      	cbz	r1, 8009918 <__ascii_wctomb+0x18>
 8009906:	2aff      	cmp	r2, #255	@ 0xff
 8009908:	d904      	bls.n	8009914 <__ascii_wctomb+0x14>
 800990a:	228a      	movs	r2, #138	@ 0x8a
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	f04f 30ff 	mov.w	r0, #4294967295
 8009912:	4770      	bx	lr
 8009914:	700a      	strb	r2, [r1, #0]
 8009916:	2001      	movs	r0, #1
 8009918:	4770      	bx	lr
	...

0800991c <fiprintf>:
 800991c:	b40e      	push	{r1, r2, r3}
 800991e:	b503      	push	{r0, r1, lr}
 8009920:	4601      	mov	r1, r0
 8009922:	ab03      	add	r3, sp, #12
 8009924:	4805      	ldr	r0, [pc, #20]	@ (800993c <fiprintf+0x20>)
 8009926:	f853 2b04 	ldr.w	r2, [r3], #4
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	f000 f83f 	bl	80099b0 <_vfiprintf_r>
 8009932:	b002      	add	sp, #8
 8009934:	f85d eb04 	ldr.w	lr, [sp], #4
 8009938:	b003      	add	sp, #12
 800993a:	4770      	bx	lr
 800993c:	20000034 	.word	0x20000034

08009940 <abort>:
 8009940:	b508      	push	{r3, lr}
 8009942:	2006      	movs	r0, #6
 8009944:	f000 fa08 	bl	8009d58 <raise>
 8009948:	2001      	movs	r0, #1
 800994a:	f7f9 faf1 	bl	8002f30 <_exit>

0800994e <_malloc_usable_size_r>:
 800994e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009952:	1f18      	subs	r0, r3, #4
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfbc      	itt	lt
 8009958:	580b      	ldrlt	r3, [r1, r0]
 800995a:	18c0      	addlt	r0, r0, r3
 800995c:	4770      	bx	lr

0800995e <__sfputc_r>:
 800995e:	6893      	ldr	r3, [r2, #8]
 8009960:	3b01      	subs	r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	b410      	push	{r4}
 8009966:	6093      	str	r3, [r2, #8]
 8009968:	da08      	bge.n	800997c <__sfputc_r+0x1e>
 800996a:	6994      	ldr	r4, [r2, #24]
 800996c:	42a3      	cmp	r3, r4
 800996e:	db01      	blt.n	8009974 <__sfputc_r+0x16>
 8009970:	290a      	cmp	r1, #10
 8009972:	d103      	bne.n	800997c <__sfputc_r+0x1e>
 8009974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009978:	f000 b932 	b.w	8009be0 <__swbuf_r>
 800997c:	6813      	ldr	r3, [r2, #0]
 800997e:	1c58      	adds	r0, r3, #1
 8009980:	6010      	str	r0, [r2, #0]
 8009982:	7019      	strb	r1, [r3, #0]
 8009984:	4608      	mov	r0, r1
 8009986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800998a:	4770      	bx	lr

0800998c <__sfputs_r>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	4606      	mov	r6, r0
 8009990:	460f      	mov	r7, r1
 8009992:	4614      	mov	r4, r2
 8009994:	18d5      	adds	r5, r2, r3
 8009996:	42ac      	cmp	r4, r5
 8009998:	d101      	bne.n	800999e <__sfputs_r+0x12>
 800999a:	2000      	movs	r0, #0
 800999c:	e007      	b.n	80099ae <__sfputs_r+0x22>
 800999e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a2:	463a      	mov	r2, r7
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff ffda 	bl	800995e <__sfputc_r>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d1f3      	bne.n	8009996 <__sfputs_r+0xa>
 80099ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099b0 <_vfiprintf_r>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	460d      	mov	r5, r1
 80099b6:	b09d      	sub	sp, #116	@ 0x74
 80099b8:	4614      	mov	r4, r2
 80099ba:	4698      	mov	r8, r3
 80099bc:	4606      	mov	r6, r0
 80099be:	b118      	cbz	r0, 80099c8 <_vfiprintf_r+0x18>
 80099c0:	6a03      	ldr	r3, [r0, #32]
 80099c2:	b90b      	cbnz	r3, 80099c8 <_vfiprintf_r+0x18>
 80099c4:	f7fe f8ec 	bl	8007ba0 <__sinit>
 80099c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099ca:	07d9      	lsls	r1, r3, #31
 80099cc:	d405      	bmi.n	80099da <_vfiprintf_r+0x2a>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	059a      	lsls	r2, r3, #22
 80099d2:	d402      	bmi.n	80099da <_vfiprintf_r+0x2a>
 80099d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099d6:	f7fe fa10 	bl	8007dfa <__retarget_lock_acquire_recursive>
 80099da:	89ab      	ldrh	r3, [r5, #12]
 80099dc:	071b      	lsls	r3, r3, #28
 80099de:	d501      	bpl.n	80099e4 <_vfiprintf_r+0x34>
 80099e0:	692b      	ldr	r3, [r5, #16]
 80099e2:	b99b      	cbnz	r3, 8009a0c <_vfiprintf_r+0x5c>
 80099e4:	4629      	mov	r1, r5
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 f938 	bl	8009c5c <__swsetup_r>
 80099ec:	b170      	cbz	r0, 8009a0c <_vfiprintf_r+0x5c>
 80099ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099f0:	07dc      	lsls	r4, r3, #31
 80099f2:	d504      	bpl.n	80099fe <_vfiprintf_r+0x4e>
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	b01d      	add	sp, #116	@ 0x74
 80099fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fe:	89ab      	ldrh	r3, [r5, #12]
 8009a00:	0598      	lsls	r0, r3, #22
 8009a02:	d4f7      	bmi.n	80099f4 <_vfiprintf_r+0x44>
 8009a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a06:	f7fe f9f9 	bl	8007dfc <__retarget_lock_release_recursive>
 8009a0a:	e7f3      	b.n	80099f4 <_vfiprintf_r+0x44>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a10:	2320      	movs	r3, #32
 8009a12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a1a:	2330      	movs	r3, #48	@ 0x30
 8009a1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bcc <_vfiprintf_r+0x21c>
 8009a20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a24:	f04f 0901 	mov.w	r9, #1
 8009a28:	4623      	mov	r3, r4
 8009a2a:	469a      	mov	sl, r3
 8009a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a30:	b10a      	cbz	r2, 8009a36 <_vfiprintf_r+0x86>
 8009a32:	2a25      	cmp	r2, #37	@ 0x25
 8009a34:	d1f9      	bne.n	8009a2a <_vfiprintf_r+0x7a>
 8009a36:	ebba 0b04 	subs.w	fp, sl, r4
 8009a3a:	d00b      	beq.n	8009a54 <_vfiprintf_r+0xa4>
 8009a3c:	465b      	mov	r3, fp
 8009a3e:	4622      	mov	r2, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ffa2 	bl	800998c <__sfputs_r>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f000 80a7 	beq.w	8009b9c <_vfiprintf_r+0x1ec>
 8009a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a50:	445a      	add	r2, fp
 8009a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a54:	f89a 3000 	ldrb.w	r3, [sl]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 809f 	beq.w	8009b9c <_vfiprintf_r+0x1ec>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295
 8009a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a68:	f10a 0a01 	add.w	sl, sl, #1
 8009a6c:	9304      	str	r3, [sp, #16]
 8009a6e:	9307      	str	r3, [sp, #28]
 8009a70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a76:	4654      	mov	r4, sl
 8009a78:	2205      	movs	r2, #5
 8009a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a7e:	4853      	ldr	r0, [pc, #332]	@ (8009bcc <_vfiprintf_r+0x21c>)
 8009a80:	f7f6 fbb6 	bl	80001f0 <memchr>
 8009a84:	9a04      	ldr	r2, [sp, #16]
 8009a86:	b9d8      	cbnz	r0, 8009ac0 <_vfiprintf_r+0x110>
 8009a88:	06d1      	lsls	r1, r2, #27
 8009a8a:	bf44      	itt	mi
 8009a8c:	2320      	movmi	r3, #32
 8009a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a92:	0713      	lsls	r3, r2, #28
 8009a94:	bf44      	itt	mi
 8009a96:	232b      	movmi	r3, #43	@ 0x2b
 8009a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aa2:	d015      	beq.n	8009ad0 <_vfiprintf_r+0x120>
 8009aa4:	9a07      	ldr	r2, [sp, #28]
 8009aa6:	4654      	mov	r4, sl
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f04f 0c0a 	mov.w	ip, #10
 8009aae:	4621      	mov	r1, r4
 8009ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ab4:	3b30      	subs	r3, #48	@ 0x30
 8009ab6:	2b09      	cmp	r3, #9
 8009ab8:	d94b      	bls.n	8009b52 <_vfiprintf_r+0x1a2>
 8009aba:	b1b0      	cbz	r0, 8009aea <_vfiprintf_r+0x13a>
 8009abc:	9207      	str	r2, [sp, #28]
 8009abe:	e014      	b.n	8009aea <_vfiprintf_r+0x13a>
 8009ac0:	eba0 0308 	sub.w	r3, r0, r8
 8009ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	46a2      	mov	sl, r4
 8009ace:	e7d2      	b.n	8009a76 <_vfiprintf_r+0xc6>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	1d19      	adds	r1, r3, #4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	9103      	str	r1, [sp, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	bfbb      	ittet	lt
 8009adc:	425b      	neglt	r3, r3
 8009ade:	f042 0202 	orrlt.w	r2, r2, #2
 8009ae2:	9307      	strge	r3, [sp, #28]
 8009ae4:	9307      	strlt	r3, [sp, #28]
 8009ae6:	bfb8      	it	lt
 8009ae8:	9204      	strlt	r2, [sp, #16]
 8009aea:	7823      	ldrb	r3, [r4, #0]
 8009aec:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aee:	d10a      	bne.n	8009b06 <_vfiprintf_r+0x156>
 8009af0:	7863      	ldrb	r3, [r4, #1]
 8009af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009af4:	d132      	bne.n	8009b5c <_vfiprintf_r+0x1ac>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	1d1a      	adds	r2, r3, #4
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	9203      	str	r2, [sp, #12]
 8009afe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b02:	3402      	adds	r4, #2
 8009b04:	9305      	str	r3, [sp, #20]
 8009b06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009bdc <_vfiprintf_r+0x22c>
 8009b0a:	7821      	ldrb	r1, [r4, #0]
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	4650      	mov	r0, sl
 8009b10:	f7f6 fb6e 	bl	80001f0 <memchr>
 8009b14:	b138      	cbz	r0, 8009b26 <_vfiprintf_r+0x176>
 8009b16:	9b04      	ldr	r3, [sp, #16]
 8009b18:	eba0 000a 	sub.w	r0, r0, sl
 8009b1c:	2240      	movs	r2, #64	@ 0x40
 8009b1e:	4082      	lsls	r2, r0
 8009b20:	4313      	orrs	r3, r2
 8009b22:	3401      	adds	r4, #1
 8009b24:	9304      	str	r3, [sp, #16]
 8009b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2a:	4829      	ldr	r0, [pc, #164]	@ (8009bd0 <_vfiprintf_r+0x220>)
 8009b2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b30:	2206      	movs	r2, #6
 8009b32:	f7f6 fb5d 	bl	80001f0 <memchr>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d03f      	beq.n	8009bba <_vfiprintf_r+0x20a>
 8009b3a:	4b26      	ldr	r3, [pc, #152]	@ (8009bd4 <_vfiprintf_r+0x224>)
 8009b3c:	bb1b      	cbnz	r3, 8009b86 <_vfiprintf_r+0x1d6>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	3307      	adds	r3, #7
 8009b42:	f023 0307 	bic.w	r3, r3, #7
 8009b46:	3308      	adds	r3, #8
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b4c:	443b      	add	r3, r7
 8009b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b50:	e76a      	b.n	8009a28 <_vfiprintf_r+0x78>
 8009b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b56:	460c      	mov	r4, r1
 8009b58:	2001      	movs	r0, #1
 8009b5a:	e7a8      	b.n	8009aae <_vfiprintf_r+0xfe>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	3401      	adds	r4, #1
 8009b60:	9305      	str	r3, [sp, #20]
 8009b62:	4619      	mov	r1, r3
 8009b64:	f04f 0c0a 	mov.w	ip, #10
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b6e:	3a30      	subs	r2, #48	@ 0x30
 8009b70:	2a09      	cmp	r2, #9
 8009b72:	d903      	bls.n	8009b7c <_vfiprintf_r+0x1cc>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0c6      	beq.n	8009b06 <_vfiprintf_r+0x156>
 8009b78:	9105      	str	r1, [sp, #20]
 8009b7a:	e7c4      	b.n	8009b06 <_vfiprintf_r+0x156>
 8009b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b80:	4604      	mov	r4, r0
 8009b82:	2301      	movs	r3, #1
 8009b84:	e7f0      	b.n	8009b68 <_vfiprintf_r+0x1b8>
 8009b86:	ab03      	add	r3, sp, #12
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	462a      	mov	r2, r5
 8009b8c:	4b12      	ldr	r3, [pc, #72]	@ (8009bd8 <_vfiprintf_r+0x228>)
 8009b8e:	a904      	add	r1, sp, #16
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7fd fbc3 	bl	800731c <_printf_float>
 8009b96:	4607      	mov	r7, r0
 8009b98:	1c78      	adds	r0, r7, #1
 8009b9a:	d1d6      	bne.n	8009b4a <_vfiprintf_r+0x19a>
 8009b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b9e:	07d9      	lsls	r1, r3, #31
 8009ba0:	d405      	bmi.n	8009bae <_vfiprintf_r+0x1fe>
 8009ba2:	89ab      	ldrh	r3, [r5, #12]
 8009ba4:	059a      	lsls	r2, r3, #22
 8009ba6:	d402      	bmi.n	8009bae <_vfiprintf_r+0x1fe>
 8009ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009baa:	f7fe f927 	bl	8007dfc <__retarget_lock_release_recursive>
 8009bae:	89ab      	ldrh	r3, [r5, #12]
 8009bb0:	065b      	lsls	r3, r3, #25
 8009bb2:	f53f af1f 	bmi.w	80099f4 <_vfiprintf_r+0x44>
 8009bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bb8:	e71e      	b.n	80099f8 <_vfiprintf_r+0x48>
 8009bba:	ab03      	add	r3, sp, #12
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	462a      	mov	r2, r5
 8009bc0:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <_vfiprintf_r+0x228>)
 8009bc2:	a904      	add	r1, sp, #16
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7fd fe41 	bl	800784c <_printf_i>
 8009bca:	e7e4      	b.n	8009b96 <_vfiprintf_r+0x1e6>
 8009bcc:	0800a402 	.word	0x0800a402
 8009bd0:	0800a40c 	.word	0x0800a40c
 8009bd4:	0800731d 	.word	0x0800731d
 8009bd8:	0800998d 	.word	0x0800998d
 8009bdc:	0800a408 	.word	0x0800a408

08009be0 <__swbuf_r>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	460e      	mov	r6, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	4605      	mov	r5, r0
 8009be8:	b118      	cbz	r0, 8009bf2 <__swbuf_r+0x12>
 8009bea:	6a03      	ldr	r3, [r0, #32]
 8009bec:	b90b      	cbnz	r3, 8009bf2 <__swbuf_r+0x12>
 8009bee:	f7fd ffd7 	bl	8007ba0 <__sinit>
 8009bf2:	69a3      	ldr	r3, [r4, #24]
 8009bf4:	60a3      	str	r3, [r4, #8]
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	071a      	lsls	r2, r3, #28
 8009bfa:	d501      	bpl.n	8009c00 <__swbuf_r+0x20>
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	b943      	cbnz	r3, 8009c12 <__swbuf_r+0x32>
 8009c00:	4621      	mov	r1, r4
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 f82a 	bl	8009c5c <__swsetup_r>
 8009c08:	b118      	cbz	r0, 8009c12 <__swbuf_r+0x32>
 8009c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c0e:	4638      	mov	r0, r7
 8009c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	6922      	ldr	r2, [r4, #16]
 8009c16:	1a98      	subs	r0, r3, r2
 8009c18:	6963      	ldr	r3, [r4, #20]
 8009c1a:	b2f6      	uxtb	r6, r6
 8009c1c:	4283      	cmp	r3, r0
 8009c1e:	4637      	mov	r7, r6
 8009c20:	dc05      	bgt.n	8009c2e <__swbuf_r+0x4e>
 8009c22:	4621      	mov	r1, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f7ff fd99 	bl	800975c <_fflush_r>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d1ed      	bne.n	8009c0a <__swbuf_r+0x2a>
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	60a3      	str	r3, [r4, #8]
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	6022      	str	r2, [r4, #0]
 8009c3a:	701e      	strb	r6, [r3, #0]
 8009c3c:	6962      	ldr	r2, [r4, #20]
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d004      	beq.n	8009c4e <__swbuf_r+0x6e>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	07db      	lsls	r3, r3, #31
 8009c48:	d5e1      	bpl.n	8009c0e <__swbuf_r+0x2e>
 8009c4a:	2e0a      	cmp	r6, #10
 8009c4c:	d1df      	bne.n	8009c0e <__swbuf_r+0x2e>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f7ff fd83 	bl	800975c <_fflush_r>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0d9      	beq.n	8009c0e <__swbuf_r+0x2e>
 8009c5a:	e7d6      	b.n	8009c0a <__swbuf_r+0x2a>

08009c5c <__swsetup_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4b29      	ldr	r3, [pc, #164]	@ (8009d04 <__swsetup_r+0xa8>)
 8009c60:	4605      	mov	r5, r0
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	460c      	mov	r4, r1
 8009c66:	b118      	cbz	r0, 8009c70 <__swsetup_r+0x14>
 8009c68:	6a03      	ldr	r3, [r0, #32]
 8009c6a:	b90b      	cbnz	r3, 8009c70 <__swsetup_r+0x14>
 8009c6c:	f7fd ff98 	bl	8007ba0 <__sinit>
 8009c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c74:	0719      	lsls	r1, r3, #28
 8009c76:	d422      	bmi.n	8009cbe <__swsetup_r+0x62>
 8009c78:	06da      	lsls	r2, r3, #27
 8009c7a:	d407      	bmi.n	8009c8c <__swsetup_r+0x30>
 8009c7c:	2209      	movs	r2, #9
 8009c7e:	602a      	str	r2, [r5, #0]
 8009c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8a:	e033      	b.n	8009cf4 <__swsetup_r+0x98>
 8009c8c:	0758      	lsls	r0, r3, #29
 8009c8e:	d512      	bpl.n	8009cb6 <__swsetup_r+0x5a>
 8009c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c92:	b141      	cbz	r1, 8009ca6 <__swsetup_r+0x4a>
 8009c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c98:	4299      	cmp	r1, r3
 8009c9a:	d002      	beq.n	8009ca2 <__swsetup_r+0x46>
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f7fe ff07 	bl	8008ab0 <_free_r>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f043 0308 	orr.w	r3, r3, #8
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	b94b      	cbnz	r3, 8009cd6 <__swsetup_r+0x7a>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ccc:	d003      	beq.n	8009cd6 <__swsetup_r+0x7a>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 f883 	bl	8009ddc <__smakebuf_r>
 8009cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cda:	f013 0201 	ands.w	r2, r3, #1
 8009cde:	d00a      	beq.n	8009cf6 <__swsetup_r+0x9a>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	60a2      	str	r2, [r4, #8]
 8009ce4:	6962      	ldr	r2, [r4, #20]
 8009ce6:	4252      	negs	r2, r2
 8009ce8:	61a2      	str	r2, [r4, #24]
 8009cea:	6922      	ldr	r2, [r4, #16]
 8009cec:	b942      	cbnz	r2, 8009d00 <__swsetup_r+0xa4>
 8009cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cf2:	d1c5      	bne.n	8009c80 <__swsetup_r+0x24>
 8009cf4:	bd38      	pop	{r3, r4, r5, pc}
 8009cf6:	0799      	lsls	r1, r3, #30
 8009cf8:	bf58      	it	pl
 8009cfa:	6962      	ldrpl	r2, [r4, #20]
 8009cfc:	60a2      	str	r2, [r4, #8]
 8009cfe:	e7f4      	b.n	8009cea <__swsetup_r+0x8e>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e7f7      	b.n	8009cf4 <__swsetup_r+0x98>
 8009d04:	20000034 	.word	0x20000034

08009d08 <_raise_r>:
 8009d08:	291f      	cmp	r1, #31
 8009d0a:	b538      	push	{r3, r4, r5, lr}
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	d904      	bls.n	8009d1c <_raise_r+0x14>
 8009d12:	2316      	movs	r3, #22
 8009d14:	6003      	str	r3, [r0, #0]
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d1e:	b112      	cbz	r2, 8009d26 <_raise_r+0x1e>
 8009d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d24:	b94b      	cbnz	r3, 8009d3a <_raise_r+0x32>
 8009d26:	4628      	mov	r0, r5
 8009d28:	f000 f830 	bl	8009d8c <_getpid_r>
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4601      	mov	r1, r0
 8009d30:	4628      	mov	r0, r5
 8009d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d36:	f000 b817 	b.w	8009d68 <_kill_r>
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d00a      	beq.n	8009d54 <_raise_r+0x4c>
 8009d3e:	1c59      	adds	r1, r3, #1
 8009d40:	d103      	bne.n	8009d4a <_raise_r+0x42>
 8009d42:	2316      	movs	r3, #22
 8009d44:	6003      	str	r3, [r0, #0]
 8009d46:	2001      	movs	r0, #1
 8009d48:	e7e7      	b.n	8009d1a <_raise_r+0x12>
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d50:	4620      	mov	r0, r4
 8009d52:	4798      	blx	r3
 8009d54:	2000      	movs	r0, #0
 8009d56:	e7e0      	b.n	8009d1a <_raise_r+0x12>

08009d58 <raise>:
 8009d58:	4b02      	ldr	r3, [pc, #8]	@ (8009d64 <raise+0xc>)
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	6818      	ldr	r0, [r3, #0]
 8009d5e:	f7ff bfd3 	b.w	8009d08 <_raise_r>
 8009d62:	bf00      	nop
 8009d64:	20000034 	.word	0x20000034

08009d68 <_kill_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d07      	ldr	r5, [pc, #28]	@ (8009d88 <_kill_r+0x20>)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4604      	mov	r4, r0
 8009d70:	4608      	mov	r0, r1
 8009d72:	4611      	mov	r1, r2
 8009d74:	602b      	str	r3, [r5, #0]
 8009d76:	f7f9 f8cb 	bl	8002f10 <_kill>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d102      	bne.n	8009d84 <_kill_r+0x1c>
 8009d7e:	682b      	ldr	r3, [r5, #0]
 8009d80:	b103      	cbz	r3, 8009d84 <_kill_r+0x1c>
 8009d82:	6023      	str	r3, [r4, #0]
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	bf00      	nop
 8009d88:	2000399c 	.word	0x2000399c

08009d8c <_getpid_r>:
 8009d8c:	f7f9 b8b8 	b.w	8002f00 <_getpid>

08009d90 <__swhatbuf_r>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	460c      	mov	r4, r1
 8009d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d98:	2900      	cmp	r1, #0
 8009d9a:	b096      	sub	sp, #88	@ 0x58
 8009d9c:	4615      	mov	r5, r2
 8009d9e:	461e      	mov	r6, r3
 8009da0:	da0d      	bge.n	8009dbe <__swhatbuf_r+0x2e>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009da8:	f04f 0100 	mov.w	r1, #0
 8009dac:	bf14      	ite	ne
 8009dae:	2340      	movne	r3, #64	@ 0x40
 8009db0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009db4:	2000      	movs	r0, #0
 8009db6:	6031      	str	r1, [r6, #0]
 8009db8:	602b      	str	r3, [r5, #0]
 8009dba:	b016      	add	sp, #88	@ 0x58
 8009dbc:	bd70      	pop	{r4, r5, r6, pc}
 8009dbe:	466a      	mov	r2, sp
 8009dc0:	f000 f848 	bl	8009e54 <_fstat_r>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	dbec      	blt.n	8009da2 <__swhatbuf_r+0x12>
 8009dc8:	9901      	ldr	r1, [sp, #4]
 8009dca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dd2:	4259      	negs	r1, r3
 8009dd4:	4159      	adcs	r1, r3
 8009dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dda:	e7eb      	b.n	8009db4 <__swhatbuf_r+0x24>

08009ddc <__smakebuf_r>:
 8009ddc:	898b      	ldrh	r3, [r1, #12]
 8009dde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009de0:	079d      	lsls	r5, r3, #30
 8009de2:	4606      	mov	r6, r0
 8009de4:	460c      	mov	r4, r1
 8009de6:	d507      	bpl.n	8009df8 <__smakebuf_r+0x1c>
 8009de8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	6123      	str	r3, [r4, #16]
 8009df0:	2301      	movs	r3, #1
 8009df2:	6163      	str	r3, [r4, #20]
 8009df4:	b003      	add	sp, #12
 8009df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df8:	ab01      	add	r3, sp, #4
 8009dfa:	466a      	mov	r2, sp
 8009dfc:	f7ff ffc8 	bl	8009d90 <__swhatbuf_r>
 8009e00:	9f00      	ldr	r7, [sp, #0]
 8009e02:	4605      	mov	r5, r0
 8009e04:	4639      	mov	r1, r7
 8009e06:	4630      	mov	r0, r6
 8009e08:	f7fe fec6 	bl	8008b98 <_malloc_r>
 8009e0c:	b948      	cbnz	r0, 8009e22 <__smakebuf_r+0x46>
 8009e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e12:	059a      	lsls	r2, r3, #22
 8009e14:	d4ee      	bmi.n	8009df4 <__smakebuf_r+0x18>
 8009e16:	f023 0303 	bic.w	r3, r3, #3
 8009e1a:	f043 0302 	orr.w	r3, r3, #2
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	e7e2      	b.n	8009de8 <__smakebuf_r+0xc>
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	6020      	str	r0, [r4, #0]
 8009e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e32:	b15b      	cbz	r3, 8009e4c <__smakebuf_r+0x70>
 8009e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f000 f81d 	bl	8009e78 <_isatty_r>
 8009e3e:	b128      	cbz	r0, 8009e4c <__smakebuf_r+0x70>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	f043 0301 	orr.w	r3, r3, #1
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	431d      	orrs	r5, r3
 8009e50:	81a5      	strh	r5, [r4, #12]
 8009e52:	e7cf      	b.n	8009df4 <__smakebuf_r+0x18>

08009e54 <_fstat_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d07      	ldr	r5, [pc, #28]	@ (8009e74 <_fstat_r+0x20>)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	4611      	mov	r1, r2
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	f7f9 f8b5 	bl	8002fd0 <_fstat>
 8009e66:	1c43      	adds	r3, r0, #1
 8009e68:	d102      	bne.n	8009e70 <_fstat_r+0x1c>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	b103      	cbz	r3, 8009e70 <_fstat_r+0x1c>
 8009e6e:	6023      	str	r3, [r4, #0]
 8009e70:	bd38      	pop	{r3, r4, r5, pc}
 8009e72:	bf00      	nop
 8009e74:	2000399c 	.word	0x2000399c

08009e78 <_isatty_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d06      	ldr	r5, [pc, #24]	@ (8009e94 <_isatty_r+0x1c>)
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4604      	mov	r4, r0
 8009e80:	4608      	mov	r0, r1
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	f7f9 f8b4 	bl	8002ff0 <_isatty>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d102      	bne.n	8009e92 <_isatty_r+0x1a>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	b103      	cbz	r3, 8009e92 <_isatty_r+0x1a>
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	2000399c 	.word	0x2000399c

08009e98 <_init>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr

08009ea4 <_fini>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr
